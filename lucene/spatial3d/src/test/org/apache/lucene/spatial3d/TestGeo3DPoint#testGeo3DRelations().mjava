  /** Tests consistency of GeoArea.getRelationship vs GeoShape.isWithin */
  public void testGeo3DRelations() throws Exception {

    int numDocs = atLeast(200);
    if (VERBOSE) {
      System.out.println("TEST: " + numDocs + " docs");
    }

    GeoPoint[] docs = new GeoPoint[numDocs];
    GeoPoint[] unquantizedDocs = new GeoPoint[numDocs];
    PlanetModel planetModel = PlanetModel.CLARKE_1866;
    for (int docID = 0; docID < numDocs; docID++) {
      unquantizedDocs[docID] =
          new GeoPoint(
              planetModel,
              toRadians(GeoTestUtil.nextLatitude()),
              toRadians(GeoTestUtil.nextLongitude()));
      docs[docID] = quantize(unquantizedDocs[docID], planetModel);
      if (VERBOSE) {
        System.out.println(
            "  doc=" + docID + ": " + docs[docID] + "; unquantized: " + unquantizedDocs[docID]);
      }
    }

    int iters = atLeast(10);

    int recurseDepth = RandomNumbers.randomIntBetween(random(), 5, 15);

    for (int iter = 0; iter < iters; iter++) {
      GeoShape shape = randomShape(planetModel);

      StringWriter sw = new StringWriter();
      PrintWriter log = new PrintWriter(sw, true);

      if (VERBOSE) {
        log.println("TEST: iter=" + iter + " shape=" + shape);
      }

      XYZBounds bounds = new XYZBounds();
      shape.getBounds(bounds);

      // Start with the root cell that fully contains the shape:
      Cell root =
          new Cell(
              null,
              encodeValueLenient(bounds.getMinimumX(), planetModel),
              encodeValueLenient(bounds.getMaximumX(), planetModel),
              encodeValueLenient(bounds.getMinimumY(), planetModel),
              encodeValueLenient(bounds.getMaximumY(), planetModel),
              encodeValueLenient(bounds.getMinimumZ(), planetModel),
              encodeValueLenient(bounds.getMaximumZ(), planetModel),
              planetModel,
              0);

      if (VERBOSE) {
        log.println("  root cell: " + root);
      }

      // make sure the root cell (XYZBounds) does in fact contain all points that the shape contains
      {
        boolean fail = false;
        for (int docID = 0; docID < numDocs; docID++) {
          if (root.contains(docs[docID]) == false) {
            boolean expected = shape.isWithin(unquantizedDocs[docID]);
            if (expected) {
              log.println(
                  "    doc="
                      + docID
                      + " is contained by shape but is outside the returned XYZBounds");
              log.println("      unquantized=" + unquantizedDocs[docID]);
              log.println("      quantized=" + docs[docID]);
              fail = true;
            }
          }
        }

        if (fail) {
          log.println("  shape=" + shape);
          log.println("  bounds=" + bounds);
          System.out.print(sw.toString());
          fail("invalid bounds for shape=" + shape);
        }
      }

      List<Cell> queue = new ArrayList<>();
      queue.add(root);
      Set<Integer> hits = new HashSet<>();

      while (queue.size() > 0) {
        Cell cell = queue.get(queue.size() - 1);
        queue.remove(queue.size() - 1);
        if (VERBOSE) {
          log.println("  cycle: " + cell + " queue.size()=" + queue.size());
        }

        if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {
          if (VERBOSE) {
            log.println("    leaf");
          }
          // Leaf cell: brute force check all docs that fall within this cell:
          for (int docID = 0; docID < numDocs; docID++) {
            GeoPoint point = docs[docID];
            GeoPoint mappedPoint = unquantizedDocs[docID];
            boolean pointWithinShape = shape.isWithin(point);
            boolean mappedPointWithinShape = shape.isWithin(mappedPoint);
            if (cell.contains(point)) {
              if (mappedPointWithinShape) {
                if (VERBOSE) {
                  log.println(
                      "    check doc="
                          + docID
                          + ": match!  Actual quantized point within: "
                          + pointWithinShape);
                }
                hits.add(docID);
              } else {
                if (VERBOSE) {
                  log.println(
                      "    check doc="
                          + docID
                          + ": no match.  Quantized point within: "
                          + pointWithinShape);
                }
              }
            }
          }
        } else {
          GeoArea xyzSolid =
              GeoAreaFactory.makeGeoArea(
                  planetModel,
                  Geo3DUtil.decodeValueFloor(cell.xMinEnc, planetModel),
                  Geo3DUtil.decodeValueCeil(cell.xMaxEnc, planetModel),
                  Geo3DUtil.decodeValueFloor(cell.yMinEnc, planetModel),
                  Geo3DUtil.decodeValueCeil(cell.yMaxEnc, planetModel),
                  Geo3DUtil.decodeValueFloor(cell.zMinEnc, planetModel),
                  Geo3DUtil.decodeValueCeil(cell.zMaxEnc, planetModel));

          if (VERBOSE) {
            log.println(
                "    minx="
                    + Geo3DUtil.decodeValueFloor(cell.xMinEnc, planetModel)
                    + " maxx="
                    + Geo3DUtil.decodeValueCeil(cell.xMaxEnc, planetModel)
                    + " miny="
                    + Geo3DUtil.decodeValueFloor(cell.yMinEnc, planetModel)
                    + " maxy="
                    + Geo3DUtil.decodeValueCeil(cell.yMaxEnc, planetModel)
                    + " minz="
                    + Geo3DUtil.decodeValueFloor(cell.zMinEnc, planetModel)
                    + " maxz="
                    + Geo3DUtil.decodeValueCeil(cell.zMaxEnc, planetModel));
          }

          switch (xyzSolid.getRelationship(shape)) {
            case GeoArea.CONTAINS:
              // Shape fully contains the cell: blindly add all docs in this cell:
              if (VERBOSE) {
                log.println("    GeoArea.CONTAINS: now addAll");
              }
              for (int docID = 0; docID < numDocs; docID++) {
                if (cell.contains(docs[docID])) {
                  if (VERBOSE) {
                    log.println("    addAll doc=" + docID);
                  }
                  hits.add(docID);
                }
              }
              continue;
            case GeoArea.OVERLAPS:
              if (VERBOSE) {
                log.println("    GeoArea.OVERLAPS: keep splitting");
              }
              // They do overlap but neither contains the other:
              // log.println("    crosses1");
              break;
            case GeoArea.WITHIN:
              if (VERBOSE) {
                log.println("    GeoArea.WITHIN: keep splitting");
              }
              // Cell fully contains the shape:
              // log.println("    crosses2");
              break;
            case GeoArea.DISJOINT:
              // They do not overlap at all: don't recurse on this cell
              // log.println("    outside");
              if (VERBOSE) {
                log.println("    GeoArea.DISJOINT: drop this cell");
                for (int docID = 0; docID < numDocs; docID++) {
                  if (cell.contains(docs[docID])) {
                    log.println("    skip doc=" + docID);
                  }
                }
              }
              continue;
            default:
              assert false;
          }

          // Randomly split:
          switch (random().nextInt(3)) {
            case 0:
              // Split on X:
              {
                int splitValue =
                    RandomNumbers.randomIntBetween(random(), cell.xMinEnc, cell.xMaxEnc);
                if (VERBOSE) {
                  log.println("    now split on x=" + splitValue);
                }
                Cell cell1 =
                    new Cell(
                        cell,
                        cell.xMinEnc,
                        splitValue,
                        cell.yMinEnc,
                        cell.yMaxEnc,
                        cell.zMinEnc,
                        cell.zMaxEnc,
                        planetModel,
                        cell.splitCount + 1);
                Cell cell2 =
                    new Cell(
                        cell,
                        splitValue,
                        cell.xMaxEnc,
                        cell.yMinEnc,
                        cell.yMaxEnc,
                        cell.zMinEnc,
                        cell.zMaxEnc,
                        planetModel,
                        cell.splitCount + 1);
                if (VERBOSE) {
                  log.println("    split cell1: " + cell1);
                  log.println("    split cell2: " + cell2);
                }
                queue.add(cell1);
                queue.add(cell2);
              }
              break;

            case 1:
              // Split on Y:
              {
                int splitValue =
                    RandomNumbers.randomIntBetween(random(), cell.yMinEnc, cell.yMaxEnc);
                if (VERBOSE) {
                  log.println("    now split on y=" + splitValue);
                }
                Cell cell1 =
                    new Cell(
                        cell,
                        cell.xMinEnc,
                        cell.xMaxEnc,
                        cell.yMinEnc,
                        splitValue,
                        cell.zMinEnc,
                        cell.zMaxEnc,
                        planetModel,
                        cell.splitCount + 1);
                Cell cell2 =
                    new Cell(
                        cell,
                        cell.xMinEnc,
                        cell.xMaxEnc,
                        splitValue,
                        cell.yMaxEnc,
                        cell.zMinEnc,
                        cell.zMaxEnc,
                        planetModel,
                        cell.splitCount + 1);
                if (VERBOSE) {
                  log.println("    split cell1: " + cell1);
                  log.println("    split cell2: " + cell2);
                }
                queue.add(cell1);
                queue.add(cell2);
              }
              break;

            case 2:
              // Split on Z:
              {
                int splitValue =
                    RandomNumbers.randomIntBetween(random(), cell.zMinEnc, cell.zMaxEnc);
                if (VERBOSE) {
                  log.println("    now split on z=" + splitValue);
                }
                Cell cell1 =
                    new Cell(
                        cell,
                        cell.xMinEnc,
                        cell.xMaxEnc,
                        cell.yMinEnc,
                        cell.yMaxEnc,
                        cell.zMinEnc,
                        splitValue,
                        planetModel,
                        cell.splitCount + 1);
                Cell cell2 =
                    new Cell(
                        cell,
                        cell.xMinEnc,
                        cell.xMaxEnc,
                        cell.yMinEnc,
                        cell.yMaxEnc,
                        splitValue,
                        cell.zMaxEnc,
                        planetModel,
                        cell.splitCount + 1);
                if (VERBOSE) {
                  log.println("    split cell1: " + cell1);
                  log.println("    split cell2: " + cell2);
                }
                queue.add(cell1);
                queue.add(cell2);
              }
              break;
          }
        }
      }

      if (VERBOSE) {
        log.println("  " + hits.size() + " hits");
      }

      // Done matching, now verify:
      boolean fail = false;
      for (int docID = 0; docID < numDocs; docID++) {
        GeoPoint point = docs[docID];
        GeoPoint mappedPoint = unquantizedDocs[docID];
        boolean expected = shape.isWithin(mappedPoint);
        boolean actual = hits.contains(docID);
        if (actual != expected) {
          if (actual) {
            log.println("doc=" + docID + " should not have matched but did");
          } else {
            log.println("doc=" + docID + " should match but did not");
          }
          log.println("  point=" + point);
          log.println("  mappedPoint=" + mappedPoint);
          fail = true;
        }
      }

      if (fail) {
        System.out.print(sw.toString());
        fail("invalid hits for shape=" + shape);
      }
    }
  }

