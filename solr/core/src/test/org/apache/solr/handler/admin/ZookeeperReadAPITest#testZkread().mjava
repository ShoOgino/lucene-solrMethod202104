  @Test
  public void testZkread() throws Exception {
    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();
    String basezk = baseUrl.toString().replace("/solr", "/api") + "/cluster/zk/data";
    String basezkls = baseUrl.toString().replace("/solr", "/api") + "/cluster/zk/ls";

    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {
      Object o = Utils.executeGET(client.getHttpClient(),
          basezk + "/security.json",
          Utils.JSONCONSUMER);
      assertNotNull(o);
      o = Utils.executeGET(client.getHttpClient(),
          basezkls + "/configs",
          Utils.JSONCONSUMER);
      assertEquals("0", String.valueOf(getObjectByPath(o, true, split(":/configs:_default:dataLength", ':'))));
      assertEquals("0", String.valueOf(getObjectByPath(o, true, split(":/configs:conf:dataLength", ':'))));
      assertEquals("0", String.valueOf(getObjectByPath(o, true, split("/stat/version", '/'))));

      o = Utils.executeGET(client.getHttpClient(),
          basezk + "/configs",
          Utils.JSONCONSUMER);
      assertTrue(((Map)o).containsKey("/configs"));
      assertNull(((Map)o).get("/configs"));

      byte[] bytes = new byte[1024 * 5];
      for (int i = 0; i < bytes.length; i++) {
        bytes[i] = (byte) random().nextInt(128);
      }
      cluster.getZkClient().create("/configs/_default/testdata", bytes, CreateMode.PERSISTENT, true);
      Utils.executeGET(client.getHttpClient(),
          basezk + "/configs/_default/testdata",
          is -> {
            byte[] newBytes = new byte[bytes.length];
            is.read(newBytes);
            for (int i = 0; i < newBytes.length; i++) {
              assertEquals(bytes[i], newBytes[i]);
            }
            return null;
          });
    }
  }

