  /**
   * Returns an automaton that accepts the Kleene star (zero or more concatenated repetitions) of
   * the language of the given automaton. Never modifies the input automaton language.
   *
   * <p>Complexity: linear in number of states.
   */
  public static Automaton repeat(Automaton a) {
    if (a.getNumStates() == 0) {
      // Repeating the empty automata will still only accept the empty automata.
      return a;
    }
    Automaton.Builder builder = new Automaton.Builder();
    builder.createState();
    builder.setAccept(0, true);
    builder.copy(a);

    Transition t = new Transition();
    int count = a.initTransition(0, t);
    for (int i = 0; i < count; i++) {
      a.getNextTransition(t);
      builder.addTransition(0, t.dest + 1, t.min, t.max);
    }

    int numStates = a.getNumStates();
    for (int s = 0; s < numStates; s++) {
      if (a.isAccept(s)) {
        count = a.initTransition(0, t);
        for (int i = 0; i < count; i++) {
          a.getNextTransition(t);
          builder.addTransition(s + 1, t.dest + 1, t.min, t.max);
        }
      }
    }

    return builder.finish();
  }

