  public void testImplementations() throws Exception {
    for (int i = 2; i < 12; i++) {
      final int chunkSize = 1 << i;
      MMapDirectory mmapDir = new MMapDirectory(createTempDir("testImplementations"), chunkSize);
      IndexOutput io = mmapDir.createOutput("bytes", newIOContext(random()));
      int size = random().nextInt(chunkSize * 2) + 3; // add some buffer of 3 for slice tests
      byte bytes[] = new byte[size];
      random().nextBytes(bytes);
      io.writeBytes(bytes, bytes.length);
      io.close();
      IndexInput ii = mmapDir.openInput("bytes", newIOContext(random()));
      byte actual[] = new byte[size]; // first read all bytes
      ii.readBytes(actual, 0, actual.length);
      assertEquals(new BytesRef(bytes), new BytesRef(actual));
      // reinit:
      ii.seek(0L);

      // check impl (we must check size < chunksize: currently, if size==chunkSize, we get 2
      // buffers, the second one empty:
      assertTrue(
          (size < chunkSize)
              ? (ii instanceof ByteBufferIndexInput.SingleBufferImpl)
              : (ii instanceof ByteBufferIndexInput.MultiBufferImpl));

      // clone tests:
      assertSame(ii.getClass(), ii.clone().getClass());

      // slice test (offset 0)
      int sliceSize = random().nextInt(size);
      IndexInput slice = ii.slice("slice", 0, sliceSize);
      assertTrue(
          (sliceSize < chunkSize)
              ? (slice instanceof ByteBufferIndexInput.SingleBufferImpl)
              : (slice instanceof ByteBufferIndexInput.MultiBufferImpl));

      // slice test (offset > 0 )
      int offset = random().nextInt(size - 1) + 1;
      sliceSize = random().nextInt(size - offset + 1);
      slice = ii.slice("slice", offset, sliceSize);
      // System.out.println(offset + "/" + sliceSize + " chunkSize=" + chunkSize + " " +
      // slice.getClass());
      if (offset % chunkSize + sliceSize < chunkSize) {
        assertTrue(slice instanceof ByteBufferIndexInput.SingleBufferImpl);
      } else {
        assertTrue(slice instanceof ByteBufferIndexInput.MultiBufferImpl);
      }

      ii.close();
      mmapDir.close();
    }
  }

