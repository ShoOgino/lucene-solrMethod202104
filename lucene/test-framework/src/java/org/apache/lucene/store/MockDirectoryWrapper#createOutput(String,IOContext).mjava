  @Override
  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {
    maybeThrowDeterministicException();
    maybeThrowIOExceptionOnOpen(name);
    maybeYield();
    if (failOnCreateOutput) {
      maybeThrowDeterministicException();
    }
    if (crashed) {
      throw new IOException("cannot createOutput after crash");
    }
    init();

    if (createdFiles.contains(name)) {
      throw new FileAlreadyExistsException("File \"" + name + "\" was already written to.");
    }

    if (assertNoDeleteOpenFile && openFiles.containsKey(name)) {
      throw new AssertionError(
          "MockDirectoryWrapper: file \"" + name + "\" is still open: cannot overwrite");
    }

    unSyncedFiles.add(name);
    createdFiles.add(name);

    // System.out.println(Thread.currentThread().getName() + ": MDW: create " + name);
    IndexOutput delegateOutput =
        in.createOutput(name, LuceneTestCase.newIOContext(randomState, context));
    final IndexOutput io = new MockIndexOutputWrapper(this, delegateOutput, name);
    addFileHandle(io, name, Handle.Output);
    openFilesForWrite.add(name);
    return maybeThrottle(name, io);
  }

