  public long commit(boolean flushConcurrently) throws IOException {
    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, config);
    if (flushConcurrently) {
      List<Throwable> throwableList = new CopyOnWriteArrayList<>();
      Thread thread =
          new Thread(
              () -> {
                try {
                  flushAllBuffersSequentially();
                } catch (Throwable e) {
                  throwableList.add(e);
                }
              });
      thread.start();
      try {
        return w.commit();
      } catch (Throwable t) {
        throwableList.add(t);
      } finally {
        try {
          // make sure we wait for the thread to join otherwise it might still be processing events
          // and the IW won't be fully closed in the case of a fatal exception
          thread.join();
        } catch (InterruptedException e) {
          throwableList.add(e);
        }
      }
      if (throwableList.size() != 0) {
        Throwable primary = throwableList.get(0);
        for (int i = 1; i < throwableList.size(); i++) {
          primary.addSuppressed(throwableList.get(i));
        }
        if (primary instanceof IOException) {
          throw (IOException) primary;
        } else if (primary instanceof RuntimeException) {
          throw (RuntimeException) primary;
        } else {
          throw new AssertionError(primary);
        }
      }
    }
    return w.commit();
  }

