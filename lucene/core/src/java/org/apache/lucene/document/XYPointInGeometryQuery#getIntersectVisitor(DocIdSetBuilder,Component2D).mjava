  private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result, Component2D tree) {
    return new IntersectVisitor() {
      DocIdSetBuilder.BulkAdder adder;

      @Override
      public void grow(int count) {
        adder = result.grow(count);
      }

      @Override
      public void visit(int docID) {
        adder.add(docID);
      }

      @Override
      public void visit(int docID, byte[] packedValue) {
        double x = XYEncodingUtils.decode(packedValue, 0);
        double y = XYEncodingUtils.decode(packedValue, Integer.BYTES);
        if (tree.contains(x, y)) {
          visit(docID);
        }
      }

      @Override
      public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {
        double x = XYEncodingUtils.decode(packedValue, 0);
        double y = XYEncodingUtils.decode(packedValue, Integer.BYTES);
        if (tree.contains(x, y)) {
          int docID;
          while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
            visit(docID);
          }
        }
      }

      @Override
      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
        double cellMinX = XYEncodingUtils.decode(minPackedValue, 0);
        double cellMinY = XYEncodingUtils.decode(minPackedValue, Integer.BYTES);
        double cellMaxX = XYEncodingUtils.decode(maxPackedValue, 0);
        double cellMaxY = XYEncodingUtils.decode(maxPackedValue, Integer.BYTES);
        return tree.relate(cellMinX, cellMaxX, cellMinY, cellMaxY);
      }
    };
  }

