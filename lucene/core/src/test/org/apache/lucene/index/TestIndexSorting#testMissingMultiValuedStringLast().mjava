  public void testMissingMultiValuedStringLast() throws Exception {
    for (boolean reverse : new boolean[] {true, false}) {
      Directory dir = newDirectory();
      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
      SortField sortField = new SortedSetSortField("foo", reverse);
      sortField.setMissingValue(SortField.STRING_LAST);
      Sort indexSort = new Sort(sortField);
      iwc.setIndexSort(indexSort);
      IndexWriter w = new IndexWriter(dir, iwc);
      Document doc = new Document();
      doc.add(new NumericDocValuesField("id", 2));
      doc.add(new SortedSetDocValuesField("foo", new BytesRef("zzz")));
      doc.add(new SortedSetDocValuesField("foo", new BytesRef("zzzd")));
      w.addDocument(doc);
      // so we get more than one segment, so that forceMerge actually does merge, since we only get
      // a sorted segment by merging:
      w.commit();

      // missing
      doc = new Document();
      doc.add(new NumericDocValuesField("id", 3));
      w.addDocument(doc);
      w.commit();

      doc = new Document();
      doc.add(new NumericDocValuesField("id", 1));
      doc.add(new SortedSetDocValuesField("foo", new BytesRef("mmm")));
      doc.add(new SortedSetDocValuesField("foo", new BytesRef("ppp")));
      w.addDocument(doc);
      w.forceMerge(1);

      DirectoryReader r = DirectoryReader.open(w);
      LeafReader leaf = getOnlyLeafReader(r);
      assertEquals(3, leaf.maxDoc());
      NumericDocValues values = leaf.getNumericDocValues("id");
      if (reverse) {
        assertEquals(0, values.nextDoc());
        assertEquals(3l, values.longValue());
        assertEquals(1, values.nextDoc());
        assertEquals(2l, values.longValue());
        assertEquals(2, values.nextDoc());
        assertEquals(1l, values.longValue());
      } else {
        assertEquals(0, values.nextDoc());
        assertEquals(1l, values.longValue());
        assertEquals(1, values.nextDoc());
        assertEquals(2l, values.longValue());
        assertEquals(2, values.nextDoc());
        assertEquals(3l, values.longValue());
      }
      r.close();
      w.close();
      dir.close();
    }
  }

