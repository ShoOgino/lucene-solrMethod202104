  public OfflinePointReader(
      BKDConfig config,
      Directory tempDir,
      String tempFileName,
      long start,
      long length,
      byte[] reusableBuffer)
      throws IOException {
    this.config = config;

    if ((start + length) * config.bytesPerDoc + CodecUtil.footerLength()
        > tempDir.fileLength(tempFileName)) {
      throw new IllegalArgumentException(
          "requested slice is beyond the length of this file: start="
              + start
              + " length="
              + length
              + " bytesPerDoc="
              + config.bytesPerDoc
              + " fileLength="
              + tempDir.fileLength(tempFileName)
              + " tempFileName="
              + tempFileName);
    }
    if (reusableBuffer == null) {
      throw new IllegalArgumentException("[reusableBuffer] cannot be null");
    }
    if (reusableBuffer.length < config.bytesPerDoc) {
      throw new IllegalArgumentException(
          "Length of [reusableBuffer] must be bigger than " + config.bytesPerDoc);
    }

    this.maxPointOnHeap = reusableBuffer.length / config.bytesPerDoc;
    // Best-effort checksumming:
    if (start == 0
        && length * config.bytesPerDoc
            == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {
      // If we are going to read the entire file, e.g. because BKDWriter is now
      // partitioning it, we open with checksums:
      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);
    } else {
      // Since we are going to seek somewhere in the middle of a possibly huge
      // file, and not read all bytes from there, don't use ChecksumIndexInput here.
      // This is typically fine, because this same file will later be read fully,
      // at another level of the BKDWriter recursion
      in = tempDir.openInput(tempFileName, IOContext.READONCE);
    }

    name = tempFileName;

    long seekFP = start * config.bytesPerDoc;
    in.seek(seekFP);
    countLeft = length;
    this.onHeapBuffer = reusableBuffer;
    this.pointValue = new OfflinePointValue(config, onHeapBuffer);
  }

