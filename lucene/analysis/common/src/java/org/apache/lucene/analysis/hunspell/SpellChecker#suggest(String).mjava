  public List<String> suggest(String word) {
    if (word.length() >= 100) return Collections.emptyList();

    if (dictionary.needsInputCleaning) {
      word = dictionary.cleanInput(word, new StringBuilder()).toString();
    }

    WordCase wordCase = WordCase.caseOf(word);
    ModifyingSuggester modifier = new ModifyingSuggester(this);
    Set<String> suggestions = modifier.suggest(word, wordCase);

    if (!modifier.hasGoodSuggestions && dictionary.maxNGramSuggestions > 0) {
      suggestions.addAll(
          new GeneratingSuggester(this)
              .suggest(dictionary.toLowerCase(word), wordCase, suggestions));
    }

    if (word.contains("-") && suggestions.stream().noneMatch(s -> s.contains("-"))) {
      suggestions.addAll(modifyChunksBetweenDashes(word));
    }

    Set<String> result = new LinkedHashSet<>();
    for (String candidate : suggestions) {
      result.add(adjustSuggestionCase(candidate, wordCase));
      if (wordCase == WordCase.UPPER && dictionary.checkSharpS && candidate.contains("ÃŸ")) {
        result.add(candidate);
      }
    }
    return new ArrayList<>(result);
  }

