  /**
   * Convenience method that efficiently returns the relevance score by matching this index against
   * the given Lucene query expression.
   *
   * @param query an arbitrary Lucene query to run against this index
   * @return the relevance score of the matchmaking; A number in the range [0.0 .. 1.0], with 0.0
   *     indicating no match. The higher the number the better the match.
   */
  public float search(Query query) {
    if (query == null) {
      throw new IllegalArgumentException("query must not be null");
    }

    IndexSearcher searcher = createSearcher();
    try {
      final float[] scores = new float[1]; // inits to 0.0f (no match)
      searcher.search(
          query,
          new SimpleCollector() {
            private Scorable scorer;

            @Override
            public void collect(int doc) throws IOException {
              scores[0] = scorer.score();
            }

            @Override
            public void setScorer(Scorable scorer) {
              this.scorer = scorer;
            }

            @Override
            public ScoreMode scoreMode() {
              return ScoreMode.COMPLETE;
            }
          });
      float score = scores[0];
      return score;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

