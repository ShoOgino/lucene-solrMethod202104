  public void testSkipLeaderOperations() throws Exception {

    String overseerLeader = getOverseerLeader();
    
    assertNotNull(overseerLeader);
    assertTrue(overseerLeader.length() > 0);
    
    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()
        .stream()
        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))
        .collect(Collectors.toList());
    
    assertEquals(2, notOverseerNodes.size());
    
    String collection = "collection1";
    CollectionAdminRequest
        .createCollection(collection, 2, 1)
        .setCreateNodeSet(notOverseerNodes
            .stream()
            .map(JettySolrRunner::getNodeName)
            .collect(Collectors.joining(","))
        )
        .process(cluster.getSolrClient());
    cluster.waitForActiveCollection("collection1", 2, 2);

    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();
    
    List<String> nodes = new ArrayList<>();
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      nodes.add(solrRunner.getNodeName());
    }
    
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      solrRunner.stop();
    }
    
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      cluster.waitForJettyToStop(solrRunner);
    }
    
    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {
      
      @Override
      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {
        boolean success = true;
        for (String lostNodeName : nodes) {
          if (newLiveNodes.contains(lostNodeName)) {
            success = false;
            break;
          }
        }
        
        return success;
      }
    });
    
    waitForState("Expected single liveNode", collection,
        (liveNodes, collectionState) -> liveNodes.size() == 1);

    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      solrRunner.start();
    }
    
    cluster.waitForAllNodes(30);

    waitForState("Expected 2x1 for collection: " + collection, collection,
        clusterShape(2, 2));
    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());

    // When cluster state updates are done in a distributed way, the stats that this test is verifying are not available.
    // See comment in OverseerStatusCmd.call().
    // Keeping the rest of the test running in case other errors can happen and can be caught...
    // Eventually maintain per node cluster state updates stats and be able to check them here? Longer term question...

    if (!cluster.getOpenOverseer().getDistributedClusterStateUpdater().isDistributedStateUpdate()) {
      assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));
    }
    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());
  }

