  /**
   * Create a new hash map with a bounded size and with least recently used entries removed.
   *
   * @param maxSize the maximum size (in number of entries) to which the map can grow before the
   *     least recently used entries start being removed.<br>
   *     Setting maxSize to a very large value, like {@link Integer#MAX_VALUE} is allowed, but is
   *     less efficient than using {@link java.util.HashMap} because our class needs to keep track
   *     of the use order (via an additional doubly-linked list) which is not used when the map's
   *     size is always below the maximum size.
   */
  public LRUHashMap(int maxSize) {
    super(16, 0.75f, true);
    this.maxSize = maxSize;
  }

