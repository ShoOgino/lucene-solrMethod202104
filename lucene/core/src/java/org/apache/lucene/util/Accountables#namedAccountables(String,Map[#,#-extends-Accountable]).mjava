  /**
   * Converts a map of resources to a collection.
   *
   * <p>The resource descriptions are constructed in this format: {@code prefix 'key' [toString()]}
   *
   * <p>This is a point-in-time type safe view: consumers will not be able to cast or manipulate the
   * resources in any way.
   */
  public static Collection<Accountable> namedAccountables(
      String prefix, Map<?, ? extends Accountable> in) {
    List<Accountable> resources = new ArrayList<>();
    for (Map.Entry<?, ? extends Accountable> kv : in.entrySet()) {
      resources.add(namedAccountable(prefix + " '" + kv.getKey() + "'", kv.getValue()));
    }
    Collections.sort(
        resources,
        new Comparator<Accountable>() {
          @Override
          public int compare(Accountable o1, Accountable o2) {
            return o1.toString().compareTo(o2.toString());
          }
        });
    return Collections.unmodifiableList(resources);
  }

