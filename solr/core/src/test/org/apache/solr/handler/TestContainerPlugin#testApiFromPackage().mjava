  @Test
  public void testApiFromPackage() throws Exception {
    MiniSolrCloudCluster cluster =
        configureCluster(4)
            .withJettyConfig(jetty -> jetty.enableV2(true))
            .configure();
    String FILE1 = "/myplugin/v1.jar";
    String FILE2 = "/myplugin/v2.jar";

    String errPath = "/error/details[0]/errorMessages[0]";
    try {
      byte[] derFile = readFile("cryptokeys/pub_key512.der");
      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+"/pub_key512.der", cluster);
      TestPackages.postFileAndWait(cluster, "runtimecode/containerplugin.v.1.jar.bin", FILE1,
          "pmrmWCDafdNpYle2rueAGnU2J6NYlcAey9mkZYbqh+5RdYo2Ln+llLF9voyRj+DDivK9GV1XdtKvD9rgCxlD7Q==");
     TestPackages.postFileAndWait(cluster, "runtimecode/containerplugin.v.2.jar.bin", FILE2,
          "StR3DmqaUSL7qjDOeVEiCqE+ouiZAkW99fsL48F9oWG047o7NGgwwZ36iGgzDC3S2tPaFjRAd9Zg4UK7OZLQzg==");

     // We have two versions of the plugin in 2 different jar files. they are already uploaded to the package store
      Package.AddVersion add = new Package.AddVersion();
      add.version = "1.0";
      add.pkg = "mypkg";
      add.files = singletonList(FILE1);
      V2Request addPkgVersionReq = new V2Request.Builder("/cluster/package")
          .forceV2(true)
          .withMethod(POST)
          .withPayload(singletonMap("add", add))
          .build();
      addPkgVersionReq.process(cluster.getSolrClient());

      waitForAllNodesToSync(cluster, "/cluster/package", Utils.makeMap(
              ":result:packages:mypkg[0]:version", "1.0",
              ":result:packages:mypkg[0]:files[0]", FILE1
      ));

      // Now lets create a plugin using v1 jar file
      PluginMeta plugin = new PluginMeta();
      plugin.name = "myplugin";
      plugin.klass = "mypkg:org.apache.solr.handler.MyPlugin";
      plugin.version = add.version;
      final V2Request req1 = new V2Request.Builder("/cluster/plugin")
          .forceV2(true)
          .withMethod(POST)
          .withPayload(singletonMap("add", plugin))
          .build();
      req1.process(cluster.getSolrClient());
      //verify the plugin creation
      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/cluster/plugin").
              withMethod(GET)
              .build().process(cluster.getSolrClient()),
          ImmutableMap.of(
              "/plugin/myplugin/class", plugin.klass,
              "/plugin/myplugin/version", plugin.version
          ));
      //let's test this now
      Callable<NavigableObject> invokePlugin = () -> new V2Request.Builder("/plugin/my/path")
          .forceV2(true)
          .withMethod(GET)
          .build().process(cluster.getSolrClient());
      TestDistribPackageStore.assertResponseValues(10,
          invokePlugin,
          ImmutableMap.of("/myplugin.version", "1.0"));

      //now let's upload the jar file for version 2.0 of the plugin
      add.version = "2.0";
      add.files = singletonList(FILE2);
      addPkgVersionReq.process(cluster.getSolrClient());

      //here the plugin version is updated
      plugin.version = add.version;
      new V2Request.Builder("/cluster/plugin")
          .forceV2(true)
          .withMethod(POST)
          .withPayload(singletonMap("update", plugin))
          .build()
      .process(cluster.getSolrClient());

      //now verify if it is indeed updated
      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/cluster/plugin").
              withMethod(GET)
              .build().process(cluster.getSolrClient()),
          ImmutableMap.of(
              "/plugin/myplugin/class", plugin.klass,
              "/plugin/myplugin/version", "2.0"
          ));
      // invoke the plugin and test thye output
      TestDistribPackageStore.assertResponseValues(10,
          invokePlugin,
          ImmutableMap.of("/myplugin.version", "2.0"));

      plugin.name = "plugin2";
      plugin.klass = "mypkg:"+ C5.class.getName();
      plugin.version = "2.0";
      req1.process(cluster.getSolrClient());
      assertNotNull(C5.classData);
      assertEquals( 1452, C5.classData.limit());
    } finally {
      cluster.shutdown();
    }
  }

