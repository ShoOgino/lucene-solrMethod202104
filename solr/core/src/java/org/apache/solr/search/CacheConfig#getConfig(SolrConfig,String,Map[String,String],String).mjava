  @SuppressWarnings({"unchecked"})
  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {
    CacheConfig config = new CacheConfig();
    config.nodeName = nodeName;
    @SuppressWarnings({"rawtypes"})
    Map attrsCopy = new LinkedHashMap<>(attrs.size());
    for (Map.Entry<String, String> e : attrs.entrySet()) {
      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));
    }
    attrs = attrsCopy;
    config.args = attrs;

    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);
    if(map != null){
      HashMap<String, String> mapCopy = new HashMap<>(config.args);
      for (Map.Entry<String, String> e : map.entrySet()) {
        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));
      }
      config.args = mapCopy;
    }
    String nameAttr = config.args.get(NAME);  // OPTIONAL
    if (nameAttr==null) {
      config.args.put(NAME, config.nodeName);
    }

    SolrResourceLoader loader = solrConfig.getResourceLoader();
    config.cacheImpl = config.args.get("class");
    if (config.cacheImpl == null) config.cacheImpl = "solr.CaffeineCache";
    config.clazz = new Supplier<>() {
      @SuppressWarnings("rawtypes")
      Class<SolrCache> loadedClass;

      @Override
      @SuppressWarnings("rawtypes")
      public Class<? extends SolrCache> get() {
        if (loadedClass != null) return loadedClass;
        return loadedClass = (Class<SolrCache>) loader.findClass(
                new PluginInfo("cache", Collections.singletonMap("class", config.cacheImpl)),
                SolrCache.class, true);
      }
    };
    config.regenImpl = config.args.get("regenerator");
    if (config.regenImpl != null) {
      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);
    }

    return config;
  }

