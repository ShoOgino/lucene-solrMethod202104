  public void testIndexAndQuerySamePolygon() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
    Document doc = new Document();
    Polygon polygon;
    while (true) {
      try {
        polygon = GeoTestUtil.nextPolygon();
        // quantize the polygon
        double[] lats = new double[polygon.numPoints()];
        double[] lons = new double[polygon.numPoints()];
        for (int i = 0; i < polygon.numPoints(); i++) {
          lats[i] =
              GeoEncodingUtils.decodeLatitude(
                  GeoEncodingUtils.encodeLatitude(polygon.getPolyLat(i)));
          lons[i] =
              GeoEncodingUtils.decodeLongitude(
                  GeoEncodingUtils.encodeLongitude(polygon.getPolyLon(i)));
        }
        polygon = new Polygon(lats, lons);
        Tessellator.tessellate(polygon);
        break;
      } catch (Exception e) {
        // invalid polygon, try a new one
      }
    }
    addPolygonsToDoc(FIELDNAME, doc, polygon);
    w.addDocument(doc);
    w.forceMerge(1);

    ///// search //////
    IndexReader reader = w.getReader();
    w.close();
    IndexSearcher searcher = newSearcher(reader);

    Query q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.WITHIN, polygon);
    assertEquals(1, searcher.count(q));
    q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.INTERSECTS, polygon);
    assertEquals(1, searcher.count(q));
    q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.DISJOINT, polygon);
    assertEquals(0, searcher.count(q));

    IOUtils.close(w, reader, dir);
  }

