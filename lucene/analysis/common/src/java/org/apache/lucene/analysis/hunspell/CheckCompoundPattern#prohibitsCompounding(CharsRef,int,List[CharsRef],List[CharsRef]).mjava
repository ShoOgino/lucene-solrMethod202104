  boolean prohibitsCompounding(
      CharsRef word, int breakPos, List<CharsRef> stemsBefore, List<CharsRef> stemsAfter) {
    if (isNonAffixedPattern(endChars)) {
      if (stemsBefore.stream()
          .noneMatch(stem -> charsMatch(word, breakPos - stem.length, stem.chars))) {
        return false;
      }
    } else if (!charsMatch(word, breakPos - endChars.length, endChars)) {
      return false;
    }

    if (isNonAffixedPattern(beginChars)) {
      if (stemsAfter.stream().noneMatch(stem -> charsMatch(word, breakPos, stem.chars))) {
        return false;
      }
    } else if (!charsMatch(word, breakPos, beginChars)) {
      return false;
    }

    if (endFlags.length > 0 && !hasStemWithFlags(stemsBefore, endFlags)) {
      return false;
    }
    //noinspection RedundantIfStatement
    if (beginFlags.length > 0 && !hasStemWithFlags(stemsAfter, beginFlags)) {
      return false;
    }

    return true;
  }

