  /**
   * Determines the amount of RAM that may be used for buffering added documents and deletions
   * before they are flushed to the Directory. Generally for faster indexing performance it's best
   * to flush by RAM usage instead of document count and use as large a RAM buffer as you can.
   *
   * <p>When this is set, the writer will flush whenever buffered documents and deletions use this
   * much RAM. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush
   * due to RAM usage. Note that if flushing by document count is also enabled, then the flush will
   * be triggered by whichever comes first.
   *
   * <p>The maximum RAM limit is inherently determined by the JVMs available memory. Yet, an {@link
   * IndexWriter} session can consume a significantly larger amount of memory than the given RAM
   * limit since this limit is just an indicator when to flush memory resident documents to the
   * Directory. Flushes are likely happen concurrently while other threads adding documents to the
   * writer. For application stability the available memory in the JVM should be significantly
   * larger than the RAM buffer used for indexing.
   *
   * <p><b>NOTE</b>: the account of RAM usage for pending deletions is only approximate.
   * Specifically, if you delete by Query, Lucene currently has no way to measure the RAM usage of
   * individual Queries so the accounting will under-estimate and you should compensate by either
   * calling commit() or refresh() periodically yourself.
   *
   * <p><b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed once this
   * limit is exceeded. Depending on the configured {@link FlushPolicy} only a subset of the
   * buffered documents are flushed and therefore only parts of the RAM buffer is released.
   *
   * <p>The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.
   *
   * <p>Takes effect immediately, but only the next time a document is added, updated or deleted.
   *
   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)
   * @throws IllegalArgumentException if ramBufferSize is enabled but non-positive, or it disables
   *     ramBufferSize when maxBufferedDocs is already disabled
   */
  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {
    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {
      throw new IllegalArgumentException("ramBufferSize should be > 0.0 MB when enabled");
    }
    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH
        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {
      throw new IllegalArgumentException(
          "at least one of ramBufferSize and maxBufferedDocs must be enabled");
    }
    this.ramBufferSizeMB = ramBufferSizeMB;
    return this;
  }

