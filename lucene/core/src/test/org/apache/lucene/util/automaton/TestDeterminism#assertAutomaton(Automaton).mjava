  private static void assertAutomaton(Automaton a) {
    a = Operations.determinize(Operations.removeDeadStates(a), DEFAULT_MAX_DETERMINIZED_STATES);

    // complement(complement(a)) = a
    Automaton equivalent =
        Operations.complement(
            Operations.complement(a, DEFAULT_MAX_DETERMINIZED_STATES),
            DEFAULT_MAX_DETERMINIZED_STATES);
    assertTrue(Operations.sameLanguage(a, equivalent));

    // a union a = a
    equivalent =
        Operations.determinize(
            Operations.removeDeadStates(Operations.union(a, a)), DEFAULT_MAX_DETERMINIZED_STATES);
    assertTrue(Operations.sameLanguage(a, equivalent));

    // a intersect a = a
    equivalent =
        Operations.determinize(
            Operations.removeDeadStates(Operations.intersection(a, a)),
            DEFAULT_MAX_DETERMINIZED_STATES);
    assertTrue(Operations.sameLanguage(a, equivalent));

    // a minus a = empty
    Automaton empty = Operations.minus(a, a, DEFAULT_MAX_DETERMINIZED_STATES);
    assertTrue(Operations.isEmpty(empty));

    // as long as don't accept the empty string
    // then optional(a) - empty = a
    if (!Operations.run(a, "")) {
      // System.out.println("test " + a);
      Automaton optional = Operations.optional(a);
      // System.out.println("optional " + optional);
      equivalent =
          Operations.minus(optional, Automata.makeEmptyString(), DEFAULT_MAX_DETERMINIZED_STATES);
      // System.out.println("equiv " + equivalent);
      assertTrue(Operations.sameLanguage(a, equivalent));
    }
  }

