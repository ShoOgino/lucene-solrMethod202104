  @SuppressWarnings({"unchecked"})
  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {
    if (!coreContainer.isZooKeeperAware()) {
      throw new SolrException(BAD_REQUEST,
          "Invalid request. collections can be accessed only in SolrCloud mode");
    }
    Map<String, Object> props = operation.execute(req, rsp, this);
    if (props == null) {
      return;
    }

    String asyncId = req.getParams().get(ASYNC);
    if (asyncId != null) {
      props.put(ASYNC, asyncId);
    }

    props.put(QUEUE_OPERATION, operation.action.toLower());

    if (operation.sendToOCPQueue) {
      ZkNodeProps zkProps = new ZkNodeProps(props);
      SolrResponse overseerResponse = sendToOCPQueue(zkProps, operation.timeOut);
      rsp.getValues().addAll(overseerResponse.getResponse());
      Exception exp = overseerResponse.getException();
      if (exp != null) {
        rsp.setException(exp);
      }

      // Even if Overseer does wait for the collection to be created, it sees a different cluster state than this node,
      // so this wait is required to make sure the local node Zookeeper watches fired and now see the collection.
      if (action.equals(CollectionAction.CREATE) && asyncId == null) {
        if (rsp.getException() == null) {
          waitForActiveCollection(zkProps.getStr(NAME), cores, overseerResponse);
        }
      }

    } else {
      if (distributedClusterStateUpdater.isDistributedStateUpdate()) {
        DistributedClusterStateUpdater.MutatingCommand command = DistributedClusterStateUpdater.MutatingCommand.getCommandFor(operation.action);
        ZkNodeProps message = new ZkNodeProps(props);
        // We do the state change synchronously but do not wait for it to be visible in this node's cluster state updated via ZK watches
        distributedClusterStateUpdater.doSingleStateUpdate(command, message,
            coreContainer.getZkController().getSolrCloudManager(), coreContainer.getZkController().getZkStateReader());
      } else {
        // submits and doesn't wait for anything (no response)
        coreContainer.getZkController().getOverseer().offerStateUpdate(Utils.toJSON(props));
      }
    }

  }

