  protected void finishNRTCopy(CopyJob job, long startNS) throws IOException {
    CopyState copyState = job.getCopyState();
    message(
        "top: finishNRTCopy: version="
            + copyState.version
            + (job.getFailed() ? " FAILED" : "")
            + " job="
            + job);

    // NOTE: if primary crashed while we were still copying then the job will hit an exc trying to
    // read bytes for the files from the primary node,
    // and the job will be marked as failed here:

    synchronized (this) {
      if ("syncing".equals(state)) {
        state = "idle";
      }

      if (curNRTCopy == job) {
        message("top: now clear curNRTCopy; job=" + job);
        curNRTCopy = null;
      } else {
        assert job.getFailed();
        message("top: skip clear curNRTCopy: we were cancelled; job=" + job);
      }

      if (job.getFailed()) {
        return;
      }

      // Does final file renames:
      job.finish();

      // Turn byte[] back to SegmentInfos:
      byte[] infosBytes = copyState.infosBytes;
      SegmentInfos infos =
          SegmentInfos.readCommit(dir, toIndexInput(copyState.infosBytes), copyState.gen);
      assert infos.getVersion() == copyState.version;

      message("  version=" + infos.getVersion() + " segments=" + infos.toString());

      // Cutover to new searcher:
      if (mgr != null) {
        ((SegmentInfosSearcherManager) mgr).setCurrentInfos(infos);
      }

      // Must first incRef new NRT files, then decRef old ones, to make sure we don't remove an NRT
      // file that's in common to both:
      Collection<String> newFiles = copyState.files.keySet();
      message("top: incRef newNRTFiles=" + newFiles);
      deleter.incRef(newFiles);

      // If any of our new files were previously copied merges, we clear them now, so we don't try
      // to later delete a non-existent file:
      pendingMergeFiles.removeAll(newFiles);
      message("top: after remove from pending merges pendingMergeFiles=" + pendingMergeFiles);

      message("top: decRef lastNRTFiles=" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(newFiles);
      message("top: set lastNRTFiles=" + lastNRTFiles);

      // At this point we can remove any completed merge segment files that we still do not
      // reference.  This can happen when a merge
      // finishes, copies its files out to us, but is then merged away (or dropped due to 100%
      // deletions) before we ever cutover to it
      // in an NRT point:
      if (copyState.completedMergeFiles.isEmpty() == false) {
        message("now remove-if-not-ref'd completed merge files: " + copyState.completedMergeFiles);
        for (String fileName : copyState.completedMergeFiles) {
          if (pendingMergeFiles.contains(fileName)) {
            pendingMergeFiles.remove(fileName);
            deleter.deleteIfNoRef(fileName);
          }
        }
      }

      lastFileMetaData = copyState.files;
    }

    int markerCount;
    IndexSearcher s = mgr.acquire();
    try {
      markerCount = s.count(new TermQuery(new Term("marker", "marker")));
    } finally {
      mgr.release(s);
    }

    message(
        String.format(
            Locale.ROOT,
            "top: done sync: took %.3fs for %s, opened NRT reader version=%d markerCount=%d",
            (System.nanoTime() - startNS) / 1000000000.0,
            bytesToString(job.getTotalBytesCopied()),
            copyState.version,
            markerCount));
  }

