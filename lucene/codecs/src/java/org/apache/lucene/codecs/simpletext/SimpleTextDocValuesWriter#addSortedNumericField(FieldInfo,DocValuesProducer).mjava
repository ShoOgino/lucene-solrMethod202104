  @Override
  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer)
      throws IOException {
    assert fieldSeen(field.name);
    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;
    doAddBinaryField(
        field,
        new EmptyDocValuesProducer() {
          @Override
          public BinaryDocValues getBinary(FieldInfo field) throws IOException {
            SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);
            return new BinaryDocValues() {

              @Override
              public int nextDoc() throws IOException {
                int doc = values.nextDoc();
                setCurrentDoc();
                return doc;
              }

              @Override
              public int docID() {
                return values.docID();
              }

              @Override
              public long cost() {
                return values.cost();
              }

              @Override
              public int advance(int target) throws IOException {
                int doc = values.advance(target);
                setCurrentDoc();
                return doc;
              }

              @Override
              public boolean advanceExact(int target) throws IOException {
                if (values.advanceExact(target)) {
                  setCurrentDoc();
                  return true;
                }
                return false;
              }

              final StringBuilder builder = new StringBuilder();
              BytesRef binaryValue;

              private void setCurrentDoc() throws IOException {
                if (docID() == NO_MORE_DOCS) {
                  return;
                }
                builder.setLength(0);
                for (int i = 0, count = values.docValueCount(); i < count; ++i) {
                  if (i > 0) {
                    builder.append(',');
                  }
                  builder.append(Long.toString(values.nextValue()));
                }
                binaryValue = new BytesRef(builder.toString());
              }

              @Override
              public BytesRef binaryValue() throws IOException {
                return binaryValue;
              }
            };
          }
        });
  }

