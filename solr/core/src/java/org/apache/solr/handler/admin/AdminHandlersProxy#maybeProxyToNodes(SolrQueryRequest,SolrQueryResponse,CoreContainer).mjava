  // Proxy this request to a different remote node if 'node' parameter is provided
  public static boolean maybeProxyToNodes(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer container)
      throws IOException, SolrServerException, InterruptedException {
    String nodeNames = req.getParams().get(PARAM_NODES);
    if (nodeNames == null || nodeNames.isEmpty()) {
      return false; // local request
    }

    if (!container.isZooKeeperAware()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Parameter " + PARAM_NODES + " only supported in Cloud mode");
    }
    
    Set<String> nodes;
    String pathStr = req.getPath();
    
    @SuppressWarnings({"unchecked"})
    Map<String,String> paramsMap = req.getParams().toMap(new HashMap<>());
    paramsMap.remove(PARAM_NODES);
    SolrParams params = new MapSolrParams(paramsMap);
    Set<String> liveNodes = container.getZkController().zkStateReader.getClusterState().getLiveNodes();
    
    if (nodeNames.equals("all")) {
      nodes = liveNodes;
      log.debug("All live nodes requested");
    } else {
      nodes = new HashSet<>(Arrays.asList(nodeNames.split(",")));
      for (String nodeName : nodes) {
        if (!nodeName.matches("^[^/:]+:\\d+_[\\w/]+$")) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Parameter " + PARAM_NODES + " has wrong format");
        }

        if (!liveNodes.contains(nodeName)) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Requested node " + nodeName + " is not part of cluster");
        }
      }       
      log.debug("Nodes requested: {}", nodes);
    }
    if (log.isDebugEnabled()) {
      log.debug("{} parameter {} specified on {}Â request", PARAM_NODES, nodeNames, pathStr);
    }
    
    Map<String, Pair<Future<NamedList<Object>>, SolrClient>> responses = new HashMap<>();
    for (String node : nodes) {
      responses.put(node, callRemoteNode(node, pathStr, params, container.getZkController()));
    }
    
    for (Map.Entry<String, Pair<Future<NamedList<Object>>, SolrClient>> entry : responses.entrySet()) {
      try {
        NamedList<Object> resp = entry.getValue().first().get(10, TimeUnit.SECONDS);
        entry.getValue().second().close();
        rsp.add(entry.getKey(), resp);
      } catch (ExecutionException ee) {
        log.warn("Exception when fetching result from node {}", entry.getKey(), ee);
      } catch (TimeoutException te) {
        log.warn("Timeout when fetching result from node {}", entry.getKey(), te);
      }
    }
    if (log.isDebugEnabled()) {
      log.debug("Fetched response from {} nodes: {}", responses.keySet().size(), responses.keySet());
    }
    return true;
  } 

