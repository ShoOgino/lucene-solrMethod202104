  /**
   * Return the best fragments. Matches are scanned from matchedFields and turned into fragments
   * against storedField. The highlighting may not make sense if matchedFields has matches with
   * offsets that don't correspond features in storedField. It will outright throw a {@code
   * StringIndexOutOfBoundsException} if matchedFields produces offsets outside of storedField. As
   * such it is advisable that all matchedFields share the same source as storedField or are at
   * least a prefix of it.
   *
   * @param fieldQuery {@link FieldQuery} object
   * @param reader {@link IndexReader} of the index
   * @param docId document id to be highlighted
   * @param storedField field of the document that stores the text
   * @param matchedFields fields of the document to scan for matches
   * @param fragCharSize the length (number of chars) of a fragment
   * @param maxNumFragments maximum number of fragments
   * @param fragListBuilder {@link FragListBuilder} object
   * @param fragmentsBuilder {@link FragmentsBuilder} object
   * @param preTags pre-tags to be used to highlight terms
   * @param postTags post-tags to be used to highlight terms
   * @param encoder an encoder that generates encoded text
   * @return created fragments or null when no fragments created. size of the array can be less than
   *     maxNumFragments
   * @throws IOException If there is a low-level I/O error
   */
  public final String[] getBestFragments(
      final FieldQuery fieldQuery,
      IndexReader reader,
      int docId,
      String storedField,
      Set<String> matchedFields,
      int fragCharSize,
      int maxNumFragments,
      FragListBuilder fragListBuilder,
      FragmentsBuilder fragmentsBuilder,
      String[] preTags,
      String[] postTags,
      Encoder encoder)
      throws IOException {
    FieldFragList fieldFragList =
        getFieldFragList(fragListBuilder, fieldQuery, reader, docId, matchedFields, fragCharSize);
    return fragmentsBuilder.createFragments(
        reader, docId, storedField, fieldFragList, maxNumFragments, preTags, postTags, encoder);
  }

