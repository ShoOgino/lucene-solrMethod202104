  /**
   * Most cases are handled except for the ambiguous ones:
   *
   * <ul>
   *   <li>s -&gt; š
   *   <li>t -&gt; š
   *   <li>d -&gt; ž
   *   <li>z -&gt; ž
   * </ul>
   */
  private int unpalatalize(char s[], int len) {
    // we check the character removed: if it's -u then
    // it's 2,5, or 6 gen pl., and these two can only apply then.
    if (s[len] == 'u') {
      // kš -> kst
      if (endsWith(s, len, "kš")) {
        len++;
        s[len - 2] = 's';
        s[len - 1] = 't';
        return len;
      }
      // ņņ -> nn
      if (endsWith(s, len, "ņņ")) {
        s[len - 2] = 'n';
        s[len - 1] = 'n';
        return len;
      }
    }

    // otherwise all other rules
    if (endsWith(s, len, "pj")
        || endsWith(s, len, "bj")
        || endsWith(s, len, "mj")
        || endsWith(s, len, "vj")) {
      // labial consonant
      return len - 1;
    } else if (endsWith(s, len, "šņ")) {
      s[len - 2] = 's';
      s[len - 1] = 'n';
      return len;
    } else if (endsWith(s, len, "žņ")) {
      s[len - 2] = 'z';
      s[len - 1] = 'n';
      return len;
    } else if (endsWith(s, len, "šļ")) {
      s[len - 2] = 's';
      s[len - 1] = 'l';
      return len;
    } else if (endsWith(s, len, "žļ")) {
      s[len - 2] = 'z';
      s[len - 1] = 'l';
      return len;
    } else if (endsWith(s, len, "ļņ")) {
      s[len - 2] = 'l';
      s[len - 1] = 'n';
      return len;
    } else if (endsWith(s, len, "ļļ")) {
      s[len - 2] = 'l';
      s[len - 1] = 'l';
      return len;
    } else if (s[len - 1] == 'č') {
      s[len - 1] = 'c';
      return len;
    } else if (s[len - 1] == 'ļ') {
      s[len - 1] = 'l';
      return len;
    } else if (s[len - 1] == 'ņ') {
      s[len - 1] = 'n';
      return len;
    }

    return len;
  }

