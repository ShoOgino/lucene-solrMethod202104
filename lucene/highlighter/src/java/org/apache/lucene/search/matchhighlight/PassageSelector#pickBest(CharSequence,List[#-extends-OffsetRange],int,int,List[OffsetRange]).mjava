  public List<Passage> pickBest(
      CharSequence value,
      List<? extends OffsetRange> markers,
      int maxPassageWindow,
      int maxPassages,
      List<OffsetRange> permittedPassageRanges) {
    assert markers instanceof RandomAccess;
    assert permittedPassageRanges instanceof RandomAccess;
    assert sortedAndNonOverlapping(permittedPassageRanges);

    // Handle odd special cases early.
    if (value.length() == 0 || maxPassageWindow == 0) {
      return Collections.emptyList();
    }

    // Best passages so far.
    PriorityQueue<Passage> pq =
        new PriorityQueue<>(maxPassages) {
          @Override
          protected boolean lessThan(Passage a, Passage b) {
            return passageScorer.compare(a, b) < 0;
          }
        };

    markers = splitOrTruncateToWindows(markers, maxPassageWindow, permittedPassageRanges);

    // Sort markers by their start offset, shortest first.
    markers.sort(Comparator.<OffsetRange>comparingInt(r -> r.from).thenComparingInt(r -> r.to));

    final int max = markers.size();
    int markerIndex = 0;
    nextRange:
    for (OffsetRange range : permittedPassageRanges) {
      final int rangeTo = Math.min(range.to, value.length());

      // Skip ranges outside of the value window anyway.
      if (range.from >= rangeTo) {
        continue;
      }

      while (markerIndex < max) {
        OffsetRange m = markers.get(markerIndex);

        // Markers are sorted so if the current marker's start is past the range,
        // we can advance, but we need to check the same marker against the new range.
        if (m.from >= rangeTo) {
          continue nextRange;
        }

        // Check if current marker falls within the range and is smaller than the largest allowed
        // passage window.
        if (m.from >= range.from && m.to <= rangeTo && m.length() <= maxPassageWindow) {

          // Adjust the window range to center the highlight marker.
          int from = (m.from + m.to - maxPassageWindow) / 2;
          int to = (m.from + m.to + maxPassageWindow) / 2;
          if (from < range.from) {
            to += range.from - from;
            from = range.from;
          }
          if (to > rangeTo) {
            from -= to - rangeTo;
            to = rangeTo;
            if (from < range.from) {
              from = range.from;
            }
          }

          if (from < to && to <= value.length()) {
            // Find other markers that are completely inside the passage window.
            ArrayList<OffsetRange> inside = new ArrayList<>();
            int i = markerIndex;
            while (i > 0 && markers.get(i - 1).from >= from) {
              i--;
            }

            OffsetRange c;
            for (; i < max && (c = markers.get(i)).from < to; i++) {
              if (c.to <= to) {
                inside.add(c);
              }
            }

            if (!inside.isEmpty()) {
              pq.insertWithOverflow(new Passage(from, to, inside));
            }
          }
        }

        // Advance to the next marker.
        markerIndex++;
      }
    }

    // Collect from the priority queue (reverse the order so that highest-scoring are first).
    Passage[] passages;
    if (pq.size() > 0) {
      passages = new Passage[pq.size()];
      for (int i = pq.size(); --i >= 0; ) {
        passages[i] = pq.pop();
      }
    } else {
      // Handle the default, no highlighting markers case.
      passages = pickDefaultPassage(value, maxPassageWindow, maxPassages, permittedPassageRanges);
    }

    // Correct passage boundaries from maxExclusive window. Typically shrink boundaries until we're
    // on a proper word/sentence boundary.
    if (passageAdjuster != null) {
      passageAdjuster.currentValue(value);
      for (int x = 0; x < passages.length; x++) {
        Passage p = passages[x];
        OffsetRange newRange = passageAdjuster.adjust(p);
        if (newRange.from != p.from || newRange.to != p.to) {
          assert newRange.from >= p.from && newRange.to <= p.to
              : "Adjusters must not expand the passage's range: was "
                  + p
                  + " => changed to "
                  + newRange;
          passages[x] = new Passage(newRange.from, newRange.to, p.markers);
        }
      }
    }

    // Ensure there are no overlaps on passages. In case of conflicts, better score wins.
    int last = 0;
    for (int i = 0; i < passages.length; i++) {
      Passage a = passages[i];
      if (a != null && a.length() > 0) {
        passages[last++] = a;
        for (int j = i + 1; j < passages.length; j++) {
          Passage b = passages[j];
          if (b != null) {
            if (adjecentOrOverlapping(a, b)) {
              passages[j] = null;
            }
          }
        }
      }
    }

    // Remove nullified slots.
    if (passages.length != last) {
      passages = ArrayUtil.copyOfSubArray(passages, 0, last);
    }

    // Sort in the offset order again.
    Arrays.sort(passages, Comparator.comparingInt(a -> a.from));

    return Arrays.asList(passages);
  }

