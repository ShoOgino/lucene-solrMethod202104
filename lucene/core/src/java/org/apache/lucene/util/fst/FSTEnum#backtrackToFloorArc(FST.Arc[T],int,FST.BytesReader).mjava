  /**
   * Backtracks until it finds a node which first arc is before our target label.` Then on the node,
   * finds the arc just before the targetLabel.
   *
   * @return null to continue the seek floor recursion loop.
   */
  private FST.Arc<T> backtrackToFloorArc(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in)
      throws IOException {
    while (true) {
      // First, walk backwards until we find a node which first arc is before our target label.
      fst.readFirstTargetArc(getArc(upto - 1), arc, fstReader);
      if (arc.label() < targetLabel) {
        // Then on this node, find the arc just before the targetLabel.
        if (!arc.isLast()) {
          if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {
            if (arc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {
              findNextFloorArcBinarySearch(arc, targetLabel, in);
            } else {
              assert arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;
              findNextFloorArcDirectAddressing(arc, targetLabel, in);
            }
          } else {
            while (!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {
              fst.readNextArc(arc, fstReader);
            }
          }
        }
        assert arc.label() < targetLabel;
        assert arc.isLast() || fst.readNextArcLabel(arc, in) >= targetLabel;
        pushLast();
        return null;
      }
      upto--;
      if (upto == 0) {
        return null;
      }
      targetLabel = getTargetLabel();
      arc = getArc(upto);
    }
  }

