  @Test
  public void testUpdatingDocValuesWithRouteField() throws Exception {

     new UpdateRequest()
      .deleteByQuery("*:*").commit(cluster.getSolrClient(), COLLECTION);
    
     new UpdateRequest().add(createDocs(NUMBER_OF_DOCS)).commit(cluster.getSolrClient(), COLLECTION);

    int id = TestUtil.nextInt(random(), 1, NUMBER_OF_DOCS - 1);
    SolrDocument solrDocument = queryDoc(id);
    Long initialVersion = (Long) solrDocument.get("_version_");
    Integer luceneDocId = (Integer) solrDocument.get("[docid]");
    String shardName = (String) solrDocument.get("shardName");
    Assert.assertThat(solrDocument.get("inplace_updatable_int"), is(id));

    int newDocValue = TestUtil.nextInt(random(), 1, 2 * NUMBER_OF_DOCS - 1);
    SolrInputDocument sdoc = sdoc("id", ""+id,
        // use route field in update command
        "shardName", shardName,
        "inplace_updatable_int", map("set", newDocValue));
    
    UpdateRequest updateRequest = new UpdateRequest()
        .add(sdoc);
    
    // since this atomic update will be done in place, it shouldn't matter if we specify this param, or what it's value is
    if (random().nextBoolean()) {
      updateRequest.setParam(UpdateParams.REQUIRE_PARTIAL_DOC_UPDATES_INPLACE, Boolean.toString(random().nextBoolean()));
    }
    updateRequest.commit(cluster.getSolrClient(), COLLECTION);
    solrDocument = queryDoc(id);
    Long newVersion = (Long) solrDocument.get("_version_");
    Assert.assertTrue("Version of updated document must be greater than original one",
        newVersion > initialVersion);
    Assert.assertThat( "Doc value must be updated", solrDocument.get("inplace_updatable_int"), is(newDocValue));
    Assert.assertThat("Lucene doc id should not be changed for In-Place Updates.", solrDocument.get("[docid]"), is(luceneDocId));

    sdoc.remove("shardName");
    checkWrongCommandFailure(sdoc);

    sdoc.addField("shardName",  map("set", "newShardName"));
    checkWrongCommandFailure(sdoc);

    sdoc.setField("shardName", shardName);
    
    // if we now attempt an atomic update that we know can't be done in-place, this should fail...
    sdoc.addField("title_s", map("set", "this is a string that can't be updated in place"));
    final SolrException e = expectThrows(SolrException.class, () -> {
        final UpdateRequest r = new UpdateRequest();
        r.add(sdoc);
        r.setParam(UpdateParams.REQUIRE_PARTIAL_DOC_UPDATES_INPLACE, "true");
        r.process(cluster.getSolrClient(), COLLECTION);
      });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(), containsString("Unable to update doc in-place: " + id));
  }

