  public void testObtainConcurrently() throws InterruptedException, IOException {
    Path tempPath = createTempDir();
    final Directory directory = getDirectory(tempPath);
    final AtomicBoolean running = new AtomicBoolean(true);
    final AtomicInteger atomicCounter = new AtomicInteger(0);
    final ReentrantLock assertingLock = new ReentrantLock();
    int numThreads = 2 + random().nextInt(10);
    final int runs = atLeast(1000);
    CyclicBarrier barrier = new CyclicBarrier(numThreads);
    Thread[] threads = new Thread[numThreads];
    for (int i = 0; i < threads.length; i++) {
      threads[i] =
          new Thread() {
            @Override
            public void run() {
              try {
                barrier.await();
              } catch (Exception e) {
                throw new RuntimeException(e);
              }
              while (running.get()) {
                try (Lock lock = directory.obtainLock("foo.lock")) {
                  assertFalse(assertingLock.isLocked());
                  if (assertingLock.tryLock()) {
                    assertingLock.unlock();
                  } else {
                    fail();
                  }
                  assert lock != null; // stupid compiler
                } catch (IOException ex) {
                  //
                }
                if (atomicCounter.incrementAndGet() > runs) {
                  running.set(false);
                }
              }
            }
          };
      threads[i].start();
    }

    for (int i = 0; i < threads.length; i++) {
      threads[i].join();
    }
    directory.close();
  }

