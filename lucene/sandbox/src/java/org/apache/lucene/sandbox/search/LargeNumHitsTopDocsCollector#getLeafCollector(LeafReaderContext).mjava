  @Override
  public LeafCollector getLeafCollector(LeafReaderContext context) {
    final int docBase = context.docBase;
    return new TopScoreDocCollector.ScorerLeafCollector() {

      @Override
      public void setScorer(Scorable scorer) throws IOException {
        super.setScorer(scorer);
      }

      @Override
      public void collect(int doc) throws IOException {
        float score = scorer.score();

        // This collector relies on the fact that scorers produce positive values:
        assert score >= 0; // NOTE: false for NaN

        if (totalHits < requestedHitCount) {
          hits.add(new ScoreDoc(doc + docBase, score));
          totalHits++;
          return;
        } else if (totalHits == requestedHitCount) {
          // Convert the list to a priority queue

          // We should get here only when priority queue
          // has not been built
          assert pq == null;
          assert pqTop == null;
          pq = new HitQueue(requestedHitCount, false);

          for (ScoreDoc scoreDoc : hits) {
            pq.add(scoreDoc);
          }

          pqTop = pq.top();
          hits = null;
        }

        if (score > pqTop.score) {
          pqTop.doc = doc + docBase;
          pqTop.score = score;
          pqTop = pq.updateTop();
        }
        ++totalHits;
      }
    };
  }

