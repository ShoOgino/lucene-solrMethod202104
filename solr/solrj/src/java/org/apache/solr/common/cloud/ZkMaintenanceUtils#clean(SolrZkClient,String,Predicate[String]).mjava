  /**
   * Delete a path and all of its sub nodes
   * @param filter for node to be deleted
   */
  public static void clean(SolrZkClient zkClient, String path, Predicate<String> filter) throws InterruptedException, KeeperException {
    if (filter == null) {
      clean(zkClient, path);
      return;
    }

    ArrayList<String> paths = new ArrayList<>();

    traverseZkTree(zkClient, path, VISIT_ORDER.VISIT_POST, znode -> {
      if (!znode.equals("/") && filter.test(znode)) paths.add(znode);
    });

    // sort the list in descending order to ensure that child entries are deleted first
    paths.sort(Comparator.comparingInt(String::length).reversed());

    for (String subpath : paths) {
      if (!subpath.equals("/")) {
        try {
          zkClient.delete(subpath, -1, true);
        } catch (KeeperException.NotEmptyException | KeeperException.NoNodeException e) {
          // expected
        }
      }
    }
  }

