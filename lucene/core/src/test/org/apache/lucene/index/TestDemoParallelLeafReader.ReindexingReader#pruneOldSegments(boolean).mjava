    /**
     * Removes the parallel index that are no longer in the last commit point. We can't remove this
     * when the parallel reader is closed because it may still be referenced by the last commit.
     */
    private void pruneOldSegments(boolean removeOldGens) throws IOException {
      SegmentInfos lastCommit = SegmentInfos.readLatestCommit(indexDir);
      if (DEBUG) System.out.println("TEST: prune");

      Set<String> liveIDs = new HashSet<String>();
      for (SegmentCommitInfo info : lastCommit) {
        String idString = StringHelper.idToString(info.info.getId());
        liveIDs.add(idString);
      }

      long currentSchemaGen = getCurrentSchemaGen();

      if (Files.exists(segsPath)) {
        for (Path path : segSubDirs(segsPath)) {
          if (Files.isDirectory(path)) {
            SegmentIDAndGen segIDGen = new SegmentIDAndGen(path.getFileName().toString());
            assert segIDGen.schemaGen <= currentSchemaGen;
            if (liveIDs.contains(segIDGen.segID) == false
                && (closedSegments.contains(segIDGen)
                    || (removeOldGens && segIDGen.schemaGen < currentSchemaGen))) {
              if (DEBUG) System.out.println("TEST: remove " + segIDGen);
              try {
                IOUtils.rm(path);
                closedSegments.remove(segIDGen);
              } catch (IOException ioe) {
                // OK, we'll retry later
                if (DEBUG) System.out.println("TEST: ignore ioe during delete " + path + ":" + ioe);
              }
            }
          }
        }
      }
    }

