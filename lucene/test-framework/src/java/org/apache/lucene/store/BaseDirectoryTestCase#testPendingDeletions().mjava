  // Make sure the FSDirectory impl properly "emulates" deletions on filesystems (Windows) with
  // buggy deleteFile:
  public void testPendingDeletions() throws IOException {
    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {
      assumeTrue(
          "we can only install VirusCheckingFS on an FSDirectory", dir instanceof FSDirectory);
      FSDirectory fsDir = (FSDirectory) dir;

      // Keep trying until virus checker refuses to delete:
      final String fileName;
      while (true) {
        // create a random filename (segment file name style), so it cannot hit windows problem with
        // special filenames ("con", "com1",...):
        String candidate =
            IndexFileNames.segmentFileName(
                TestUtil.randomSimpleString(random(), 1, 6),
                TestUtil.randomSimpleString(random()),
                "test");
        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {
          out.getFilePointer(); // just fake access to prevent compiler warning
        }
        fsDir.deleteFile(candidate);
        if (fsDir.getPendingDeletions().size() > 0) {
          // good: virus checker struck and prevented deletion of fileName
          fileName = candidate;
          break;
        }
      }

      // Make sure listAll does NOT include the file:
      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));

      // Make sure fileLength claims it's deleted:
      expectThrows(
          NoSuchFileException.class,
          () -> {
            fsDir.fileLength(fileName);
          });

      // Make sure rename fails:
      expectThrows(
          NoSuchFileException.class,
          () -> {
            fsDir.rename(fileName, "file2");
          });

      // Make sure delete fails:
      expectThrows(
          NoSuchFileException.class,
          () -> {
            fsDir.deleteFile(fileName);
          });

      // Make sure we cannot open it for reading:
      expectThrowsAnyOf(
          Arrays.asList(NoSuchFileException.class, FileNotFoundException.class),
          () -> {
            fsDir.openInput(fileName, IOContext.DEFAULT);
          });
    }
  }

