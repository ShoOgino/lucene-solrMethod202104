  private void assertSubsetOfSameScores(Query q, TopDocs top1, TopDocs top2) {
    // The constrained query
    // should be a subset to the unconstrained query.
    if (top2.totalHits.value > top1.totalHits.value) {
      fail(
          "Constrained results not a subset:\n"
              + CheckHits.topdocsString(top1, 0, 0)
              + CheckHits.topdocsString(top2, 0, 0)
              + "for query:"
              + q.toString());
    }

    for (int hit = 0; hit < top2.totalHits.value; hit++) {
      int id = top2.scoreDocs[hit].doc;
      float score = top2.scoreDocs[hit].score;
      boolean found = false;
      // find this doc in other hits
      for (int other = 0; other < top1.totalHits.value; other++) {
        if (top1.scoreDocs[other].doc == id) {
          found = true;
          float otherScore = top1.scoreDocs[other].score;
          // check if scores match
          assertEquals(
              "Doc "
                  + id
                  + " scores don't match\n"
                  + CheckHits.topdocsString(top1, 0, 0)
                  + CheckHits.topdocsString(top2, 0, 0)
                  + "for query:"
                  + q.toString(),
              score,
              otherScore,
              // If there is at least one MUST/FILTER clause and if
              // minShouldMatch is equal to the number of SHOULD clauses,
              // then a query that was previously executed with
              // ReqOptSumScorer is now executed with ConjunctionScorer.
              // We need to introduce some leniency because ReqOptSumScorer
              // casts intermediate values to floats before summing up again
              // which hurts accuracy.
              Math.ulp(score));
        }
      }

      // check if subset
      if (!found)
        fail(
            "Doc "
                + id
                + " not found\n"
                + CheckHits.topdocsString(top1, 0, 0)
                + CheckHits.topdocsString(top2, 0, 0)
                + "for query:"
                + q.toString());
    }
  }

