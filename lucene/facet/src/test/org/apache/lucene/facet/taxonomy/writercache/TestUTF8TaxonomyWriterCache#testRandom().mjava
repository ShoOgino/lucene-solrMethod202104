  public void testRandom() throws Exception {
    LabelToOrdinal map = new LabelToOrdinalMap();

    UTF8TaxonomyWriterCache cache = new UTF8TaxonomyWriterCache();

    final int n = atLeast(10 * 1000);
    final int numUniqueValues = 50 * 1000;

    Random random = random();
    Set<String> uniqueValuesSet = new HashSet<>();
    while (uniqueValuesSet.size() < numUniqueValues) {
      int numParts = TestUtil.nextInt(random(), 1, 5);
      StringBuilder b = new StringBuilder();
      for (int i = 0; i < numParts; i++) {
        String part = null;
        while (true) {
          part = TestUtil.randomRealisticUnicodeString(random(), 16);
          part = part.replace("/", "");
          if (part.length() > 0) {
            break;
          }
        }

        if (i > 0) {
          b.append('/');
        }
        b.append(part);
      }
      uniqueValuesSet.add(b.toString());
    }
    String[] uniqueValues = uniqueValuesSet.toArray(new String[0]);

    int ordUpto = 0;
    for (int i = 0; i < n; i++) {

      int index = random.nextInt(numUniqueValues);
      FacetLabel label;
      String s = uniqueValues[index];
      if (s.length() == 0) {
        label = new FacetLabel();
      } else {
        label = new FacetLabel(s.split("/"));
      }

      int ord1 = map.getOrdinal(label);
      int ord2 = cache.get(label);

      assertEquals(ord1, ord2);

      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {
        ord1 = ordUpto++;
        map.addLabel(label, ord1);
        cache.put(label, ord1);
      }
    }

    for (int i = 0; i < numUniqueValues; i++) {
      FacetLabel label;
      String s = uniqueValues[i];
      if (s.length() == 0) {
        label = new FacetLabel();
      } else {
        label = new FacetLabel(s.split("/"));
      }
      int ord1 = map.getOrdinal(label);
      int ord2 = cache.get(label);
      assertEquals(ord1, ord2);
    }
  }

