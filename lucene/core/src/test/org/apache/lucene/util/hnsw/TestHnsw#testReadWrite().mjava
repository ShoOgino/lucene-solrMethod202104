  // test writing out and reading in a graph gives the same graph
  public void testReadWrite() throws IOException {
    int dim = random().nextInt(100) + 1;
    int nDoc = random().nextInt(100) + 1;
    RandomVectorValues vectors = new RandomVectorValues(nDoc, dim, random());
    RandomVectorValues v2 = vectors.copy(), v3 = vectors.copy();
    long seed = random().nextLong();
    HnswGraphBuilder.randSeed = seed;
    HnswGraphBuilder builder = new HnswGraphBuilder(vectors);
    HnswGraph hnsw = builder.build(vectors);
    // Recreate the graph while indexing with the same random seed and write it out
    HnswGraphBuilder.randSeed = seed;
    try (Directory dir = newDirectory()) {
      int nVec = 0, indexedDoc = 0;
      // Don't merge randomly, create a single segment because we rely on the docid ordering for
      // this test
      IndexWriterConfig iwc = new IndexWriterConfig().setCodec(Codec.forName("Lucene90"));
      try (IndexWriter iw = new IndexWriter(dir, iwc)) {
        while (v2.nextDoc() != NO_MORE_DOCS) {
          while (indexedDoc < v2.docID()) {
            // increment docId in the index by adding empty documents
            iw.addDocument(new Document());
            indexedDoc++;
          }
          Document doc = new Document();
          doc.add(new VectorField("field", v2.vectorValue(), v2.searchStrategy));
          doc.add(new StoredField("id", v2.docID()));
          iw.addDocument(doc);
          nVec++;
          indexedDoc++;
        }
      }
      try (IndexReader reader = DirectoryReader.open(dir)) {
        for (LeafReaderContext ctx : reader.leaves()) {
          VectorValues values = ctx.reader().getVectorValues("field");
          assertEquals(vectors.searchStrategy, values.searchStrategy());
          assertEquals(dim, values.dimension());
          assertEquals(nVec, values.size());
          assertEquals(indexedDoc, ctx.reader().maxDoc());
          assertEquals(indexedDoc, ctx.reader().numDocs());
          assertVectorsEqual(v3, values);
          KnnGraphValues graphValues =
              ((Lucene90VectorReader) ((CodecReader) ctx.reader()).getVectorReader())
                  .getGraphValues("field");
          assertGraphEqual(hnsw, graphValues, nVec);
        }
      }
    }
  }

