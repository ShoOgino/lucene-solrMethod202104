  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq)
      throws IOException {
    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();
    for (BooleanClause c : bq) {
      if (c.getOccur() != Occur.FILTER) {
        bq2Builder.add(c);
      }
    }
    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());
    BooleanQuery bq2 = bq2Builder.build();

    final AtomicBoolean matched = new AtomicBoolean();
    searcher.search(
        bq,
        new SimpleCollector() {
          int docBase;
          Scorable scorer;

          @Override
          protected void doSetNextReader(LeafReaderContext context) throws IOException {
            super.doSetNextReader(context);
            docBase = context.docBase;
          }

          @Override
          public ScoreMode scoreMode() {
            return ScoreMode.COMPLETE;
          }

          @Override
          public void setScorer(Scorable scorer) throws IOException {
            this.scorer = scorer;
          }

          @Override
          public void collect(int doc) throws IOException {
            final float actualScore = scorer.score();
            final float expectedScore =
                searcher.explain(bq2, docBase + doc).getValue().floatValue();
            assertEquals(expectedScore, actualScore, 10e-5);
            matched.set(true);
          }
        });
    assertTrue(matched.get());
  }

