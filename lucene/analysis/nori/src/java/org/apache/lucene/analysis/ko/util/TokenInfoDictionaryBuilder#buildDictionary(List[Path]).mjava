  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {
    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);
    // all lines in the file
    List<String[]> lines = new ArrayList<>(400000);
    for (Path path : csvFiles) {
      try (BufferedReader reader = Files.newBufferedReader(path, Charset.forName(encoding))) {
        String line;
        while ((line = reader.readLine()) != null) {
          String[] entry = CSVUtil.parse(line);

          if (entry.length < 12) {
            throw new IllegalArgumentException(
                "Entry in CSV is not valid (12 field values expected): " + line);
          }

          // NFKC normalize dictionary entry
          if (normalForm != null) {
            String[] normalizedEntry = new String[entry.length];
            for (int i = 0; i < entry.length; i++) {
              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);
            }
            lines.add(normalizedEntry);
          } else {
            lines.add(entry);
          }
        }
      }
    }

    // sort by term: we sorted the files already and use a stable sort.
    lines.sort(Comparator.comparing(left -> left[0]));

    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();
    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, fstOutput);
    IntsRefBuilder scratch = new IntsRefBuilder();
    long ord = -1; // first ord will be 0
    String lastValue = null;

    // build token info dictionary
    for (String[] entry : lines) {
      String surfaceForm = entry[0].trim();
      if (surfaceForm.isEmpty()) {
        continue;
      }
      int next = dictionary.put(entry);

      if (next == offset) {
        throw new IllegalStateException("Failed to process line: " + Arrays.toString(entry));
      }

      if (!surfaceForm.equals(lastValue)) {
        // new word to add to fst
        ord++;
        lastValue = surfaceForm;
        scratch.grow(surfaceForm.length());
        scratch.setLength(surfaceForm.length());
        for (int i = 0; i < surfaceForm.length(); i++) {
          scratch.setIntAt(i, surfaceForm.charAt(i));
        }
        fstCompiler.add(scratch.get(), ord);
      }
      dictionary.addMapping((int) ord, offset);
      offset = next;
    }
    dictionary.setFST(fstCompiler.compile());
    return dictionary;
  }

