  /**
   * Construct a <code>ReqOptScorer</code>.
   *
   * @param reqScorer The required scorer. This must match.
   * @param optScorer The optional scorer. This is used for scoring only.
   * @param scoreMode How the produced scorers will be consumed.
   */
  public ReqOptSumScorer(Scorer reqScorer, Scorer optScorer, ScoreMode scoreMode)
      throws IOException {
    super(reqScorer.weight);
    assert reqScorer != null;
    assert optScorer != null;
    if (scoreMode == ScoreMode.TOP_SCORES) {
      this.maxScorePropagator = new MaxScoreSumPropagator(Arrays.asList(reqScorer, optScorer));
    } else {
      this.maxScorePropagator = null;
    }
    this.reqScorer = reqScorer;
    this.optScorer = optScorer;

    final TwoPhaseIterator reqTwoPhase = reqScorer.twoPhaseIterator();
    this.optTwoPhase = optScorer.twoPhaseIterator();
    if (reqTwoPhase == null) {
      reqApproximation = reqScorer.iterator();
    } else {
      reqApproximation = reqTwoPhase.approximation();
    }
    if (optTwoPhase == null) {
      optApproximation = optScorer.iterator();
    } else {
      optApproximation = optTwoPhase.approximation();
    }
    if (scoreMode != ScoreMode.TOP_SCORES) {
      approximation = reqApproximation;
      this.reqMaxScore = Float.POSITIVE_INFINITY;
    } else {
      reqScorer.advanceShallow(0);
      optScorer.advanceShallow(0);
      this.reqMaxScore = reqScorer.getMaxScore(NO_MORE_DOCS);
      this.approximation =
          new DocIdSetIterator() {
            int upTo = -1;
            float maxScore;

            private void moveToNextBlock(int target) throws IOException {
              upTo = advanceShallow(target);
              float reqMaxScoreBlock = reqScorer.getMaxScore(upTo);
              maxScore = getMaxScore(upTo);

              // Potentially move to a conjunction
              optIsRequired = reqMaxScoreBlock < minScore;
            }

            private int advanceImpacts(int target) throws IOException {
              if (target > upTo) {
                moveToNextBlock(target);
              }

              while (true) {
                if (maxScore >= minScore) {
                  return target;
                }

                if (upTo == NO_MORE_DOCS) {
                  return NO_MORE_DOCS;
                }

                target = upTo + 1;

                moveToNextBlock(target);
              }
            }

            @Override
            public int nextDoc() throws IOException {
              return advanceInternal(reqApproximation.docID() + 1);
            }

            @Override
            public int advance(int target) throws IOException {
              return advanceInternal(target);
            }

            private int advanceInternal(int target) throws IOException {
              if (target == NO_MORE_DOCS) {
                reqApproximation.advance(target);
                return NO_MORE_DOCS;
              }
              int reqDoc = target;
              advanceHead:
              for (; ; ) {
                if (minScore != 0) {
                  reqDoc = advanceImpacts(reqDoc);
                }
                if (reqApproximation.docID() < reqDoc) {
                  reqDoc = reqApproximation.advance(reqDoc);
                }
                if (reqDoc == NO_MORE_DOCS || optIsRequired == false) {
                  return reqDoc;
                }

                int upperBound = reqMaxScore < minScore ? NO_MORE_DOCS : upTo;
                if (reqDoc > upperBound) {
                  continue;
                }

                // Find the next common doc within the current block
                for (; ; ) { // invariant: reqDoc >= optDoc
                  int optDoc = optApproximation.docID();
                  if (optDoc < reqDoc) {
                    optDoc = optApproximation.advance(reqDoc);
                  }
                  if (optDoc > upperBound) {
                    reqDoc = upperBound + 1;
                    continue advanceHead;
                  }

                  if (optDoc != reqDoc) {
                    reqDoc = reqApproximation.advance(optDoc);
                    if (reqDoc > upperBound) {
                      continue advanceHead;
                    }
                  }

                  if (reqDoc == NO_MORE_DOCS || optDoc == reqDoc) {
                    return reqDoc;
                  }
                }
              }
            }

            @Override
            public int docID() {
              return reqApproximation.docID();
            }

            @Override
            public long cost() {
              return reqApproximation.cost();
            }
          };
    }

    if (reqTwoPhase == null && optTwoPhase == null) {
      this.twoPhase = null;
    } else {
      this.twoPhase =
          new TwoPhaseIterator(approximation) {

            @Override
            public boolean matches() throws IOException {
              if (reqTwoPhase != null && reqTwoPhase.matches() == false) {
                return false;
              }
              if (optTwoPhase != null) {
                if (optIsRequired) {
                  // The below condition is rare and can only happen if we transitioned to
                  // optIsRequired=true
                  // after the opt approximation was advanced and before it was confirmed.
                  if (reqScorer.docID() != optApproximation.docID()) {
                    if (optApproximation.docID() < reqScorer.docID()) {
                      optApproximation.advance(reqScorer.docID());
                    }
                    if (reqScorer.docID() != optApproximation.docID()) {
                      return false;
                    }
                  }
                  if (optTwoPhase.matches() == false) {
                    // Advance the iterator to make it clear it doesn't match the current doc id
                    optApproximation.nextDoc();
                    return false;
                  }
                } else if (optApproximation.docID() == reqScorer.docID()
                    && optTwoPhase.matches() == false) {
                  // Advance the iterator to make it clear it doesn't match the current doc id
                  optApproximation.nextDoc();
                }
              }
              return true;
            }

            @Override
            public float matchCost() {
              float matchCost = 1;
              if (reqTwoPhase != null) {
                matchCost += reqTwoPhase.matchCost();
              }
              if (optTwoPhase != null) {
                matchCost += optTwoPhase.matchCost();
              }
              return matchCost;
            }
          };
    }
  }

