  @Override
  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({"rawtypes"})NamedList results) throws Exception {
    //---- PARSE PRIMARY MESSAGE PARAMS
    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us
    final String aliasName = message.getStr(NAME);
    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);

    final ZkStateReader.AliasesManager aliasesManager = ccc.getZkStateReader().aliasesManager;
    final Aliases aliases = aliasesManager.getAliases();
    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);
    if (aliasMetadata.isEmpty()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Alias " + aliasName + " does not exist or is not a routed alias."); // if it did exist, we'd have a non-null map
    }
    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);
    if (ra == null) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "MaintainRoutedAlias called on non-routed alias");
    }

    ra.updateParsedCollectionAliases(ccc.getZkStateReader(), true);
    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);
    for (RoutedAlias.Action action : actions) {
      boolean exists = ccc.getZkStateReader().getClusterState().getCollectionOrNull(action.targetCollection) != null;
      switch (action.actionType) {
        case ENSURE_REMOVED:
          if (exists) {
            ccc.getExecutorService().submit(() -> {
              try {
                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);
              } catch (Exception e) {
                log.warn("Deletion of {} by {} {} failed (this might be ok if two clients were"
                    , action.targetCollection, ra.getAliasName()
                    , " writing to a routed alias at the same time and both caused a deletion)");
                log.debug("Exception for last message:", e);
              }
            });
          }
          break;
        case ENSURE_EXISTS:
          if (!exists) {
            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);
          } else {
            // check that the collection is properly integrated into the alias (see
            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias
            // and the presence of the appropriate collection property. Note that this only works if the collection
            // happens to fall where we would have created one already. Support for un-even collection sizes will
            // take additional work (though presently they might work if the below book keeping is done by hand)
            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {
              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);
              Map<String, String> collectionProperties = ccc.getZkStateReader()
                  .getCollectionProperties(action.targetCollection, 1000);
              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {
                CollectionProperties props = new CollectionProperties(ccc.getZkStateReader().getZkClient());
                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);
              }
            }
          }
          break;
        default:
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unknown action type!");
      }
    }
  }

