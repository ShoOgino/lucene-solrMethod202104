  public void testMinShouldMatch() throws IOException {
    Query w1 = NamedMatches.wrapQuery("w1", new TermQuery(new Term(FIELD_WITH_OFFSETS, "w1")));
    Query w3 = NamedMatches.wrapQuery("w3", new TermQuery(new Term(FIELD_WITH_OFFSETS, "w3")));
    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, "w4"));
    Query xx = NamedMatches.wrapQuery("xx", new TermQuery(new Term(FIELD_WITH_OFFSETS, "xx")));
    Query q =
        new BooleanQuery.Builder()
            .add(w3, BooleanClause.Occur.SHOULD)
            .add(
                new BooleanQuery.Builder()
                    .add(w1, BooleanClause.Occur.SHOULD)
                    .add(w4, BooleanClause.Occur.SHOULD)
                    .add(xx, BooleanClause.Occur.SHOULD)
                    .setMinimumNumberShouldMatch(2)
                    .build(),
                BooleanClause.Occur.SHOULD)
            .build();
    checkMatches(
        q,
        FIELD_WITH_OFFSETS,
        new int[][] {
          {0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11},
          {1, 1, 1, 3, 5, 3, 3, 9, 11},
          {2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14},
          {3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17},
          {4}
        });
    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[] {3, 1, 3, 3, 0, 0});
    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);
    checkSubMatches(q, new String[][] {{"w1", "w3"}, {"w3"}, {"w1", "xx"}, {"w1", "w3"}, {}, {}});
  }

