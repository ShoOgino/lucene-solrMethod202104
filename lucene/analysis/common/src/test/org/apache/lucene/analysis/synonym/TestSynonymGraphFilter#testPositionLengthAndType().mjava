  /** verify type of token and positionLengths on synonyms of different word counts. */
  public void testPositionLengthAndType() throws Exception {
    String testFile =
        "spider man, spiderman\n" + "usa,united states,u s a,united states of america";
    Analyzer analyzer = new MockAnalyzer(random());
    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);

    parser.parse(new StringReader(testFile));
    analyzer.close();

    SynonymMap map = parser.build();
    analyzer = getFlattenAnalyzer(parser, true);

    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef("usa"), new IntsRefBuilder()));
    ByteArrayDataInput bytesReader =
        new ByteArrayDataInput(value.bytes, value.offset, value.length);
    final int code = bytesReader.readVInt();
    final int count = code >>> 1;

    final int[] synonymsIdxs = new int[count];
    for (int i = 0; i < count; i++) {
      synonymsIdxs[i] = bytesReader.readVInt();
    }

    BytesRef scratchBytes = new BytesRef();
    map.words.get(synonymsIdxs[2], scratchBytes);

    int synonymLength = 1;
    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {
      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {
        synonymLength++;
      }
    }

    assertEquals(count, 3);
    assertEquals(synonymLength, 4);

    assertAnalyzesTo(
        analyzer,
        "spider man",
        new String[] {"spiderman", "spider", "man"},
        new int[] {0, 0, 7},
        new int[] {10, 6, 10},
        new String[] {"SYNONYM", "word", "word"},
        new int[] {1, 0, 1},
        new int[] {2, 1, 1});

    assertAnalyzesToPositions(
        analyzer,
        "amazing spider man",
        new String[] {"amazing", "spiderman", "spider", "man"},
        new String[] {"word", "SYNONYM", "word", "word"},
        new int[] {1, 1, 0, 1},
        new int[] {1, 2, 1, 1});

    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream("field", new StringReader("the
    // usa is wealthy"))));

    assertAnalyzesTo(
        analyzer,
        "the united states of america is wealthy",
        new String[] {
          "the", "usa", "united", "u", "united", "states", "s", "states", "a", "of", "america",
          "is", "wealthy"
        },
        new int[] {0, 4, 4, 4, 4, 11, 11, 11, 18, 18, 21, 29, 32},
        new int[] {3, 28, 10, 10, 10, 28, 17, 17, 28, 20, 28, 31, 39},
        new String[] {
          "word", "SYNONYM", "SYNONYM", "SYNONYM", "word", "SYNONYM", "SYNONYM", "word", "SYNONYM",
          "word", "word", "word", "word"
        },
        new int[] {1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        new int[] {1, 4, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1});

    assertAnalyzesToPositions(
        analyzer,
        "spiderman",
        new String[] {"spider", "spiderman", "man"},
        new String[] {"SYNONYM", "word", "SYNONYM"},
        new int[] {1, 0, 1},
        new int[] {1, 2, 1});

    assertAnalyzesTo(
        analyzer,
        "spiderman enemies",
        new String[] {"spider", "spiderman", "man", "enemies"},
        new int[] {0, 0, 0, 10},
        new int[] {9, 9, 9, 17},
        new String[] {"SYNONYM", "word", "SYNONYM", "word"},
        new int[] {1, 0, 1, 1},
        new int[] {1, 2, 1, 1});

    assertAnalyzesTo(
        analyzer,
        "the usa is wealthy",
        new String[] {
          "the", "united", "u", "united", "usa", "states", "s", "states", "a", "of", "america",
          "is", "wealthy"
        },
        new int[] {0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 11},
        new int[] {3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 18},
        new String[] {
          "word", "SYNONYM", "SYNONYM", "SYNONYM", "word", "SYNONYM", "SYNONYM", "SYNONYM",
          "SYNONYM", "SYNONYM", "SYNONYM", "word", "word"
        },
        new int[] {1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        new int[] {1, 1, 1, 1, 4, 3, 1, 1, 2, 1, 1, 1, 1});

    assertGraphStrings(
        analyzer,
        "the usa is wealthy",
        new String[] {
          "the usa is wealthy",
          "the united states is wealthy",
          "the u s a is wealthy",
          "the united states of america is wealthy",
          // Wrong. Here only due to "sausagization" of the multi word synonyms.
          "the u states is wealthy",
          "the u states a is wealthy",
          "the u s of america is wealthy",
          "the u states of america is wealthy",
          "the united s a is wealthy",
          "the united states a is wealthy",
          "the united s of america is wealthy"
        });

    assertAnalyzesTo(
        analyzer,
        "the united states is wealthy",
        new String[] {
          "the", "usa", "u", "united", "united", "s", "states", "states", "a", "of", "america",
          "is", "wealthy"
        },
        new int[] {0, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 18, 21},
        new int[] {3, 17, 10, 10, 10, 17, 17, 17, 17, 17, 17, 20, 28},
        new String[] {
          "word", "SYNONYM", "SYNONYM", "SYNONYM", "word", "SYNONYM", "SYNONYM", "word", "SYNONYM",
          "SYNONYM", "SYNONYM", "word", "word"
        },
        new int[] {1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        new int[] {1, 4, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1},
        false);

    assertAnalyzesTo(
        analyzer,
        "the united states of balance",
        new String[] {
          "the", "usa", "u", "united", "united", "s", "states", "states", "a", "of", "america",
          "of", "balance"
        },
        new int[] {0, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 18, 21},
        new int[] {3, 17, 10, 10, 10, 17, 17, 17, 17, 17, 17, 20, 28},
        new String[] {
          "word", "SYNONYM", "SYNONYM", "SYNONYM", "word", "SYNONYM", "SYNONYM", "word", "SYNONYM",
          "SYNONYM", "SYNONYM", "word", "word"
        },
        new int[] {1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        new int[] {1, 4, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1});

    analyzer.close();
  }

