  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {
    // NOTE: we're abusing the "results" float[] here ...
    // - even elements are ids which must be valid 'ints'
    // - odd elements are the expected score values

    String parseableQuery = func(field, funcTemplate);

    List<String> nargs = new ArrayList<>(Arrays.asList("q", parseableQuery
            ,"fl", "*,score"
            ,"indent","on"
            ,"rows","100"));

    if (args != null) {
      for (String arg : args) {
        nargs.add(arg.replace("\0",field));
      }
    }

    List<String> tests = new ArrayList<>();

    for (int i=0; i<results.length; i+=2) {
      final int id = (int) results[i];
      assert ((float) id) == results[i];

      String xpath = "//doc[./str[@name='id']='" + id + "' "
        + " and ./float[@name='score']='" + results[i+1] + "']";
      tests.add(xpath);
    }

    assertQ(req(nargs.toArray(new String[]{}))
            , tests.toArray(new String[]{})
    );
  }

