  @Override
  public synchronized void start() throws IOException {
    if (iter == null) {
      iter = toCopy.iterator();

      // Send all file names / offsets up front to avoid ping-ping latency:
      try {

        // This means we resumed an already in-progress copy; we do this one first:
        if (current != null) {
          c.out.writeByte((byte) 0);
          c.out.writeString(current.name);
          c.out.writeVLong(current.getBytesCopied());
          totBytes += current.metaData.length;
        }

        for (Map.Entry<String, FileMetaData> ent : toCopy) {
          String fileName = ent.getKey();
          FileMetaData metaData = ent.getValue();
          totBytes += metaData.length;
          c.out.writeByte((byte) 0);
          c.out.writeString(fileName);
          c.out.writeVLong(0);
        }
        c.out.writeByte((byte) 1);
        c.flush();
        c.s.shutdownOutput();

        if (current != null) {
          // Do this only at the end, after sending all requested files, so we don't deadlock due to
          // socket buffering waiting for primary to
          // send us this length:
          long len = c.in.readVLong();
          if (len != current.metaData.length) {
            throw new IllegalStateException(
                "file "
                    + current.name
                    + ": meta data says length="
                    + current.metaData.length
                    + " but c.in says "
                    + len);
          }
        }

        dest.message(
            "SimpleCopyJob.init: done start files count="
                + toCopy.size()
                + " totBytes="
                + totBytes);

      } catch (Throwable t) {
        cancel("exc during start", t);
        throw new NodeCommunicationException("exc during start", t);
      }
    } else {
      throw new IllegalStateException("already started");
    }
  }

