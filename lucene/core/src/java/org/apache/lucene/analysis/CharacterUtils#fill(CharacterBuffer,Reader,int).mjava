  /**
   * Fills the {@link CharacterBuffer} with characters read from the given reader {@link Reader}.
   * This method tries to read <code>numChars</code> characters into the {@link CharacterBuffer},
   * each call to fill will start filling the buffer from offset <code>0</code> up to <code>numChars
   * </code>. In case code points can span across 2 java characters, this method may only fill
   * <code>numChars - 1</code> characters in order not to split in the middle of a surrogate pair,
   * even if there are remaining characters in the {@link Reader}.
   *
   * <p>This method guarantees that the given {@link CharacterBuffer} will never contain a high
   * surrogate character as the last element in the buffer unless it is the last available character
   * in the reader. In other words, high and low surrogate pairs will always be preserved across
   * buffer boarders.
   *
   * <p>A return value of <code>false</code> means that this method call exhausted the reader, but
   * there may be some bytes which have been read, which can be verified by checking whether <code>
   * buffer.getLength() &gt; 0</code>.
   *
   * @param buffer the buffer to fill.
   * @param reader the reader to read characters from.
   * @param numChars the number of chars to read
   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the
   *     buffer
   * @throws IOException if the reader throws an {@link IOException}.
   */
  public static boolean fill(CharacterBuffer buffer, Reader reader, int numChars)
      throws IOException {
    assert buffer.buffer.length >= 2;
    if (numChars < 2 || numChars > buffer.buffer.length) {
      throw new IllegalArgumentException("numChars must be >= 2 and <= the buffer size");
    }
    final char[] charBuffer = buffer.buffer;
    buffer.offset = 0;
    final int offset;

    // Install the previously saved ending high surrogate:
    if (buffer.lastTrailingHighSurrogate != 0) {
      charBuffer[0] = buffer.lastTrailingHighSurrogate;
      buffer.lastTrailingHighSurrogate = 0;
      offset = 1;
    } else {
      offset = 0;
    }

    final int read = readFully(reader, charBuffer, offset, numChars - offset);

    buffer.length = offset + read;
    final boolean result = buffer.length == numChars;
    if (buffer.length < numChars) {
      // We failed to fill the buffer. Even if the last char is a high
      // surrogate, there is nothing we can do
      return result;
    }

    if (Character.isHighSurrogate(charBuffer[buffer.length - 1])) {
      buffer.lastTrailingHighSurrogate = charBuffer[--buffer.length];
    }
    return result;
  }

