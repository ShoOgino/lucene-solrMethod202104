  /** Used by near real-time search */
  static StandardDirectoryReader open(
      IndexWriter writer,
      IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFunction,
      SegmentInfos infos,
      boolean applyAllDeletes,
      boolean writeAllDeletes)
      throws IOException {
    // IndexWriter synchronizes externally before calling
    // us, which ensures infos will not change; so there's
    // no need to process segments in reverse order
    final int numSegments = infos.size();

    final List<SegmentReader> readers = new ArrayList<>(numSegments);
    final Directory dir = writer.getDirectory();

    final SegmentInfos segmentInfos = infos.clone();
    int infosUpto = 0;
    try {
      for (int i = 0; i < numSegments; i++) {
        // NOTE: important that we use infos not
        // segmentInfos here, so that we are passing the
        // actual instance of SegmentInfoPerCommit in
        // IndexWriter's segmentInfos:
        final SegmentCommitInfo info = infos.info(i);
        assert info.info.dir == dir;
        final SegmentReader reader = readerFunction.apply(info);
        if (reader.numDocs() > 0
            || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {
          // Steal the ref:
          readers.add(reader);
          infosUpto++;
        } else {
          reader.decRef();
          segmentInfos.remove(infosUpto);
        }
      }

      writer.incRefDeleter(segmentInfos);

      StandardDirectoryReader result =
          new StandardDirectoryReader(
              dir,
              readers.toArray(new SegmentReader[readers.size()]),
              writer,
              segmentInfos,
              applyAllDeletes,
              writeAllDeletes);
      return result;
    } catch (Throwable t) {
      try {
        IOUtils.applyToAll(readers, SegmentReader::decRef);
      } catch (Throwable t1) {
        t.addSuppressed(t1);
      }
      throw t;
    }
  }

