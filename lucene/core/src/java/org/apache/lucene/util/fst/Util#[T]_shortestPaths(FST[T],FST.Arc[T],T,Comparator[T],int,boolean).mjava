  /** Starting from node, find the top N min cost completions to a final node. */
  public static <T> TopResults<T> shortestPaths(
      FST<T> fst,
      FST.Arc<T> fromNode,
      T startOutput,
      Comparator<T> comparator,
      int topN,
      boolean allowEmptyString)
      throws IOException {

    // All paths are kept, so we can pass topN for
    // maxQueueDepth and the pruning is admissible:
    TopNSearcher<T> searcher = new TopNSearcher<>(fst, topN, topN, comparator);

    // since this search is initialized with a single start node
    // it is okay to start with an empty input path here
    searcher.addStartPaths(fromNode, startOutput, allowEmptyString, new IntsRefBuilder());
    return searcher.search();
  }

