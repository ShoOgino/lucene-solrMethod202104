  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {
    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.
    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things
    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.
    Path instancePath = loader.getInstancePath();
    List<URL> urls = new ArrayList<>();

    Path libPath = instancePath.resolve("lib");
    if (Files.exists(libPath)) {
      try {
        urls.addAll(SolrResourceLoader.getURLs(libPath));
      } catch (IOException e) {
        log.warn("Couldn't add files from {} to classpath: {}", libPath, e);
      }
    }

    NodeList nodes = (NodeList) evaluate("lib", XPathConstants.NODESET);
    if (nodes != null && nodes.getLength() > 0) {
      if (!isConfigsetTrusted) {
        throw new SolrException(ErrorCode.UNAUTHORIZED,
          "The configset for this collection was uploaded without any authentication in place,"
            + " and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset"
            + " after enabling authentication and authorization.");
      }

      for (int i = 0; i < nodes.getLength(); i++) {
        Node node = nodes.item(i);
        String baseDir = DOMUtil.getAttr(node, "dir");
        String path = DOMUtil.getAttr(node, PATH);
        if (null != baseDir) {
          // :TODO: add support for a simpler 'glob' mutually exclusive of regex
          Path dir = instancePath.resolve(baseDir);
          String regex = DOMUtil.getAttr(node, "regex");
          try {
            if (regex == null)
              urls.addAll(SolrResourceLoader.getURLs(dir));
            else
              urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));
          } catch (IOException e) {
            log.warn("Couldn't add files from {} filtered by {} to classpath: {}", dir, regex, e);
          }
        } else if (null != path) {
          final Path dir = instancePath.resolve(path);
          try {
            urls.add(dir.toUri().toURL());
          } catch (MalformedURLException e) {
            log.warn("Couldn't add file {} to classpath: {}", dir, e);
          }
        } else {
          throw new RuntimeException("lib: missing mandatory attributes: 'dir' or 'path'");
        }
      }
    }

    if (!urls.isEmpty()) {
      loader.addToClassLoader(urls);
      loader.reloadLuceneSPI();
    }
  }

