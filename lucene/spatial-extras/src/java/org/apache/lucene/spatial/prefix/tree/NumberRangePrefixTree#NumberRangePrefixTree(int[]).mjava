  protected NumberRangePrefixTree(int[] maxSubCellsByLevel) {
    super(DUMMY_CTX, maxSubCellsByLevel.length);
    this.maxSubCellsByLevel = maxSubCellsByLevel;

    // Fill termLenByLevel
    this.termLenByLevel = new int[maxLevels + 1];
    termLenByLevel[0] = 0;
    final int MAX_STATES = 1 << 15; // 1 bit less than 2 bytes
    for (int level = 1; level <= maxLevels; level++) {
      final int states = maxSubCellsByLevel[level - 1];
      if (states >= MAX_STATES || states <= 1) {
        throw new IllegalArgumentException(
            "Max states is " + MAX_STATES + ", given " + states + " at level " + level);
      }
      boolean twoBytes = states >= 256;
      termLenByLevel[level] = termLenByLevel[level - 1] + (twoBytes ? 2 : 1);
    }
    maxTermLen = termLenByLevel[maxLevels] + 1; // + 1 for leaf byte

    // Fill levelByTermLen
    levelByTermLen = new int[maxTermLen];
    levelByTermLen[0] = 0;
    for (int level = 1; level < termLenByLevel.length; level++) {
      int termLen = termLenByLevel[level];
      int prevTermLen = termLenByLevel[level - 1];
      if (termLen - prevTermLen == 2) { // 2 byte delta
        // if the term doesn't completely cover this cell then it must be a leaf of the prior.
        levelByTermLen[termLen - 1] = -1; // won't be used; otherwise erroneous
        levelByTermLen[termLen] = level;
      } else { // 1 byte delta
        assert termLen - prevTermLen == 1;
        levelByTermLen[termLen] = level;
      }
    }
  }

