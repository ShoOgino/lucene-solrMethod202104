  public void testSeedDocumentMap_queryFieldsSet_shouldBuildQueryFromSpecifiedFieldnamesOnly()
      throws Exception {
    mlt.setMinTermFreq(2);

    String mltField = "text";

    mlt.setFieldNames(new String[] {mltField});

    Map<String, Collection<Object>> seedDocument = new HashMap<>();
    String notMltField = "text2";
    String textValue1 = "apache apache lucene lucene";
    String textValue2 = "apache2 apache2 lucene2 lucene2 lucene2";
    seedDocument.put(mltField, Arrays.asList(textValue1));
    seedDocument.put(notMltField, Arrays.asList(textValue2));

    HashSet<Term> expectedTerms = new HashSet<>();
    expectedTerms.add(new Term(mltField, "apache"));
    expectedTerms.add(new Term(mltField, "lucene"));

    HashSet<Term> unexpectedTerms = new HashSet<>();
    unexpectedTerms.add(new Term(mltField, "apache2"));
    unexpectedTerms.add(new Term(mltField, "lucene2"));
    unexpectedTerms.add(new Term(notMltField, "apache2"));
    unexpectedTerms.add(new Term(notMltField, "lucene2"));

    BooleanQuery query = (BooleanQuery) mlt.like(seedDocument);
    Collection<BooleanClause> clauses = query.clauses();
    HashSet<Term> clausesTerms = new HashSet<>();
    for (BooleanClause clause : clauses) {
      Term term = ((TermQuery) clause.getQuery()).getTerm();
      clausesTerms.add(term);
    }

    assertEquals("Expected 2 clauses only!", 2, clauses.size());

    // None of the Not Expected terms is in the query
    for (BooleanClause clause : clauses) {
      Term term = ((TermQuery) clause.getQuery()).getTerm();
      assertFalse(
          "Unexpected term '" + term + "' found in query terms", unexpectedTerms.contains(term));
    }

    // All of the Expected terms are in the query
    for (Term expectedTerm : expectedTerms) {
      assertTrue(
          "Expected term '" + expectedTerm + "' is not found in query terms",
          clausesTerms.contains(expectedTerm));
    }
  }

