  public void testClose() {
    {
      DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);
      assertTrue(queue.isOpen());
      queue.close();
      if (random().nextBoolean()) {
        queue.close(); // double close
      }
      expectThrows(AlreadyClosedException.class, () -> queue.addDelete(new Term("foo", "bar")));
      expectThrows(AlreadyClosedException.class, () -> queue.freezeGlobalBuffer(null));
      expectThrows(AlreadyClosedException.class, () -> queue.addDelete(new MatchNoDocsQuery()));
      expectThrows(
          AlreadyClosedException.class,
          () ->
              queue.addDocValuesUpdates(
                  new DocValuesUpdate.NumericDocValuesUpdate(new Term("foo", "bar"), "foo", 1)));
      expectThrows(AlreadyClosedException.class, () -> queue.add(null));
      assertNull(queue.maybeFreezeGlobalBuffer()); // this is fine
      assertFalse(queue.isOpen());
    }
    {
      DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);
      queue.addDelete(new Term("foo", "bar"));
      expectThrows(IllegalStateException.class, () -> queue.close());
      assertTrue(queue.isOpen());
      queue.tryApplyGlobalSlice();
      queue.freezeGlobalBuffer(null);
      queue.close();
      assertFalse(queue.isOpen());
    }
  }

