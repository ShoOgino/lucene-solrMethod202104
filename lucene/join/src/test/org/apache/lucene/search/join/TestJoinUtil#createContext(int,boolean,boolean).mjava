  private IndexIterationContext createContext(
      int nDocs, boolean multipleValuesPerDocument, boolean globalOrdinalJoin) throws IOException {
    if (globalOrdinalJoin) {
      assertFalse(
          "ordinal join doesn't support multiple join values per document",
          multipleValuesPerDocument);
    }

    Directory dir = newDirectory();
    final Random random = random();
    RandomIndexWriter w =
        new RandomIndexWriter(
            random,
            dir,
            newIndexWriterConfig(new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));

    IndexIterationContext context = new IndexIterationContext();
    int numRandomValues = nDocs / RandomNumbers.randomIntBetween(random, 1, 4);
    context.randomUniqueValues = new String[numRandomValues];
    Set<String> trackSet = new HashSet<>();
    context.randomFrom = new boolean[numRandomValues];
    for (int i = 0; i < numRandomValues; i++) {
      String uniqueRandomValue;
      do {
        // the trick is to generate values which will be ordered similarly for string, ints&longs,
        // positive nums makes it easier
        //
        // Additionally in order to avoid precision loss when joining via a float field we can't
        // generate values higher than
        // 0xFFFFFF, so we can't use Integer#MAX_VALUE as upper bound here:
        final int nextInt = random.nextInt(0xFFFFFF);
        uniqueRandomValue = String.format(Locale.ROOT, "%08x", nextInt);
        assert nextInt == Integer.parseUnsignedInt(uniqueRandomValue, 16);
      } while ("".equals(uniqueRandomValue) || trackSet.contains(uniqueRandomValue));

      // Generate unique values and empty strings aren't allowed.
      trackSet.add(uniqueRandomValue);

      context.randomFrom[i] = random.nextBoolean();
      context.randomUniqueValues[i] = uniqueRandomValue;
    }

    List<String> randomUniqueValuesReplica =
        new ArrayList<>(Arrays.asList(context.randomUniqueValues));

    RandomDoc[] docs = new RandomDoc[nDocs];
    for (int i = 0; i < nDocs; i++) {
      String id = Integer.toString(i);
      int randomI = random.nextInt(context.randomUniqueValues.length);
      String value = context.randomUniqueValues[randomI];
      Document document = new Document();
      document.add(newTextField(random, "id", id, Field.Store.YES));
      document.add(newTextField(random, "value", value, Field.Store.NO));

      boolean from = context.randomFrom[randomI];
      int numberOfLinkValues =
          multipleValuesPerDocument
              ? Math.min(2 + random.nextInt(10), context.randomUniqueValues.length)
              : 1;
      docs[i] = new RandomDoc(id, numberOfLinkValues, value, from);
      if (globalOrdinalJoin) {
        document.add(newStringField("type", from ? "from" : "to", Field.Store.NO));
      }
      final List<String> subValues;
      {
        int start =
            randomUniqueValuesReplica.size() == numberOfLinkValues
                ? 0
                : random.nextInt(randomUniqueValuesReplica.size() - numberOfLinkValues);
        subValues = randomUniqueValuesReplica.subList(start, start + numberOfLinkValues);
        Collections.shuffle(subValues, random);
      }
      for (String linkValue : subValues) {

        assert !docs[i].linkValues.contains(linkValue);
        docs[i].linkValues.add(linkValue);
        if (from) {
          if (!context.fromDocuments.containsKey(linkValue)) {
            context.fromDocuments.put(linkValue, new ArrayList<>());
          }
          if (!context.randomValueFromDocs.containsKey(value)) {
            context.randomValueFromDocs.put(value, new ArrayList<>());
          }

          context.fromDocuments.get(linkValue).add(docs[i]);
          context.randomValueFromDocs.get(value).add(docs[i]);
          addLinkFields(
              random, document, "from", linkValue, multipleValuesPerDocument, globalOrdinalJoin);

        } else {
          if (!context.toDocuments.containsKey(linkValue)) {
            context.toDocuments.put(linkValue, new ArrayList<>());
          }
          if (!context.randomValueToDocs.containsKey(value)) {
            context.randomValueToDocs.put(value, new ArrayList<>());
          }

          context.toDocuments.get(linkValue).add(docs[i]);
          context.randomValueToDocs.get(value).add(docs[i]);
          addLinkFields(
              random, document, "to", linkValue, multipleValuesPerDocument, globalOrdinalJoin);
        }
      }

      w.addDocument(document);
      if (random.nextInt(10) == 4) {
        w.commit();
      }
      if (VERBOSE) {
        System.out.println("Added document[" + docs[i].id + "]: " + document);
      }
    }

    if (random.nextBoolean()) {
      if (VERBOSE) {
        System.out.println("TEST: now force merge");
      }
      w.forceMerge(1);
    }
    w.close();

    // Pre-compute all possible hits for all unique random values. On top of this also compute all
    // possible score for
    // any ScoreMode.
    DirectoryReader topLevelReader = DirectoryReader.open(dir);
    IndexSearcher searcher = newSearcher(topLevelReader);
    for (int i = 0; i < context.randomUniqueValues.length; i++) {
      String uniqueRandomValue = context.randomUniqueValues[i];
      final String fromField;
      final String toField;
      final Map<String, Map<Integer, JoinScore>> queryVals;
      if (context.randomFrom[i]) {
        fromField = "from";
        toField = "to";
        queryVals = context.fromHitsToJoinScore;
      } else {
        fromField = "to";
        toField = "from";
        queryVals = context.toHitsToJoinScore;
      }
      final Map<BytesRef, JoinScore> joinValueToJoinScores = new HashMap<>();
      if (multipleValuesPerDocument) {
        searcher.search(
            new TermQuery(new Term("value", uniqueRandomValue)),
            new SimpleCollector() {

              private Scorable scorer;
              private SortedSetDocValues docTermOrds;

              @Override
              public void collect(int doc) throws IOException {
                if (doc > docTermOrds.docID()) {
                  docTermOrds.advance(doc);
                }
                if (doc == docTermOrds.docID()) {
                  long ord;
                  while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
                    final BytesRef joinValue = docTermOrds.lookupOrd(ord);
                    JoinScore joinScore = joinValueToJoinScores.get(joinValue);
                    if (joinScore == null) {
                      joinValueToJoinScores.put(
                          BytesRef.deepCopyOf(joinValue), joinScore = new JoinScore());
                    }
                    joinScore.addScore(scorer.score());
                  }
                }
              }

              @Override
              protected void doSetNextReader(LeafReaderContext context) throws IOException {
                docTermOrds = DocValues.getSortedSet(context.reader(), fromField);
              }

              @Override
              public void setScorer(Scorable scorer) {
                this.scorer = scorer;
              }

              @Override
              public org.apache.lucene.search.ScoreMode scoreMode() {
                return org.apache.lucene.search.ScoreMode.COMPLETE;
              }
            });
      } else {
        searcher.search(
            new TermQuery(new Term("value", uniqueRandomValue)),
            new SimpleCollector() {

              private Scorable scorer;
              private BinaryDocValues terms;

              @Override
              public void collect(int doc) throws IOException {
                final BytesRef joinValue;
                if (terms.advanceExact(doc)) {
                  joinValue = terms.binaryValue();
                } else {
                  // missing;
                  return;
                }

                JoinScore joinScore = joinValueToJoinScores.get(joinValue);
                if (joinScore == null) {
                  joinValueToJoinScores.put(
                      BytesRef.deepCopyOf(joinValue), joinScore = new JoinScore());
                }
                if (VERBOSE) {
                  System.out.println(
                      "expected val="
                          + joinValue.utf8ToString()
                          + " expected score="
                          + scorer.score());
                }
                joinScore.addScore(scorer.score());
              }

              @Override
              protected void doSetNextReader(LeafReaderContext context) throws IOException {
                terms = DocValues.getBinary(context.reader(), fromField);
              }

              @Override
              public void setScorer(Scorable scorer) {
                this.scorer = scorer;
              }

              @Override
              public org.apache.lucene.search.ScoreMode scoreMode() {
                return org.apache.lucene.search.ScoreMode.COMPLETE;
              }
            });
      }

      final Map<Integer, JoinScore> docToJoinScore = new HashMap<>();
      if (multipleValuesPerDocument) {
        Terms terms = MultiTerms.getTerms(topLevelReader, toField);
        if (terms != null) {
          PostingsEnum postingsEnum = null;
          SortedSet<BytesRef> joinValues = new TreeSet<>();
          joinValues.addAll(joinValueToJoinScores.keySet());
          for (BytesRef joinValue : joinValues) {
            TermsEnum termsEnum = terms.iterator();
            if (termsEnum.seekExact(joinValue)) {
              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);
              JoinScore joinScore = joinValueToJoinScores.get(joinValue);

              for (int doc = postingsEnum.nextDoc();
                  doc != DocIdSetIterator.NO_MORE_DOCS;
                  doc = postingsEnum.nextDoc()) {
                // First encountered join value determines the score.
                // Something to keep in mind for many-to-many relations.
                if (!docToJoinScore.containsKey(doc)) {
                  docToJoinScore.put(doc, joinScore);
                }
              }
            }
          }
        }
      } else {
        searcher.search(
            new MatchAllDocsQuery(),
            new SimpleCollector() {

              private BinaryDocValues terms;
              private int docBase;

              @Override
              public void collect(int doc) throws IOException {
                final BytesRef joinValue;
                if (terms.advanceExact(doc)) {
                  joinValue = terms.binaryValue();
                } else {
                  // missing;
                  joinValue = new BytesRef(BytesRef.EMPTY_BYTES);
                }
                JoinScore joinScore = joinValueToJoinScores.get(joinValue);
                if (joinScore == null) {
                  return;
                }
                docToJoinScore.put(docBase + doc, joinScore);
              }

              @Override
              protected void doSetNextReader(LeafReaderContext context) throws IOException {
                terms = DocValues.getBinary(context.reader(), toField);
                docBase = context.docBase;
              }

              @Override
              public void setScorer(Scorable scorer) {}

              @Override
              public org.apache.lucene.search.ScoreMode scoreMode() {
                return org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES;
              }
            });
      }
      queryVals.put(uniqueRandomValue, docToJoinScore);
    }

    if (globalOrdinalJoin) {
      SortedDocValues[] values = new SortedDocValues[topLevelReader.leaves().size()];
      for (LeafReaderContext leadContext : topLevelReader.leaves()) {
        values[leadContext.ord] = DocValues.getSorted(leadContext.reader(), "join_field");
      }
      context.ordinalMap = OrdinalMap.build(null, values, PackedInts.DEFAULT);
    }

    context.searcher = searcher;
    context.dir = dir;
    return context;
  }

