  /**
   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.
   *
   * @param points The points to order.
   * @return The list of ordered points anti-clockwise.
   */
  protected List<GeoPoint> orderPoints(List<GeoPoint> points) {
    double x = 0;
    double y = 0;
    double z = 0;
    // get center of mass
    for (GeoPoint point : points) {
      x += point.x;
      y += point.y;
      z += point.z;
    }
    Map<Double, GeoPoint> pointWithAngle = new HashMap<>();
    // get angle respect center of mass
    for (GeoPoint point : points) {
      GeoPoint center = new GeoPoint(x / points.size(), y / points.size(), z / points.size());
      double cs =
          Math.sin(center.getLatitude()) * Math.sin(point.getLatitude())
              + Math.cos(center.getLatitude())
                  * Math.cos(point.getLatitude())
                  * Math.cos(point.getLongitude() - center.getLongitude());
      double posAng =
          Math.atan2(
              Math.cos(center.getLatitude())
                  * Math.cos(point.getLatitude())
                  * Math.sin(point.getLongitude() - center.getLongitude()),
              Math.sin(point.getLatitude()) - Math.sin(center.getLatitude()) * cs);
      pointWithAngle.put(posAng, point);
    }
    // order points
    List<Double> angles = new ArrayList<>(pointWithAngle.keySet());
    Collections.sort(angles);
    Collections.reverse(angles);
    List<GeoPoint> orderedPoints = new ArrayList<>();
    for (Double d : angles) {
      orderedPoints.add(pointWithAngle.get(d));
    }
    return orderedPoints;
  }

