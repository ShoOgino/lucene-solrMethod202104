  public void testBackupBeforeFirstCommit() throws Exception {

    // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created
    // an "empty" commit point that can be backed up...
    final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();
    assertNotNull(empty);
    
    // white box sanity check that the commit point of the "reader" available from SolrIndexSearcher
    // matches the commit point that IDPW claims is the "latest"
    // 
    // this is important to ensure that backup/snapshot behavior is consistent with user expection
    // when using typical commit + openSearcher
    assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));

    assertEquals(1L, empty.getGeneration());
    assertNotNull(empty.getSegmentsFileName());
    final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();
    
    final CoreContainer cores = h.getCoreContainer();
    final CoreAdminHandler admin = new CoreAdminHandler(cores);

    final File backupDir = createTempDir().toFile();
    cores.getAllowPaths().add(backupDir.toPath());

    { // first a backup before we've ever done *anything*...
      SolrQueryResponse resp = new SolrQueryResponse();
      admin.handleRequestBody
        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
             "core", DEFAULT_TEST_COLLECTION_NAME,
             "name", "empty_backup1",
             "location", backupDir.getAbsolutePath(),
             CoreAdminParams.BACKUP_INCREMENTAL, "false"),
         resp);
      assertNull("Backup should have succeeded", resp.getException());
      simpleBackupCheck(new File(backupDir, "snapshot.empty_backup1"),
                        0, initialEmptyIndexSegmentFileName);
    }

    { // Empty (named) snapshot..
      SolrQueryResponse resp = new SolrQueryResponse();
      admin.handleRequestBody
        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),
             "core", DEFAULT_TEST_COLLECTION_NAME,
             "commitName", "empty_snapshotA"),
         resp);
      assertNull("Snapshot A should have succeeded", resp.getException());
    }
    
    assertU(adoc("id", "1")); // uncommitted

    { // second backup w/uncommited docs
      SolrQueryResponse resp = new SolrQueryResponse();
      admin.handleRequestBody
        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
             "core", DEFAULT_TEST_COLLECTION_NAME,
             "name", "empty_backup2",
             "location", backupDir.getAbsolutePath(),
             CoreAdminParams.BACKUP_INCREMENTAL, "false"),
         resp);
      assertNull("Backup should have succeeded", resp.getException());
      simpleBackupCheck(new File(backupDir, "snapshot.empty_backup2"),
                        0, initialEmptyIndexSegmentFileName);
    }
    
    { // Second empty (named) snapshot..
      SolrQueryResponse resp = new SolrQueryResponse();
      admin.handleRequestBody
        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),
             "core", DEFAULT_TEST_COLLECTION_NAME,
             "commitName", "empty_snapshotB"),
         resp);
      assertNull("Snapshot A should have succeeded", resp.getException());
    }

    // Committing the doc now should not affect the existing backups or snapshots...
    assertU(commit());
    
    for (String name : Arrays.asList("empty_backup1", "empty_backup2")) {
      simpleBackupCheck(new File(backupDir, "snapshot." + name ),
                        0, initialEmptyIndexSegmentFileName);
    }

    // Make backups from each of the snapshots and check they are still empty as well...
    for (String snapName : Arrays.asList("empty_snapshotA", "empty_snapshotB")) {
      String name = "empty_backup_from_" + snapName;
      SolrQueryResponse resp = new SolrQueryResponse();
      
      admin.handleRequestBody
        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
             "core", DEFAULT_TEST_COLLECTION_NAME,
             "name", name,
             "commitName", snapName,
             "location", backupDir.getAbsolutePath(),
             CoreAdminParams.BACKUP_INCREMENTAL, "false"),
         resp);
      assertNull("Backup "+name+" should have succeeded", resp.getException());
      simpleBackupCheck(new File(backupDir, "snapshot." + name),
                        0, initialEmptyIndexSegmentFileName);
      
    }
    admin.close();
  }

