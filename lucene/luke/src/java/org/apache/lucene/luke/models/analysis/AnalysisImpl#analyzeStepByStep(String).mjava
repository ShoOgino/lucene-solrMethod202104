  @Override
  public StepByStepResult analyzeStepByStep(String text) {
    Objects.requireNonNull(text);
    if (analyzer == null) {
      throw new LukeException("Analyzer is not set.");
    }

    if (!(analyzer instanceof CustomAnalyzer)) {
      throw new LukeException("Analyzer is not CustomAnalyzer.");
    }

    List<NamedTokens> namedTokens = new ArrayList<>();
    List<CharfilteredText> charfilteredTexts = new ArrayList<>();

    try {
      CustomAnalyzer customAnalyzer = (CustomAnalyzer) analyzer;
      final List<CharFilterFactory> charFilterFactories = customAnalyzer.getCharFilterFactories();
      Reader reader = new StringReader(text);
      String charFilteredSource = text;
      if (charFilterFactories.size() > 0) {
        Reader cs = reader;
        for (CharFilterFactory charFilterFactory : charFilterFactories) {
          cs = charFilterFactory.create(reader);
          Reader readerForWriteOut = new StringReader(charFilteredSource);
          readerForWriteOut = charFilterFactory.create(readerForWriteOut);
          charFilteredSource = writeCharStream(readerForWriteOut);
          charfilteredTexts.add(
              new CharfilteredText(
                  CharFilterFactory.findSPIName(charFilterFactory.getClass()), charFilteredSource));
        }
        reader = cs;
      }

      final TokenizerFactory tokenizerFactory = customAnalyzer.getTokenizerFactory();
      final List<TokenFilterFactory> tokenFilterFactories =
          customAnalyzer.getTokenFilterFactories();

      TokenStream tokenStream = tokenizerFactory.create();
      ((Tokenizer) tokenStream).setReader(reader);
      List<Token> tokens = new ArrayList<>();
      List<AttributeSource> attributeSources = analyzeTokenStream(tokenStream, tokens);
      namedTokens.add(
          new NamedTokens(TokenizerFactory.findSPIName(tokenizerFactory.getClass()), tokens));

      ListBasedTokenStream listBasedTokenStream =
          new ListBasedTokenStream(tokenStream, attributeSources);
      for (TokenFilterFactory tokenFilterFactory : tokenFilterFactories) {
        tokenStream = tokenFilterFactory.create(listBasedTokenStream);
        tokens = new ArrayList<>();
        attributeSources = analyzeTokenStream(tokenStream, tokens);
        namedTokens.add(
            new NamedTokens(TokenFilterFactory.findSPIName(tokenFilterFactory.getClass()), tokens));
        try {
          listBasedTokenStream.close();
        } catch (IOException e) {
          // do nothing;
        }
        listBasedTokenStream = new ListBasedTokenStream(listBasedTokenStream, attributeSources);
      }
      try {
        listBasedTokenStream.close();
      } catch (IOException e) {
        // do nothing.
      } finally {
        reader.close();
      }
      return new StepByStepResult(charfilteredTexts, namedTokens);
    } catch (Exception e) {
      throw new LukeException(e.getMessage(), e);
    }
  }

