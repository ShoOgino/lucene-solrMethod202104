  public void testSparseVectors() throws Exception {
    int numDocs = atLeast(1000);
    int numFields = TestUtil.nextInt(random(), 1, 10);
    int[] fieldDocCounts = new int[numFields];
    float[] fieldTotals= new float[numFields];
    int[] fieldDims = new int[numFields];
    ScoreFunction[] fieldScoreFunctions = new ScoreFunction[numFields];
    for (int i = 0; i < numFields; i++) {
      fieldDims[i] = random().nextInt(20) + 1;
      fieldScoreFunctions[i] = ScoreFunction.values()[random().nextInt(ScoreFunction.values().length)];
    }
    try (Directory dir = newDirectory();
         RandomIndexWriter w = new RandomIndexWriter(random(), dir, createIndexWriterConfig())) {
      for (int i = 0; i < numDocs; i++) {
        Document doc = new Document();
        for (int field = 0; field < numFields; field++) {
          String fieldName = "int" + field;
          if (random().nextInt(100) == 17) {
            float[] v = randomVector(fieldDims[field]);
            doc.add(new VectorField(fieldName, v, fieldScoreFunctions[field]));
            fieldDocCounts[field]++;
            fieldTotals[field] += v[0];
          }
        }
        w.addDocument(doc);
      }

      try (IndexReader r = w.getReader()) {
        for (int field = 0; field < numFields; field++) {
          int docCount = 0;
          float checksum = 0;
          String fieldName = "int" + field;
          for (LeafReaderContext ctx : r.leaves()) {
            VectorValues vectors = ctx.reader().getVectorValues(fieldName);
            if (vectors != null) {
              docCount += vectors.size();
              while (vectors.nextDoc() != NO_MORE_DOCS) {
                checksum += vectors.vectorValue()[0];
              }
            }
          }
          assertEquals(fieldDocCounts[field], docCount);
          assertEquals(fieldTotals[field], checksum, 1e-5);
        }
      }
    }
  }

