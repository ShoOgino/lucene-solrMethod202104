  /** Returns true if the box crosses any edge in this edge subtree */
  boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {
    // we just have to cross one edge to answer the question, so we descend the tree and return when
    // we do.
    if (minY <= max) {
      // we compute line intersections of every polygon edge with every box line.
      // if we find one, return true.
      // for each box line (AB):
      //   for each poly line (CD):
      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0
      double cy = y1;
      double dy = y2;
      double cx = x1;
      double dx = x2;

      // optimization: see if either end of the line segment is contained by the rectangle
      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX)
          || Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {
        return true;
      }

      // optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
      // if not, don't waste our time trying more complicated stuff
      boolean outside =
          (cy < minY && dy < minY)
              || (cy > maxY && dy > maxY)
              || (cx < minX && dx < minX)
              || (cx > maxX && dx > maxX);

      if (outside == false) {
        if (includeBoundary == true) {
          if (lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY)
              || lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY)
              || lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY)
              || lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {
            // include boundaries: ensures box edges that terminate on the polygon are included
            return true;
          }
        } else {
          if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY)
              || lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY)
              || lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY)
              || lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {
            return true;
          }
        }
      }

      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {
        return true;
      }

      if (right != null
          && maxY >= low
          && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {
        return true;
      }
    }
    return false;
  }

