  public void testEquals_globalOrdinalsJoin() throws Exception {
    final int numDocs = atLeast(random(), 50);
    try (final Directory dir = newDirectory()) {
      try (final RandomIndexWriter w =
          new RandomIndexWriter(
              random(),
              dir,
              newIndexWriterConfig(new MockAnalyzer(random()))
                  .setMergePolicy(newLogMergePolicy()))) {
        String joinField = "field";
        for (int id = 0; id < numDocs; id++) {
          Document doc = new Document();
          doc.add(new TextField("id", "" + id, Field.Store.NO));
          doc.add(new TextField("name", "name" + (id % 7), Field.Store.NO));
          doc.add(new SortedDocValuesField(joinField, new BytesRef("" + random().nextInt(13))));
          w.addDocument(doc);
        }

        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);
        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);
        scoreModes.remove(scoreMode1);
        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);

        final Query x;
        try (IndexReader r = w.getReader()) {
          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];
          for (int i = 0; i < values.length; i++) {
            LeafReader leafReader = r.leaves().get(i).reader();
            values[i] = DocValues.getSorted(leafReader, joinField);
          }
          OrdinalMap ordinalMap = OrdinalMap.build(null, values, PackedInts.DEFAULT);
          IndexSearcher indexSearcher = new IndexSearcher(r);
          x =
              JoinUtil.createJoinQuery(
                  joinField,
                  new TermQuery(new Term("name", "name5")),
                  new MatchAllDocsQuery(),
                  indexSearcher,
                  scoreMode1,
                  ordinalMap);
          assertEquals(
              "identical calls to createJoinQuery",
              x,
              JoinUtil.createJoinQuery(
                  joinField,
                  new TermQuery(new Term("name", "name5")),
                  new MatchAllDocsQuery(),
                  indexSearcher,
                  scoreMode1,
                  ordinalMap));

          assertFalse(
              "score mode (" + scoreMode1 + " != " + scoreMode2 + "), but queries are equal",
              x.equals(
                  JoinUtil.createJoinQuery(
                      joinField,
                      new TermQuery(new Term("name", "name5")),
                      new MatchAllDocsQuery(),
                      indexSearcher,
                      scoreMode2,
                      ordinalMap)));
          assertFalse(
              "fromQuery (name:name5 != name:name6) but queries equals",
              x.equals(
                  JoinUtil.createJoinQuery(
                      joinField,
                      new TermQuery(new Term("name", "name6")),
                      new MatchAllDocsQuery(),
                      indexSearcher,
                      scoreMode1,
                      ordinalMap)));
        }

        for (int i = 0; i < 13; i++) {
          Document doc = new Document();
          doc.add(new TextField("id", "new_id", Field.Store.NO));
          doc.add(new TextField("name", "name5", Field.Store.NO));
          doc.add(new SortedDocValuesField(joinField, new BytesRef("" + i)));
          w.addDocument(doc);
        }
        try (IndexReader r = w.getReader()) {
          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];
          for (int i = 0; i < values.length; i++) {
            LeafReader leafReader = r.leaves().get(i).reader();
            values[i] = DocValues.getSorted(leafReader, joinField);
          }
          OrdinalMap ordinalMap = OrdinalMap.build(null, values, PackedInts.DEFAULT);
          IndexSearcher indexSearcher = new IndexSearcher(r);
          assertFalse(
              "Query shouldn't be equal, because different index readers ",
              x.equals(
                  JoinUtil.createJoinQuery(
                      joinField,
                      new TermQuery(new Term("name", "name5")),
                      new MatchAllDocsQuery(),
                      indexSearcher,
                      scoreMode1,
                      ordinalMap)));
        }
      }
    }
  }

