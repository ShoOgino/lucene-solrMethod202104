  private void addDiverseNeighbors(int node, NeighborQueue candidates, RandomAccessVectorValues vectors) throws IOException {
    // For each of the beamWidth nearest candidates (going from best to worst), select it only if it is closer to target
    // than it is to any of the already-selected neighbors (ie selected in this method, since the node is new and has no
    // prior neighbors).
    NeighborArray neighbors = hnsw.getNeighbors(node);
    assert neighbors.size() == 0; // new node
    popToScratch(candidates);
    selectDiverse(neighbors, scratch, vectors);

    // Link the selected nodes to the new node, and the new node to the selected nodes (again applying diversity heuristic)
    int size = neighbors.size();
    for (int i = 0; i < size; i++) {
      int nbr = neighbors.node[i];
      NeighborArray nbrNbr = hnsw.getNeighbors(nbr);
      nbrNbr.add(node, neighbors.score[i]);
      if (nbrNbr.size() > maxConn) {
        diversityUpdate(nbrNbr, buildVectors);
      }
    }
  }

