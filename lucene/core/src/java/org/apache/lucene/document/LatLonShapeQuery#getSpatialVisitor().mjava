  @Override
  protected SpatialVisitor getSpatialVisitor() {

    return new SpatialVisitor() {
      @Override
      protected Relation relate(byte[] minTriangle, byte[] maxTriangle) {
        double minLat =
            GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(minTriangle, 0));
        double minLon =
            GeoEncodingUtils.decodeLongitude(
                NumericUtils.sortableBytesToInt(minTriangle, ShapeField.BYTES));
        double maxLat =
            GeoEncodingUtils.decodeLatitude(
                NumericUtils.sortableBytesToInt(maxTriangle, 2 * ShapeField.BYTES));
        double maxLon =
            GeoEncodingUtils.decodeLongitude(
                NumericUtils.sortableBytesToInt(maxTriangle, 3 * ShapeField.BYTES));

        // check internal node against query
        return component2D.relate(minLon, maxLon, minLat, maxLat);
      }

      @Override
      protected Predicate<byte[]> intersects() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                return component2D.contains(alon, alat);
              }
            case LINE:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);
                double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);
                return component2D.intersectsLine(alon, alat, blon, blat);
              }
            case TRIANGLE:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);
                double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);
                double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);
                double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);
                return component2D.intersectsTriangle(alon, alat, blon, blat, clon, clat);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }

      @Override
      protected Predicate<byte[]> within() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                return component2D.contains(alon, alat);
              }
            case LINE:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);
                double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);
                return component2D.containsLine(alon, alat, blon, blat);
              }
            case TRIANGLE:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);
                double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);
                double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);
                double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);
                return component2D.containsTriangle(alon, alat, blon, blat, clon, clat);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }

      @Override
      protected Function<byte[], Component2D.WithinRelation> contains() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                return component2D.withinPoint(alon, alat);
              }
            case LINE:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);
                double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);
                return component2D.withinLine(alon, alat, scratchTriangle.ab, blon, blat);
              }
            case TRIANGLE:
              {
                double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);
                double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);
                double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);
                double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);
                double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);
                double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);
                return component2D.withinTriangle(
                    alon,
                    alat,
                    scratchTriangle.ab,
                    blon,
                    blat,
                    scratchTriangle.bc,
                    clon,
                    clat,
                    scratchTriangle.ca);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }
    };
  }

