  /**
   * Tests scoring across a bunch of random terms/corpora/frequencies for each possible document
   * length. It does the following checks:
   *
   * <ul>
   *   <li>scores are non-negative and finite.
   *   <li>score matches the explanation exactly.
   *   <li>internal explanations calculations are sane (e.g. sum of: and so on actually compute
   *       sums)
   *   <li>scores don't decrease as term frequencies increase: e.g. score(freq=N + 1) &gt;=
   *       score(freq=N)
   *   <li>scores don't decrease as documents get shorter, e.g. score(len=M) &gt;= score(len=M+1)
   *   <li>scores don't decrease as terms get rarer, e.g. score(term=N) &gt;= score(term=N+1)
   *   <li>scoring works for floating point frequencies (e.g. sloppy phrase and span queries will
   *       work)
   *   <li>scoring works for reasonably large 64-bit statistic values (e.g. distributed search will
   *       work)
   *   <li>scoring works for reasonably large boost values (0 .. Integer.MAX_VALUE, e.g. query
   *       boosts will work)
   *   <li>scoring works for parameters randomized within valid ranges (see {@link
   *       #getSimilarity(Random)})
   * </ul>
   */
  public void testRandomScoring() throws Exception {
    Random random = random();
    final int iterations = atLeast(1);
    for (int i = 0; i < iterations; i++) {
      // pull a new similarity to switch up parameters
      Similarity similarity = getSimilarity(random);
      for (int j = 0; j < 3; j++) {
        // for each norm value...
        for (int k = 1; k < 256; k++) {
          CollectionStatistics corpus = newCorpus(random, k);
          for (int l = 0; l < 10; l++) {
            TermStatistics term = newTerm(random, corpus);
            final float freq;
            if (term.totalTermFreq() == term.docFreq()) {
              // omit TF
              freq = 1;
            } else if (term.docFreq() == 1) {
              // only one document, all the instances must be here.
              freq = Math.toIntExact(term.totalTermFreq());
            } else {
              // there is at least one other document, and those must have at least 1 instance each.
              int upperBound =
                  Math.toIntExact(
                      Math.min(term.totalTermFreq() - term.docFreq() + 1, Integer.MAX_VALUE));
              if (random.nextBoolean()) {
                // integer freq
                switch (random.nextInt(3)) {
                  case 0:
                    // smallest freq
                    freq = 1;
                    break;
                  case 1:
                    // largest freq
                    freq = upperBound;
                    break;
                  default:
                    // random freq
                    freq = TestUtil.nextInt(random, 1, upperBound);
                    break;
                }
              } else {
                // float freq
                float freqCandidate;
                switch (random.nextInt(2)) {
                  case 0:
                    // smallest freq
                    freqCandidate = Float.MIN_VALUE;
                    break;
                  default:
                    // random freq
                    freqCandidate = upperBound * random.nextFloat();
                    break;
                }
                // we need to be 2nd float value at a minimum, the pairwise test will check
                // MIN_VALUE in this case.
                // this avoids testing frequencies of 0 which seem wrong to allow (we should enforce
                // computeSlopFactor etc)
                if (freqCandidate <= Float.MIN_VALUE) {
                  freqCandidate = Math.nextUp(Float.MIN_VALUE);
                }
                freq = freqCandidate;
              }
            }
            // we just limit the test to "reasonable" boost values but don't enforce this anywhere.
            // too big, and you are asking for overflow. that's hard for a sim to enforce (but
            // definitely possible)
            // for now, we just want to detect overflow where its a real bug/hazard in the
            // computation with reasonable inputs.
            final float boost;
            switch (random.nextInt(5)) {
              case 0:
                // minimum value (not enforced)
                boost = 0F;
                break;
              case 1:
                // tiny value
                boost = Float.MIN_VALUE;
                break;
              case 2:
                // no-op value (sometimes treated special in explanations)
                boost = 1F;
                break;
              case 3:
                // maximum value (not enforceD)
                boost = Integer.MAX_VALUE;
                break;
              default:
                // random value
                boost = random.nextFloat() * Integer.MAX_VALUE;
                break;
            }
            doTestScoring(similarity, corpus, term, boost, freq, k);
          }
        }
      }
    }
  }

