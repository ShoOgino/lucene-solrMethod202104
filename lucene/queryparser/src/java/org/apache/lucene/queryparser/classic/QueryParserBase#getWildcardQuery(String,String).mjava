  /**
   * Factory method for generating a query. Called when parser parses an input term token that
   * contains one or more wildcard characters (? and *), but is not a prefix term token (one that
   * has just a single * character at the end)
   *
   * <p>Depending on settings, prefix term may be lower-cased automatically. It will not go through
   * the default Analyzer, however, since normal Analyzers are unlikely to work properly with
   * wildcard templates.
   *
   * <p>Can be overridden by extending classes, to provide custom handling for wildcard queries,
   * which may be necessary due to missing analyzer calls.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token that contains one or more wild card characters (? or *), but is not
   *     simple prefix term
   * @return Resulting {@link org.apache.lucene.search.Query} built for the term
   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to
   *     disallow
   */
  protected Query getWildcardQuery(String field, String termStr) throws ParseException {
    if ("*".equals(field)) {
      if ("*".equals(termStr)) return newMatchAllDocsQuery();
    }
    if (!allowLeadingWildcard && (termStr.startsWith("*") || termStr.startsWith("?")))
      throw new ParseException("'*' or '?' not allowed as first character in WildcardQuery");

    Term t = new Term(field, analyzeWildcard(field, termStr));
    return newWildcardQuery(t);
  }

