  @Override
  public TwoPhaseIterator twoPhaseIterator() {
    DocIdSetIterator approximation =
        new DocIdSetIterator() {

          @Override
          public int docID() {
            assert doc == lead.doc;
            return doc;
          }

          @Override
          public int nextDoc() throws IOException {
            // We are moving to the next doc ID, so scorers in 'lead' need to go in
            // 'tail'. If there is not enough space in 'tail', then we take the least
            // costly scorers and advance them.
            for (DisiWrapper s = lead; s != null; s = s.next) {
              final DisiWrapper evicted = insertTailWithOverFlow(s);
              if (evicted != null) {
                if (evicted.doc == doc) {
                  evicted.doc = evicted.iterator.nextDoc();
                } else {
                  evicted.doc = evicted.iterator.advance(doc + 1);
                }
                head.add(evicted);
              }
            }

            setDocAndFreq();
            // It would be correct to return doNextCandidate() at this point but if you
            // call nextDoc as opposed to advance, it probably means that you really
            // need the next match. Returning 'doc' here would lead to a similar
            // iteration over sub postings overall except that the decision making would
            // happen at a higher level where more abstractions are involved and
            // benchmarks suggested it causes a significant performance hit.
            return doNext();
          }

          @Override
          public int advance(int target) throws IOException {
            // Same logic as in nextDoc
            for (DisiWrapper s = lead; s != null; s = s.next) {
              final DisiWrapper evicted = insertTailWithOverFlow(s);
              if (evicted != null) {
                evicted.doc = evicted.iterator.advance(target);
                head.add(evicted);
              }
            }

            // But this time there might also be scorers in 'head' behind the desired
            // target so we need to do the same thing that we did on 'lead' on 'head'
            DisiWrapper headTop = head.top();
            while (headTop.doc < target) {
              final DisiWrapper evicted = insertTailWithOverFlow(headTop);
              // We know that the tail is full since it contains at most
              // minShouldMatch - 1 entries and we just moved at least minShouldMatch
              // entries to it, so evicted is not null
              evicted.doc = evicted.iterator.advance(target);
              headTop = head.updateTop(evicted);
            }

            setDocAndFreq();
            return doNextCandidate();
          }

          @Override
          public long cost() {
            return cost;
          }
        };
    return new TwoPhaseIterator(approximation) {

      @Override
      public boolean matches() throws IOException {
        while (freq < minShouldMatch) {
          assert freq > 0;
          if (freq + tailSize >= minShouldMatch) {
            // a match on doc is still possible, try to
            // advance scorers from the tail
            advanceTail();
          } else {
            return false;
          }
        }
        return true;
      }

      @Override
      public float matchCost() {
        // maximum number of scorer that matches() might advance
        return tail.length;
      }
    };
  }

