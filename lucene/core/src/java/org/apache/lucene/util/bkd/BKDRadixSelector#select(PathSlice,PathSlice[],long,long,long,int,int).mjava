  /**
   * It uses the provided {@code points} from the given {@code from} to the given {@code to} to
   * populate the {@code partitionSlices} array holder (length &gt; 1) with two path slices so the
   * path slice at position 0 contains {@code partition - from} points where the value of the {@code
   * dim} is lower or equal to the {@code to -from} points on the slice at position 1.
   *
   * <p>The {@code dimCommonPrefix} provides a hint for the length of the common prefix length for
   * the {@code dim} where are partitioning the points.
   *
   * <p>It return the value of the {@code dim} at the partition point.
   *
   * <p>If the provided {@code points} is wrapping an {@link OfflinePointWriter}, the writer is
   * destroyed in the process to save disk space.
   */
  public byte[] select(
      PathSlice points,
      PathSlice[] partitionSlices,
      long from,
      long to,
      long partitionPoint,
      int dim,
      int dimCommonPrefix)
      throws IOException {
    checkArgs(from, to, partitionPoint);

    assert partitionSlices.length > 1
        : "[partition alices] must be > 1, got " + partitionSlices.length;

    // If we are on heap then we just select on heap
    if (points.writer instanceof HeapPointWriter) {
      byte[] partition =
          heapRadixSelect(
              (HeapPointWriter) points.writer,
              dim,
              Math.toIntExact(from),
              Math.toIntExact(to),
              Math.toIntExact(partitionPoint),
              dimCommonPrefix);
      partitionSlices[0] = new PathSlice(points.writer, from, partitionPoint - from);
      partitionSlices[1] = new PathSlice(points.writer, partitionPoint, to - partitionPoint);
      return partition;
    }

    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points.writer;

    try (PointWriter left = getPointWriter(partitionPoint - from, "left" + dim);
        PointWriter right = getPointWriter(to - partitionPoint, "right" + dim)) {
      partitionSlices[0] = new PathSlice(left, 0, partitionPoint - from);
      partitionSlices[1] = new PathSlice(right, 0, to - partitionPoint);
      return buildHistogramAndPartition(
          offlinePointWriter, left, right, from, to, partitionPoint, 0, dimCommonPrefix, dim);
    }
  }

