  /**
   * Opens a Reader for the given resource using a {@link CharsetDecoder}. Unlike Java's defaults
   * this reader will throw an exception if your it detects the read charset doesn't match the
   * expected {@link Charset}.
   *
   * <p>Decoding readers are useful to load configuration files, stopword lists or synonym files to
   * detect character set problems. However, it's not recommended to use as a common purpose reader.
   *
   * @param clazz the class used to locate the resource
   * @param resource the resource name to load
   * @param charSet the expected charset
   * @return a reader to read the given file
   */
  public static Reader getDecodingReader(Class<?> clazz, String resource, Charset charSet)
      throws IOException {
    InputStream stream = null;
    boolean success = false;
    try {
      stream = clazz.getResourceAsStream(resource);
      final Reader reader = getDecodingReader(stream, charSet);
      success = true;
      return reader;
    } finally {
      if (!success) {
        IOUtils.close(stream);
      }
    }
  }

