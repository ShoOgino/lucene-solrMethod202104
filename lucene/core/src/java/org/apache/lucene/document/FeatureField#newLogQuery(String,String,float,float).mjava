  /**
   * Return a new {@link Query} that will score documents as {@code weight * Math.log(scalingFactor
   * + S)} where S is the value of the static feature.
   *
   * @param fieldName field that stores features
   * @param featureName name of the feature
   * @param weight weight to give to this feature, must be in (0,64]
   * @param scalingFactor scaling factor applied before taking the logarithm, must be in [1,
   *     +Infinity)
   * @throws IllegalArgumentException if weight is not in (0,64] or scalingFactor is not in [1,
   *     +Infinity)
   */
  public static Query newLogQuery(
      String fieldName, String featureName, float weight, float scalingFactor) {
    if (weight <= 0 || weight > MAX_WEIGHT) {
      throw new IllegalArgumentException(
          "weight must be in (0, " + MAX_WEIGHT + "], got: " + weight);
    }
    if (scalingFactor < 1 || Float.isFinite(scalingFactor) == false) {
      throw new IllegalArgumentException("scalingFactor must be >= 1, got: " + scalingFactor);
    }
    Query q = new FeatureQuery(fieldName, featureName, new LogFunction(scalingFactor));
    if (weight != 1f) {
      q = new BoostQuery(q, weight);
    }
    return q;
  }

