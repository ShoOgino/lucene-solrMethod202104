  private void doTestPartition() {
    BKDConfig config = createRandomConfig();
    int[] commonPrefixLengths = new int[config.numDims];
    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));
    Point[] points = createRandomPoints(config, maxDoc, commonPrefixLengths);
    final int splitDim = random().nextInt(config.numIndexDims);
    DummyPointsReader reader = new DummyPointsReader(points);
    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);
    MutablePointsReaderUtils.partition(
        config,
        maxDoc,
        splitDim,
        commonPrefixLengths[splitDim],
        reader,
        0,
        points.length,
        pivot,
        new BytesRef(),
        new BytesRef());
    BytesRef pivotValue = reader.points[pivot].packedValue;
    int offset = splitDim * config.bytesPerDim;
    for (int i = 0; i < points.length; ++i) {
      BytesRef value = reader.points[i].packedValue;
      int cmp =
          Arrays.compareUnsigned(
              value.bytes,
              value.offset + offset,
              value.offset + offset + config.bytesPerDim,
              pivotValue.bytes,
              pivotValue.offset + offset,
              pivotValue.offset + offset + config.bytesPerDim);
      if (cmp == 0) {
        int dataDimOffset = config.packedIndexBytesLength;
        int dataDimsLength = (config.numDims - config.numIndexDims) * config.bytesPerDim;
        cmp =
            Arrays.compareUnsigned(
                value.bytes,
                value.offset + dataDimOffset,
                value.offset + dataDimOffset + dataDimsLength,
                pivotValue.bytes,
                pivotValue.offset + dataDimOffset,
                pivotValue.offset + dataDimOffset + dataDimsLength);
        if (cmp == 0) {
          cmp = reader.points[i].doc - reader.points[pivot].doc;
        }
      }
      if (i < pivot) {
        assertTrue(cmp <= 0);
      } else if (i > pivot) {
        assertTrue(cmp >= 0);
      } else {
        assertEquals(0, cmp);
      }
    }
  }

