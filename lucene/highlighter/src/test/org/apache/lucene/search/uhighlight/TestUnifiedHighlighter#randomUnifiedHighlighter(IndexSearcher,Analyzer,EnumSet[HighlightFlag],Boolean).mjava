  static UnifiedHighlighter randomUnifiedHighlighter(
      IndexSearcher searcher,
      Analyzer indexAnalyzer,
      EnumSet<HighlightFlag> mandatoryFlags,
      Boolean requireFieldMatch) {
    final UnifiedHighlighter uh =
        new UnifiedHighlighter(searcher, indexAnalyzer) {
          Set<HighlightFlag> flags; // consistently random set of flags for this test run

          @Override
          protected Set<HighlightFlag> getFlags(String field) {
            if (flags != null) {
              return flags;
            }
            final EnumSet<HighlightFlag> result = EnumSet.copyOf(mandatoryFlags);
            int r = random().nextInt();
            for (HighlightFlag highlightFlag : HighlightFlag.values()) {
              if (((1 << highlightFlag.ordinal()) & r) == 0) {
                result.add(highlightFlag);
              }
            }
            if (result.contains(HighlightFlag.WEIGHT_MATCHES)) {
              // these two are required for WEIGHT_MATCHES
              result.add(HighlightFlag.MULTI_TERM_QUERY);
              result.add(HighlightFlag.PHRASES);
            }
            return flags = result;
          }
        };
    uh.setCacheFieldValCharsThreshold(random().nextInt(100));
    if (requireFieldMatch == Boolean.FALSE
        || (requireFieldMatch == null && random().nextBoolean())) {
      uh.setFieldMatcher(f -> true); // requireFieldMatch==false
    }
    return uh;
  }

