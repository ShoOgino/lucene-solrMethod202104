  /**
   * Analyzes the given TokenStream, collecting the Tokens it produces.
   *
   * @param tokenStream TokenStream to analyze
   * @return List of tokens produced from the TokenStream
   */
  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream, List<Token> result) {
    final List<AttributeSource> tokens = new ArrayList<>();
    try {
      tokenStream.reset();
      CharTermAttribute charAtt = tokenStream.getAttribute(CharTermAttribute.class);
      while (tokenStream.incrementToken()) {
        tokens.add(tokenStream.cloneAttributes());
        List<TokenAttribute> attributes = copyAttributes(tokenStream, charAtt);
        result.add(new Token(charAtt.toString(), attributes));
      }
      tokenStream.end();
    } catch (IOException ioe) {
      throw new RuntimeException("Error occurred while iterating over TokenStream", ioe);
    } finally {
      IOUtils.closeWhileHandlingException(tokenStream);
    }
    return tokens;
  }

