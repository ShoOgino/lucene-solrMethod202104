    @Override
    public Scorer scorer(LeafReaderContext context) throws IOException {
      Scorer in = inner.scorer(context);
      if (in == null) {
        return null;
      }
      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));
      return new FilterScorer(in) {
        int scoresDocId = -1; // remember the last docId we called score() on

        @Override
        public float score() throws IOException {
          int docId = docID();
          if (scoresDocId == docId || scores.advanceExact(docId)) {
            scoresDocId = docId;
            double factor = scores.doubleValue();
            if (factor >= 0) {
              return (float) (factor * boost);
            }
          }
          // default: missing value, negative value or NaN
          return 0;
        }

        @Override
        public float getMaxScore(int upTo) throws IOException {
          return Float.POSITIVE_INFINITY;
        }
      };
    }

