  /** returns a common prefix length equal or lower than the current one */
  private int getRandomCommonPrefix(
      BKDConfig config, HeapPointWriter points, int start, int end, int sortDim) {
    int commonPrefixLength = config.bytesPerDim;
    PointValue value = points.getPackedValueSlice(start);
    BytesRef bytesRef = value.packedValue();
    byte[] firstValue = new byte[config.bytesPerDim];
    int offset = sortDim * config.bytesPerDim;
    System.arraycopy(bytesRef.bytes, bytesRef.offset + offset, firstValue, 0, config.bytesPerDim);
    for (int i = start + 1; i < end; i++) {
      value = points.getPackedValueSlice(i);
      bytesRef = value.packedValue();
      int diff =
          Arrays.mismatch(
              bytesRef.bytes,
              bytesRef.offset + offset,
              bytesRef.offset + offset + config.bytesPerDim,
              firstValue,
              0,
              config.bytesPerDim);
      if (diff != -1 && commonPrefixLength > diff) {
        if (diff == 0) {
          return diff;
        }
        commonPrefixLength = diff;
      }
    }
    return (random().nextBoolean()) ? commonPrefixLength : random().nextInt(commonPrefixLength);
  }

