  private void doTestSetScorerOnCollectionTermination(boolean allowSkipNonCompetitive)
      throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);
    iw.addDocument(new Document());
    DirectoryReader reader = iw.getReader();
    iw.close();
    final LeafReaderContext ctx = reader.leaves().get(0);

    DummyCollector c1 =
        new TerminatingDummyCollector(
            1, allowSkipNonCompetitive ? ScoreMode.TOP_SCORES : ScoreMode.COMPLETE);
    DummyCollector c2 =
        new TerminatingDummyCollector(
            2, allowSkipNonCompetitive ? ScoreMode.TOP_SCORES : ScoreMode.COMPLETE);

    Collector mc = MultiCollector.wrap(c1, c2);
    LeafCollector lc = mc.getLeafCollector(ctx);
    assertFalse(c1.setScorerCalled);
    assertFalse(c2.setScorerCalled);
    lc.setScorer(new ScoreAndDoc());
    assertTrue(c1.setScorerCalled);
    assertTrue(c2.setScorerCalled);
    c1.setScorerCalled = false;
    c2.setScorerCalled = false;
    lc.collect(0); // OK

    lc.setScorer(new ScoreAndDoc());
    assertTrue(c1.setScorerCalled);
    assertTrue(c2.setScorerCalled);
    c1.setScorerCalled = false;
    c2.setScorerCalled = false;

    lc.collect(1); // OK, but c1 should terminate
    lc.setScorer(new ScoreAndDoc());
    assertFalse(c1.setScorerCalled);
    assertTrue(c2.setScorerCalled);
    c2.setScorerCalled = false;

    expectThrows(
        CollectionTerminatedException.class,
        () -> {
          lc.collect(2);
        });
    lc.setScorer(new ScoreAndDoc());
    assertFalse(c1.setScorerCalled);
    assertFalse(c2.setScorerCalled);

    reader.close();
    dir.close();
  }

