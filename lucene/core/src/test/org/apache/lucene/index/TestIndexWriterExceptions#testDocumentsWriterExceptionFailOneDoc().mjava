  public void testDocumentsWriterExceptionFailOneDoc() throws Exception {
    Analyzer analyzer =
        new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {
          @Override
          public TokenStreamComponents createComponents(String fieldName) {
            MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);
            tokenizer.setEnableChecks(
                false); // disable workflow checking as we forcefully close() in exceptional cases.
            return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));
          }
        };
    for (int i = 0; i < 10; i++) {
      try (Directory dir = newDirectory();
          final IndexWriter writer =
              new IndexWriter(
                  dir,
                  newIndexWriterConfig(analyzer)
                      .setMaxBufferedDocs(-1)
                      .setRAMBufferSizeMB(random().nextBoolean() ? 0.00001 : Integer.MAX_VALUE)
                      .setMergePolicy(
                          new FilterMergePolicy(NoMergePolicy.INSTANCE) {
                            @Override
                            public boolean keepFullyDeletedSegment(
                                IOSupplier<CodecReader> readerIOSupplier) {
                              return true;
                            }
                          }))) {
        Document doc = new Document();
        doc.add(newField("contents", "here are some contents", DocCopyIterator.custom5));
        writer.addDocument(doc);
        doc.add(newField("crash", "this should crash after 4 terms", DocCopyIterator.custom5));
        doc.add(newField("other", "this will not get indexed", DocCopyIterator.custom5));
        expectThrows(
            IOException.class,
            () -> {
              writer.addDocument(doc);
            });
        writer.commit();
        try (IndexReader reader = DirectoryReader.open(dir)) {
          assertEquals(2, reader.docFreq(new Term("contents", "here")));
          assertEquals(2, reader.maxDoc());
          assertEquals(1, reader.numDocs());
        }
      }
    }
  }

