  List<char[]> sharpSVariations(char[] word, int length) {
    if (!dictionary.checkSharpS) return Collections.emptyList();

    Stream<String> result =
        new Object() {
          int findSS(int start) {
            for (int i = start; i < length - 1; i++) {
              if (word[i] == 's' && word[i + 1] == 's') {
                return i;
              }
            }
            return -1;
          }

          Stream<String> replaceSS(int start, int depth) {
            if (depth > 5) { // cut off too large enumeration
              return Stream.of(new String(word, start, length - start));
            }

            int ss = findSS(start);
            if (ss < 0) {
              return null;
            } else {
              String prefix = new String(word, start, ss - start);
              Stream<String> tails = replaceSS(ss + 2, depth + 1);
              if (tails == null) {
                tails = Stream.of(new String(word, ss + 2, length - ss - 2));
              }
              return tails.flatMap(s -> Stream.of(prefix + "ss" + s, prefix + "ÃŸ" + s));
            }
          }
        }.replaceSS(0, 0);
    if (result == null) return Collections.emptyList();

    String src = new String(word, 0, length);
    return result.filter(s -> !s.equals(src)).map(String::toCharArray).collect(Collectors.toList());
  }

