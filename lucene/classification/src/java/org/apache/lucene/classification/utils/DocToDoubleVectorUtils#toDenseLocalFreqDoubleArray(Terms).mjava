  /**
   * create a dense <code>Double</code> vector given doc and field term vectors using local
   * frequency of the terms in the doc
   *
   * @param docTerms term vectors for a given document
   * @return a dense vector of <code>Double</code>s as an array
   * @throws IOException in case accessing the underlying index fails
   */
  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {
    Double[] freqVector = null;
    if (docTerms != null) {
      freqVector = new Double[(int) docTerms.size()];
      int i = 0;
      TermsEnum docTermsEnum = docTerms.iterator();

      while (docTermsEnum.next() != null) {
        long termFreqLocal =
            docTermsEnum
                .totalTermFreq(); // the total number of occurrences of this term in the given
        // document
        freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();
        i++;
      }
    }
    return freqVector;
  }

