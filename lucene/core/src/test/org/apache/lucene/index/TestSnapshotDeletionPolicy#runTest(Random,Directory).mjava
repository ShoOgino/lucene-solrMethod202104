  private void runTest(Random random, Directory dir) throws Exception {
    // Run for ~1 seconds at night
    final long stopTime = System.currentTimeMillis() + (TEST_NIGHTLY ? 1000 : 100);

    SnapshotDeletionPolicy dp = getDeletionPolicy();
    final IndexWriter writer =
        new IndexWriter(
            dir,
            newIndexWriterConfig(new MockAnalyzer(random))
                .setIndexDeletionPolicy(dp)
                .setMaxBufferedDocs(2));

    // Verify we catch misuse:
    expectThrows(
        IllegalStateException.class,
        () -> {
          dp.snapshot();
        });

    writer.commit();

    final Thread t =
        new Thread() {
          @Override
          public void run() {
            Document doc = new Document();
            FieldType customType = new FieldType(TextField.TYPE_STORED);
            customType.setStoreTermVectors(true);
            customType.setStoreTermVectorPositions(true);
            customType.setStoreTermVectorOffsets(true);
            doc.add(newField("content", "aaa", customType));
            do {
              for (int i = 0; i < 27; i++) {
                try {
                  writer.addDocument(doc);
                } catch (Throwable t) {
                  t.printStackTrace(System.out);
                  fail("addDocument failed");
                }
                if (i % 2 == 0) {
                  try {
                    writer.commit();
                  } catch (Exception e) {
                    throw new RuntimeException(e);
                  }
                }
              }
              try {
                Thread.sleep(1);
              } catch (InterruptedException ie) {
                throw new ThreadInterruptedException(ie);
              }
            } while (System.currentTimeMillis() < stopTime);
          }
        };

    t.start();

    // While the above indexing thread is running, take many
    // backups:
    do {
      backupIndex(dir, dp);
      Thread.sleep(20);
    } while (t.isAlive());

    t.join();

    // Add one more document to force writer to commit a
    // final segment, so deletion policy has a chance to
    // delete again:
    Document doc = new Document();
    FieldType customType = new FieldType(TextField.TYPE_STORED);
    customType.setStoreTermVectors(true);
    customType.setStoreTermVectorPositions(true);
    customType.setStoreTermVectorOffsets(true);
    doc.add(newField("content", "aaa", customType));
    writer.addDocument(doc);

    // Make sure we don't have any leftover files in the
    // directory:
    writer.close();
    TestIndexWriter.assertNoUnreferencedFiles(
        dir, "some files were not deleted but should have been");
  }

