  @SuppressWarnings("unchecked")
  public synchronized void refresh() {
    Map<String, Object> pluginInfos = null;
    try {
      pluginInfos = ContainerPluginsApi.plugins(coreContainer.zkClientSupplier);
    } catch (IOException e) {
      log.error("Could not read plugins data", e);
      return;
    }
    Map<String,PluginMetaHolder> newState = new HashMap<>(pluginInfos.size());
    for (Map.Entry<String, Object> e : pluginInfos.entrySet()) {
      try {
        newState.put(e.getKey(),new PluginMetaHolder((Map<String, Object>) e.getValue()));
      } catch (Exception exp) {
        log.error("Invalid apiInfo configuration :", exp);
      }
    }

    Map<String, PluginMetaHolder> currentState = new HashMap<>();
    for (Map.Entry<String, ApiInfo> e : currentPlugins.entrySet()) {
      currentState.put(e.getKey(), e.getValue().holder);
    }
    Map<String, Diff> diff = compareMaps(currentState, newState);
    if (diff == null) return;//nothing has changed
    for (Map.Entry<String, Diff> e : diff.entrySet()) {
      if (e.getValue() == Diff.UNCHANGED) continue;
      if (e.getValue() == Diff.REMOVED) {
        ApiInfo apiInfo = currentPlugins.remove(e.getKey());
        if (apiInfo == null) continue;
        listeners.forEach(listener -> listener.deleted(apiInfo));
        for (ApiHolder holder : apiInfo.holders) {
          Api old = containerApiBag.unregister(holder.api.getEndPoint().method()[0],
              getActualPath(apiInfo, holder.api.getEndPoint().path()[0]));
          if (old instanceof Closeable) {
            closeWhileHandlingException((Closeable) old);
          }
        }
      } else {
        //ADDED or UPDATED
        PluginMetaHolder info = newState.get(e.getKey());
        ApiInfo apiInfo = null;
        List<String> errs = new ArrayList<>();
        apiInfo = new ApiInfo(info,errs);
        if (!errs.isEmpty()) {
          log.error(StrUtils.join(errs, ','));
          continue;
        }
        try {
          apiInfo.init();
        } catch (Exception exp) {
          log.error("Cannot install apiInfo ", exp);
          continue;
        }
        if (e.getValue() == Diff.ADDED) {
          // this plugin is totally new
          for (ApiHolder holder : apiInfo.holders) {
            containerApiBag.register(holder, getTemplateVars(apiInfo.info));
          }
          currentPlugins.put(e.getKey(), apiInfo);
          final ApiInfo apiInfoFinal = apiInfo;
          listeners.forEach(listener -> listener.added(apiInfoFinal));
        } else {
          //this plugin is being updated
          ApiInfo old = currentPlugins.put(e.getKey(), apiInfo);
          for (ApiHolder holder : apiInfo.holders) {
            //register all new paths
            containerApiBag.register(holder, getTemplateVars(apiInfo.info));
          }
          final ApiInfo apiInfoFinal = apiInfo;
          listeners.forEach(listener -> listener.modified(old, apiInfoFinal));
          if (old != null) {
            //this is an update of the plugin. But, it is possible that
            // some paths are remved in the newer version of the plugin
            for (ApiHolder oldHolder : old.holders) {
              if(apiInfo.get(oldHolder.api.getEndPoint()) == null) {
                //there was a path in the old plugin which is not present in the new one
                containerApiBag.unregister(oldHolder.getMethod(),getActualPath(old, oldHolder.getPath()));
              }
            }
            if (old instanceof Closeable) {
              //close the old instance of the plugin
              closeWhileHandlingException((Closeable) old);
            }
          }
        }
      }

    }
  }

