  /********************Testing Utils**********************************/

  private static void indexDocs(IndexWriter writer) throws Exception {
    Random rnd = random();

    /**
     * Generate 10 documents where term n has a docFreq of n and a totalTermFreq of n*2 (squared).
     */
    for (int i = 1; i <= 10; i++) {
      Document doc = new Document();
      String content = getContent(i);

      doc.add(newTextField(rnd, "FIELD_1", content, Field.Store.YES));
      // add a different field
      doc.add(newTextField(rnd, "different_field", "diff", Field.Store.YES));
      writer.addDocument(doc);
    }

    // add 10 more docs with the term "diff" this will make it have the highest docFreq if we don't
    // ask for the
    // highest freq terms for a specific field.
    for (int i = 1; i <= 10; i++) {
      Document doc = new Document();
      doc.add(newTextField(rnd, "different_field", "diff", Field.Store.YES));
      writer.addDocument(doc);
    }
    // add some docs where tf < df so we can see if sorting works
    // highTF low df
    int highTF = 200;
    Document doc = new Document();
    String content = "";
    for (int i = 0; i < highTF; i++) {
      content += "highTF ";
    }
    doc.add(newTextField(rnd, "FIELD_1", content, Field.Store.YES));
    writer.addDocument(doc);
    // highTF medium df =5
    int medium_df = 5;
    for (int i = 0; i < medium_df; i++) {
      int tf = 25;
      Document newdoc = new Document();
      String newcontent = "";
      for (int j = 0; j < tf; j++) {
        newcontent += "highTFmedDF ";
      }
      newdoc.add(newTextField(rnd, "FIELD_1", newcontent, Field.Store.YES));
      writer.addDocument(newdoc);
    }
    // add a doc with high tf in field different_field
    int targetTF = 150;
    doc = new Document();
    content = "";
    for (int i = 0; i < targetTF; i++) {
      content += "TF150 ";
    }
    doc.add(newTextField(rnd, "different_field", content, Field.Store.YES));
    writer.addDocument(doc);
    writer.close();
  }

