  public void testRandom() throws Exception {
    int numUniqueTokens = TestUtil.nextInt(random(), 1, 25);
    Directory dir = newDirectory();
    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
    iwc.setSimilarity(NeverForgetsSimilarity.INSTANCE);
    IndexWriter w = new IndexWriter(dir, iwc);
    Document doc = new Document();

    int numTokens = atLeast(10000);
    Token[] tokens = new Token[numTokens];
    Map<Character, Integer> counts = new HashMap<>();
    int numStacked = 0;
    int maxTermFreq = 0;
    int pos = -1;
    for (int i = 0; i < numTokens; i++) {
      char tokenChar = (char) ('a' + random().nextInt(numUniqueTokens));
      Integer oldCount = counts.get(tokenChar);
      int newCount;
      if (oldCount == null) {
        newCount = 1;
      } else {
        newCount = 1 + oldCount;
      }
      counts.put(tokenChar, newCount);
      maxTermFreq = Math.max(maxTermFreq, newCount);

      Token token = new Token(Character.toString(tokenChar), 2 * i, 2 * i + 1);

      if (i > 0 && random().nextInt(7) == 3) {
        token.setPositionIncrement(0);
        numStacked++;
      } else {
        pos++;
      }
      tokens[i] = token;
    }

    Field field = new Field("field", new CannedTokenStream(tokens), TextField.TYPE_NOT_STORED);
    doc.add(field);
    w.addDocument(doc);
    FieldInvertState fis = NeverForgetsSimilarity.INSTANCE.lastState;
    assertEquals(maxTermFreq, fis.getMaxTermFrequency());
    assertEquals(counts.size(), fis.getUniqueTermCount());
    assertEquals(numStacked, fis.getNumOverlap());
    assertEquals(numTokens, fis.getLength());
    assertEquals(pos, fis.getPosition());

    IOUtils.close(w, dir);
  }

