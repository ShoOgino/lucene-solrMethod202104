  private boolean checkCompounds(
      char[] chars, int offset, int length, WordCase originalCase, int depth) {
    if (depth > dictionary.compoundMax - 2) return false;

    int limit = length - dictionary.compoundMin + 1;
    for (int breakPos = dictionary.compoundMin; breakPos < limit; breakPos++) {
      WordContext context = depth == 0 ? WordContext.COMPOUND_BEGIN : WordContext.COMPOUND_MIDDLE;
      int breakOffset = offset + breakPos;
      if (checkCompoundCase(chars, breakOffset)
          && hasStems(chars, offset, breakPos, originalCase, context)) {
        int remainingLength = length - breakPos;
        if (hasStems(chars, breakOffset, remainingLength, originalCase, WordContext.COMPOUND_END)) {
          return true;
        }

        if (checkCompounds(chars, breakOffset, remainingLength, originalCase, depth + 1)) {
          return true;
        }
      }
    }

    return false;
  }

