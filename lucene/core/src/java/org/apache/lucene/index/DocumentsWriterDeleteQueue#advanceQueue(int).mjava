  /**
   * Advances the queue to the next queue on flush. This carries over the the generation to the next
   * queue and set the {@link #getMaxSeqNo()} based on the given maxNumPendingOps. This method can
   * only be called once, subsequently the returned queue should be used.
   *
   * @param maxNumPendingOps the max number of possible concurrent operations that will execute on
   *     this queue after it was advanced. This corresponds the the number of DWPTs that own the
   *     current queue at the moment when this queue is advanced since each these DWPTs can
   *     increment the seqId after we advanced it.
   * @return a new queue as a successor of this queue.
   */
  synchronized DocumentsWriterDeleteQueue advanceQueue(int maxNumPendingOps) {
    if (advanced) {
      throw new IllegalStateException("queue was already advanced");
    }
    advanced = true;
    long seqNo = getLastSequenceNumber() + maxNumPendingOps + 1;
    maxSeqNo = seqNo;
    return new DocumentsWriterDeleteQueue(
        infoStream,
        generation + 1,
        seqNo + 1,
        // don't pass ::getMaxCompletedSeqNo here b/c otherwise we keep an reference to this queue
        // and this will be a memory leak since the queues can't be GCed
        getPrevMaxSeqIdSupplier(nextSeqNo));
  }

