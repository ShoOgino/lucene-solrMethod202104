  /** returns new random term, that fits within the bounds of the corpus */
  static TermStatistics newTerm(Random random, CollectionStatistics corpus) {
    final long docFreq;
    switch (random.nextInt(3)) {
      case 0:
        // rare term
        docFreq = 1;
        break;
      case 1:
        // common term
        docFreq = corpus.docCount();
        break;
      default:
        // random specificity
        docFreq = TestUtil.nextLong(random, 1, corpus.docCount());
        break;
    }
    final long totalTermFreq;
    // can't require docs to have > 2B tokens
    long upperBound;
    try {
      upperBound =
          Math.min(corpus.sumTotalTermFreq(), Math.multiplyExact(docFreq, Integer.MAX_VALUE));
    } catch (ArithmeticException overflow) {
      upperBound = corpus.sumTotalTermFreq();
    }
    if (corpus.sumTotalTermFreq() == corpus.sumDocFreq()) {
      // omitTF
      totalTermFreq = docFreq;
    } else {
      switch (random.nextInt(3)) {
        case 0:
          // no repetition
          totalTermFreq = docFreq;
          break;
        case 1:
          // maximum repetition
          totalTermFreq = upperBound;
          break;
        default:
          // random repetition
          totalTermFreq = TestUtil.nextLong(random, docFreq, upperBound);
          break;
      }
    }
    return new TermStatistics(TERM, docFreq, totalTermFreq);
  }

