  private void handleWrappedFilterArgs(Map<String, String> args) {
    LinkedHashMap<String, Map<String, String>> wrappedFilterArgs = new LinkedHashMap<>();
    splitAt(',', wrappedFilters)
        .forEach(
            filterName -> { // Format: SPIname[-id]
              filterName = filterName.trim().toLowerCase(Locale.ROOT); // Treat case-insensitively
              if (wrappedFilterArgs.containsKey(filterName)) {
                throw new IllegalArgumentException(
                    "wrappedFilters contains duplicate '"
                        + filterName
                        + "'. Add unique '-id' suffixes (stripped prior to SPI lookup).");
              }
              wrappedFilterArgs.put(filterName, new HashMap<>());
            });
    for (Iterator<Map.Entry<String, String>> iterator = args.entrySet().iterator();
        iterator.hasNext(); ) {
      Map.Entry<String, String> entry = iterator.next();
      String filterArgKey = entry.getKey();
      String argValue = entry.getValue();
      List<String> splitKey =
          splitAt(FILTER_ARG_SEPARATOR, filterArgKey); // Format: filterName.argKey
      if (splitKey.size() == 2) { // Skip if no slash
        String filterName = splitKey.get(0).toLowerCase(Locale.ROOT);
        if (wrappedFilterArgs.containsKey(filterName)) { // Skip if not in "wrappedFilter" arg
          Map<String, String> filterArgs =
              wrappedFilterArgs.computeIfAbsent(filterName, k -> new HashMap<>());
          String argKey = splitKey.get(1);
          filterArgs.put(
              argKey, argValue); // argKey is guaranteed unique, don't need to check for duplicates
          iterator.remove();
        }
      }
    }
    if (args.isEmpty()) {
      populateInnerFilters(wrappedFilterArgs);
    }
  }

