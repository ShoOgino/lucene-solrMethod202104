  @SuppressWarnings({"unchecked", "rawtypes"})
  public static LinkedHashMapWriter testForResponseElement(RestTestHarness harness,
                                           String testServerBaseUrl,
                                           String uri,
                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,
                                           Object expected,
                                           long maxTimeoutSeconds) throws Exception {

    boolean success = false;
    LinkedHashMapWriter m = null;

    TimeOut timeOut = new TimeOut(maxTimeoutSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);
    while (! timeOut.hasTimedOut()) {
      try {
        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);
      } catch (Exception e) {
        Thread.sleep(100);
        continue;

      }
      Object actual = Utils.getObjectByPath(m, false, jsonPath);

      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {
        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;
        if (predicate.test(actual) == null) {
          success = true;
          break;
        }

      } else {
        if (Objects.equals(expected, actual)) {
          success = true;
          break;
        }
      }
      Thread.sleep(100);

    }
    assertTrue(StrUtils.formatString("Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}", expected, StrUtils.join(jsonPath, '/'), m.toString(), testServerBaseUrl), success);

    return m;
  }

