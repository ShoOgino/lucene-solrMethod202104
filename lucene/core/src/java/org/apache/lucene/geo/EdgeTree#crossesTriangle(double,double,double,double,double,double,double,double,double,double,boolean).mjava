  /** Returns true if the triangle crosses any edge in this edge subtree */
  boolean crossesTriangle(
      double minX,
      double maxX,
      double minY,
      double maxY,
      double ax,
      double ay,
      double bx,
      double by,
      double cx,
      double cy,
      boolean includeBoundary) {
    if (minY <= max) {
      double dy = y1;
      double ey = y2;
      double dx = x1;
      double ex = x2;

      // optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
      // if not, don't waste our time trying more complicated stuff
      boolean outside =
          (dy < minY && ey < minY)
              || (dy > maxY && ey > maxY)
              || (dx < minX && ex < minX)
              || (dx > maxX && ex > maxX);

      if (outside == false) {
        if (includeBoundary == true) {
          if (lineCrossesLineWithBoundary(dx, dy, ex, ey, ax, ay, bx, by)
              || lineCrossesLineWithBoundary(dx, dy, ex, ey, bx, by, cx, cy)
              || lineCrossesLineWithBoundary(dx, dy, ex, ey, cx, cy, ax, ay)) {
            return true;
          }
        } else {
          if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by)
              || lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy)
              || lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {
            return true;
          }
        }
      }

      if (left != null
          && left.crossesTriangle(
              minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {
        return true;
      }

      if (right != null
          && maxY >= low
          && right.crossesTriangle(
              minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {
        return true;
      }
    }
    return false;
  }

