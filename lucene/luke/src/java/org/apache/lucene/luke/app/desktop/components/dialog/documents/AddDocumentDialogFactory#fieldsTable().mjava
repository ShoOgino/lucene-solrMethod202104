  private JTable fieldsTable() {
    JTable fieldsTable = new JTable();
    TableUtils.setupTable(
        fieldsTable,
        ListSelectionModel.SINGLE_SELECTION,
        new FieldsTableModel(newFieldList),
        null,
        30,
        150,
        120,
        80);
    fieldsTable.setShowGrid(true);
    JComboBox<Class<? extends IndexableField>> typesCombo = new JComboBox<>(presetFieldClasses);
    typesCombo.setRenderer(
        (list, value, index, isSelected, cellHasFocus) -> new JLabel(value.getSimpleName()));
    fieldsTable
        .getColumnModel()
        .getColumn(FieldsTableModel.Column.TYPE.getIndex())
        .setCellEditor(new DefaultCellEditor(typesCombo));
    for (int i = 0; i < fieldsTable.getModel().getRowCount(); i++) {
      fieldsTable
          .getModel()
          .setValueAt(TextField.class, i, FieldsTableModel.Column.TYPE.getIndex());
    }
    fieldsTable
        .getColumnModel()
        .getColumn(FieldsTableModel.Column.TYPE.getIndex())
        .setHeaderRenderer(
            new HelpHeaderRenderer(
                "About Type",
                "Select Field Class:",
                createTypeHelpDialog(),
                helpDialogFactory,
                dialog));
    fieldsTable
        .getColumnModel()
        .getColumn(FieldsTableModel.Column.TYPE.getIndex())
        .setCellRenderer(new TypeCellRenderer());
    fieldsTable
        .getColumnModel()
        .getColumn(FieldsTableModel.Column.OPTIONS.getIndex())
        .setCellRenderer(new OptionsCellRenderer(dialog, indexOptionsDialogFactory, newFieldList));
    return fieldsTable;
  }

