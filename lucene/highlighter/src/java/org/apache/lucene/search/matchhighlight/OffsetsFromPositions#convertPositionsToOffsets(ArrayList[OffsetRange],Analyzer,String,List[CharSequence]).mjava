  private static List<OffsetRange> convertPositionsToOffsets(
      ArrayList<OffsetRange> positionRanges,
      Analyzer analyzer,
      String fieldName,
      List<CharSequence> values)
      throws IOException {

    if (positionRanges.isEmpty()) {
      return positionRanges;
    }

    class PositionSpan extends OffsetRange {
      int leftOffset = Integer.MAX_VALUE;
      int rightOffset = Integer.MIN_VALUE;

      PositionSpan(int from, int to) {
        super(from, to);
      }

      @Override
      public String toString() {
        return "[from=" + from + ", to=" + to + ", L: " + leftOffset + ", R: " + rightOffset + ']';
      }
    }

    ArrayList<PositionSpan> spans = new ArrayList<>();
    int minPosition = Integer.MAX_VALUE;
    int maxPosition = Integer.MIN_VALUE;
    for (OffsetRange range : positionRanges) {
      spans.add(new PositionSpan(range.from, range.to));
      minPosition = Math.min(minPosition, range.from);
      maxPosition = Math.max(maxPosition, range.to);
    }

    PositionSpan[] spansTable = spans.toArray(PositionSpan[]::new);
    int spanCount = spansTable.length;
    int position = -1;
    int valueOffset = 0;
    for (int valueIndex = 0, max = values.size(); valueIndex < max; valueIndex++) {
      final String value = values.get(valueIndex).toString();
      final boolean lastValue = valueIndex + 1 == max;

      TokenStream ts = analyzer.tokenStream(fieldName, value);
      OffsetAttribute offsetAttr = ts.getAttribute(OffsetAttribute.class);
      PositionIncrementAttribute posAttr = ts.getAttribute(PositionIncrementAttribute.class);
      ts.reset();
      while (ts.incrementToken()) {
        position += posAttr.getPositionIncrement();

        if (position >= minPosition) {
          // Correct left and right offsets for each span this position applies to.
          int startOffset = valueOffset + offsetAttr.startOffset();
          int endOffset = valueOffset + offsetAttr.endOffset();

          int j = 0;
          for (int i = 0; i < spanCount; i++) {
            PositionSpan span = spansTable[j] = spansTable[i];
            if (position >= span.from) {
              if (position <= span.to) {
                span.leftOffset = Math.min(span.leftOffset, startOffset);
                span.rightOffset = Math.max(span.rightOffset, endOffset);
              } else {
                // this span can't intersect with any following position
                // so omit it by skipping j++.
                continue;
              }
            }
            j++;
          }
          spanCount = j;

          // Only short-circuit if we're on the last value (which should be the common
          // case since most fields would only have a single value anyway). We need
          // to make sure of this because otherwise offsetAttr would have incorrect value.
          if (position > maxPosition && lastValue) {
            break;
          }
        }
      }
      ts.end();
      position += posAttr.getPositionIncrement() + analyzer.getPositionIncrementGap(fieldName);
      valueOffset += offsetAttr.endOffset() + analyzer.getOffsetGap(fieldName);
      ts.close();
    }

    ArrayList<OffsetRange> converted = new ArrayList<>(spans.size());
    for (PositionSpan span : spans) {
      if (span.leftOffset == Integer.MAX_VALUE || span.rightOffset == Integer.MIN_VALUE) {
        throw new RuntimeException("One of the offsets missing for position range: " + span);
      }
      converted.add(new OffsetRange(span.leftOffset, span.rightOffset));
    }
    return converted;
  }

