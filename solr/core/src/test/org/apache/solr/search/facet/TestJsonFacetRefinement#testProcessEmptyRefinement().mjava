  @AwaitsFix(bugUrl="https://issues.apache.org/jira/browse/SOLR-12556")
  @Test
  public void testProcessEmptyRefinement() throws Exception {
    initServers();
    final Client client = servers.getClient(random().nextInt());
    client.queryDefaults().set("shards", servers.getShards()).set("debugQuery", Boolean.toString(random().nextBoolean()));

    List<SolrClient> clients = client.getClientProvider().all();
    assertTrue(clients.size() >= 3); // we only use 2, but assert at least 3 to also test empty shard
    final SolrClient c0 = clients.get(0);
    final SolrClient c1 = clients.get(1);

    client.deleteByQuery("*:*", null);
    int id = 0;
    
    c0.add(sdoc("id", id++, "cat_s", "Ax"));
    c0.add(sdoc("id", id++, "cat_s", "Bx"));
    c0.add(sdoc("id", id++, "cat_s", "Cx"));
    
    c1.add(sdoc("id", id++, "cat_s", "Ay"));
    c1.add(sdoc("id", id++, "cat_s", "By"));
    c1.add(sdoc("id", id++, "cat_s", "Cy"));
    c1.add(sdoc("id", id++, "cat_s", "Dy"));
    
    client.commit();

    // regardless of how much overrequest there is, in phase#1 
    // all terms will tie on the sort criteria, and "Ax" should win the tiebreaker.
    //
    // When Ax is refined against c1, it's 'debug' sort value will increase, but regardless
    // of the value of processEmpty, no other term should be returned in it's place
    // (because if they are also correctly refined, then their 'debug' sort values will also increase
    // and Ax will stll win the tie breaker -- and if they are not refined they shouldn't be returned)
    for (int overrequest = 0; overrequest < 5; overrequest++) {
      for (boolean pe : Arrays.asList(false, true)) {
        ModifiableSolrParams p
          = params("q", "*:*", "rows", "0", "json.facet"
                   , "{"
                   + " top:{ type:terms, field:cat_s, limit:1, overrequest:"+overrequest+", "
                   + "       refine:true, sort: 'debug asc', "
                   + "       facet:{ debug:'debug(numShards)', processEmpty:"+pe+" } } }");
        try {
          client.testJQ(p
                        , "facets=={ count: "+id+","
                        + "  top:{ buckets:[ "
                        + "    { val:Ax, count: 1, "
                        + "      debug:"+(pe ? 2 : 1)
                        + "      }"
                        + "  ] } }"
                        );
        } catch (AssertionError | RuntimeException e) {
          throw new AssertionError(p + " --> " + e.getMessage(), e);
        }
      }
    }
  }

