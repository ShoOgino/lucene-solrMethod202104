  /**
   * Factory method for generating a query. Called when parser parses an input term token that
   * contains a regular expression query.
   *
   * <p>Depending on settings, pattern term may be lower-cased automatically. It will not go through
   * the default Analyzer, however, since normal Analyzers are unlikely to work properly with
   * regular expression templates.
   *
   * <p>Can be overridden by extending classes, to provide custom handling for regular expression
   * queries, which may be necessary due to missing analyzer calls.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token that contains a regular expression
   * @return Resulting {@link org.apache.lucene.search.Query} built for the term
   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to
   *     disallow
   */
  protected Query getRegexpQuery(String field, String termStr) throws ParseException {
    // We need to pass the whole string to #normalize, which will not work with
    // custom attribute factories for the binary term impl, and may not work
    // with some analyzers
    BytesRef term = getAnalyzer().normalize(field, termStr);
    Term t = new Term(field, term);
    return newRegexpQuery(t);
  }

