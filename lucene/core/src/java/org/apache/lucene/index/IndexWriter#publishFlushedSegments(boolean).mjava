  /**
   * Publishes the flushed segment, segment-private deletes (if any) and its associated global
   * delete (if present) to IndexWriter. The actual publishing operation is synced on {@code IW ->
   * BDS} so that the {@link SegmentInfo}'s delete generation is always
   * GlobalPacket_deleteGeneration + 1
   *
   * @param forced if <code>true</code> this call will block on the ticket queue if the lock is held
   *     by another thread. if <code>false</code> the call will try to acquire the queue lock and
   *     exits if it's held by another thread.
   */
  private void publishFlushedSegments(boolean forced) throws IOException {
    docWriter.purgeFlushTickets(
        forced,
        ticket -> {
          DocumentsWriterPerThread.FlushedSegment newSegment = ticket.getFlushedSegment();
          FrozenBufferedUpdates bufferedUpdates = ticket.getFrozenUpdates();
          ticket.markPublished();
          if (newSegment == null) { // this is a flushed global deletes package - not a segments
            if (bufferedUpdates != null && bufferedUpdates.any()) { // TODO why can this be null?
              publishFrozenUpdates(bufferedUpdates);
              if (infoStream.isEnabled("IW")) {
                infoStream.message("IW", "flush: push buffered updates: " + bufferedUpdates);
              }
            }
          } else {
            assert newSegment.segmentInfo != null;
            if (infoStream.isEnabled("IW")) {
              infoStream.message(
                  "IW", "publishFlushedSegment seg-private updates=" + newSegment.segmentUpdates);
            }
            if (newSegment.segmentUpdates != null && infoStream.isEnabled("DW")) {
              infoStream.message(
                  "IW", "flush: push buffered seg private updates: " + newSegment.segmentUpdates);
            }
            // now publish!
            publishFlushedSegment(
                newSegment.segmentInfo,
                newSegment.fieldInfos,
                newSegment.segmentUpdates,
                bufferedUpdates,
                newSegment.sortMap);
          }
        });
  }

