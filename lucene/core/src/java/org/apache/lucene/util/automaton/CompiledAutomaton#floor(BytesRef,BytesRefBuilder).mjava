  /**
   * Finds largest term accepted by this Automaton, that's &lt;= the provided input term. The result
   * is placed in output; it's fine for output and input to point to the same bytes. The returned
   * result is either the provided output, or null if there is no floor term (ie, the provided input
   * term is before the first term accepted by this Automaton).
   */
  public BytesRef floor(BytesRef input, BytesRefBuilder output) {

    // if (DEBUG) System.out.println("CA.floor input=" + input.utf8ToString());

    int state = 0;

    // Special case empty string:
    if (input.length == 0) {
      if (runAutomaton.isAccept(state)) {
        output.clear();
        return output.get();
      } else {
        return null;
      }
    }

    final List<Integer> stack = new ArrayList<>();

    int idx = 0;
    while (true) {
      int label = input.bytes[input.offset + idx] & 0xff;
      int nextState = runAutomaton.step(state, label);
      // if (DEBUG) System.out.println("  cycle label=" + (char) label + " nextState=" + nextState);

      if (idx == input.length - 1) {
        if (nextState != -1 && runAutomaton.isAccept(nextState)) {
          // Input string is accepted
          output.grow(1 + idx);
          output.setByteAt(idx, (byte) label);
          output.setLength(input.length);
          // if (DEBUG) System.out.println("  input is accepted; return term=" +
          // output.utf8ToString());
          return output.get();
        } else {
          nextState = -1;
        }
      }

      if (nextState == -1) {

        // Pop back to a state that has a transition
        // <= our label:
        while (true) {
          int numTransitions = automaton.getNumTransitions(state);
          if (numTransitions == 0) {
            assert runAutomaton.isAccept(state);
            output.setLength(idx);
            // if (DEBUG) System.out.println("  return " + output.utf8ToString());
            return output.get();
          } else {
            automaton.getTransition(state, 0, transition);

            if (label - 1 < transition.min) {

              if (runAutomaton.isAccept(state)) {
                output.setLength(idx);
                // if (DEBUG) System.out.println("  return " + output.utf8ToString());
                return output.get();
              }
              // pop
              if (stack.size() == 0) {
                // if (DEBUG) System.out.println("  pop ord=" + idx + " return null");
                return null;
              } else {
                state = stack.remove(stack.size() - 1);
                idx--;
                // if (DEBUG) System.out.println("  pop ord=" + (idx+1) + " label=" + (char) label +
                // " first trans.min=" + (char) transitions[0].min);
                label = input.bytes[input.offset + idx] & 0xff;
              }
            } else {
              // if (DEBUG) System.out.println("  stop pop ord=" + idx + " first trans.min=" +
              // (char) transitions[0].min);
              break;
            }
          }
        }

        // if (DEBUG) System.out.println("  label=" + (char) label + " idx=" + idx);

        return addTail(state, output, idx, label);

      } else {
        output.grow(1 + idx);
        output.setByteAt(idx, (byte) label);
        stack.add(state);
        state = nextState;
        idx++;
      }
    }
  }

