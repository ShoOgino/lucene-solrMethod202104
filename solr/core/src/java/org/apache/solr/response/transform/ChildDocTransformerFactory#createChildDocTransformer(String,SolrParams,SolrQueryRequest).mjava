  private DocTransformer createChildDocTransformer(String field, SolrParams params, SolrQueryRequest req) {
    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();
    if (uniqueKeyField == null) {
      throw new SolrException( ErrorCode.BAD_REQUEST,
          " ChildDocTransformer requires the schema to have a uniqueKeyField." );
    }
    // Do we build a hierarchy or flat list of child docs (attached anonymously)?
    boolean buildHierarchy = req.getSchema().hasExplicitField(NEST_PATH_FIELD_NAME);

    String parentFilterStr = params.get( "parentFilter" );
    BitSetProducer parentsFilter;
    // TODO reuse org.apache.solr.search.join.BlockJoinParentQParser.getCachedFilter (uses a cache)
    // TODO shouldn't we try to use the Solr filter cache, and then ideally implement
    //  BitSetProducer over that?
    // DocSet parentDocSet = req.getSearcher().getDocSet(parentFilterQuery);
    // then return BitSetProducer with custom BitSet impl accessing the docSet
    if (parentFilterStr == null) {
      parentsFilter = !buildHierarchy ? null : new QueryBitSetProducer(rootFilter);
    } else {
      if(buildHierarchy) {
        throw new SolrException(ErrorCode.BAD_REQUEST, "Parent filter should not be sent when the schema is nested");
      }
      Query query = parseQuery(parentFilterStr, req, "parentFilter");
      if (query == null) {
        throw new SolrException(ErrorCode.BAD_REQUEST, "Invalid Parent filter '" + parentFilterStr + "', resolves to null");
      }
      parentsFilter = new QueryBitSetProducer(query);
    }

    String childFilterStr = params.get( "childFilter" );
    DocSet childDocSet;
    if (childFilterStr == null) {
      childDocSet = null;
    } else {
      if (buildHierarchy) {
        childFilterStr = processPathHierarchyQueryString(childFilterStr);
      }
      Query childFilter = parseQuery(childFilterStr, req, "childFilter");
      try {
        childDocSet = req.getSearcher().getDocSet(childFilter);
      } catch (IOException e) {
        throw new SolrException(ErrorCode.SERVER_ERROR, e);
      }
    }

    String childReturnFields = params.get("fl");
    SolrReturnFields childSolrReturnFields;
    if (childReturnFields != null) {
      childSolrReturnFields = new SolrReturnFields(childReturnFields, req);
    } else {
      childSolrReturnFields = new SolrReturnFields(req);
    }

    int limit = params.getInt( "limit", 10 );

    return new ChildDocTransformer(field, parentsFilter, childDocSet, childSolrReturnFields,
        buildHierarchy, limit, req.getSchema().getUniqueKeyField().getName());
  }

