  @Override
  protected final Similarity getSimilarity(Random random) {
    // axiomatic parameter s
    final float s;
    switch (random.nextInt(4)) {
      case 0:
        // minimum value
        s = 0;
        break;
      case 1:
        // tiny value
        s = Float.MIN_VALUE;
        break;
      case 2:
        // maximum value
        s = 1;
        break;
      default:
        // random value
        s = random.nextFloat();
        break;
    }
    // axiomatic query length
    final int queryLen;
    switch (random.nextInt(4)) {
      case 0:
        // minimum value
        queryLen = 0;
        break;
      case 1:
        // tiny value
        queryLen = 1;
        break;
      case 2:
        // maximum value
        queryLen = Integer.MAX_VALUE;
        break;
      default:
        // random value
        queryLen = random.nextInt(Integer.MAX_VALUE);
        break;
    }
    // axiomatic parameter k
    final float k;
    switch (random.nextInt(4)) {
      case 0:
        // minimum value
        k = 0;
        break;
      case 1:
        // tiny value
        k = Float.MIN_VALUE;
        break;
      case 2:
        // maximum value
        k = 1;
        break;
      default:
        // random value
        k = random.nextFloat();
        break;
    }

    return getAxiomaticModel(s, queryLen, k);
  }

