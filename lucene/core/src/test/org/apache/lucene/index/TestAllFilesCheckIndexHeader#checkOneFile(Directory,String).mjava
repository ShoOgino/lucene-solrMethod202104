  private void checkOneFile(Directory dir, String victim) throws IOException {
    // use ramdir explicit, as we do evil things like try to generate broken files, deletes must
    // work.
    try (BaseDirectoryWrapper dirCopy =
        new MockDirectoryWrapper(random(), new ByteBuffersDirectory())) {
      dirCopy.setCheckIndexOnClose(false);

      long victimLength = dir.fileLength(victim);
      int wrongBytes = TestUtil.nextInt(random(), 1, (int) Math.min(100, victimLength));
      assert victimLength > 0;

      if (VERBOSE) {
        System.out.println(
            "TEST: now break file "
                + victim
                + " by randomizing first "
                + wrongBytes
                + " of "
                + victimLength);
      }

      for (String name : dir.listAll()) {
        if (name.equals(victim) == false) {
          dirCopy.copyFrom(dir, name, name, IOContext.DEFAULT);
        } else {

          // Iterate until our randomly generated bytes are indeed different from the first bytes of
          // the file ... the vast majority of the
          // time this will only require one iteration!
          while (true) {
            try (IndexOutput out = dirCopy.createOutput(name, IOContext.DEFAULT);
                IndexInput in = dir.openInput(name, IOContext.DEFAULT)) {
              // keeps same file length, but replaces the first wrongBytes with random bytes:
              byte[] bytes = new byte[wrongBytes];
              random().nextBytes(bytes);
              out.writeBytes(bytes, 0, bytes.length);
              byte[] bytes2 = new byte[wrongBytes];
              in.readBytes(bytes2, 0, bytes2.length);
              if (Arrays.equals(bytes, bytes2) == false) {
                // We successfully randomly generated bytes that differ from the bytes in the file:
                out.copyBytes(in, victimLength - wrongBytes);
                break;
              }
            }
            // we have to try again, delete the first attempt and retry the loop
            dirCopy.deleteFile(name);
          }
        }
        dirCopy.sync(Collections.singleton(name));
      }

      // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all
      // these confusing errors about open files:
      expectThrowsAnyOf(
          Arrays.asList(
              CorruptIndexException.class, EOFException.class, IndexFormatTooOldException.class),
          () -> DirectoryReader.open(dirCopy).close());

      // CheckIndex should also fail:
      expectThrowsAnyOf(
          Arrays.asList(
              CorruptIndexException.class, EOFException.class, IndexFormatTooOldException.class),
          () -> DirectoryReader.open(dirCopy).close());
    }
  }

