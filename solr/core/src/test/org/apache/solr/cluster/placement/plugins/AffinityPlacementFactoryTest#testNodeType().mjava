  @Test
  public void testNodeType() throws Exception {
    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(9);
    LinkedList<Builders.NodeBuilder> nodeBuilders = clusterBuilder.getLiveNodeBuilders();
    for (int i = 0; i < 9; i++) {
      nodeBuilders.get(i).setSysprop(AffinityPlacementConfig.NODE_TYPE_SYSPROP, "type_" + (i % 3));
    }

    String collectionName = "nodeTypeCollection";
    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);
    collectionBuilder.initializeShardsReplicas(1, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());

    // test single node type in collection
    AffinityPlacementConfig config = new AffinityPlacementConfig(
            MINIMAL_FREE_DISK_GB,
            PRIORITIZED_FREE_DISK_GB,
            Map.of(), Map.of(collectionName, "type_0"));
    configurePlugin(config);

    clusterBuilder.addCollection(collectionBuilder);

    PlacementContext placementContext = clusterBuilder.buildPlacementContext();
    Map<String, Set<String>> nodeNamesByType = new HashMap<>();
    Cluster cluster = placementContext.getCluster();
    AttributeValues attributeValues = placementContext.getAttributeFetcher()
            .requestNodeSystemProperty(AffinityPlacementConfig.NODE_TYPE_SYSPROP)
            .fetchAttributes();
    placementContext.getCluster().getLiveNodes().forEach(n ->
            nodeNamesByType
                    .computeIfAbsent(attributeValues.getSystemProperty(n, AffinityPlacementConfig.NODE_TYPE_SYSPROP).get(), type -> new HashSet<>())
                    .add(n.getName())
    );
    SolrCollection collection = placementContext.getCluster().getCollection(collectionName);
    PlacementRequestImpl placementRequest = new PlacementRequestImpl(collection,
            Set.of("shard1"), placementContext.getCluster().getLiveNodes(), 3, 0, 0);

    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);
    assertEquals("expected 3 placements: " + pp, 3, pp.getReplicaPlacements().size());
    Set<String> type0nodes = nodeNamesByType.get("type_0");
    Set<String> type1nodes = nodeNamesByType.get("type_1");
    Set<String> type2nodes = nodeNamesByType.get("type_2");

    for (ReplicaPlacement p : pp.getReplicaPlacements()) {
      assertTrue(type0nodes.contains(p.getNode().getName()));
    }

    // test 2 node types in collection
    config = new AffinityPlacementConfig(
            MINIMAL_FREE_DISK_GB,
            PRIORITIZED_FREE_DISK_GB,
            Map.of(), Map.of(collectionName, "type_0,type_1"));
    configurePlugin(config);

    placementContext = clusterBuilder.buildPlacementContext();
    collection = placementContext.getCluster().getCollection(collectionName);
    placementRequest = new PlacementRequestImpl(collection,
            Set.of("shard1"), placementContext.getCluster().getLiveNodes(), 6, 0, 0);

    pp = plugin.computePlacement(placementRequest, placementContext);
    assertEquals("expected 6 placements: " + pp, 6, pp.getReplicaPlacements().size());
    for (ReplicaPlacement p : pp.getReplicaPlacements()) {
      assertTrue(type0nodes.contains(p.getNode().getName()) ||
              type1nodes.contains(p.getNode().getName()));
    }

    // test 2 node types in nodes
    for (int i = 0; i < 9; i++) {
      if (i < 3) {
        nodeBuilders.get(i).setSysprop(AffinityPlacementConfig.NODE_TYPE_SYSPROP, "type_0,type_1");
      } else if (i < 6) {
        nodeBuilders.get(i).setSysprop(AffinityPlacementConfig.NODE_TYPE_SYSPROP, "type_1,type_2");
      } else {
        nodeBuilders.get(i).setSysprop(AffinityPlacementConfig.NODE_TYPE_SYSPROP, "type_2");
      }
    }

    placementContext = clusterBuilder.buildPlacementContext();
    collection = placementContext.getCluster().getCollection(collectionName);
    placementRequest = new PlacementRequestImpl(collection,
            Set.of("shard1"), placementContext.getCluster().getLiveNodes(), 6, 0, 0);
    pp = plugin.computePlacement(placementRequest, placementContext);
    assertEquals("expected 6 placements: " + pp, 6, pp.getReplicaPlacements().size());
    nodeNamesByType.clear();
    AttributeValues attributeValues2 = placementContext.getAttributeFetcher()
            .requestNodeSystemProperty(AffinityPlacementConfig.NODE_TYPE_SYSPROP)
            .fetchAttributes();
    placementContext.getCluster().getLiveNodes().forEach(n -> {
      String nodeTypesStr = attributeValues2.getSystemProperty(n, AffinityPlacementConfig.NODE_TYPE_SYSPROP).get();
      for (String nodeType : StrUtils.splitSmart(nodeTypesStr, ',')) {
        nodeNamesByType
                .computeIfAbsent(nodeType, type -> new HashSet<>())
                .add(n.getName());
      }
    });
    type0nodes = nodeNamesByType.get("type_0");
    type1nodes = nodeNamesByType.get("type_1");

    for (ReplicaPlacement p : pp.getReplicaPlacements()) {
      assertTrue(type0nodes.contains(p.getNode().getName()) ||
              type1nodes.contains(p.getNode().getName()));
    }

  }

