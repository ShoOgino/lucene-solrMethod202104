  // TODO: maybe this can reuse the logic of test dueling codecs?
  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2)
      throws IOException {
    assertEquals(
        "IndexReaders have different values for numDocs.", index1.numDocs(), index2.numDocs());
    assertEquals(
        "IndexReaders have different values for maxDoc.", index1.maxDoc(), index2.maxDoc());
    assertEquals(
        "Only one IndexReader has deletions.", index1.hasDeletions(), index2.hasDeletions());
    assertEquals(
        "Single segment test differs.", index1.leaves().size() == 1, index2.leaves().size() == 1);

    // check field names
    FieldInfos fieldInfos1 = FieldInfos.getMergedFieldInfos(index1);
    FieldInfos fieldInfos2 = FieldInfos.getMergedFieldInfos(index2);
    assertEquals(
        "IndexReaders have different numbers of fields.", fieldInfos1.size(), fieldInfos2.size());
    final int numFields = fieldInfos1.size();
    for (int fieldID = 0; fieldID < numFields; fieldID++) {
      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);
      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);
      assertEquals("Different field names.", fieldInfo1.name, fieldInfo2.name);
    }

    // check norms
    for (FieldInfo fieldInfo : fieldInfos1) {
      String curField = fieldInfo.name;
      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);
      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);
      if (norms1 != null && norms2 != null) {
        // todo: generalize this (like TestDuelingCodecs assert)
        while (true) {
          int docID = norms1.nextDoc();
          assertEquals(docID, norms2.nextDoc());
          if (docID == NO_MORE_DOCS) {
            break;
          }
          assertEquals(
              "Norm different for doc " + docID + " and field '" + curField + "'.",
              norms1.longValue(),
              norms2.longValue());
        }
      } else {
        assertNull(norms1);
        assertNull(norms2);
      }
    }

    // check deletions
    final Bits liveDocs1 = MultiBits.getLiveDocs(index1);
    final Bits liveDocs2 = MultiBits.getLiveDocs(index2);
    for (int i = 0; i < index1.maxDoc(); i++) {
      assertEquals(
          "Doc " + i + " only deleted in one index.",
          liveDocs1 == null || !liveDocs1.get(i),
          liveDocs2 == null || !liveDocs2.get(i));
    }

    // check stored fields
    for (int i = 0; i < index1.maxDoc(); i++) {
      if (liveDocs1 == null || liveDocs1.get(i)) {
        Document doc1 = index1.document(i);
        Document doc2 = index2.document(i);
        List<IndexableField> field1 = doc1.getFields();
        List<IndexableField> field2 = doc2.getFields();
        assertEquals(
            "Different numbers of fields for doc " + i + ".", field1.size(), field2.size());
        Iterator<IndexableField> itField1 = field1.iterator();
        Iterator<IndexableField> itField2 = field2.iterator();
        while (itField1.hasNext()) {
          Field curField1 = (Field) itField1.next();
          Field curField2 = (Field) itField2.next();
          assertEquals(
              "Different fields names for doc " + i + ".", curField1.name(), curField2.name());
          assertEquals(
              "Different field values for doc " + i + ".",
              curField1.stringValue(),
              curField2.stringValue());
        }
      }
    }

    // check dictionary and posting lists
    TreeSet<String> fields1 = new TreeSet<>(FieldInfos.getIndexedFields(index1));
    TreeSet<String> fields2 = new TreeSet<>(FieldInfos.getIndexedFields(index2));
    Iterator<String> fenum2 = fields2.iterator();
    for (String field1 : fields1) {
      assertEquals("Different fields", field1, fenum2.next());
      Terms terms1 = MultiTerms.getTerms(index1, field1);
      if (terms1 == null) {
        assertNull(MultiTerms.getTerms(index2, field1));
        continue;
      }
      TermsEnum enum1 = terms1.iterator();

      Terms terms2 = MultiTerms.getTerms(index2, field1);
      assertNotNull(terms2);
      TermsEnum enum2 = terms2.iterator();

      while (enum1.next() != null) {
        assertEquals("Different terms", enum1.term(), enum2.next());
        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);
        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);

        while (tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
          assertEquals(
              "Different doc id in postinglist of term " + enum1.term() + ".",
              tp1.docID(),
              tp2.docID());
          assertEquals(
              "Different term frequence in postinglist of term " + enum1.term() + ".",
              tp1.freq(),
              tp2.freq());
          for (int i = 0; i < tp1.freq(); i++) {
            assertEquals(
                "Different positions in postinglist of term " + enum1.term() + ".",
                tp1.nextPosition(),
                tp2.nextPosition());
          }
        }
      }
    }
    assertFalse(fenum2.hasNext());
  }

