  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().
  public void testLatin1Accents() throws Exception {
    TokenStream stream =
        whitespaceMockTokenizer(
            "Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ"
                + " Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ"
                + " ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ");
    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream, random().nextBoolean());

    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);
    filter.reset();
    assertNextTerms("Des", "Des", filter, termAtt);
    assertNextTerms("mot", "mot", filter, termAtt);
    assertNextTerms("clés", "cles", filter, termAtt);
    assertNextTerms("À", "A", filter, termAtt);
    assertNextTerms("LA", "LA", filter, termAtt);
    assertNextTerms("CHAÎNE", "CHAINE", filter, termAtt);
    assertNextTerms("À", "A", filter, termAtt);
    assertNextTerms("Á", "A", filter, termAtt);
    assertNextTerms("Â", "A", filter, termAtt);
    assertNextTerms("Ã", "A", filter, termAtt);
    assertNextTerms("Ä", "A", filter, termAtt);
    assertNextTerms("Å", "A", filter, termAtt);
    assertNextTerms("Æ", "AE", filter, termAtt);
    assertNextTerms("Ç", "C", filter, termAtt);
    assertNextTerms("È", "E", filter, termAtt);
    assertNextTerms("É", "E", filter, termAtt);
    assertNextTerms("Ê", "E", filter, termAtt);
    assertNextTerms("Ë", "E", filter, termAtt);
    assertNextTerms("Ì", "I", filter, termAtt);
    assertNextTerms("Í", "I", filter, termAtt);
    assertNextTerms("Î", "I", filter, termAtt);
    assertNextTerms("Ï", "I", filter, termAtt);
    assertNextTerms("Ĳ", "IJ", filter, termAtt);
    assertNextTerms("Ð", "D", filter, termAtt);
    assertNextTerms("Ñ", "N", filter, termAtt);
    assertNextTerms("Ò", "O", filter, termAtt);
    assertNextTerms("Ó", "O", filter, termAtt);
    assertNextTerms("Ô", "O", filter, termAtt);
    assertNextTerms("Õ", "O", filter, termAtt);
    assertNextTerms("Ö", "O", filter, termAtt);
    assertNextTerms("Ø", "O", filter, termAtt);
    assertNextTerms("Œ", "OE", filter, termAtt);
    assertNextTerms("Þ", "TH", filter, termAtt);
    assertNextTerms("Ù", "U", filter, termAtt);
    assertNextTerms("Ú", "U", filter, termAtt);
    assertNextTerms("Û", "U", filter, termAtt);
    assertNextTerms("Ü", "U", filter, termAtt);
    assertNextTerms("Ý", "Y", filter, termAtt);
    assertNextTerms("Ÿ", "Y", filter, termAtt);
    assertNextTerms("à", "a", filter, termAtt);
    assertNextTerms("á", "a", filter, termAtt);
    assertNextTerms("â", "a", filter, termAtt);
    assertNextTerms("ã", "a", filter, termAtt);
    assertNextTerms("ä", "a", filter, termAtt);
    assertNextTerms("å", "a", filter, termAtt);
    assertNextTerms("æ", "ae", filter, termAtt);
    assertNextTerms("ç", "c", filter, termAtt);
    assertNextTerms("è", "e", filter, termAtt);
    assertNextTerms("é", "e", filter, termAtt);
    assertNextTerms("ê", "e", filter, termAtt);
    assertNextTerms("ë", "e", filter, termAtt);
    assertNextTerms("ì", "i", filter, termAtt);
    assertNextTerms("í", "i", filter, termAtt);
    assertNextTerms("î", "i", filter, termAtt);
    assertNextTerms("ï", "i", filter, termAtt);
    assertNextTerms("ĳ", "ij", filter, termAtt);
    assertNextTerms("ð", "d", filter, termAtt);
    assertNextTerms("ñ", "n", filter, termAtt);
    assertNextTerms("ò", "o", filter, termAtt);
    assertNextTerms("ó", "o", filter, termAtt);
    assertNextTerms("ô", "o", filter, termAtt);
    assertNextTerms("õ", "o", filter, termAtt);
    assertNextTerms("ö", "o", filter, termAtt);
    assertNextTerms("ø", "o", filter, termAtt);
    assertNextTerms("œ", "oe", filter, termAtt);
    assertNextTerms("ß", "ss", filter, termAtt);
    assertNextTerms("þ", "th", filter, termAtt);
    assertNextTerms("ù", "u", filter, termAtt);
    assertNextTerms("ú", "u", filter, termAtt);
    assertNextTerms("û", "u", filter, termAtt);
    assertNextTerms("ü", "u", filter, termAtt);
    assertNextTerms("ý", "y", filter, termAtt);
    assertNextTerms("ÿ", "y", filter, termAtt);
    assertNextTerms("ﬁ", "fi", filter, termAtt);
    assertNextTerms("ﬂ", "fl", filter, termAtt);
    assertFalse(filter.incrementToken());
  }

