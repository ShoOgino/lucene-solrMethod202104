  @Override
  public List<OffsetRange> get(
      MatchesIterator matchesIterator, MatchRegionRetriever.FieldValueProvider doc)
      throws IOException {
    List<CharSequence> values = doc.getValues(field);

    Set<BytesRef> matchTerms = new HashSet<>();
    while (matchesIterator.next()) {
      Query q = matchesIterator.getQuery();
      q.visit(
          new QueryVisitor() {
            @Override
            public void consumeTerms(Query query, Term... terms) {
              for (Term t : terms) {
                if (field.equals(t.field())) {
                  matchTerms.add(t.bytes());
                }
              }
            }
          });
    }

    ArrayList<OffsetRange> ranges = new ArrayList<>();
    int valueOffset = 0;
    for (int valueIndex = 0, max = values.size(); valueIndex < max; valueIndex++) {
      final String value = values.get(valueIndex).toString();

      TokenStream ts = analyzer.tokenStream(field, value);
      OffsetAttribute offsetAttr = ts.getAttribute(OffsetAttribute.class);
      TermToBytesRefAttribute termAttr = ts.getAttribute(TermToBytesRefAttribute.class);
      ts.reset();
      while (ts.incrementToken()) {
        if (matchTerms.contains(termAttr.getBytesRef())) {
          int startOffset = valueOffset + offsetAttr.startOffset();
          int endOffset = valueOffset + offsetAttr.endOffset();
          ranges.add(new OffsetRange(startOffset, endOffset));
        }
      }
      ts.end();
      valueOffset += offsetAttr.endOffset() + analyzer.getOffsetGap(field);
      ts.close();
    }
    return ranges;
  }

