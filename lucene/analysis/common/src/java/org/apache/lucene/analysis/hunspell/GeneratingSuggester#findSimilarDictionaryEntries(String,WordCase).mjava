  private List<WeightedWord> findSimilarDictionaryEntries(String word, WordCase originalCase) {
    try {
      IntsRefFSTEnum<IntsRef> fstEnum = new IntsRefFSTEnum<>(dictionary.words);
      TreeSet<WeightedWord> roots = new TreeSet<>();

      IntsRefFSTEnum.InputOutput<IntsRef> mapping;
      while ((mapping = fstEnum.next()) != null) {
        IntsRef key = mapping.input;
        if (Math.abs(key.length - word.length()) > 4 || !isSuitableRoot(mapping.output)) continue;

        String root = toString(key);
        if (originalCase == WordCase.LOWER
            && WordCase.caseOf(root) == WordCase.TITLE
            && !dictionary.hasLanguage("de")) {
          continue;
        }

        String lower = dictionary.toLowerCase(root);
        int sc =
            ngram(3, word, lower, EnumSet.of(NGramOptions.LONGER_WORSE)) + commonPrefix(word, root);

        roots.add(new WeightedWord(root, sc));
      }
      return roots.stream().limit(MAX_ROOTS).collect(Collectors.toList());
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

