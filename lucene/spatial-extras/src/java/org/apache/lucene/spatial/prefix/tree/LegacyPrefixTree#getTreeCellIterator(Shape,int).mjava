  @Override
  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {
    if (!(shape instanceof Point)) return super.getTreeCellIterator(shape, detailLevel);

    // This specialization is here because the legacy implementations don't have a fast
    // implementation of
    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and
    // create
    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.

    Cell cell = getCell((Point) shape, detailLevel);
    assert cell instanceof LegacyCell;
    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);
    // fill in reverse order to be sorted
    Cell[] cells = new Cell[detailLevel];
    for (int i = 1; i < detailLevel; i++) {
      fullBytes.length = i;
      Cell parentCell = readCell(fullBytes, null);
      cells[i - 1] = parentCell;
    }
    cells[detailLevel - 1] = cell;
    return new FilterCellIterator(Arrays.asList(cells).iterator(), null); // null filter
  }

