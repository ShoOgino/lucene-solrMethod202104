  /**
   * Test for disjoint shapes. We build a DISJOINT shape with respect the geoAreaShape
   * and create shapes WITHIN that shapes. The resulting shape should be DISJOINT
   * to the geoAreaShape.
   *
   * Note that both shapes cannot be concave.
   */
  @Test
  public void testRandomDisjoint() {
    int referenceShapeType = CONVEX_SIMPLE_POLYGON;
    PlanetModel planetModel = randomPlanetModel();
    int geoAreaShapeType = randomGeoAreaShapeType();
    int shapeType = randomConvexShapeType();

    GeoShape shape = null;
    GeoAreaShape geoAreaShape = null;
    while (shape == null) {
      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);
      Constraints constraints = new Constraints();
      constraints.put(geoAreaShape, GeoArea.DISJOINT);
      GeoAreaShape reference = randomGeoAreaShape(referenceShapeType, planetModel, constraints);
      if (reference != null) {
        constraints = getEmptyConstraint();
        constraints.put(reference, GeoArea.WITHIN);
        shape = randomGeoShape(shapeType, planetModel, constraints);
      }
    }
    StringBuilder b = new StringBuilder();
    b.append("geoAreaShape: " + geoAreaShape + "\n");
    b.append("shape: " + shape);
    int rel = geoAreaShape.getRelationship(shape);
    assertEquals(b.toString(), GeoArea.DISJOINT, rel);
    if (shape instanceof GeoArea) {
      rel = ((GeoArea)shape).getRelationship(geoAreaShape);
      assertEquals(b.toString(), GeoArea.DISJOINT, rel);
    }
  }

