  protected void flatten(
      Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost)
      throws IOException {
    while (sourceQuery instanceof BoostQuery) {
      BoostQuery bq = (BoostQuery) sourceQuery;
      sourceQuery = bq.getQuery();
      boost *= bq.getBoost();
    }
    if (sourceQuery instanceof BooleanQuery) {
      BooleanQuery bq = (BooleanQuery) sourceQuery;
      for (BooleanClause clause : bq) {
        if (!clause.isProhibited()) {
          flatten(clause.getQuery(), reader, flatQueries, boost);
        }
      }
    } else if (sourceQuery instanceof DisjunctionMaxQuery) {
      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) sourceQuery;
      for (Query query : dmq) {
        flatten(query, reader, flatQueries, boost);
      }
    } else if (sourceQuery instanceof TermQuery) {
      if (boost != 1f) {
        sourceQuery = new BoostQuery(sourceQuery, boost);
      }
      if (!flatQueries.contains(sourceQuery)) flatQueries.add(sourceQuery);
    } else if (sourceQuery instanceof SynonymQuery) {
      SynonymQuery synQuery = (SynonymQuery) sourceQuery;
      for (Term term : synQuery.getTerms()) {
        flatten(new TermQuery(term), reader, flatQueries, boost);
      }
    } else if (sourceQuery instanceof PhraseQuery) {
      PhraseQuery pq = (PhraseQuery) sourceQuery;
      if (pq.getTerms().length == 1) sourceQuery = new TermQuery(pq.getTerms()[0]);
      if (boost != 1f) {
        sourceQuery = new BoostQuery(sourceQuery, boost);
      }
      flatQueries.add(sourceQuery);
    } else if (sourceQuery instanceof ConstantScoreQuery) {
      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();
      if (q != null) {
        flatten(q, reader, flatQueries, boost);
      }
    } else if (sourceQuery instanceof FunctionScoreQuery) {
      final Query q = ((FunctionScoreQuery) sourceQuery).getWrappedQuery();
      if (q != null) {
        flatten(q, reader, flatQueries, boost);
      }
    } else if (reader != null) {
      Query query = sourceQuery;
      Query rewritten;
      if (sourceQuery instanceof MultiTermQuery) {
        rewritten =
            new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS)
                .rewrite(reader, (MultiTermQuery) query);
      } else {
        rewritten = query.rewrite(reader);
      }
      if (rewritten != query) {
        // only rewrite once and then flatten again - the rewritten query could have a speacial
        // treatment
        // if this method is overwritten in a subclass.
        flatten(rewritten, reader, flatQueries, boost);
      }
      // if the query is already rewritten we discard it
    }
    // else discard queries
  }

