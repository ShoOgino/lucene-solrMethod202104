  /**
   * Compute arc distance from plane to a vector.
   *
   * @param planetModel is the planet model.
   * @param x is the x vector value.
   * @param y is the y vector value.
   * @param z is the z vector value.
   * @param bounds are the bounds which constrain the intersection point.
   * @return the arc distance.
   */
  public double arcDistance(
      final PlanetModel planetModel,
      final double x,
      final double y,
      final double z,
      final Membership... bounds) {

    if (evaluateIsZero(x, y, z)) {
      if (meetsAllBounds(x, y, z, bounds)) return 0.0;
      return Double.POSITIVE_INFINITY;
    }

    // First, compute the perpendicular plane.
    final Plane perpPlane =
        new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);

    // We need to compute the intersection of two planes on the geo surface: this one, and its
    // perpendicular.
    // Then, we need to choose which of the two points we want to compute the distance to.  We pick
    // the
    // shorter distance always.

    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);

    // For each point, compute a linear distance, and take the minimum of them
    double minDistance = Double.POSITIVE_INFINITY;

    for (final GeoPoint intersectionPoint : intersectionPoints) {
      if (meetsAllBounds(intersectionPoint, bounds)) {
        final double theDistance = intersectionPoint.arcDistance(x, y, z);
        if (theDistance < minDistance) {
          minDistance = theDistance;
        }
      }
    }
    return minDistance;
  }

