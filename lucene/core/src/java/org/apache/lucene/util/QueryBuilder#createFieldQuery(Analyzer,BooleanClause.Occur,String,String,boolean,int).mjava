  /**
   * Creates a query from the analysis chain.
   *
   * <p>Expert: this is more useful for subclasses such as queryparsers. If using this class
   * directly, just use {@link #createBooleanQuery(String, String)} and {@link
   * #createPhraseQuery(String, String)}. This is a complex method and it is usually not necessary
   * to override it in a subclass; instead, override methods like {@link #newBooleanQuery}, etc., if
   * possible.
   *
   * @param analyzer analyzer used for this query
   * @param operator default boolean operator used for this query
   * @param field field to create queries against
   * @param queryText text to be passed to the analysis chain
   * @param quoted true if phrases should be generated when terms occur at more than one position
   * @param phraseSlop slop factor for phrase/multiphrase queries
   */
  protected Query createFieldQuery(
      Analyzer analyzer,
      BooleanClause.Occur operator,
      String field,
      String queryText,
      boolean quoted,
      int phraseSlop) {
    assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST;

    // Use the analyzer to get all the tokens, and then build an appropriate
    // query based on the analysis chain.
    try (TokenStream source = analyzer.tokenStream(field, queryText)) {
      return createFieldQuery(source, operator, field, quoted, phraseSlop);
    } catch (IOException e) {
      throw new RuntimeException("Error analyzing query text", e);
    }
  }

