  // LUCENE-5528 and LUCENE-6464
  public void testBasicContext() throws Exception {
    Input keys[] =
        new Input[] {
          new Input("lend me your ear", 8, new BytesRef("foobar"), asSet("foo", "bar")),
          new Input(
              "a penny saved is a penny earned", 10, new BytesRef("foobaz"), asSet("foo", "baz"))
        };

    Path tempDir = createTempDir("analyzingInfixContext");

    for (int iter = 0; iter < 2; iter++) {
      AnalyzingInfixSuggester suggester;
      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
      if (iter == 0) {
        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);
        suggester.build(new InputArrayIterator(keys));
      } else {
        // Test again, after close/reopen:
        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);
      }

      // No context provided, all results returned
      List<LookupResult> results =
          suggester.lookup(TestUtil.stringToCharSequence("ear", random()), 10, true, true);
      assertEquals(2, results.size());
      LookupResult result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      result = results.get(1);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // Both have "foo" context:
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), asSet("foo"), 10, true, true);
      assertEquals(2, results.size());

      result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      result = results.get(1);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // Only one has "bar" context:
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), asSet("bar"), 10, true, true);
      assertEquals(1, results.size());

      result = results.get(0);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // None do not have "foo" context:
      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();
      contextInfo.put(new BytesRef("foo"), BooleanClause.Occur.MUST_NOT);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), contextInfo, 10, true, true);
      assertEquals(0, results.size());

      // Only one does not have "bar" context:
      contextInfo.clear();
      contextInfo.put(new BytesRef("bar"), BooleanClause.Occur.MUST_NOT);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), contextInfo, 10, true, true);
      assertEquals(1, results.size());

      result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      // Both have "foo" or "bar" context:
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), asSet("foo", "bar"), 10, true, true);
      assertEquals(2, results.size());

      result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      result = results.get(1);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // Both have "bar" or "baz" context:
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), asSet("bar", "baz"), 10, true, true);
      assertEquals(2, results.size());

      result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      result = results.get(1);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // Only one has "foo" and "bar" context:
      contextInfo.clear();
      contextInfo.put(new BytesRef("foo"), BooleanClause.Occur.MUST);
      contextInfo.put(new BytesRef("bar"), BooleanClause.Occur.MUST);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), contextInfo, 10, true, true);
      assertEquals(1, results.size());

      result = results.get(0);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // None have "bar" and "baz" context:
      contextInfo.clear();
      contextInfo.put(new BytesRef("bar"), BooleanClause.Occur.MUST);
      contextInfo.put(new BytesRef("baz"), BooleanClause.Occur.MUST);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), contextInfo, 10, true, true);
      assertEquals(0, results.size());

      // None do not have "foo" and do not have "bar" context:
      contextInfo.clear();
      contextInfo.put(new BytesRef("foo"), BooleanClause.Occur.MUST_NOT);
      contextInfo.put(new BytesRef("bar"), BooleanClause.Occur.MUST_NOT);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), contextInfo, 10, true, true);
      assertEquals(0, results.size());

      // Both do not have "bar" and do not have "baz" context:
      contextInfo.clear();
      contextInfo.put(new BytesRef("bar"), BooleanClause.Occur.MUST_NOT);
      contextInfo.put(new BytesRef("baz"), BooleanClause.Occur.MUST_NOT);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), asSet("bar", "baz"), 10, true, true);
      assertEquals(2, results.size());

      result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      result = results.get(1);
      assertEquals("lend me your ear", result.key);
      assertEquals("lend me your <b>ear</b>", result.highlightKey);
      assertEquals(8, result.value);
      assertEquals(new BytesRef("foobar"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("bar")));

      // Only one has "foo" and does not have "bar" context:
      contextInfo.clear();
      contextInfo.put(new BytesRef("foo"), BooleanClause.Occur.MUST);
      contextInfo.put(new BytesRef("bar"), BooleanClause.Occur.MUST_NOT);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), contextInfo, 10, true, true);
      assertEquals(1, results.size());

      result = results.get(0);
      assertEquals("a penny saved is a penny earned", result.key);
      assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
      assertEquals(10, result.value);
      assertEquals(new BytesRef("foobaz"), result.payload);
      assertNotNull(result.contexts);
      assertEquals(2, result.contexts.size());
      assertTrue(result.contexts.contains(new BytesRef("foo")));
      assertTrue(result.contexts.contains(new BytesRef("baz")));

      // LUCENE-6464 Using the advanced context filtering by query.
      // Note that this is just a sanity test as all the above tests run through the filter by query
      // method
      BooleanQuery.Builder query = new BooleanQuery.Builder();
      suggester.addContextToQuery(query, new BytesRef("foo"), BooleanClause.Occur.MUST);
      suggester.addContextToQuery(query, new BytesRef("bar"), BooleanClause.Occur.MUST_NOT);
      results =
          suggester.lookup(
              TestUtil.stringToCharSequence("ear", random()), query.build(), 10, true, true);
      assertEquals(1, results.size());

      suggester.close();
      a.close();
    }
  }

