  /**
   * Expert: Updates a document by first updating the document(s) containing <code>term</code> with
   * the given doc-values fields and then adding the new document. The doc-values update and then
   * add are atomic as seen by a reader on the same index (flush may happen only after the add).
   *
   * <p>One use of this API is to retain older versions of documents instead of replacing them. The
   * existing documents can be updated to reflect they are no longer current while atomically adding
   * new documents at the same time.
   *
   * <p>In contrast to {@link #updateDocument(Term, Iterable)} this method will not delete documents
   * in the index matching the given term but instead update them with the given doc-values fields
   * which can be used as a soft-delete mechanism.
   *
   * <p>See {@link #addDocuments(Iterable)} and {@link #updateDocuments(Term, Iterable)}.
   *
   * @return The <a href="#sequence_number">sequence number</a> for this operation
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   * @lucene.experimental
   */
  public long softUpdateDocument(
      Term term, Iterable<? extends IndexableField> doc, Field... softDeletes) throws IOException {
    if (term == null) {
      throw new IllegalArgumentException("term must not be null");
    }
    if (softDeletes == null || softDeletes.length == 0) {
      throw new IllegalArgumentException("at least one soft delete must be present");
    }
    return updateDocuments(
        DocumentsWriterDeleteQueue.newNode(buildDocValuesUpdate(term, softDeletes)), List.of(doc));
  }

