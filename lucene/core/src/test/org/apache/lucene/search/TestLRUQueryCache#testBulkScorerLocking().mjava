  public void testBulkScorerLocking() throws Exception {

    Directory dir = newDirectory();
    IndexWriterConfig iwc =
        newIndexWriterConfig()
            .setMergePolicy(NoMergePolicy.INSTANCE)
            // the test framework sometimes sets crazy low values, prevent this since we are
            // indexing many docs
            .setMaxBufferedDocs(-1);
    IndexWriter w = new IndexWriter(dir, iwc);

    final int numDocs = atLeast(10);
    Document emptyDoc = new Document();
    for (int d = 0; d < numDocs; ++d) {
      for (int i = random().nextInt(5000); i >= 0; --i) {
        w.addDocument(emptyDoc);
      }
      Document doc = new Document();
      for (String value : Arrays.asList("foo", "bar", "baz")) {
        if (random().nextBoolean()) {
          doc.add(new StringField("field", value, Store.NO));
        }
      }
    }
    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {
      w.addDocument(emptyDoc);
    }
    if (random().nextBoolean()) {
      w.forceMerge(1);
    }

    DirectoryReader reader = DirectoryReader.open(w);
    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);

    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true, Float.POSITIVE_INFINITY);
    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);
    searcher.setQueryCache(cache);
    searcher.setQueryCachingPolicy(ALWAYS_CACHE);

    Query query =
        new ConstantScoreQuery(
            new BooleanQuery.Builder()
                .add(new BoostQuery(new TermQuery(new Term("field", "foo")), 3), Occur.SHOULD)
                .add(new BoostQuery(new TermQuery(new Term("field", "bar")), 3), Occur.SHOULD)
                .add(new BoostQuery(new TermQuery(new Term("field", "baz")), 3), Occur.SHOULD)
                .build());

    searcher.search(query, 1);

    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);
    noCacheHelperSearcher.setQueryCache(cache);
    noCacheHelperSearcher.setQueryCachingPolicy(ALWAYS_CACHE);
    noCacheHelperSearcher.search(query, 1);

    Thread t =
        new Thread(
            () -> {
              try {
                noCacheReader.close();
                w.close();
                dir.close();
              } catch (Exception e) {
                throw new RuntimeException(e);
              }
            });
    t.start();
    t.join();
  }

