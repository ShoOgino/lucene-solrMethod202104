  private void assertTopDocs(
      TopDocs expectedTopDocs,
      TopDocs actualTopDocs,
      ScoreMode scoreMode,
      IndexSearcher indexSearcher,
      Query joinQuery)
      throws IOException {
    assertEquals(expectedTopDocs.totalHits.value, actualTopDocs.totalHits.value);
    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);
    if (scoreMode == ScoreMode.None) {
      return;
    }

    if (VERBOSE) {
      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {
        System.out.printf(
            Locale.ENGLISH,
            "Expected doc: %d | Actual doc: %d\n",
            expectedTopDocs.scoreDocs[i].doc,
            actualTopDocs.scoreDocs[i].doc);
        System.out.printf(
            Locale.ENGLISH,
            "Expected score: %f | Actual score: %f\n",
            expectedTopDocs.scoreDocs[i].score,
            actualTopDocs.scoreDocs[i].score);
      }
    }

    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {
      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);
      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);
      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);
      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);
    }
  }

