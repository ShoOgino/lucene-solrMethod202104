  public void testParamsFactory() throws IOException {
    // negative maxTokenLen
    IllegalArgumentException iae =
        expectThrows(
            IllegalArgumentException.class,
            () -> new KeywordTokenizerFactory(makeArgs("maxTokenLen", "-1")));
    assertEquals(
        "maxTokenLen must be greater than 0 and less than 1048576 passed: -1", iae.getMessage());

    // zero maxTokenLen
    iae =
        expectThrows(
            IllegalArgumentException.class,
            () -> new KeywordTokenizerFactory(makeArgs("maxTokenLen", "0")));
    assertEquals(
        "maxTokenLen must be greater than 0 and less than 1048576 passed: 0", iae.getMessage());

    // Added random param, should throw illegal error
    iae =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                new KeywordTokenizerFactory(
                    makeArgs("maxTokenLen", "255", "randomParam", "rValue")));
    assertEquals("Unknown parameters: {randomParam=rValue}", iae.getMessage());

    // tokeniser will never split, no matter what is passed,
    // but the buffer will not be more than length of the token

    KeywordTokenizerFactory factory = new KeywordTokenizerFactory(makeArgs("maxTokenLen", "5"));
    AttributeFactory attributeFactory = newAttributeFactory();
    Tokenizer tokenizer = factory.create(attributeFactory);
    StringReader reader = new StringReader("Tokenizertest");
    tokenizer.setReader(reader);
    assertTokenStreamContents(tokenizer, new String[] {"Tokenizertest"});

    // tokeniser will never split, no matter what is passed,
    // but the buffer will not be more than length of the token
    factory = new KeywordTokenizerFactory(makeArgs("maxTokenLen", "2"));
    attributeFactory = newAttributeFactory();
    tokenizer = factory.create(attributeFactory);
    reader = new StringReader("Tokenizer\u00A0test");
    tokenizer.setReader(reader);
    assertTokenStreamContents(tokenizer, new String[] {"Tokenizer\u00A0test"});
  }

