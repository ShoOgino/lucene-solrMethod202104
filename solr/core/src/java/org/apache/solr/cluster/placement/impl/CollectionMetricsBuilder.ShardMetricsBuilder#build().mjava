    public ShardMetrics build() {
      final Map<String, ReplicaMetrics> metricsMap = new HashMap<>();
      replicaMetricsBuilders.forEach((name, replicaBuilder) -> {
        ReplicaMetrics metrics = replicaBuilder.build();
        metricsMap.put(name, metrics);
        if (replicaBuilder.leader) {
          if (leaderMetricsBuilder == null) {
            leaderMetricsBuilder = replicaBuilder;
          } else if (!leaderMetricsBuilder.replicaName.equals(replicaBuilder.replicaName)) {
            throw new RuntimeException("two replicas claim to be the shard leader! existing=" +
                leaderMetricsBuilder + " and current " + replicaBuilder);
          }
        }
      });
      final ReplicaMetrics finalLeaderMetrics = leaderMetricsBuilder != null ? leaderMetricsBuilder.build() : null;
      return new ShardMetrics() {
        @Override
        public String getShardName() {
          return shardName;
        }

        @Override
        public Optional<ReplicaMetrics> getLeaderMetrics() {
          return Optional.ofNullable(finalLeaderMetrics);
        }

        @Override
        public Optional<ReplicaMetrics> getReplicaMetrics(String replicaName) {
          return Optional.ofNullable(metricsMap.get(replicaName));
        }

        @Override
        public Iterator<ReplicaMetrics> iterator() {
          return metricsMap.values().iterator();
        }
      };
    }

