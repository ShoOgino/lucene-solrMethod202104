  @Test
  public void test20Newsgroups() throws Exception {

    String indexProperty = System.getProperty("index");
    if (indexProperty != null) {
      try {
        index = Boolean.valueOf(indexProperty);
      } catch (Exception e) {
        // ignore
      }
    }

    String splitProperty = System.getProperty("split");
    if (splitProperty != null) {
      try {
        split = Boolean.valueOf(splitProperty);
      } catch (Exception e) {
        // ignore
      }
    }

    Directory directory = newDirectory();
    Directory cv = null;
    Directory test = null;
    Directory train = null;
    IndexReader testReader = null;
    if (split) {
      cv = newDirectory();
      test = newDirectory();
      train = newDirectory();
    }

    IndexReader reader = null;
    List<Classifier<BytesRef>> classifiers = new LinkedList<>();
    try {
      Analyzer analyzer = new StandardAnalyzer();
      if (index) {

        System.out.println("Indexing 20 Newsgroups...");

        long startIndex = System.currentTimeMillis();
        IndexWriter indexWriter = new IndexWriter(directory, new IndexWriterConfig(analyzer));

        Path indexDir = Paths.get(INDEX_DIR);
        int docsIndexed = buildIndex(indexDir, indexWriter);

        long endIndex = System.currentTimeMillis();
        System.out.println(
            "Indexed " + docsIndexed + " docs in " + (endIndex - startIndex) / 1000 + "s");

        indexWriter.close();
      }

      if (split && !index) {
        reader = DirectoryReader.open(train);
      } else {
        reader = DirectoryReader.open(directory);
      }

      if (index && split) {
        System.out.println("Splitting the index...");

        long startSplit = System.currentTimeMillis();
        DatasetSplitter datasetSplitter = new DatasetSplitter(0.2, 0);
        datasetSplitter.split(
            reader,
            train,
            test,
            cv,
            analyzer,
            false,
            CATEGORY_FIELD,
            BODY_FIELD,
            SUBJECT_FIELD,
            CATEGORY_FIELD);
        reader.close();
        reader = DirectoryReader.open(train); // using the train index from now on
        long endSplit = System.currentTimeMillis();
        System.out.println("Splitting done in " + (endSplit - startSplit) / 1000 + "s");
      }

      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new ClassicSimilarity(),
              analyzer,
              null,
              1,
              0,
              0,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader, null, analyzer, null, 1, 0, 0, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new ClassicSimilarity(),
              analyzer,
              null,
              3,
              0,
              0,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader, new AxiomaticF1EXP(), analyzer, null, 3, 0, 0, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader, new AxiomaticF1LOG(), analyzer, null, 3, 0, 0, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new LMDirichletSimilarity(),
              analyzer,
              null,
              3,
              1,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new LMJelinekMercerSimilarity(0.3f),
              analyzer,
              null,
              3,
              1,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader, null, analyzer, null, 3, 1, 1, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new DFRSimilarity(new BasicModelG(), new AfterEffectB(), new NormalizationH1()),
              analyzer,
              null,
              3,
              1,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new IBSimilarity(
                  new DistributionSPL(), new LambdaDF(), new Normalization.NoNormalization()),
              analyzer,
              null,
              3,
              1,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestNeighborClassifier(
              reader,
              new IBSimilarity(new DistributionLL(), new LambdaTTF(), new NormalizationH1()),
              analyzer,
              null,
              3,
              1,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(
              reader,
              new LMJelinekMercerSimilarity(0.3f),
              analyzer,
              null,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(
              reader,
              new IBSimilarity(new DistributionLL(), new LambdaTTF(), new NormalizationH1()),
              analyzer,
              null,
              1,
              CATEGORY_FIELD,
              BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(
              reader, new ClassicSimilarity(), analyzer, null, 1, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(
              reader, new ClassicSimilarity(), analyzer, null, 3, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(reader, null, analyzer, null, 1, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(reader, null, analyzer, null, 3, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(
              reader, new AxiomaticF1EXP(), analyzer, null, 3, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new KNearestFuzzyClassifier(
              reader, new AxiomaticF1LOG(), analyzer, null, 3, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(new BM25NBClassifier(reader, analyzer, null, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new CachingNaiveBayesClassifier(reader, analyzer, null, CATEGORY_FIELD, BODY_FIELD));
      classifiers.add(
          new SimpleNaiveBayesClassifier(reader, analyzer, null, CATEGORY_FIELD, BODY_FIELD));

      int maxdoc;

      if (split) {
        testReader = DirectoryReader.open(test);
        maxdoc = testReader.maxDoc();
      } else {
        maxdoc = reader.maxDoc();
      }

      System.out.println("Starting evaluation on " + maxdoc + " docs...");

      ExecutorService service =
          new ThreadPoolExecutor(
              1,
              TestUtil.nextInt(random(), 2, 6),
              Long.MAX_VALUE,
              TimeUnit.MILLISECONDS,
              new LinkedBlockingQueue<>(),
              new NamedThreadFactory(getClass().getName()));
      List<Future<String>> futures = new LinkedList<>();
      for (Classifier<BytesRef> classifier : classifiers) {
        testClassifier(reader, testReader, service, futures, classifier);
      }
      for (Future<String> f : futures) {
        System.out.println(f.get());
      }

      Thread.sleep(10000);
      service.shutdown();

    } finally {
      if (reader != null) {
        reader.close();
      }
      directory.close();
      if (testReader != null) {
        testReader.close();
      }
      if (test != null) {
        test.close();
      }
      if (train != null) {
        train.close();
      }
      if (cv != null) {
        cv.close();
      }

      for (Classifier<BytesRef> c : classifiers) {
        if (c instanceof Closeable) {
          ((Closeable) c).close();
        }
      }
    }
  }

