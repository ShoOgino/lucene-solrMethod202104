  /*
   * Creates a single node cluster with an empty collection COLLECTION_NAME a configured BackupRepository named
   * VALID_REPOSITORY_NAME, and an existing incremental backup at location 'validBackupLocation'
   */
  @BeforeClass
  public static void setUpClass() throws Exception {
    System.setProperty("solr.allowPaths", "*");
    validBackupLocation = createTempDir().toAbsolutePath().toString();

    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML;
    String local =
            "<backup>" +
                    "<repository  name=\"local\" class=\"org.apache.solr.core.backup.repository.LocalFileSystemRepository\">" +
                    "</repository>" +
                    "</backup>";
    solrXml = solrXml.replace("</solr>", local + "</solr>");

    configureCluster(NUM_SHARDS)// nodes
            .addConfig("conf1", TEST_PATH().resolve("configsets").resolve("cloud-minimal").resolve("conf"))
            .withSolrXml(solrXml)
            .configure();

    final RequestStatusState createState = CollectionAdminRequest.createCollection(COLLECTION_NAME, "conf1", NUM_SHARDS, NUM_REPLICAS)
            .processAndWait(cluster.getSolrClient(), ASYNC_COMMAND_WAIT_PERIOD_MILLIS);
    assertEquals(RequestStatusState.COMPLETED, createState);

    final RequestStatusState backupState = CollectionAdminRequest.backupCollection(COLLECTION_NAME, BACKUP_NAME)
            .setRepositoryName(VALID_REPOSITORY_NAME)
            .setLocation(validBackupLocation)
            .processAndWait(cluster.getSolrClient(), ASYNC_COMMAND_WAIT_PERIOD_MILLIS);
    assertEquals(RequestStatusState.COMPLETED, backupState);
  }

