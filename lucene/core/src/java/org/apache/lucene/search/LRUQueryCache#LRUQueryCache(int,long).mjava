  /**
   * Create a new instance that will cache at most <code>maxSize</code> queries with at most <code>
   * maxRamBytesUsed</code> bytes of memory. Queries will only be cached on leaves that have more
   * than 10k documents and have more than 3% of the total number of documents in the index. This
   * should guarantee that all leaves from the upper {@link TieredMergePolicy tier} will be cached
   * while ensuring that at most <code>33</code> leaves can make it to the cache (very likely less
   * than 10 in practice), which is useful for this implementation since some operations perform in
   * linear time with the number of cached leaves. Only clauses whose cost is at most 100x the cost
   * of the top-level query will be cached in order to not hurt latency too much because of caching.
   */
  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {
    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 250);
  }

