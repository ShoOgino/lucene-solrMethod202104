  @Override
  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {
    Terms terms = ctx.reader().terms(field);
    if (terms == null) {
      return null;
    }
    List<IntervalIterator> subSources = new ArrayList<>();
    TermsEnum te = automaton.getTermsEnum(terms);
    BytesRef term;
    int count = 0;
    while ((term = te.next()) != null) {
      subSources.add(TermIntervalsSource.intervals(term, te));
      if (++count > maxExpansions) {
        throw new IllegalStateException(
            "Automaton ["
                + this.pattern
                + "] expanded to too many terms (limit "
                + maxExpansions
                + ")");
      }
    }
    if (subSources.size() == 0) {
      return null;
    }
    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);
  }

