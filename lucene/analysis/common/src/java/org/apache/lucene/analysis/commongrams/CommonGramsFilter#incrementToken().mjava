  /**
   * Inserts bigrams for common words into a token stream. For each input token, output the token.
   * If the token and/or the following token are in the list of common words also output a bigram
   * with position increment 0 and type="gram"
   *
   * <p>TODO:Consider adding an option to not emit unigram stopwords as in CDL XTF BigramStopFilter,
   * CommonGramsQueryFilter would need to be changed to work with this.
   *
   * <p>TODO: Consider optimizing for the case of three commongrams i.e "man of the year" normally
   * produces 3 bigrams: "man-of", "of-the", "the-year" but with proper management of positions we
   * could eliminate the middle bigram "of-the"and save a disk seek and a whole set of position
   * lookups.
   */
  @Override
  public boolean incrementToken() throws IOException {
    // get the next piece of input
    if (savedState != null) {
      restoreState(savedState);
      savedState = null;
      saveTermBuffer();
      return true;
    } else if (!input.incrementToken()) {
      return false;
    }

    /* We build n-grams before and after stopwords.
     * When valid, the buffer always contains at least the separator.
     * If it's empty, there is nothing before this stopword.
     */
    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {
      savedState = captureState();
      gramToken();
      return true;
    }

    saveTermBuffer();
    return true;
  }

