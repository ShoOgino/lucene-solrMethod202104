  /**
   * Constructor from a reader.
   *
   * <p>Expected input format:
   *
   * <pre>
   *     qnum  0   doc-name     is-relevant
   * </pre>
   *
   * Two sample lines:
   *
   * <pre>
   *     19    0   doc303       1
   *     19    0   doc7295      0
   * </pre>
   *
   * @param reader where judgements are read from.
   * @throws IOException If there is a low-level I/O error.
   */
  public TrecJudge(BufferedReader reader) throws IOException {
    judgements = new HashMap<>();
    QRelJudgement curr = null;
    String zero = "0";
    String line;

    try {
      while (null != (line = reader.readLine())) {
        line = line.trim();
        if (line.length() == 0 || '#' == line.charAt(0)) {
          continue;
        }
        StringTokenizer st = new StringTokenizer(line);
        String queryID = st.nextToken();
        st.nextToken();
        String docName = st.nextToken();
        boolean relevant = !zero.equals(st.nextToken());
        assert !st.hasMoreTokens() : "wrong format: " + line + "  next: " + st.nextToken();
        if (relevant) { // only keep relevant docs
          if (curr == null || !curr.queryID.equals(queryID)) {
            curr = judgements.get(queryID);
            if (curr == null) {
              curr = new QRelJudgement(queryID);
              judgements.put(queryID, curr);
            }
          }
          curr.addRelevandDoc(docName);
        }
      }
    } finally {
      reader.close();
    }
  }

