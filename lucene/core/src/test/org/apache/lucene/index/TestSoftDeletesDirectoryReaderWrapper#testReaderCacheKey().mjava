  public void testReaderCacheKey() throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();
    String softDeletesField = "soft_delete";
    indexWriterConfig.setSoftDeletesField(softDeletesField);
    indexWriterConfig.setMergePolicy(NoMergePolicy.INSTANCE);
    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);

    Document doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "1", Field.Store.YES));
    writer.addDocument(doc);
    doc = new Document();
    doc.add(new StringField("id", "2", Field.Store.YES));
    doc.add(new StringField("version", "1", Field.Store.YES));
    writer.addDocument(doc);
    writer.commit();
    DirectoryReader reader =
        new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);
    IndexReader.CacheHelper readerCacheHelper =
        reader.leaves().get(0).reader().getReaderCacheHelper();
    AtomicInteger leafCalled = new AtomicInteger(0);
    AtomicInteger dirCalled = new AtomicInteger(0);
    readerCacheHelper.addClosedListener(
        key -> {
          leafCalled.incrementAndGet();
          assertSame(key, readerCacheHelper.getKey());
        });
    IndexReader.CacheHelper dirReaderCacheHelper = reader.getReaderCacheHelper();
    dirReaderCacheHelper.addClosedListener(
        key -> {
          dirCalled.incrementAndGet();
          assertSame(key, dirReaderCacheHelper.getKey());
        });
    assertEquals(2, reader.numDocs());
    assertEquals(2, reader.maxDoc());
    assertEquals(0, reader.numDeletedDocs());

    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "2", Field.Store.YES));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    doc = new Document();
    doc.add(new StringField("id", "3", Field.Store.YES));
    doc.add(new StringField("version", "1", Field.Store.YES));
    writer.addDocument(doc);
    writer.commit();
    assertEquals(0, leafCalled.get());
    assertEquals(0, dirCalled.get());
    DirectoryReader newReader = DirectoryReader.openIfChanged(reader);
    assertEquals(0, leafCalled.get());
    assertEquals(0, dirCalled.get());
    assertNotSame(
        newReader.getReaderCacheHelper().getKey(), reader.getReaderCacheHelper().getKey());
    assertNotSame(newReader, reader);
    reader.close();
    reader = newReader;
    assertEquals(1, dirCalled.get());
    assertEquals(1, leafCalled.get());
    IOUtils.close(reader, writer, dir);
  }

