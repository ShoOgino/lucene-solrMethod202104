  private static final Node eliminateHoles(
      List<Node> holeList, final Map<Node, ?> holeListPolygons, Node outerNode) {
    // Sort the hole vertices by x coordinate
    holeList.sort(
        (Node pNodeA, Node pNodeB) -> {
          double diff = pNodeA.getX() - pNodeB.getX();
          if (diff == 0) {
            diff = pNodeA.getY() - pNodeB.getY();
            if (diff == 0) {
              // same hole node
              double a = Math.min(pNodeA.previous.getY(), pNodeA.next.getY());
              double b = Math.min(pNodeB.previous.getY(), pNodeB.next.getY());
              diff = a - b;
            }
          }
          return diff < 0 ? -1 : diff > 0 ? 1 : 0;
        });

    // Process holes from left to right.
    for (int i = 0; i < holeList.size(); ++i) {
      // Eliminate hole triangles from the result set
      final Node holeNode = holeList.get(i);
      double holeMinX, holeMaxX, holeMinY, holeMaxY;
      Object h = holeListPolygons.get(holeNode);
      if (h instanceof Polygon) {
        Polygon holePoly = (Polygon) h;
        holeMinX = holePoly.minLon;
        holeMaxX = holePoly.maxLon;
        holeMinY = holePoly.minLat;
        holeMaxY = holePoly.maxLat;
      } else {
        XYPolygon holePoly = (XYPolygon) h;
        holeMinX = holePoly.minX;
        holeMaxX = holePoly.maxX;
        holeMinY = holePoly.minY;
        holeMaxY = holePoly.maxY;
      }
      eliminateHole(holeNode, outerNode, holeMinX, holeMaxX, holeMinY, holeMaxY);
      // Filter the new polygon.
      outerNode = filterPoints(outerNode, outerNode.next);
    }
    // Return a pointer to the list.
    return outerNode;
  }

