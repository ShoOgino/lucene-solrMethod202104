  /** make sure values always go down: this is important for edge case consistency */
  public void testEncodeDecodeRoundsDown() throws Exception {
    PlanetModel planetModel = randomPlanetModel();
    int iters = atLeast(1000);
    for (int iter = 0; iter < iters; iter++) {
      final double latBase = GeoTestUtil.nextLatitude();
      final double lonBase = GeoTestUtil.nextLongitude();

      // test above the value
      double lat = latBase;
      double lon = lonBase;
      for (int i = 0; i < 1000; i++) {
        lat = Math.min(90, Math.nextUp(lat));
        lon = Math.min(180, Math.nextUp(lon));
        GeoPoint point = new GeoPoint(planetModel, toRadians(lat), toRadians(lon));
        GeoPoint pointEnc =
            new GeoPoint(
                Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.x), planetModel),
                Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.y), planetModel),
                Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.z), planetModel));
        assertTrue(pointEnc.x <= point.x);
        assertTrue(pointEnc.y <= point.y);
        assertTrue(pointEnc.z <= point.z);
      }

      // test below the value
      lat = latBase;
      lon = lonBase;
      for (int i = 0; i < 1000; i++) {
        lat = Math.max(-90, Math.nextDown(lat));
        lon = Math.max(-180, Math.nextDown(lon));
        GeoPoint point = new GeoPoint(planetModel, toRadians(lat), toRadians(lon));
        GeoPoint pointEnc =
            new GeoPoint(
                Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.x), planetModel),
                Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.y), planetModel),
                Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.z), planetModel));
        assertTrue(pointEnc.x <= point.x);
        assertTrue(pointEnc.y <= point.y);
        assertTrue(pointEnc.z <= point.z);
      }
    }
  }

