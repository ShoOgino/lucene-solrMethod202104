  /**
   * Returns the index of the previous bit set preceding the given bit zero-based index. <br>
   * For example with bits 100011: there is no previous bit set before index=0. the previous bit set
   * before index=1 is at index=0; the previous bit set before index=5 is at index=1; the previous
   * bit set before index=64 is at index=5;
   *
   * @param bitIndex The bit zero-based index. It must be greater than or equal to 0, and less than
   *     or equal to {@code number of bit-table bytes * Byte.SIZE}.
   * @param reader The {@link FST.BytesReader} to read. It must be positioned at the beginning of
   *     the bit-table.
   * @return The zero-based index of the previous bit set before the provided {@code bitIndex}; or
   *     -1 if none.
   */
  static int previousBitSet(int bitIndex, FST.BytesReader reader) throws IOException {
    assert bitIndex >= 0 : "bitIndex=" + bitIndex;
    int byteIndex = bitIndex >> 3;
    reader.skipBytes(byteIndex);
    int mask = (1 << (bitIndex & (Byte.SIZE - 1))) - 1;
    int i = (reader.readByte() & 0xFF) & mask;
    while (i == 0) {
      if (byteIndex-- == 0) {
        return -1;
      }
      reader.skipBytes(-2); // FST.BytesReader implementations support negative skip.
      i = reader.readByte() & 0xFF;
    }
    return (Integer.SIZE - 1) - Integer.numberOfLeadingZeros(i) + (byteIndex << 3);
  }

