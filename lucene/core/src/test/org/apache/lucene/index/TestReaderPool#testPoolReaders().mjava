  public void testPoolReaders() throws IOException {
    Directory directory = newDirectory();
    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);
    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);
    SegmentInfos segmentInfos = reader.segmentInfos.clone();

    ReaderPool pool =
        new ReaderPool(
            directory, directory, segmentInfos, fieldNumbers, () -> 0l, null, null, null);
    SegmentCommitInfo commitInfo = RandomPicks.randomFrom(random(), segmentInfos.asList());
    assertFalse(pool.isReaderPoolingEnabled());
    pool.release(pool.get(commitInfo, true), random().nextBoolean());
    assertNull(pool.get(commitInfo, false));
    // now start pooling
    pool.enableReaderPooling();
    assertTrue(pool.isReaderPoolingEnabled());
    pool.release(pool.get(commitInfo, true), random().nextBoolean());
    assertNotNull(pool.get(commitInfo, false));
    assertSame(pool.get(commitInfo, false), pool.get(commitInfo, false));
    pool.drop(commitInfo);
    long ramBytesUsed = 0;
    assertEquals(0, pool.ramBytesUsed());
    for (SegmentCommitInfo info : segmentInfos) {
      pool.release(pool.get(info, true), random().nextBoolean());
      assertEquals(
          " used: " + ramBytesUsed + " actual: " + pool.ramBytesUsed(), 0, pool.ramBytesUsed());
      ramBytesUsed = pool.ramBytesUsed();
      assertSame(pool.get(info, false), pool.get(info, false));
    }
    assertNotSame(0, pool.ramBytesUsed());
    pool.dropAll();
    for (SegmentCommitInfo info : segmentInfos) {
      assertNull(pool.get(info, false));
    }
    assertEquals(0, pool.ramBytesUsed());
    IOUtils.close(pool, reader, directory);
  }

