  private void requestReplicasToRestore(@SuppressWarnings({"rawtypes"}) NamedList results, DocCollection restoreCollection,
                                        ClusterState clusterState,
                                        BackupProperties backupProperties,
                                        URI backupPath,
                                        String repo,
                                        ShardHandler shardHandler,
                                        String asyncId) {
    ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);
    // Copy data from backed up index to each replica
    for (Slice slice : restoreCollection.getSlices()) {
      ModifiableSolrParams params = new ModifiableSolrParams();
      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.RESTORECORE.toString());
      Optional<ShardBackupId> shardBackupId = backupProperties.getShardBackupIdFor(slice.getName());
      if (shardBackupId.isPresent()) {
        params.set(CoreAdminParams.SHARD_BACKUP_ID, shardBackupId.get().getIdAsString());
      } else {
        params.set(NAME, "snapshot." + slice.getName());
      }
      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString());
      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);
      shardRequestTracker.sliceCmd(clusterState, params, null, slice, shardHandler);
    }
    shardRequestTracker.processResponses(new NamedList<>(), shardHandler, true, "Could not restore core");
  }

