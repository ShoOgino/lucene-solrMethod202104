  /**
   * Serializes the data set to file using the following format:
   *
   * <ul>
   *   <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,
   *       NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup>
   *   <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The name of a
   *       ServiceProvider registered {@link HashFunction}
   *   <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the
   *       {@link FuzzySet} class
   *   <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used to project
   *       hashes into the field's Bitset
   *   <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of longs (as returned
   *       from {@link FixedBitSet#getBits})
   *   <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array returned by
   *       {@link FixedBitSet#getBits}
   * </ul>
   *
   * @param out Data output stream
   * @throws IOException If there is a low-level I/O error
   */
  public void serialize(DataOutput out) throws IOException {
    out.writeInt(VERSION_CURRENT);
    out.writeInt(bloomSize);
    long[] bits = filter.getBits();
    out.writeInt(bits.length);
    for (int i = 0; i < bits.length; i++) {
      // Can't used VLong encoding because cant cope with negative numbers
      // output by FixedBitSet
      out.writeLong(bits[i]);
    }
  }

