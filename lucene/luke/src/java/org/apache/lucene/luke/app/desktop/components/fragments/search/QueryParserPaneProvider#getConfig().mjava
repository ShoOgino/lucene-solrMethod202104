  @Override
  public QueryParserConfig getConfig() {
    int phraseSlop = (int) slopFTF.getValue();
    float fuzzyMinSimFloat = (float) minSimFTF.getValue();
    int fuzzyPrefLenInt = (int) prefLenFTF.getValue();

    Map<String, Class<? extends Number>> typeMap = new HashMap<>();
    for (int row = 0; row < pointRangeQueryTable.getModel().getRowCount(); row++) {
      String field =
          (String)
              pointRangeQueryTable.getValueAt(row, PointTypesTableModel.Column.FIELD.getIndex());
      String type =
          (String)
              pointRangeQueryTable.getValueAt(row, PointTypesTableModel.Column.TYPE.getIndex());
      switch (PointTypesTableModel.NumType.valueOf(type)) {
        case INT:
          typeMap.put(field, Integer.class);
          break;
        case LONG:
          typeMap.put(field, Long.class);
          break;
        case FLOAT:
          typeMap.put(field, Float.class);
          break;
        case DOUBLE:
          typeMap.put(field, Double.class);
          break;
        default:
          break;
      }
    }

    return new QueryParserConfig.Builder()
        .useClassicParser(classicRB.isSelected())
        .defaultOperator(QueryParserConfig.Operator.valueOf((String) defOpCombo.getSelectedItem()))
        .enablePositionIncrements(posIncCB.isSelected())
        .allowLeadingWildcard(wildCardCB.isSelected())
        .splitOnWhitespace(splitWSCB.isSelected())
        .autoGeneratePhraseQueries(genPhraseQueryCB.isSelected())
        .autoGenerateMultiTermSynonymsPhraseQuery(genMultiTermSynonymsPhraseQueryCB.isSelected())
        .phraseSlop(phraseSlop)
        .fuzzyMinSim(fuzzyMinSimFloat)
        .fuzzyPrefixLength(fuzzyPrefLenInt)
        .dateResolution(DateTools.Resolution.valueOf((String) dateResCB.getSelectedItem()))
        .locale(new Locale(locationTF.getText()))
        .timeZone(TimeZone.getTimeZone(timezoneTF.getText()))
        .typeMap(typeMap)
        .build();
  }

