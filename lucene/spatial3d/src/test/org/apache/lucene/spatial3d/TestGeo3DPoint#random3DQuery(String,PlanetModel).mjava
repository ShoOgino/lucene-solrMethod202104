  private static Query random3DQuery(final String field, final PlanetModel planetModel) {
    while (true) {
      final int shapeType = random().nextInt(5);
      switch (shapeType) {
        case 4:
          {
            // Large polygons
            final boolean isClockwise = random().nextDouble() < 0.5;
            try {
              final Query q =
                  Geo3DPoint.newLargePolygonQuery(
                      field,
                      planetModel,
                      makePoly(
                          planetModel,
                          new GeoPoint(
                              planetModel,
                              toRadians(GeoTestUtil.nextLatitude()),
                              toRadians(GeoTestUtil.nextLongitude())),
                          isClockwise,
                          true));
              // System.err.println("Generated: "+q);
              // assertTrue(false);
              return q;
            } catch (IllegalArgumentException e) {
              continue;
            }
          }

        case 0:
          {
            // Polygons
            final boolean isClockwise = random().nextDouble() < 0.5;
            try {
              final Query q =
                  Geo3DPoint.newPolygonQuery(
                      field,
                      planetModel,
                      makePoly(
                          planetModel,
                          new GeoPoint(
                              planetModel,
                              toRadians(GeoTestUtil.nextLatitude()),
                              toRadians(GeoTestUtil.nextLongitude())),
                          isClockwise,
                          true));
              // System.err.println("Generated: "+q);
              // assertTrue(false);
              return q;
            } catch (IllegalArgumentException e) {
              continue;
            }
          }

        case 1:
          {
            // Circles
            final double widthMeters =
                random().nextDouble() * Math.PI * planetModel.getMeanRadius();
            try {
              return Geo3DPoint.newDistanceQuery(
                  field,
                  planetModel,
                  GeoTestUtil.nextLatitude(),
                  GeoTestUtil.nextLongitude(),
                  widthMeters);
            } catch (IllegalArgumentException e) {
              continue;
            }
          }

        case 2:
          {
            // Rectangles
            final Rectangle r = GeoTestUtil.nextBox();
            try {
              return Geo3DPoint.newBoxQuery(
                  field, planetModel, r.minLat, r.maxLat, r.minLon, r.maxLon);
            } catch (IllegalArgumentException e) {
              continue;
            }
          }

        case 3:
          {
            // Paths
            // TBD: Need to rework generation to be realistic
            final int pointCount = random().nextInt(5) + 1;
            final double width =
                random().nextDouble() * Math.PI * 0.5 * planetModel.getMeanRadius();
            final double[] latitudes = new double[pointCount];
            final double[] longitudes = new double[pointCount];
            for (int i = 0; i < pointCount; i++) {
              latitudes[i] = GeoTestUtil.nextLatitude();
              longitudes[i] = GeoTestUtil.nextLongitude();
            }
            try {
              return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width, planetModel);
            } catch (IllegalArgumentException e) {
              // This is what happens when we create a shape that is invalid.  Although it is
              // conceivable that there are cases where
              // the exception is thrown incorrectly, we aren't going to be able to do that in this
              // random test.
              continue;
            }
          }

        default:
          throw new IllegalStateException("Unexpected shape type");
      }
    }
  }

