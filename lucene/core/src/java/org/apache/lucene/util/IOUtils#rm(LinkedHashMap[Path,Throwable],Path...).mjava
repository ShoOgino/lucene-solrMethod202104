  private static LinkedHashMap<Path, Throwable> rm(
      final LinkedHashMap<Path, Throwable> unremoved, Path... locations) {
    if (locations != null) {
      for (Path location : locations) {
        // TODO: remove this leniency!
        if (location != null && Files.exists(location)) {
          try {
            Files.walkFileTree(
                location,
                new FileVisitor<Path>() {
                  @Override
                  public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                      throws IOException {
                    return FileVisitResult.CONTINUE;
                  }

                  @Override
                  public FileVisitResult postVisitDirectory(Path dir, IOException impossible)
                      throws IOException {
                    assert impossible == null;

                    try {
                      Files.delete(dir);
                    } catch (IOException e) {
                      unremoved.put(dir, e);
                    }
                    return FileVisitResult.CONTINUE;
                  }

                  @Override
                  public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                      throws IOException {
                    try {
                      Files.delete(file);
                    } catch (IOException exc) {
                      unremoved.put(file, exc);
                    }
                    return FileVisitResult.CONTINUE;
                  }

                  @Override
                  public FileVisitResult visitFileFailed(Path file, IOException exc)
                      throws IOException {
                    if (exc != null) {
                      unremoved.put(file, exc);
                    }
                    return FileVisitResult.CONTINUE;
                  }
                });
          } catch (IOException impossible) {
            throw new AssertionError("visitor threw exception", impossible);
          }
        }
      }
    }
    return unremoved;
  }

