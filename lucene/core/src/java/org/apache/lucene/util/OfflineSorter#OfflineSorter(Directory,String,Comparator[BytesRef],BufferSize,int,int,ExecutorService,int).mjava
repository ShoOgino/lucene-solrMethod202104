  /**
   * All-details constructor. If {@code valueLength} is -1 (the default), the length of each value
   * differs; otherwise, all values have the specified length. If you pass a non-null {@code
   * ExecutorService} then it will be used to run sorting operations that can be run concurrently,
   * and maxPartitionsInRAM is the maximum concurrent in-memory partitions. Thus the maximum
   * possible RAM used by this class while sorting is {@code maxPartitionsInRAM * ramBufferSize}.
   */
  public OfflineSorter(
      Directory dir,
      String tempFileNamePrefix,
      Comparator<BytesRef> comparator,
      BufferSize ramBufferSize,
      int maxTempfiles,
      int valueLength,
      ExecutorService exec,
      int maxPartitionsInRAM) {
    if (exec != null) {
      this.exec = exec;
      if (maxPartitionsInRAM <= 0) {
        throw new IllegalArgumentException(
            "maxPartitionsInRAM must be > 0; got " + maxPartitionsInRAM);
      }
    } else {
      this.exec = new SameThreadExecutorService();
      maxPartitionsInRAM = 1;
    }
    this.partitionsInRAM = new Semaphore(maxPartitionsInRAM);

    if (ramBufferSize.bytes < ABSOLUTE_MIN_SORT_BUFFER_SIZE) {
      throw new IllegalArgumentException(MIN_BUFFER_SIZE_MSG + ": " + ramBufferSize.bytes);
    }

    if (maxTempfiles < 2) {
      throw new IllegalArgumentException("maxTempFiles must be >= 2");
    }

    if (valueLength != -1 && (valueLength == 0 || valueLength > Short.MAX_VALUE)) {
      throw new IllegalArgumentException(
          "valueLength must be 1 .. " + Short.MAX_VALUE + "; got: " + valueLength);
    }

    this.valueLength = valueLength;
    this.ramBufferSize = ramBufferSize;
    this.maxTempFiles = maxTempfiles;
    this.comparator = comparator;
    this.dir = dir;
    this.tempFileNamePrefix = tempFileNamePrefix;
  }

