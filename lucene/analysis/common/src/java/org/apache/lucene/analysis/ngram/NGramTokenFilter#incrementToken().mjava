  @Override
  public final boolean incrementToken() throws IOException {
    while (true) {
      if (curTermBuffer == null) {
        if (!input.incrementToken()) {
          return false;
        }
        state = captureState();

        curTermLength = termAtt.length();
        curTermCodePointCount = Character.codePointCount(termAtt, 0, termAtt.length());
        curPosIncr += posIncrAtt.getPositionIncrement();
        curPos = 0;

        if (preserveOriginal && curTermCodePointCount < minGram) {
          // Token is shorter than minGram, but we'd still like to keep it.
          posIncrAtt.setPositionIncrement(curPosIncr);
          curPosIncr = 0;
          return true;
        }

        curTermBuffer = termAtt.buffer().clone();
        curGramSize = minGram;
      }

      if (curGramSize > maxGram || (curPos + curGramSize) > curTermCodePointCount) {
        ++curPos;
        curGramSize = minGram;
      }
      if ((curPos + curGramSize) <= curTermCodePointCount) {
        restoreState(state);
        final int start = Character.offsetByCodePoints(curTermBuffer, 0, curTermLength, 0, curPos);
        final int end =
            Character.offsetByCodePoints(curTermBuffer, 0, curTermLength, start, curGramSize);
        termAtt.copyBuffer(curTermBuffer, start, end - start);
        posIncrAtt.setPositionIncrement(curPosIncr);
        curPosIncr = 0;
        curGramSize++;
        return true;
      } else if (preserveOriginal && curTermCodePointCount > maxGram) {
        // Token is longer than maxGram, but we'd still like to keep it.
        restoreState(state);
        posIncrAtt.setPositionIncrement(0);
        termAtt.copyBuffer(curTermBuffer, 0, curTermLength);
        curTermBuffer = null;
        return true;
      }

      // Done with this input token, get next token on next iteration.
      curTermBuffer = null;
    }
  }

