  /**
   * Convert a Polygon object into a GeoPolygon. This method uses
   *
   * @param polygon is the Polygon object.
   * @return the GeoPolygon.
   */
  private static GeoPolygon fromPolygon(final PlanetModel planetModel, final Polygon polygon) {
    // First, assemble the "holes".  The geo3d convention is to use the same polygon sense on the
    // inner ring as the outer ring, so we process these recursively with reverseMe flipped.
    final Polygon[] theHoles = polygon.getHoles();
    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);
    for (final Polygon hole : theHoles) {
      // System.out.println("Hole: " + hole);
      final GeoPolygon component = fromPolygon(planetModel, hole);
      if (component != null) {
        holeList.add(component);
      }
    }

    // Now do the polygon itself
    final double[] polyLats = polygon.getPolyLats();
    final double[] polyLons = polygon.getPolyLons();

    // I presume the arguments have already been checked
    final List<GeoPoint> points = new ArrayList<>(polyLats.length - 1);
    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't
    // repeat it.
    for (int i = 0; i < polyLats.length - 1; i++) {
      final int index = polyLats.length - 2 - i;
      points.add(
          new GeoPoint(planetModel, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));
    }
    // System.err.println(" building polygon with "+points.size()+" points...");
    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(planetModel, points, holeList);
    // System.err.println(" ...done");
    return rval;
  }

