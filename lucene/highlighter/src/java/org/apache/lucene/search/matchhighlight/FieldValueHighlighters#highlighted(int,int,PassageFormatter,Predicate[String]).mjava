  /**
   * Highlights fields matching predicate {@code matchFields} only if they contained query matches.
   */
  public static MatchHighlighter.FieldValueHighlighter highlighted(
      int maxPassageWindow,
      int maxPassages,
      PassageFormatter passageFormatter,
      Predicate<String> matchFields) {
    PassageSelector passageSelector = defaultPassageSelector();
    return new AbstractFieldValueHighlighter(
        (field, hasMatches) -> matchFields.test(field) && hasMatches) {
      @Override
      public List<String> format(
          String field,
          String[] values,
          String contiguousValue,
          List<OffsetRange> valueRanges,
          List<MatchHighlighter.QueryOffsetRange> matchOffsets) {
        assert matchOffsets != null;

        List<Passage> bestPassages =
            passageSelector.pickBest(
                contiguousValue, matchOffsets, maxPassageWindow, maxPassages, valueRanges);

        return passageFormatter.format(contiguousValue, bestPassages, valueRanges);
      }
    };
  }

