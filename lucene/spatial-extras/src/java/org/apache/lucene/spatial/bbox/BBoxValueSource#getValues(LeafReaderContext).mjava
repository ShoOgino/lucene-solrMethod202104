  @Override
  public ShapeValues getValues(LeafReaderContext readerContext) throws IOException {
    LeafReader reader = readerContext.reader();
    final NumericDocValues minX = DocValues.getNumeric(reader, strategy.field_minX);
    final NumericDocValues minY = DocValues.getNumeric(reader, strategy.field_minY);
    final NumericDocValues maxX = DocValues.getNumeric(reader, strategy.field_maxX);
    final NumericDocValues maxY = DocValues.getNumeric(reader, strategy.field_maxY);

    // reused
    final Rectangle rect = strategy.getSpatialContext().getShapeFactory().rect(0, 0, 0, 0);

    return new ShapeValues() {

      @Override
      public boolean advanceExact(int doc) throws IOException {
        return minX.advanceExact(doc)
            && minY.advanceExact(doc)
            && maxX.advanceExact(doc)
            && maxY.advanceExact(doc);
      }

      @Override
      public Shape value() throws IOException {
        double minXValue = Double.longBitsToDouble(minX.longValue());
        double minYValue = Double.longBitsToDouble(minY.longValue());
        double maxXValue = Double.longBitsToDouble(maxX.longValue());
        double maxYValue = Double.longBitsToDouble(maxY.longValue());
        rect.reset(minXValue, maxXValue, minYValue, maxYValue);
        return rect;
      }
    };
  }

