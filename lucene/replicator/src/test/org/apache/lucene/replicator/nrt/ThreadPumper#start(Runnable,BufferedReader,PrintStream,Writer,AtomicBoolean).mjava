  public static Thread start(
      final Runnable onExit,
      final BufferedReader from,
      final PrintStream to,
      final Writer toFile,
      final AtomicBoolean nodeClosing) {
    Thread t =
        new Thread() {
          @Override
          public void run() {
            try {
              long startTimeNS = System.nanoTime();
              Pattern logTimeStart = Pattern.compile("^[0-9\\.]+s .*");
              String line;
              while ((line = from.readLine()) != null) {
                if (toFile != null) {
                  toFile.write(line);
                  toFile.write("\n");
                  toFile.flush();
                } else if (logTimeStart.matcher(line).matches()) {
                  // Already a well-formed log output:
                  System.out.println(line);
                } else {
                  TestStressNRTReplication.message(line, startTimeNS);
                }
                if (line.contains("now force close server socket after")) {
                  nodeClosing.set(true);
                }
              }
              // Sub-process finished
            } catch (IOException e) {
              System.err.println("ignore IOExc reading from forked process pipe: " + e);
            } finally {
              onExit.run();
            }
          }
        };
    t.start();
    return t;
  }

