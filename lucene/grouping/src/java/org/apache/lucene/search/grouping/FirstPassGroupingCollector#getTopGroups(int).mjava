  /**
   * Returns top groups, starting from offset. This may return null, if no groups were collected, or
   * if the number of unique groups collected is &lt;= offset.
   *
   * @param groupOffset The offset in the collected groups
   * @return top groups, starting from offset
   */
  public Collection<SearchGroup<T>> getTopGroups(int groupOffset) throws IOException {

    // System.out.println("FP.getTopGroups groupOffset=" + groupOffset + " fillFields=" + fillFields
    // + " groupMap.size()=" + groupMap.size());

    if (groupOffset < 0) {
      throw new IllegalArgumentException("groupOffset must be >= 0 (got " + groupOffset + ")");
    }

    if (groupMap.size() <= groupOffset) {
      return null;
    }

    if (orderedGroups == null) {
      buildSortedSet();
    }

    final Collection<SearchGroup<T>> result = new ArrayList<>();
    int upto = 0;
    final int sortFieldCount = comparators.length;
    for (CollectedSearchGroup<T> group : orderedGroups) {
      if (upto++ < groupOffset) {
        continue;
      }
      // System.out.println("  group=" + (group.groupValue == null ? "null" :
      // group.groupValue.toString()));
      SearchGroup<T> searchGroup = new SearchGroup<>();
      searchGroup.groupValue = group.groupValue;
      searchGroup.sortValues = new Object[sortFieldCount];
      for (int sortFieldIDX = 0; sortFieldIDX < sortFieldCount; sortFieldIDX++) {
        searchGroup.sortValues[sortFieldIDX] =
            comparators[sortFieldIDX].value(group.comparatorSlot);
      }
      result.add(searchGroup);
    }
    // System.out.println("  return " + result.size() + " groups");
    return result;
  }

