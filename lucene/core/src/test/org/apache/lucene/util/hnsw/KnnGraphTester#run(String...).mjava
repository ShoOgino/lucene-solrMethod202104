  private void run(String... args) throws Exception {
    String operation = null, docVectorsPath = null, queryPath = null;
    for (int iarg = 0; iarg < args.length; iarg++) {
      String arg = args[iarg];
      switch(arg) {
        case "-generate":
        case "-search":
        case "-check":
        case "-stats":
          if (operation != null) {
            throw new IllegalArgumentException("Specify only one operation, not both " + arg + " and " + operation);
          }
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("Operation " + arg + " requires a following pathname");
          }
          operation = arg;
          docVectorsPath = args[++iarg];
          if (operation.equals("-search")) {
            queryPath = args[++iarg];
          }
          break;
        case "-fanout":
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("-fanout requires a following number");
          }
          fanout = Integer.parseInt(args[++iarg]);
          break;
        case "-beamWidthIndex":
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("-beamWidthIndex requires a following number");
          }
          HnswGraphBuilder.DEFAULT_BEAM_WIDTH = Integer.parseInt(args[++iarg]);
          break;
        case "-maxConn":
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("-maxConn requires a following number");
          }
          HnswGraphBuilder.DEFAULT_MAX_CONN = Integer.parseInt(args[++iarg]);
          break;
        case "-dim":
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("-dim requires a following number");
          }
          dim = Integer.parseInt(args[++iarg]);
          break;
        case "-ndoc":
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("-ndoc requires a following number");
          }
          numDocs = Integer.parseInt(args[++iarg]);
          break;
        case "-niter":
          if (iarg == args.length - 1) {
            throw new IllegalArgumentException("-niter requires a following number");
          }
          numIters = Integer.parseInt(args[++iarg]);
          break;
        case "-reindex":
          reindex = true;
          break;
        case "-forceMerge":
          operation = "-forceMerge";
          break;
        case "-quiet":
          quiet = true;
          break;
        default:
          throw new IllegalArgumentException("unknown argument " + arg);
          //usage();
      }
    }
    if (operation == null) {
      usage();
    }
    if (reindex) {
      if (docVectorsPath == null) {
        throw new IllegalArgumentException("-docs argument is required when indexing");
      }
      reindexTimeMsec = createIndex(Paths.get(docVectorsPath), indexPath);
    }
    switch (operation) {
      case "-search":
        if (docVectorsPath == null) {
          throw new IllegalArgumentException("-docs argument is required when searching");
        }
        testSearch(indexPath, Paths.get(queryPath), getNN(Paths.get(docVectorsPath), Paths.get(queryPath)));
        break;
      case "-forceMerge":
        forceMerge();
        break;
      case "-stats":
        printFanoutHist(indexPath);
        break;
    }
  }

