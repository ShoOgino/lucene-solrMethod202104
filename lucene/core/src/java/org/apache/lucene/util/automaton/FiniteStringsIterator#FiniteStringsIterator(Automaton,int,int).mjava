  /**
   * Constructor.
   *
   * @param a Automaton to create finite string from.
   * @param startState The starting state for each path.
   * @param endState The state where each path should stop or -1 if only accepted states should be
   *     final.
   */
  public FiniteStringsIterator(Automaton a, int startState, int endState) {
    this.a = a;
    this.endState = endState;
    this.nodes = new PathNode[16];
    for (int i = 0, end = nodes.length; i < end; i++) {
      nodes[i] = new PathNode();
    }
    this.string = new IntsRefBuilder();
    this.pathStates = new BitSet(a.getNumStates());
    this.string.setLength(0);
    this.emitEmptyString = a.isAccept(0);

    // Start iteration with node startState.
    if (a.getNumTransitions(startState) > 0) {
      pathStates.set(startState);
      nodes[0].resetState(a, startState);
      string.append(startState);
    }
  }

