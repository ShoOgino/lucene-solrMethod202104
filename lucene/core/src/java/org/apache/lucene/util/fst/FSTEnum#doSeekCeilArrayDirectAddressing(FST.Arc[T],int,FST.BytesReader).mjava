  private FST.Arc<T> doSeekCeilArrayDirectAddressing(
      final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {
    // The array is addressed directly by label, with presence bits to compute the actual arc
    // offset.

    int targetIndex = targetLabel - arc.firstLabel();
    if (targetIndex >= arc.numArcs()) {
      // Target is beyond the last arc, out of label range.
      // Dead end (target is after the last arc);
      // rollback to last fork then push
      upto--;
      while (true) {
        if (upto == 0) {
          return null;
        }
        final FST.Arc<T> prevArc = getArc(upto);
        // System.out.println("  rollback upto=" + upto + " arc.label=" + prevArc.label + "
        // isLast?=" + prevArc.isLast());
        if (!prevArc.isLast()) {
          fst.readNextArc(prevArc, fstReader);
          pushFirst();
          return null;
        }
        upto--;
      }
    } else {
      if (targetIndex < 0) {
        targetIndex = -1;
      } else if (BitTable.isBitSet(targetIndex, arc, in)) {
        fst.readArcByDirectAddressing(arc, in, targetIndex);
        assert arc.label() == targetLabel;
        // found -- copy pasta from below
        output[upto] = fst.outputs.add(output[upto - 1], arc.output());
        if (targetLabel == FST.END_LABEL) {
          return null;
        }
        setCurrentLabel(arc.label());
        incr();
        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
      }
      // Not found, return the next arc (ceil).
      int ceilIndex = BitTable.nextBitSet(targetIndex, arc, in);
      assert ceilIndex != -1;
      fst.readArcByDirectAddressing(arc, in, ceilIndex);
      assert arc.label() > targetLabel;
      pushFirst();
      return null;
    }
  }

