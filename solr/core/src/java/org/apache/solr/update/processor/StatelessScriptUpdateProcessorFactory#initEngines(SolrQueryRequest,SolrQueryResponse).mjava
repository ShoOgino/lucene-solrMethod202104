  /**
   * Initializes a list of script engines - an engine per script file.
   *
   * @param req The solr request.
   * @param rsp The solr response
   * @return The list of initialized script engines.
   */
  private List<EngineInfo> initEngines(SolrQueryRequest req, 
                                       SolrQueryResponse rsp) 
    throws SolrException {
    
    List<EngineInfo> scriptEngines = new ArrayList<>();

    ScriptEngineManager scriptEngineManager 
      = new ScriptEngineManager(resourceLoader.getClassLoader());

    scriptEngineManager.put("logger", log);
    scriptEngineManager.put("req", req);
    scriptEngineManager.put("rsp", rsp);
    if (params != null) {
      scriptEngineManager.put("params", params);
    }

    for (ScriptFile scriptFile : scriptFiles) {
      final ScriptEngine engine;
      if (null != engineName) {
        engine = scriptEngineManager.getEngineByName(engineName);
        if (engine == null) {
          String details = getSupportedEngines(scriptEngineManager, false);
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 
                                  "No ScriptEngine found by name: "
                                  + engineName + 
                                  (null != details ? 
                                   " -- supported names: " + details : ""));
        }
      } else {
        engine = scriptEngineManager.getEngineByExtension
          (scriptFile.getExtension());
        if (engine == null) {
          String details = getSupportedEngines(scriptEngineManager, true);
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 
                                  "No ScriptEngine found by file extension: "
                                  + scriptFile.getFileName() + 
                                  (null != details ? 
                                   " -- supported extensions: " + details : ""));
                                  
        }
      }

      if (! (engine instanceof Invocable)) {
        String msg = 
          "Engine " + ((null != engineName) ? engineName : 
                       ("for script " + scriptFile.getFileName())) +
          " does not support function invocation (via Invocable): " +
          engine.getClass().toString() + " (" +
          engine.getFactory().getEngineName() + ")";
        log.error(msg);
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);
      }

      if (scriptEngineCustomizer != null) {
        scriptEngineCustomizer.customize(engine);
      }

      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));
      try {
        Reader scriptSrc = scriptFile.openReader(resourceLoader);
  
        try {
          try {
            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
              @Override
              public Void run() throws ScriptException  {
                engine.eval(scriptSrc);
                return null;
              }
            }, SCRIPT_SANDBOX);
          } catch (PrivilegedActionException e) {
            throw (ScriptException) e.getException();
          }
        } catch (ScriptException e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 
                                  "Unable to evaluate script: " + 
                                  scriptFile.getFileName(), e);
        } finally {
          IOUtils.closeQuietly(scriptSrc);
        }
      } catch (IOException ioe) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 
            "Unable to evaluate script: " + 
            scriptFile.getFileName(), ioe);        
      }
    }
    return scriptEngines;
  }

