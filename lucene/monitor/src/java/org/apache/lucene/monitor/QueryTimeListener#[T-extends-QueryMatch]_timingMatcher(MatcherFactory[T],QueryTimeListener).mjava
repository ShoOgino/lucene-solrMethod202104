  /**
   * A wrapping matcher factory to log query times to a QueryTimeListener
   *
   * @param factory a matcher factory to use for the actual matching
   * @param listener the QueryTimeListener
   */
  static <T extends QueryMatch> MatcherFactory<T> timingMatcher(
      MatcherFactory<T> factory, QueryTimeListener listener) {
    return searcher -> {
      CandidateMatcher<T> matcher = factory.createMatcher(searcher);
      return new CandidateMatcher<T>(searcher) {
        @Override
        protected void matchQuery(String queryId, Query matchQuery, Map<String, String> metadata)
            throws IOException {
          long t = System.nanoTime();
          matcher.matchQuery(queryId, matchQuery, metadata);
          t = System.nanoTime() - t;
          listener.logQueryTime(queryId, t);
        }

        @Override
        public T resolve(T match1, T match2) {
          return matcher.resolve(match1, match2);
        }

        @Override
        protected void doFinish() {
          copyMatches(matcher);
        }
      };
    };
  }

