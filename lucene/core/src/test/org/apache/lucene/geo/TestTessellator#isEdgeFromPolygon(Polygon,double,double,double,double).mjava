  private boolean isEdgeFromPolygon(Polygon p, double aLon, double aLat, double bLon, double bLat) {
    for (int i = 0; i < p.getPolyLats().length - 1; i++) {
      if (isPointInLine(
              p.getPolyLon(i),
              p.getPolyLat(i),
              p.getPolyLon(i + 1),
              p.getPolyLat(i + 1),
              aLon,
              aLat)
          && isPointInLine(
              p.getPolyLon(i),
              p.getPolyLat(i),
              p.getPolyLon(i + 1),
              p.getPolyLat(i + 1),
              bLon,
              bLat)) {
        return true;
      }
      if (p.getPolyLon(i) != p.getPolyLon(i + 1) || p.getPolyLat(i) != p.getPolyLat(i + 1)) {
        // Check for co-planar points
        final int length = p.getPolyLats().length;
        final int offset = i + 2;
        int j = 0;
        int index = getIndex(length, j + offset);
        while (j < length
            && area(
                    p.getPolyLon(i),
                    p.getPolyLat(i),
                    p.getPolyLon(i + 1),
                    p.getPolyLat(i + 1),
                    p.getPolyLon(index),
                    p.getPolyLat(index))
                == 0) {
          if (isPointInLine(
                  p.getPolyLon(i),
                  p.getPolyLat(i),
                  p.getPolyLon(index),
                  p.getPolyLat(index),
                  aLon,
                  aLat)
              && isPointInLine(
                  p.getPolyLon(i),
                  p.getPolyLat(i),
                  p.getPolyLon(index),
                  p.getPolyLat(index),
                  bLon,
                  bLat)) {
            return true;
          }
          index = getIndex(length, ++j + offset);
        }
      }
    }
    if (p.getHoles() != null && p.getHoles().length > 0) {
      for (Polygon hole : p.getHoles()) {
        if (isEdgeFromPolygon(hole, aLon, aLat, bLon, bLat)) {
          return true;
        }
      }
    }
    return false;
  }

