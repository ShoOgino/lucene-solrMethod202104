  private List<Cluster<SolrDocument>> clusters(String handlerName, String engineName, String query,
                                               Consumer<ModifiableSolrParams> paramsConsumer) {
    SolrCore core = h.getCore();

    ModifiableSolrParams reqParams = new ModifiableSolrParams();
    reqParams.add(ClusteringComponent.COMPONENT_NAME, "true");
    reqParams.add(ClusteringComponent.REQUEST_PARAM_ENGINE, engineName);
    reqParams.add(CommonParams.Q, query);
    reqParams.add(CommonParams.ROWS, "1000");
    paramsConsumer.accept(reqParams);

    SearchHandler handler = (SearchHandler) core.getRequestHandler(handlerName);
    assertTrue("Clustering engine named '" + engineName + "' exists.", handler.getComponents().stream()
        .filter(c -> c instanceof ClusteringComponent)
        .flatMap(c -> ((ClusteringComponent) c).getEngineNames().stream())
        .anyMatch(localName -> Objects.equals(localName, engineName)));

    SolrQueryResponse rsp = new SolrQueryResponse();
    rsp.addResponseHeader(new SimpleOrderedMap<>());
    try (SolrQueryRequest req = new LocalSolrQueryRequest(core, reqParams)) {
      handler.handleRequest(req, rsp);
      NamedList<?> values = rsp.getValues();
      @SuppressWarnings("unchecked")
      List<NamedList<Object>> clusters = (List<NamedList<Object>>) values.get("clusters");

      String idField = core.getLatestSchema().getUniqueKeyField().getName();
      Map<String, SolrDocument> idToDoc = new HashMap<>();
      ResultContext resultContext = (ResultContext) rsp.getResponse();
      for (Iterator<SolrDocument> it = resultContext.getProcessedDocuments(); it.hasNext(); ) {
        SolrDocument doc = it.next();
        idToDoc.put(doc.getFirstValue(idField).toString(), doc);
      }

      return clusters.stream().map(c -> toCluster(c, idToDoc)).collect(Collectors.toList());
    }
  }

