  public void testRemoveMatchAllFilter() throws IOException {
    IndexSearcher searcher = newSearcher(new MultiReader());

    BooleanQuery bq =
        new BooleanQuery.Builder()
            .add(new TermQuery(new Term("foo", "bar")), Occur.MUST)
            .add(new MatchAllDocsQuery(), Occur.FILTER)
            .build();
    assertEquals(new TermQuery(new Term("foo", "bar")), searcher.rewrite(bq));

    bq =
        new BooleanQuery.Builder()
            .setMinimumNumberShouldMatch(random().nextInt(5))
            .add(new TermQuery(new Term("foo", "bar")), Occur.MUST)
            .add(new TermQuery(new Term("foo", "baz")), Occur.MUST)
            .add(new MatchAllDocsQuery(), Occur.FILTER)
            .build();
    Query expected =
        new BooleanQuery.Builder()
            .setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch())
            .add(new TermQuery(new Term("foo", "bar")), Occur.MUST)
            .add(new TermQuery(new Term("foo", "baz")), Occur.MUST)
            .build();
    assertEquals(expected, searcher.rewrite(bq));

    bq =
        new BooleanQuery.Builder()
            .add(new TermQuery(new Term("foo", "bar")), Occur.FILTER)
            .add(new MatchAllDocsQuery(), Occur.FILTER)
            .build();
    expected = new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term("foo", "bar"))), 0.0f);
    assertEquals(expected, searcher.rewrite(bq));

    bq =
        new BooleanQuery.Builder()
            .add(new MatchAllDocsQuery(), Occur.FILTER)
            .add(new MatchAllDocsQuery(), Occur.FILTER)
            .build();
    expected = new BoostQuery(new ConstantScoreQuery(new MatchAllDocsQuery()), 0.0f);
    assertEquals(expected, searcher.rewrite(bq));
  }

