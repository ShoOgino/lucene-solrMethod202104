  /** Iterate through all polygon nodes and remove small local self-intersections * */
  private static final Node cureLocalIntersections(
      Node startNode, final List<Triangle> tessellation, final boolean mortonOptimized) {
    Node node = startNode;
    Node nextNode;
    do {
      nextNode = node.next;
      Node a = node.previous;
      Node b = nextNode.next;

      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])
      if (isVertexEquals(a, b) == false
          && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false
          && linesIntersect(
              a.getX(),
              a.getY(),
              node.getX(),
              node.getY(),
              nextNode.getX(),
              nextNode.getY(),
              b.getX(),
              b.getY())
          && isLocallyInside(a, b)
          && isLocallyInside(b, a)) {
        // compute edges from polygon
        boolean abFromPolygon =
            (a.next == node)
                ? a.isNextEdgeFromPolygon
                : isEdgeFromPolygon(a, node, mortonOptimized);
        boolean bcFromPolygon =
            (node.next == b)
                ? node.isNextEdgeFromPolygon
                : isEdgeFromPolygon(node, b, mortonOptimized);
        boolean caFromPolygon =
            (b.next == a) ? b.isNextEdgeFromPolygon : isEdgeFromPolygon(a, b, mortonOptimized);
        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon, b, caFromPolygon));
        // Return the triangulated vertices to the tessellation
        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon, b, caFromPolygon));

        // remove two nodes involved
        removeNode(node, caFromPolygon);
        removeNode(node.next, caFromPolygon);
        node = startNode = b;
      }
      node = node.next;
    } while (node != startNode);

    return node;
  }

