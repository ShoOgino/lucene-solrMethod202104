  /**
   * Create a new AutomatonQuery from an {@link Automaton}.
   *
   * @param term Term containing field and possibly some pattern structure. The term text is
   *     ignored.
   * @param automaton Automaton to run, terms that are accepted are considered a match.
   * @param maxDeterminizedStates maximum number of states in the resulting automata. If the
   *     automata would need more than this many states TooComplextToDeterminizeException is thrown.
   *     Higher number require more space but can process more complex automata.
   * @param isBinary if true, this automaton is already binary and will not go through the
   *     UTF32ToUTF8 conversion
   */
  public AutomatonQuery(
      final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {
    super(term.field());
    this.term = term;
    this.automaton = automaton;
    this.automatonIsBinary = isBinary;
    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:
    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);

    this.ramBytesUsed =
        BASE_RAM_BYTES + term.ramBytesUsed() + automaton.ramBytesUsed() + compiled.ramBytesUsed();
  }

