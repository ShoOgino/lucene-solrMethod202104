  @Ignore
  // This test tests that buffered deletes are cleared when
  // an Exception is hit during flush.
  public void testErrorAfterApplyDeletes() throws IOException {

    MockDirectoryWrapper.Failure failure =
        new MockDirectoryWrapper.Failure() {
          boolean sawMaybe = false;
          boolean failed = false;
          Thread thread;

          @Override
          public MockDirectoryWrapper.Failure reset() {
            thread = Thread.currentThread();
            sawMaybe = false;
            failed = false;
            return this;
          }

          @Override
          public void eval(MockDirectoryWrapper dir) throws IOException {
            if (Thread.currentThread() != thread) {
              // don't fail during merging
              return;
            }
            if (VERBOSE) {
              System.out.println("FAIL EVAL:");
            }
            new Throwable().printStackTrace(System.out);
            if (sawMaybe && !failed) {
              boolean seen = callStackContainsAnyOf("applyDeletesAndUpdates", "slowFileExists");
              if (!seen) {
                // Only fail once we are no longer in applyDeletes
                failed = true;
                if (VERBOSE) {
                  System.out.println("TEST: mock failure: now fail");
                  new Throwable().printStackTrace(System.out);
                }
                throw new RuntimeException("fail after applyDeletes");
              }
            }
            if (!failed) {
              if (callStackContainsAnyOf("applyDeletesAndUpdates")) {
                if (VERBOSE) {
                  System.out.println("TEST: mock failure: saw applyDeletes");
                  new Throwable().printStackTrace(System.out);
                }
                sawMaybe = true;
              }
            }
          }
        };

    // create a couple of files

    String[] keywords = {"1", "2"};
    String[] unindexed = {"Netherlands", "Italy"};
    String[] unstored = {"Amsterdam has lots of bridges", "Venice has lots of canals"};
    String[] text = {"Amsterdam", "Venice"};

    MockDirectoryWrapper dir = newMockDirectory();
    IndexWriter modifier =
        new IndexWriter(
            dir,
            newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))
                .setReaderPooling(false)
                .setMergePolicy(newLogMergePolicy()));

    MergePolicy lmp = modifier.getConfig().getMergePolicy();
    lmp.setNoCFSRatio(1.0);

    dir.failOn(failure.reset());

    FieldType custom1 = new FieldType();
    custom1.setStored(true);
    for (int i = 0; i < keywords.length; i++) {
      Document doc = new Document();
      doc.add(newStringField("id", keywords[i], Field.Store.YES));
      doc.add(newField("country", unindexed[i], custom1));
      doc.add(newTextField("contents", unstored[i], Field.Store.NO));
      doc.add(newTextField("city", text[i], Field.Store.YES));
      modifier.addDocument(doc);
    }
    // flush

    if (VERBOSE) {
      System.out.println("TEST: now full merge");
    }

    modifier.forceMerge(1);
    if (VERBOSE) {
      System.out.println("TEST: now commit");
    }
    modifier.commit();

    // one of the two files hits

    Term term = new Term("city", "Amsterdam");
    long hitCount = getHitCount(dir, term);
    assertEquals(1, hitCount);

    // open the writer again (closed above)

    // delete the doc
    // max buf del terms is two, so this is buffered

    if (VERBOSE) {
      System.out.println("TEST: delete term=" + term);
    }

    modifier.deleteDocuments(term);

    // add a doc
    // doc remains buffered

    if (VERBOSE) {
      System.out.println("TEST: add empty doc");
    }
    Document doc = new Document();
    modifier.addDocument(doc);

    // commit the changes, the buffered deletes, and the new doc

    // The failure object will fail on the first write after the del
    // file gets created when processing the buffered delete

    // in the ac case, this will be when writing the new segments
    // files so we really don't need the new doc, but it's harmless

    // a new segments file won't be created but in this
    // case, creation of the cfs file happens next so we
    // need the doc (to test that it's okay that we don't
    // lose deletes if failing while creating the cfs file)

    if (VERBOSE) {
      System.out.println("TEST: now commit for failure");
    }
    RuntimeException expected =
        expectThrows(
            RuntimeException.class,
            () -> {
              modifier.commit();
            });
    if (VERBOSE) {
      System.out.println("TEST: hit exc:");
      expected.printStackTrace(System.out);
    }

    // The commit above failed, so we need to retry it (which will
    // succeed, because the failure is a one-shot)

    boolean writerClosed;
    try {
      modifier.commit();
      writerClosed = false;
    } catch (IllegalStateException ise) {
      // The above exc struck during merge, and closed the writer
      writerClosed = true;
    }

    if (writerClosed == false) {
      hitCount = getHitCount(dir, term);

      // Make sure the delete was successfully flushed:
      assertEquals(0, hitCount);

      modifier.close();
    }
    dir.close();
  }

