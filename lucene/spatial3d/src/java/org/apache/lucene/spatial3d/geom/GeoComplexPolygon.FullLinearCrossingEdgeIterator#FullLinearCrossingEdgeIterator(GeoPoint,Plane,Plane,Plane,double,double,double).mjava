    public FullLinearCrossingEdgeIterator(
        final GeoPoint testPoint,
        final Plane plane,
        final Plane abovePlane,
        final Plane belowPlane,
        final double thePointX,
        final double thePointY,
        final double thePointZ) {
      assert plane.evaluateIsZero(thePointX, thePointY, thePointZ)
          : "Check point is not on travel plane";
      assert plane.evaluateIsZero(testPoint) : "Test point is not on travel plane";
      this.testPoint = testPoint;
      this.plane = plane;
      this.abovePlane = abovePlane;
      this.belowPlane = belowPlane;
      if (plane.isNumericallyIdentical(testPoint)) {
        throw new IllegalArgumentException("Plane vector identical to testpoint vector");
      }
      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.
      this.bound = new SidedPlane(plane, testPoint);
      this.thePointX = thePointX;
      this.thePointY = thePointY;
      this.thePointZ = thePointZ;
      // System.out.println(" Constructing full linear crossing edge iterator");
      // debugIntersectAllEdges(plane, bound);
    }

