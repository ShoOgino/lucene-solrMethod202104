  private static void doTestGetSecurityInfo(AuthenticationPlugin authenticationPlugin, AuthorizationPlugin authorizationPlugin) throws Exception {

    SolrTestCaseJ4.assumeWorkingMockito();

    final CoreContainer cc = Mockito.mock(CoreContainer.class);
    {
      Mockito.doReturn(authenticationPlugin).when(cc).getAuthenticationPlugin();
      Mockito.doReturn(authorizationPlugin).when(cc).getAuthorizationPlugin();
    }

    final SolrQueryRequest req = Mockito.mock(SolrQueryRequestBase.class);
    {
      final Principal principal = Mockito.mock(JWTPrincipal.class);
      Mockito.doReturn(userName).when(principal).getName();
      Mockito.doReturn(principal).when(req).getUserPrincipal();
    }

    final SimpleOrderedMap<Object> si = SystemInfoHandler.getSecurityInfo(cc, req);

    if (authenticationPlugin != null) {
      assertEquals(authenticationPlugin.getName(), si.remove("authenticationPlugin"));
    } else {
      assertNull(si.remove("authenticationPlugin"));
    }

    if (authorizationPlugin != null) {
      assertEquals(authorizationPlugin.getClass().getName(), si.remove("authorizationPlugin"));
      if (authorizationPlugin instanceof RuleBasedAuthorizationPluginBase) {
        assertNotNull(si.remove("roles"));
      } else {
        assertNull(si.remove("roles"));
      }
    } else {
      assertNull(si.remove("authorizationPlugin"));
    }

    assertEquals(userName, si.remove("username"));

    assertEquals("Unexpected additional info: " + si, 0, si.size());
  }

