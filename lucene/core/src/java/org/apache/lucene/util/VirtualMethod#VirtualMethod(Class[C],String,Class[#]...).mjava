  /**
   * Creates a new instance for the given {@code baseClass} and method declaration.
   *
   * @throws UnsupportedOperationException if you create a second instance of the same {@code
   *     baseClass} and method declaration combination. This enforces the singleton status.
   * @throws IllegalArgumentException if {@code baseClass} does not declare the given method.
   */
  public VirtualMethod(Class<C> baseClass, String method, Class<?>... parameters) {
    this.baseClass = baseClass;
    this.method = method;
    this.parameters = parameters;
    try {
      if (!singletonSet.add(baseClass.getDeclaredMethod(method, parameters)))
        throw new UnsupportedOperationException(
            "VirtualMethod instances must be singletons and therefore "
                + "assigned to static final members in the same class, they use as baseClass ctor param.");
    } catch (NoSuchMethodException nsme) {
      throw new IllegalArgumentException(
          baseClass.getName() + " has no such method: " + nsme.getMessage());
    }
  }

