  @Test
  public void testReporters() throws Exception {

    try (SolrResourceLoader loader = new SolrResourceLoader(createTempDir())) {
      SolrMetricManager metricManager = new SolrMetricManager();

      PluginInfo[] plugins = new PluginInfo[] {
        createPluginInfo("universal_foo", null, null),
        createPluginInfo("multigroup_foo", "jvm, node, core", null),
        createPluginInfo("multiregistry_foo", null, "solr.node, solr.core.collection1"),
        createPluginInfo("specific_foo", null, "solr.core.collection1"),
        createPluginInfo("node_foo", "node", null),
        createPluginInfo("core_foo", "core", null)
      };
      String tag = "xyz";
      metricManager.loadReporters(plugins, loader, null, null, tag, SolrInfoBean.Group.node);
      Map<String, SolrMetricReporter> reporters = metricManager.getReporters
        (SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));
          
      assertEquals(4, reporters.size());
      assertTrue(reporters.containsKey("universal_foo@" + tag));
      assertTrue(reporters.containsKey("multigroup_foo@" + tag));
      assertTrue(reporters.containsKey("node_foo@" + tag));
      assertTrue(reporters.containsKey("multiregistry_foo@" + tag));
      
      metricManager.loadReporters(plugins, loader, null, null, tag, SolrInfoBean.Group.core, "collection1");
      reporters = metricManager.getReporters
        (SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, "collection1"));
          
      assertEquals(5, reporters.size());
      assertTrue(reporters.containsKey("universal_foo@" + tag));
      assertTrue(reporters.containsKey("multigroup_foo@" + tag));
      assertTrue(reporters.containsKey("specific_foo@" + tag));
      assertTrue(reporters.containsKey("core_foo@" + tag));
      assertTrue(reporters.containsKey("multiregistry_foo@" + tag));
      
      metricManager.loadReporters(plugins, loader, null, null, tag, SolrInfoBean.Group.jvm);
      reporters = metricManager.getReporters(SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));
                                             
      assertEquals(2, reporters.size());
      assertTrue(reporters.containsKey("universal_foo@" + tag));
      assertTrue(reporters.containsKey("multigroup_foo@" + tag));
      
      metricManager.removeRegistry("solr.jvm");
      reporters = metricManager.getReporters(SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));
                                             
      assertEquals(0, reporters.size());
      
      metricManager.removeRegistry("solr.node");
      reporters = metricManager.getReporters(SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));
                                             
      assertEquals(0, reporters.size());
      
      metricManager.removeRegistry("solr.core.collection1");
      reporters = metricManager.getReporters(SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, "collection1"));
                                             
      assertEquals(0, reporters.size());
    }
  }

