  // Test that different instances of FSDirectory can coexist on the same
  // path, can read, write, and lock files.
  public void testDirectInstantiation() throws Exception {
    final Path path = createTempDir("testDirectInstantiation");

    final byte[] largeBuffer = new byte[random().nextInt(256 * 1024)],
        largeReadBuffer = new byte[largeBuffer.length];
    for (int i = 0; i < largeBuffer.length; i++) {
      largeBuffer[i] = (byte) i; // automatically loops with modulo
    }

    final List<FSDirectory> dirs0 = new ArrayList<>();
    dirs0.add(new NIOFSDirectory(path));
    if (hasWorkingMMapOnWindows()) {
      dirs0.add(new MMapDirectory(path));
    }
    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);

    for (int i = 0; i < dirs.length; i++) {
      FSDirectory dir = dirs[i];
      dir.ensureOpen();
      String fname = "foo." + i;
      String lockname = "foo" + i + ".lck";
      IndexOutput out = dir.createOutput(fname, newIOContext(random()));
      out.writeByte((byte) i);
      out.writeBytes(largeBuffer, largeBuffer.length);
      out.close();

      for (int j = 0; j < dirs.length; j++) {
        FSDirectory d2 = dirs[j];
        d2.ensureOpen();
        assertTrue(slowFileExists(d2, fname));
        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));

        // don't do read tests if unmapping is not supported!
        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap()) continue;

        IndexInput input = d2.openInput(fname, newIOContext(random()));
        assertEquals((byte) i, input.readByte());
        // read array with buffering enabled
        Arrays.fill(largeReadBuffer, (byte) 0);
        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);
        assertArrayEquals(largeBuffer, largeReadBuffer);
        // read again without using buffer
        input.seek(1L);
        Arrays.fill(largeReadBuffer, (byte) 0);
        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);
        assertArrayEquals(largeBuffer, largeReadBuffer);
        input.close();
      }

      // delete with a different dir
      dirs[(i + 1) % dirs.length].deleteFile(fname);

      for (int j = 0; j < dirs.length; j++) {
        FSDirectory d2 = dirs[j];
        assertFalse(slowFileExists(d2, fname));
      }

      Lock lock = dir.obtainLock(lockname);

      for (Directory other : dirs) {
        expectThrows(
            LockObtainFailedException.class,
            () -> {
              other.obtainLock(lockname);
            });
      }

      lock.close();

      // now lock with different dir
      lock = dirs[(i + 1) % dirs.length].obtainLock(lockname);
      lock.close();
    }

    for (int i = 0; i < dirs.length; i++) {
      FSDirectory dir = dirs[i];
      dir.ensureOpen();
      dir.close();
      assertFalse(dir.isOpen);
    }
  }

