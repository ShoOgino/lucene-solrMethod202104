  /**
   * Searches for the nearest neighbors of a query vector.
   * @param query search query vector
   * @param topK the number of nodes to be returned
   * @param numSeed the number of random entry points to sample
   * @param vectors vector values
   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.
   * @param random a source of randomness, used for generating entry points to the graph
   * @return a priority queue holding the neighbors found
   */
  public static Neighbors search(float[] query, int topK, int numSeed, RandomAccessVectorValues vectors, KnnGraphValues graphValues,
                                 Random random) throws IOException {
    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();

    Neighbors results = Neighbors.create(topK, searchStrategy);
    Neighbors candidates = Neighbors.createReversed(-numSeed, searchStrategy);
    // set of ordinals that have been visited by search on this layer, used to avoid backtracking
    Set<Integer> visited = new HashSet<>();

    int size = vectors.size();
    int boundedNumSeed = Math.min(numSeed, 2 * size);
    for (int i = 0; i < boundedNumSeed; i++) {
      int entryPoint = random.nextInt(size);
      if (visited.add(entryPoint)) {
        results.insertWithOverflow(entryPoint, searchStrategy.compare(query, vectors.vectorValue(entryPoint)));
      }
    }
    Neighbors.NeighborIterator it = results.iterator();
    for (int nbr = it.next(); nbr != NO_MORE_DOCS; nbr = it.next()) {
      candidates.add(nbr, it.score());
    }
    // Set the bound to the worst current result and below reject any newly-generated candidates failing
    // to exceed this bound
    BoundsChecker bound = BoundsChecker.create(searchStrategy.reversed);
    bound.bound = results.topScore();
    while (candidates.size() > 0) {
      // get the best candidate (closest or best scoring)
      float topCandidateScore = candidates.topScore();
      if (results.size() >= topK) {
        if (bound.check(topCandidateScore)) {
          break;
        }
      }
      int topCandidateNode = candidates.pop();
      graphValues.seek(topCandidateNode);
      int friendOrd;
      while ((friendOrd = graphValues.nextNeighbor()) != NO_MORE_DOCS) {
        if (visited.contains(friendOrd)) {
          continue;
        }
        visited.add(friendOrd);
        float score = searchStrategy.compare(query, vectors.vectorValue(friendOrd));
        if (results.insertWithOverflow(friendOrd, score)) {
          candidates.add(friendOrd, score);
          bound.bound = results.topScore();
        }
      }
    }
    results.setVisitedCount(visited.size());
    return results;
  }

