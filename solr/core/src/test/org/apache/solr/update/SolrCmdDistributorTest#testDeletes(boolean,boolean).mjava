  private void testDeletes(boolean dbq, boolean withFailures) throws Exception {
    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);
    solrclient.commit(true, true);
    long numFoundBefore = solrclient.query(new SolrQuery("*:*")).getResults()
        .getNumFound();
    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);
    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {
      if (withFailures) {
        streamingClients.setExp(Exp.CONNECT_EXCEPTION);
      }
      ArrayList<Node> nodes = new ArrayList<>();

      final AtomicInteger retries = new AtomicInteger();
      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");
      Node retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), "collection1", "shard1", 5) {
        @Override
        public boolean checkRetry(Error err) {
          streamingClients.setExp(null);
          retries.incrementAndGet();
          return super.checkRetry(err);
        }
      };


      nodes.add(retryNode);

      for (int i = 0 ; i < 5 ; i++) {
        AddUpdateCommand cmd = new AddUpdateCommand(null);
        int currentId = id.incrementAndGet();
        cmd.solrDoc = sdoc("id", currentId);
        ModifiableSolrParams params = new ModifiableSolrParams();
        cmdDistrib.distribAdd(cmd, nodes, params);
        DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);
        if (dbq) {
          dcmd.setQuery("id:" + currentId);
        } else {
          dcmd.setId(String.valueOf(currentId));
        }
        cmdDistrib.distribDelete(dcmd, nodes, params, false, null, null);
      }
      

      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);
      cmdDistrib.distribCommit(ccmd, nodes, new ModifiableSolrParams());
      cmdDistrib.finish();
      
      int expectedRetryCount = 0;
      if (withFailures) {
        if (dbq) {
          expectedRetryCount = 1; // just the first cmd would be retried
        } else {
          expectedRetryCount = 10;
        }
      }
      assertEquals(expectedRetryCount, retries.get());


      long numFoundAfter = solrclient.query(new SolrQuery("*:*")).getResults()
          .getNumFound();

      // we will get java.net.ConnectException which we retry on
      assertEquals(numFoundBefore, numFoundAfter);
      assertEquals(0, cmdDistrib.getErrors().size());
    }
  }

