  private MapWriter _allPropsWriter() {
    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(new HashSet<>())
        .and(NON_NULL_VAL);
    return writer -> {
      // XXX this is why this class should be immutable - it's a mess !!!

      // propMap takes precedence because it's mutable and we can't control its
      // contents, so a third party may override some declared fields
      for (Map.Entry<String, Object> e : propMap.entrySet()) {
        final String key = e.getKey();
        // don't store the base_url as we can compute it from the node_name
        if (!BASE_URL_PROP.equals(key)) {
          writer.put(e.getKey(), e.getValue(), p);
        }
      }

      writer.put(ZkStateReader.CORE_NAME_PROP, core, p)
          .put(ZkStateReader.SHARD_ID_PROP, shard, p)
          .put(ZkStateReader.COLLECTION_PROP, collection, p)
          .put(ZkStateReader.NODE_NAME_PROP, node, p)
          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p)
          .put(ZkStateReader.STATE_PROP, state.toString(), p);
    };
  }

