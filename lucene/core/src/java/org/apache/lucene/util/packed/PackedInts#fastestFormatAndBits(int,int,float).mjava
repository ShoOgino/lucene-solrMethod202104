  /**
   * Try to find the {@link Format} and number of bits per value that would restore from disk the
   * fastest reader whose overhead is less than <code>acceptableOverheadRatio</code>.
   *
   * <p>The <code>acceptableOverheadRatio</code> parameter makes sense for random-access {@link
   * Reader}s. In case you only plan to perform sequential access on this stream later on, you
   * should probably use {@link PackedInts#COMPACT}.
   *
   * <p>If you don't know how many values you are going to write, use <code>valueCount = -1</code>.
   */
  public static FormatAndBits fastestFormatAndBits(
      int valueCount, int bitsPerValue, float acceptableOverheadRatio) {
    if (valueCount == -1) {
      valueCount = Integer.MAX_VALUE;
    }

    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);
    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);
    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits

    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;

    int actualBitsPerValue = -1;

    // rounded number of bits per value are usually the fastest
    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {
      actualBitsPerValue = 8;
    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {
      actualBitsPerValue = 16;
    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {
      actualBitsPerValue = 32;
    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {
      actualBitsPerValue = 64;
    } else {
      actualBitsPerValue = bitsPerValue;
    }

    return new FormatAndBits(Format.PACKED, actualBitsPerValue);
  }

