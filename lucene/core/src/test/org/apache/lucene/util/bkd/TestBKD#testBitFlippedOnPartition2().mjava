  /** Make sure corruption on a recursed partition is caught, when BKDWriter does get angry */
  public void testBitFlippedOnPartition2() throws Exception {

    // Generate fixed data set:
    int numDocs = atLeast(10000);
    int numBytesPerDim = 4;
    int numDims = 3;

    byte[][][] docValues = new byte[numDocs][][];
    byte counter = 0;

    for (int docID = 0; docID < numDocs; docID++) {
      byte[][] values = new byte[numDims][];
      for (int dim = 0; dim < numDims; dim++) {
        values[dim] = new byte[numBytesPerDim];
        for (int i = 0; i < values[dim].length; i++) {
          values[dim][i] = counter;
          counter++;
        }
      }
      docValues[docID] = values;
    }

    try (Directory dir0 = newMockDirectory()) {

      Directory dir =
          new FilterDirectory(dir0) {
            boolean corrupted;

            @Override
            public IndexOutput createTempOutput(String prefix, String suffix, IOContext context)
                throws IOException {
              IndexOutput out = in.createTempOutput(prefix, suffix, context);
              // System.out.println("prefix=" + prefix + " suffix=" + suffix);
              if (corrupted == false && suffix.equals("bkd_left0")) {
                // System.out.println("now corrupt byte=" + x + " prefix=" + prefix + " suffix=" +
                // suffix);
                corrupted = true;
                return new CorruptingIndexOutput(dir0, 22072, out);
              } else {
                return out;
              }
            }
          };

      Throwable t =
          expectThrows(
              CorruptIndexException.class,
              () -> {
                verify(dir, docValues, null, numDims, numDims, numBytesPerDim, 50, 0.1);
              });
      assertCorruptionDetected(t);
    }
  }

