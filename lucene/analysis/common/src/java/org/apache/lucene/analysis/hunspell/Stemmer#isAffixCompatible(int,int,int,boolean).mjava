  private boolean isAffixCompatible(
      int affix, int prevFlag, int recursionDepth, boolean previousWasPrefix) {
    int append = dictionary.affixData(affix, Dictionary.AFFIX_APPEND);

    if (recursionDepth == 0) {
      if (dictionary.onlyincompound == -1) {
        return true;
      }

      // check if affix is allowed in a non-compound word
      return !dictionary.hasFlag(append, (char) dictionary.onlyincompound, scratch);
    }

    if (isCrossProduct(affix)) {
      // cross check incoming continuation class (flag of previous affix) against list.
      char[] appendFlags = dictionary.decodeFlags(append, scratch);
      assert prevFlag >= 0;
      boolean allowed =
          dictionary.onlyincompound == -1
              || !Dictionary.hasFlag(appendFlags, (char) dictionary.onlyincompound);
      if (allowed) {
        return previousWasPrefix || Dictionary.hasFlag(appendFlags, (char) prevFlag);
      }
    }

    return false;
  }

