  /**
   * Normalize a string down to the representation that it would have in the index.
   *
   * <p>This is typically used by query parsers in order to generate a query on a given term,
   * without tokenizing or stemming, which are undesirable if the string to analyze is a partial
   * word (eg. in case of a wildcard or fuzzy query).
   *
   * <p>This method uses {@link #initReaderForNormalization(String, Reader)} in order to apply
   * necessary character-level normalization and then {@link #normalize(String, TokenStream)} in
   * order to apply the normalizing token filters.
   */
  public final BytesRef normalize(final String fieldName, final String text) {
    try {
      // apply char filters
      final String filteredText;
      try (Reader reader = new StringReader(text)) {
        Reader filterReader = initReaderForNormalization(fieldName, reader);
        char[] buffer = new char[64];
        StringBuilder builder = new StringBuilder();
        for (; ; ) {
          final int read = filterReader.read(buffer, 0, buffer.length);
          if (read == -1) {
            break;
          }
          builder.append(buffer, 0, read);
        }
        filteredText = builder.toString();
      } catch (IOException e) {
        throw new IllegalStateException("Normalization threw an unexpected exception", e);
      }

      final AttributeFactory attributeFactory = attributeFactory(fieldName);
      try (TokenStream ts =
          normalize(
              fieldName, new StringTokenStream(attributeFactory, filteredText, text.length()))) {
        final TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);
        ts.reset();
        if (ts.incrementToken() == false) {
          throw new IllegalStateException(
              "The normalization token stream is "
                  + "expected to produce exactly 1 token, but got 0 for analyzer "
                  + this
                  + " and input \""
                  + text
                  + "\"");
        }
        final BytesRef term = BytesRef.deepCopyOf(termAtt.getBytesRef());
        if (ts.incrementToken()) {
          throw new IllegalStateException(
              "The normalization token stream is "
                  + "expected to produce exactly 1 token, but got 2+ for analyzer "
                  + this
                  + " and input \""
                  + text
                  + "\"");
        }
        ts.end();
        return term;
      }
    } catch (IOException e) {
      throw new IllegalStateException("Normalization threw an unexpected exception", e);
    }
  }

