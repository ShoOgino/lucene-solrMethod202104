    @Override
    public boolean incrementToken() throws IOException {
      while (true) {

        if (input.incrementToken()) {
          // Position tracking:
          if (remainingPosInc > 0) {
            // usually true first token of additional values (not first val)
            posIncAtt.setPositionIncrement(remainingPosInc + posIncAtt.getPositionIncrement());
            remainingPosInc = 0; // reset
          }
          // Offset tracking:
          offsetAtt.setOffset(
              startValIdx + offsetAtt.startOffset(), startValIdx + offsetAtt.endOffset());
          return true;
        }

        if (endValIdx == content.length()) { // no more
          return false;
        }

        input.end(); // might adjust position increment
        remainingPosInc += posIncAtt.getPositionIncrement();
        input.close();
        remainingPosInc += indexAnalyzer.getPositionIncrementGap(fieldName);

        // Get new tokenStream based on next segment divided by the splitChar
        startValIdx = endValIdx + 1;
        endValIdx = content.indexOf(splitChar, startValIdx);
        if (endValIdx == -1) { // EOF
          endValIdx = content.length();
        }
        TokenStream tokenStream =
            indexAnalyzer.tokenStream(fieldName, content.substring(startValIdx, endValIdx));
        if (tokenStream != input) { // (input is defined in TokenFilter set in the constructor)
          // This is a grand trick we do -- knowing that the analyzer's re-use strategy is going to
          // produce the
          // very same tokenStream instance and thus have the same AttributeSource as this wrapping
          // TokenStream
          // since we used it as our input in the constructor.
          // Were this not the case, we'd have to copy every attribute of interest since we can't
          // alter the
          // AttributeSource of this wrapping TokenStream post-construction (it's all
          // private/final).
          // If this is a problem, we could do that instead; maybe with a custom CharTermAttribute
          // that allows
          // us to easily set the char[] reference without literally copying char by char.
          throw new IllegalStateException(
              "Require TokenStream re-use.  Unsupported re-use strategy?: "
                  + indexAnalyzer.getReuseStrategy());
        }
        tokenStream.reset();
      } // while loop to increment token of this new value
    }

