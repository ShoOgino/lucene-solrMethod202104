  /** Creates tree from sorted components (with range low and high inclusive) */
  private static ComponentTree createTree(
      Component2D[] components, int low, int high, boolean splitX) {
    if (low > high) {
      return null;
    }
    final int mid = (low + high) >>> 1;
    if (low < high) {
      Comparator<Component2D> comparator;
      if (splitX) {
        comparator =
            (left, right) -> {
              int ret = Double.compare(left.getMinX(), right.getMinX());
              if (ret == 0) {
                ret = Double.compare(left.getMaxX(), right.getMaxX());
              }
              return ret;
            };
      } else {
        comparator =
            (left, right) -> {
              int ret = Double.compare(left.getMinY(), right.getMinY());
              if (ret == 0) {
                ret = Double.compare(left.getMaxY(), right.getMaxY());
              }
              return ret;
            };
      }
      ArrayUtil.select(components, low, high + 1, mid, comparator);
    }
    ComponentTree newNode = new ComponentTree(components[mid], splitX);
    // find children
    newNode.left = createTree(components, low, mid - 1, !splitX);
    newNode.right = createTree(components, mid + 1, high, !splitX);

    // pull up max values to this node
    if (newNode.left != null) {
      newNode.maxX = Math.max(newNode.maxX, newNode.left.getMaxX());
      newNode.maxY = Math.max(newNode.maxY, newNode.left.getMaxY());
    }
    if (newNode.right != null) {
      newNode.maxX = Math.max(newNode.maxX, newNode.right.getMaxX());
      newNode.maxY = Math.max(newNode.maxY, newNode.right.getMaxY());
    }
    return newNode;
  }

