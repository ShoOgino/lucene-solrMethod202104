  public void testSortWithinGroups() throws IOException {

    Shard shard = new Shard();
    indexRandomDocs(shard.writer);
    IndexSearcher searcher = shard.getIndexSearcher();

    String[] query = new String[] {"foo", "bar", "baz"};
    Query topLevel = new TermQuery(new Term("text", query[random().nextInt(query.length)]));

    GroupingSearch grouper = new GroupingSearch(getGroupSelector());
    grouper.setGroupDocsLimit(10);
    Sort sort =
        new Sort(
            new SortField("sort1", SortField.Type.STRING),
            new SortField("sort2", SortField.Type.LONG));
    grouper.setSortWithinGroup(sort);

    TopGroups<T> topGroups = grouper.search(searcher, topLevel, 0, 5);
    TopDocs topDoc = searcher.search(topLevel, 1);

    for (int i = 0; i < topGroups.groups.length; i++) {
      // Check top-level ordering by score: first group's maxScore should be equal to the
      // top score returned by a simple search with no grouping; subsequent groups should
      // all have equal or lower maxScores
      if (i == 0) {
        assertEquals(topDoc.scoreDocs[0].score, topGroups.groups[0].maxScore, 0);
      } else {
        assertTrue(topGroups.groups[i].maxScore <= topGroups.groups[i - 1].maxScore);
      }
      // Groups themselves are ordered by a defined Sort, and each should give the same result as
      // the top-level query, filtered by the group value, with the same Sort
      Query filtered =
          new BooleanQuery.Builder()
              .add(topLevel, BooleanClause.Occur.MUST)
              .add(filterQuery(topGroups.groups[i].groupValue), BooleanClause.Occur.FILTER)
              .build();
      TopDocs td = searcher.search(filtered, 10, sort);
      assertScoreDocsEquals(td.scoreDocs, topGroups.groups[i].scoreDocs);
    }

    shard.close();
  }

