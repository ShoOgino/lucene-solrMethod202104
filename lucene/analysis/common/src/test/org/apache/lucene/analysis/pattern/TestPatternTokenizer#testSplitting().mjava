  public void testSplitting() throws Exception {
    String qpattern = "\\'([^\\']+)\\'"; // get stuff between "'"
    String[][] tests = {
      // group  pattern        input                    output
      {"-1", "--", "aaa--bbb--ccc", "aaa bbb ccc"},
      {"-1", ":", "aaa:bbb:ccc", "aaa bbb ccc"},
      {"-1", "\\p{Space}", "aaa   bbb \t\tccc  ", "aaa bbb ccc"},
      {"-1", ":", "boo:and:foo", "boo and foo"},
      {"-1", "o", "boo:and:foo", "b :and:f"},
      {"0", ":", "boo:and:foo", ": :"},
      {"0", qpattern, "aaa 'bbb' 'ccc'", "'bbb' 'ccc'"},
      {"1", qpattern, "aaa 'bbb' 'ccc'", "bbb ccc"}
    };

    for (String[] test : tests) {
      TokenStream stream =
          new PatternTokenizer(
              newAttributeFactory(), Pattern.compile(test[1]), Integer.parseInt(test[0]));
      ((Tokenizer) stream).setReader(new StringReader(test[2]));
      String out = tsToString(stream);
      // System.out.println( test[2] + " ==> " + out );

      assertEquals("pattern: " + test[1] + " with input: " + test[2], test[3], out);

      // Make sure it is the same as if we called 'split'
      // test disabled, as we remove empty tokens
      /*if( "-1".equals( test[0] ) ) {
        String[] split = test[2].split( test[1] );
        stream = tokenizer.create( new StringReader( test[2] ) );
        int i=0;
        for( Token t = stream.next(); null != t; t = stream.next() )
        {
          assertEquals( "split: "+test[1] + " "+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );
        }
      }*/
    }
  }

