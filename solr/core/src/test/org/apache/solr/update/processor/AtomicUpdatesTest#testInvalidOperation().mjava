  @Test
  public void testInvalidOperation() {
    SolrInputDocument doc;

    doc = new SolrInputDocument();
    doc.setField("id", "7");
    doc.setField("cat", new String[]{"aaa", "ccc"});
    assertU(adoc(doc));

    assertU(commit());

    assertQ(req("q", "cat:*", "indent", "true"), "//result[@numFound = '1']");

    doc = new SolrInputDocument();
    doc.setField("id", "7");
    doc.setField("cat", ImmutableMap.of("whatever", "bbb"));
    assertFailedU( adoc(doc));
    assertU(commit());

    assertQ(req("q", "cat:*", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "cat:aaa", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "cat:bbb", "indent", "true"), "//result[@numFound = '0']");
    assertQ(req("q", "cat:ccc", "indent", "true"), "//result[@numFound = '1']");

    // add a nested document;
    doc = new SolrInputDocument();
    doc.setField("id", "123");
    doc.setField("cat", ImmutableMap.of("whatever", "ddd"));

    SolrInputDocument childDoc = new SolrInputDocument();
    childDoc.setField("id", "1231");
    childDoc.setField("title", "title_nested");
    doc.addChildDocument(childDoc);
    assertFailedU(adoc(doc));
    assertU(commit());

    assertQ(req("q", "cat:*", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "cat:aaa", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "cat:ddd", "indent", "true"), "//result[@numFound = '0']");
    assertQ(req("q", "title:title_nested", "indent", "true"), "//result[@numFound = '0']");
    assertQ(req("q", "id:123", "indent", "true"), "//result[@numFound = '0']");
    assertQ(req("q", "id:1231", "indent", "true"), "//result[@numFound = '0']");
    assertQ(req("q", "cat:ccc", "indent", "true"), "//result[@numFound = '1']");

    doc = new SolrInputDocument();
    doc.setField("id", "123");
    doc.setField("title", "title_parent");

    childDoc = new SolrInputDocument();
    childDoc.setField("id", "12311");
    childDoc.setField("cat", "ddd");
    childDoc.setField("title", "title_nested");
    doc.addChildDocument(childDoc);
    assertU(adoc(doc));
    assertU(commit());

    assertQ(req("q", "*:*", "indent", "true"), "//result[@numFound = '3']");
    assertQ(req("q", "cat:aaa", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "cat:ddd", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "title:title_nested", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "id:123", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "id:12311", "indent", "true"), "//result[@numFound = '1']");
    assertQ(req("q", "cat:ccc", "indent", "true"), "//result[@numFound = '1']");

    // inc op on non-numeric field
    SolrInputDocument invalidDoc = new SolrInputDocument();
    invalidDoc.setField("id", "7");
    invalidDoc.setField("cat", ImmutableMap.of("inc", "bbb"));

    SolrException e = expectThrows(SolrException.class, () -> assertU(adoc(invalidDoc)));
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    MatcherAssert.assertThat(e.getMessage(), containsString("'inc' is not supported on non-numeric field cat"));
  }

