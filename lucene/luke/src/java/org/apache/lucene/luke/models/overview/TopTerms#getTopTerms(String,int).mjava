  /**
   * Returns the top indexed terms with their statistics for the specified field.
   *
   * @param field - the field name
   * @param numTerms - the max number of terms to be returned
   * @throws Exception - if an error occurs when collecting term statistics
   */
  List<TermStats> getTopTerms(String field, int numTerms) throws Exception {

    if (!topTermsCache.containsKey(field) || topTermsCache.get(field).size() < numTerms) {
      org.apache.lucene.misc.TermStats[] stats =
          HighFreqTerms.getHighFreqTerms(
              reader, numTerms, field, new HighFreqTerms.DocFreqComparator());

      List<TermStats> topTerms =
          Arrays.stream(stats).map(TermStats::of).collect(Collectors.toList());

      // cache computed statistics for later uses
      topTermsCache.put(field, topTerms);
    }

    return List.copyOf(topTermsCache.get(field));
  }

