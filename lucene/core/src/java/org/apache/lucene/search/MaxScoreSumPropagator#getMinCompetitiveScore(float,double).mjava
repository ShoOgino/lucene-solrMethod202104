  /** Return the minimum score that a Scorer must produce in order for a hit to be competitive. */
  private float getMinCompetitiveScore(float minScoreSum, double sumOfOtherMaxScores) {
    assert numClauses > 0;
    if (minScoreSum <= sumOfOtherMaxScores) {
      return 0f;
    }

    // We need to find a value 'minScore' so that 'minScore + sumOfOtherMaxScores <= minScoreSum'
    // TODO: is there an efficient way to find the greatest value that meets this requirement?
    float minScore = (float) (minScoreSum - sumOfOtherMaxScores);
    int iters = 0;
    while (scoreSumUpperBound(minScore + sumOfOtherMaxScores) > minScoreSum) {
      // Important: use ulp of minScoreSum and not minScore to make sure that we
      // converge quickly.
      minScore -= Math.ulp(minScoreSum);
      // this should converge in at most two iterations:
      //  - one because of the subtraction rounding error
      //  - one because of the error introduced by sumUpperBound
      assert ++iters <= 2 : iters;
    }
    return Math.max(minScore, 0f);
  }

