  @Test
  public void testListAndDeleteFailOnOldBackupLocations() throws Exception {
    final String nonIncrementalBackupLocation = createTempDir().toAbsolutePath().toString();
    final RequestStatusState backupState = CollectionAdminRequest.backupCollection(COLLECTION_NAME, BACKUP_NAME)
            .setRepositoryName(VALID_REPOSITORY_NAME)
            .setLocation(nonIncrementalBackupLocation)
            .setIncremental(false)
            .processAndWait(cluster.getSolrClient(), ASYNC_COMMAND_WAIT_PERIOD_MILLIS);
    assertEquals(RequestStatusState.COMPLETED, backupState);

    // Check message for list-backup
    Exception e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.listBackup(BACKUP_NAME)
              .setBackupLocation(nonIncrementalBackupLocation)
              .setBackupRepository(VALID_REPOSITORY_NAME)
              .process(cluster.getSolrClient());
    });
    assertTrue(e.getMessage().contains("The backup name [backup_name] at location"));
    assertTrue(e.getMessage().contains("holds a non-incremental (legacy) backup, but backup-listing is only supported on incremental backups"));

    // Check message for delete-backup
    e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.deleteBackupById(BACKUP_NAME, 1)
              .setLocation(nonIncrementalBackupLocation)
              .setRepositoryName(VALID_REPOSITORY_NAME)
              .process(cluster.getSolrClient());
    });
    assertTrue(e.getMessage().contains("The backup name [backup_name] at location"));
    assertTrue(e.getMessage().contains("holds a non-incremental (legacy) backup, but backup-deletion is only supported on incremental backups"));
  }

