  @Override
  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({"rawtypes"})NamedList results) throws Exception {
    String aliasName = message.getStr(NAME);

    final ZkStateReader.AliasesManager aliasesManager = ccc.getZkStateReader().aliasesManager;

    // Ensure we see the alias.  This may be redundant but SetAliasPropCmd isn't expected to be called very frequently
    aliasesManager.update();

    if (aliasesManager.getAliases().getCollectionAliasMap().get(aliasName) == null) {
      // nicer than letting aliases object throw later on...
      throw new SolrException(BAD_REQUEST,
          String.format(Locale.ROOT,  "Can't modify non-existent alias %s", aliasName));
    }

    @SuppressWarnings("unchecked")
    Map<String, String> properties = new LinkedHashMap<>((Map<String, String>) message.get(PROPERTIES));

    // check & cleanup properties.  It's a mutable copy.
    for (Map.Entry<String, String> entry : properties.entrySet()) {
      String key = entry.getKey();
      if ("".equals(key.trim())) {
        throw new SolrException(BAD_REQUEST, "property keys must not be pure whitespace");
      }
      if (!key.equals(key.trim())) {
        throw new SolrException(BAD_REQUEST, "property keys should not begin or end with whitespace");
      }
      String value = entry.getValue();
      if ("".equals(value)) {
        entry.setValue(null);
      }
    }

    aliasesManager.applyModificationAndExportToZk(aliases1 -> aliases1.cloneWithCollectionAliasProperties(aliasName, properties));
  }

