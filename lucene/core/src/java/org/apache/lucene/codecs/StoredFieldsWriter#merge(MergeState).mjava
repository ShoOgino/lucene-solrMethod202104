  /**
   * Merges in the stored fields from the readers in <code>mergeState</code>. The default
   * implementation skips over deleted documents, and uses {@link #startDocument()}, {@link
   * #writeField(FieldInfo, IndexableField)}, and {@link #finish(FieldInfos, int)}, returning the
   * number of documents that were written. Implementations can override this method for more
   * sophisticated merging (bulk-byte copying, etc).
   */
  public int merge(MergeState mergeState) throws IOException {
    List<StoredFieldsMergeSub> subs = new ArrayList<>();
    for (int i = 0; i < mergeState.storedFieldsReaders.length; i++) {
      StoredFieldsReader storedFieldsReader = mergeState.storedFieldsReaders[i];
      storedFieldsReader.checkIntegrity();
      subs.add(
          new StoredFieldsMergeSub(
              new MergeVisitor(mergeState, i),
              mergeState.docMaps[i],
              storedFieldsReader,
              mergeState.maxDocs[i]));
    }

    final DocIDMerger<StoredFieldsMergeSub> docIDMerger =
        DocIDMerger.of(subs, mergeState.needsIndexSort);

    int docCount = 0;
    while (true) {
      StoredFieldsMergeSub sub = docIDMerger.next();
      if (sub == null) {
        break;
      }
      assert sub.mappedDocID == docCount;
      startDocument();
      sub.reader.visitDocument(sub.docID, sub.visitor);
      finishDocument();
      docCount++;
    }
    finish(mergeState.mergeFieldInfos, docCount);
    return docCount;
  }

