  public void testTryUpdateDocValues() throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig();
    IndexWriter writer = new IndexWriter(dir, conf);
    int numDocs = 1 + random().nextInt(128);
    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      doc.add(new StringField("id", "" + i, Store.YES));
      doc.add(new NumericDocValuesField("id", i));
      doc.add(new BinaryDocValuesField("binaryId", new BytesRef(new byte[] {(byte) i})));
      writer.addDocument(doc);
      if (random().nextBoolean()) {
        writer.flush();
      }
    }
    int doc = random().nextInt(numDocs);
    doUpdate(
        new Term("id", "" + doc),
        writer,
        new NumericDocValuesField("id", doc + 1),
        new BinaryDocValuesField("binaryId", new BytesRef(new byte[] {(byte) (doc + 1)})));
    IndexReader reader = writer.getReader();
    NumericDocValues idValues = null;
    BinaryDocValues binaryIdValues = null;
    for (LeafReaderContext c : reader.leaves()) {
      TopDocs topDocs =
          new IndexSearcher(c.reader()).search(new TermQuery(new Term("id", "" + doc)), 10);
      if (topDocs.totalHits.value == 1) {
        assertNull(idValues);
        assertNull(binaryIdValues);
        idValues = c.reader().getNumericDocValues("id");
        assertEquals(topDocs.scoreDocs[0].doc, idValues.advance(topDocs.scoreDocs[0].doc));
        binaryIdValues = c.reader().getBinaryDocValues("binaryId");
        assertEquals(topDocs.scoreDocs[0].doc, binaryIdValues.advance(topDocs.scoreDocs[0].doc));
      } else {
        assertEquals(0, topDocs.totalHits.value);
      }
    }

    assertNotNull(idValues);
    assertNotNull(binaryIdValues);

    assertEquals(doc + 1, idValues.longValue());
    assertEquals(new BytesRef(new byte[] {(byte) (doc + 1)}), binaryIdValues.binaryValue());
    IOUtils.close(reader, writer, dir);
  }

