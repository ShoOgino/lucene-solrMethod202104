  public void testListOfOutputs() throws Exception {
    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();
    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);
    final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);

    final IntsRefBuilder scratch = new IntsRefBuilder();
    // Add the same input more than once and the outputs
    // are merged:
    fstCompiler.add(Util.toIntsRef(new BytesRef("a"), scratch), 1L);
    fstCompiler.add(Util.toIntsRef(new BytesRef("a"), scratch), 3L);
    fstCompiler.add(Util.toIntsRef(new BytesRef("a"), scratch), 0L);
    fstCompiler.add(Util.toIntsRef(new BytesRef("b"), scratch), 17L);
    final FST<Object> fst = fstCompiler.compile();

    Object output = Util.get(fst, new BytesRef("a"));
    assertNotNull(output);
    List<Long> outputList = outputs.asList(output);
    assertEquals(3, outputList.size());
    assertEquals(1L, outputList.get(0).longValue());
    assertEquals(3L, outputList.get(1).longValue());
    assertEquals(0L, outputList.get(2).longValue());

    output = Util.get(fst, new BytesRef("b"));
    assertNotNull(output);
    outputList = outputs.asList(output);
    assertEquals(1, outputList.size());
    assertEquals(17L, outputList.get(0).longValue());
  }

