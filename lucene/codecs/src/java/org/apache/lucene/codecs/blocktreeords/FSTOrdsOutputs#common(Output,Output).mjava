  @Override
  public Output common(Output output1, Output output2) {
    BytesRef bytes1 = output1.bytes;
    BytesRef bytes2 = output2.bytes;

    assert bytes1 != null;
    assert bytes2 != null;

    int pos1 = bytes1.offset;
    int pos2 = bytes2.offset;
    int stopAt1 = pos1 + Math.min(bytes1.length, bytes2.length);
    while (pos1 < stopAt1) {
      if (bytes1.bytes[pos1] != bytes2.bytes[pos2]) {
        break;
      }
      pos1++;
      pos2++;
    }

    BytesRef prefixBytes;

    if (pos1 == bytes1.offset) {
      // no common prefix
      prefixBytes = NO_BYTES;
    } else if (pos1 == bytes1.offset + bytes1.length) {
      // bytes1 is a prefix of bytes2
      prefixBytes = bytes1;
    } else if (pos2 == bytes2.offset + bytes2.length) {
      // bytes2 is a prefix of bytes1
      prefixBytes = bytes2;
    } else {
      prefixBytes = new BytesRef(bytes1.bytes, bytes1.offset, pos1 - bytes1.offset);
    }

    return newOutput(
        prefixBytes,
        Math.min(output1.startOrd, output2.startOrd),
        Math.min(output1.endOrd, output2.endOrd));
  }

