  public void testShardedGrouping() throws IOException {

    Shard control = new Shard();

    int shardCount = random().nextInt(3) + 2; // between 2 and 4 shards
    Shard[] shards = new Shard[shardCount];
    for (int i = 0; i < shardCount; i++) {
      shards[i] = new Shard();
    }

    String[] texts = new String[] {"foo", "bar", "bar baz", "foo foo bar"};

    // Create a bunch of random documents, and index them - once into the control index,
    // and once into a randomly picked shard.

    int numDocs = atLeast(200);
    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      doc.add(new NumericDocValuesField("id", i));
      doc.add(new TextField("name", Integer.toString(i), Field.Store.YES));
      doc.add(new TextField("text", texts[random().nextInt(texts.length)], Field.Store.NO));
      doc.add(new SortedDocValuesField("sort1", new BytesRef("sort" + random().nextInt(4))));
      doc.add(new NumericDocValuesField("sort2", random().nextLong()));
      addGroupField(doc, i);
      control.writer.addDocument(doc);
      int shard = random().nextInt(shardCount);
      shards[shard].writer.addDocument(doc);
    }

    String[] query = new String[] {"foo", "bar", "baz"};
    Query topLevel = new TermQuery(new Term("text", query[random().nextInt(query.length)]));

    Sort sort =
        new Sort(
            new SortField("sort1", SortField.Type.STRING),
            new SortField("sort2", SortField.Type.LONG));

    // A grouped query run in two phases against the control should give us the same
    // result as the query run against shards and merged back together after each phase.

    FirstPassGroupingCollector<T> singletonFirstPass =
        new FirstPassGroupingCollector<>(getGroupSelector(), sort, 5);
    control.getIndexSearcher().search(topLevel, singletonFirstPass);
    Collection<SearchGroup<T>> singletonGroups = singletonFirstPass.getTopGroups(0);

    List<Collection<SearchGroup<T>>> shardGroups = new ArrayList<>();
    for (Shard shard : shards) {
      FirstPassGroupingCollector<T> fc =
          new FirstPassGroupingCollector<>(getGroupSelector(), sort, 5);
      shard.getIndexSearcher().search(topLevel, fc);
      shardGroups.add(fc.getTopGroups(0));
    }
    Collection<SearchGroup<T>> mergedGroups = SearchGroup.merge(shardGroups, 0, 5, sort);
    assertEquals(singletonGroups, mergedGroups);

    TopGroupsCollector<T> singletonSecondPass =
        new TopGroupsCollector<>(
            getGroupSelector(), singletonGroups, sort, Sort.RELEVANCE, 5, true);
    control.getIndexSearcher().search(topLevel, singletonSecondPass);
    TopGroups<T> singletonTopGroups = singletonSecondPass.getTopGroups(0);

    // TODO why does SearchGroup.merge() take a list but TopGroups.merge() take an array?
    @SuppressWarnings("unchecked")
    TopGroups<T>[] shardTopGroups = (TopGroups<T>[]) new TopGroups<?>[shards.length];
    int j = 0;
    for (Shard shard : shards) {
      TopGroupsCollector<T> sc =
          new TopGroupsCollector<>(getGroupSelector(), mergedGroups, sort, Sort.RELEVANCE, 5, true);
      shard.getIndexSearcher().search(topLevel, sc);
      shardTopGroups[j] = sc.getTopGroups(0);
      j++;
    }
    TopGroups<T> mergedTopGroups =
        TopGroups.merge(shardTopGroups, sort, Sort.RELEVANCE, 0, 5, TopGroups.ScoreMergeMode.None);
    assertNotNull(mergedTopGroups);

    assertEquals(singletonTopGroups.totalGroupedHitCount, mergedTopGroups.totalGroupedHitCount);
    assertEquals(singletonTopGroups.totalHitCount, mergedTopGroups.totalHitCount);
    assertEquals(singletonTopGroups.totalGroupCount, mergedTopGroups.totalGroupCount);
    assertEquals(singletonTopGroups.groups.length, mergedTopGroups.groups.length);
    for (int i = 0; i < singletonTopGroups.groups.length; i++) {
      assertEquals(singletonTopGroups.groups[i].groupValue, mergedTopGroups.groups[i].groupValue);
      assertEquals(
          singletonTopGroups.groups[i].scoreDocs.length,
          mergedTopGroups.groups[i].scoreDocs.length);
    }

    control.close();
    for (Shard shard : shards) {
      shard.close();
    }
  }

