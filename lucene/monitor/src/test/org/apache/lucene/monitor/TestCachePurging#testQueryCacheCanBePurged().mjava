  public void testQueryCacheCanBePurged() throws IOException {

    final AtomicInteger purgeCount = new AtomicInteger();
    MonitorUpdateListener listener =
        new MonitorUpdateListener() {
          @Override
          public void onPurge() {
            purgeCount.incrementAndGet();
          }
        };

    try (Monitor monitor = new Monitor(ANALYZER)) {
      MonitorQuery[] queries =
          new MonitorQuery[] {
            new MonitorQuery("1", parse("test1 test4")),
            new MonitorQuery("2", parse("test2")),
            new MonitorQuery("3", parse("test3"))
          };
      monitor.addQueryIndexUpdateListener(listener);
      monitor.register(queries);
      assertThat(monitor.getQueryCount(), is(3));
      assertThat(monitor.getDisjunctCount(), is(4));
      assertThat(monitor.getQueryCacheStats().cachedQueries, is(4));

      Document doc = new Document();
      doc.add(newTextField("field", "test1 test2 test3", Field.Store.NO));
      assertThat(monitor.match(doc, QueryMatch.SIMPLE_MATCHER).getMatchCount(), is(3));

      monitor.deleteById("1");
      assertThat(monitor.getQueryCount(), is(2));
      assertThat(monitor.getQueryCacheStats().cachedQueries, is(4));
      assertThat(monitor.match(doc, QueryMatch.SIMPLE_MATCHER).getMatchCount(), is(2));

      monitor.purgeCache();
      assertThat(monitor.getQueryCacheStats().cachedQueries, is(2));

      MatchingQueries<QueryMatch> result = monitor.match(doc, QueryMatch.SIMPLE_MATCHER);
      assertThat(result.getMatchCount(), is(2));
      assertTrue(purgeCount.get() > 0);
    }
  }

