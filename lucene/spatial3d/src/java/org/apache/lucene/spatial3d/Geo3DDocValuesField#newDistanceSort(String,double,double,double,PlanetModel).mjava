  /**
   * Creates a SortField for sorting by distance within a circle.
   *
   * <p>This sort orders documents by ascending distance from the location. The value returned in
   * {@link FieldDoc} for the hits contains a Double instance with the distance in meters.
   *
   * <p>If a document is missing the field, then by default it is treated as having {@link
   * Double#POSITIVE_INFINITY} distance (missing values sort last).
   *
   * <p>If a document contains multiple values for the field, the <i>closest</i> distance from the
   * circle center is used.
   *
   * @param field field name. must not be null.
   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.
   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.
   * @param maxRadiusMeters is the maximum radius in meters.
   * @return SortField ordering documents by distance
   * @throws IllegalArgumentException if {@code field} is null or circle has invalid coordinates.
   */
  public static SortField newDistanceSort(
      final String field,
      final double latitude,
      final double longitude,
      final double maxRadiusMeters,
      final PlanetModel planetModel) {
    final GeoDistanceShape shape =
        Geo3DUtil.fromDistance(planetModel, latitude, longitude, maxRadiusMeters);
    return new Geo3DPointSortField(field, planetModel, shape);
  }

