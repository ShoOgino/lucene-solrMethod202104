  private void testChildDoctransformerXML() throws Exception {
    String test1[] = new String[] {
        "//*[@numFound='1']",
        "/response/result/doc[1]/doc[1]/str[@name='id']='2'" ,
        "/response/result/doc[1]/doc[2]/str[@name='id']='3'" ,
        "/response/result/doc[1]/doc[3]/str[@name='id']='4'" ,
        "/response/result/doc[1]/doc[4]/str[@name='id']='5'" ,
        "/response/result/doc[1]/doc[5]/str[@name='id']='6'" ,
        "/response/result/doc[1]/doc[6]/str[@name='id']='7'"};

    String test2[] = new String[] {
        "//*[@numFound='1']",
        "/response/result/doc[1]/doc[1]/str[@name='id']='2'" ,
        "/response/result/doc[1]/doc[2]/str[@name='id']='4'" ,
        "/response/result/doc[1]/doc[3]/str[@name='id']='6'" };

    String test3[] = new String[] {
        "//*[@numFound='1']",
        "count(/response/result/doc[1]/doc)=2",
        "/response/result/doc[1]/doc[1]/str[@name='id']='3'" ,
        "/response/result/doc[1]/doc[2]/str[@name='id']='5'"};

    assertQ(req("q", "*:*", "fq", "subject:\"parentDocument\" ",
        "fl", "*,[child]"), test1);

    // shows parentFilter specified (not necessary any more) and also child
    assertQ(req("q", "*:*", "fq", "subject:\"parentDocument\" ",
        "fl", "id, subject,[child childFilter=\"title:foo\"]"), test2);

    assertQ(req("q", "*:*", "fq", "subject:\"parentDocument\" ",
        "fl", "id, subject,[child childFilter=\"title:bar\" limit=2]"), test3);

    SolrException e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "fq", "subject:\"parentDocument\" ",
          "fl", "id, subject,[child parentFilter=\"subject:bleh\" childFilter=\"title:bar\" limit=2]"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(),
        containsString("Parent filter 'QueryBitSetProducer(subject:bleh)' doesn't match any parent documents"));

    e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "fq", "subject:\"parentDocument\" ",
          "fl", "id, subject,[child parentFilter=e childFilter=\"title:bar\" limit=2]"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(),
        containsString("Parent filter 'QueryBitSetProducer(text:e)' doesn't match any parent documents"));

    e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "fq", "subject:\"parentDocument\" ",
          "fl", "id, subject,[child parentFilter=\"\"]"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(), containsString("Invalid Parent filter '', resolves to null"));
  }

