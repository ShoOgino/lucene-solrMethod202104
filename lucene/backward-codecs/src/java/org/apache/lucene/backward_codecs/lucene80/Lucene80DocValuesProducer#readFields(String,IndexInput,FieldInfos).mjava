  private void readFields(String segmentName, IndexInput meta, FieldInfos infos)
      throws IOException {
    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {
      FieldInfo info = infos.fieldInfo(fieldNumber);
      if (info == null) {
        throw new CorruptIndexException("Invalid field number: " + fieldNumber, meta);
      }
      byte type = meta.readByte();
      if (type == Lucene80DocValuesFormat.NUMERIC) {
        numerics.put(info.name, readNumeric(meta));
      } else if (type == Lucene80DocValuesFormat.BINARY) {
        final boolean compressed;
        if (version >= Lucene80DocValuesFormat.VERSION_CONFIGURABLE_COMPRESSION) {
          String value = info.getAttribute(Lucene80DocValuesFormat.MODE_KEY);
          if (value == null) {
            throw new IllegalStateException(
                "missing value for "
                    + Lucene80DocValuesFormat.MODE_KEY
                    + " for field: "
                    + info.name
                    + " in segment: "
                    + segmentName);
          }
          Lucene80DocValuesFormat.Mode mode = Lucene80DocValuesFormat.Mode.valueOf(value);
          compressed = mode == Lucene80DocValuesFormat.Mode.BEST_COMPRESSION;
        } else {
          compressed = version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED;
        }
        binaries.put(info.name, readBinary(meta, compressed));
      } else if (type == Lucene80DocValuesFormat.SORTED) {
        sorted.put(info.name, readSorted(meta));
      } else if (type == Lucene80DocValuesFormat.SORTED_SET) {
        sortedSets.put(info.name, readSortedSet(meta));
      } else if (type == Lucene80DocValuesFormat.SORTED_NUMERIC) {
        sortedNumerics.put(info.name, readSortedNumeric(meta));
      } else {
        throw new CorruptIndexException("invalid type: " + type, meta);
      }
    }
  }

