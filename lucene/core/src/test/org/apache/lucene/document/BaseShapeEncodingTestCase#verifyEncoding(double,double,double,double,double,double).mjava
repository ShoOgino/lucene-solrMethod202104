  protected void verifyEncoding(double ay, double ax, double by, double bx, double cy, double cx) {
    // encode triangle
    int[] original =
        new int[] {encodeX(ax), encodeY(ay), encodeX(bx), encodeY(by), encodeX(cx), encodeY(cy)};
    byte[] b = new byte[7 * ShapeField.BYTES];
    ShapeField.encodeTriangle(
        b,
        original[1],
        original[0],
        true,
        original[3],
        original[2],
        true,
        original[5],
        original[4],
        true);
    ShapeField.DecodedTriangle encoded = new ShapeField.DecodedTriangle();
    ShapeField.decodeTriangle(b, encoded);
    // quantize decoded triangle
    double[] encodedQuantize =
        new double[] {
          decodeX(encoded.aX),
          decodeY(encoded.aY),
          decodeX(encoded.bX),
          decodeY(encoded.bY),
          decodeX(encoded.cX),
          decodeY(encoded.cY)
        };
    // quantize original and order it to reflect encoding
    double[] originalQuantize =
        orderTriangle(original[0], original[1], original[2], original[3], original[4], original[5]);
    // check spatial property
    for (int i = 0; i < 100; i++) {
      Component2D polygon2D = createPolygon2D(nextPolygon());
      boolean originalIntersects = false;
      boolean encodedIntersects = false;
      boolean originalContains = false;
      boolean encodedContains = false;
      switch (encoded.type) {
        case POINT:
          originalIntersects = polygon2D.contains(originalQuantize[0], originalQuantize[1]);
          encodedIntersects = polygon2D.contains(encodedQuantize[0], encodedQuantize[1]);
          originalContains = polygon2D.contains(originalQuantize[0], originalQuantize[1]);
          encodedContains = polygon2D.contains(encodedQuantize[0], encodedQuantize[1]);
          break;
        case LINE:
          originalIntersects =
              polygon2D.intersectsLine(
                  originalQuantize[0],
                  originalQuantize[1],
                  originalQuantize[2],
                  originalQuantize[3]);
          encodedIntersects =
              polygon2D.intersectsLine(
                  encodedQuantize[0], encodedQuantize[1], encodedQuantize[2], encodedQuantize[3]);
          originalContains =
              polygon2D.containsLine(
                  originalQuantize[0],
                  originalQuantize[1],
                  originalQuantize[2],
                  originalQuantize[3]);
          encodedContains =
              polygon2D.containsLine(
                  encodedQuantize[0], encodedQuantize[1], encodedQuantize[2], encodedQuantize[3]);
          break;
        case TRIANGLE:
          originalIntersects =
              polygon2D.intersectsTriangle(
                  originalQuantize[0],
                  originalQuantize[1],
                  originalQuantize[2],
                  originalQuantize[3],
                  originalQuantize[4],
                  originalQuantize[5]);
          encodedIntersects =
              polygon2D.intersectsTriangle(
                  originalQuantize[0],
                  originalQuantize[1],
                  originalQuantize[2],
                  originalQuantize[3],
                  originalQuantize[4],
                  originalQuantize[5]);
          originalContains =
              polygon2D.containsTriangle(
                  originalQuantize[0],
                  originalQuantize[1],
                  originalQuantize[2],
                  originalQuantize[3],
                  originalQuantize[4],
                  originalQuantize[5]);
          encodedContains =
              polygon2D.containsTriangle(
                  originalQuantize[0],
                  originalQuantize[1],
                  originalQuantize[2],
                  originalQuantize[3],
                  originalQuantize[4],
                  originalQuantize[5]);
          break;
      }
      assertTrue(originalIntersects == encodedIntersects);
      assertTrue(originalContains == encodedContains);
    }
  }

