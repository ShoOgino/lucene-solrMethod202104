  /**
   * Assert that the factor is important to get results that might be lower in term of weight but
   * would be pushed up after the blending transformation
   */
  public void testRequiresMore() throws IOException {

    BytesRef lake = new BytesRef("lake");
    BytesRef star = new BytesRef("star");
    BytesRef ret = new BytesRef("ret");

    Input keys[] =
        new Input[] {
          new Input("top of the lake", 18, lake),
          new Input("star wars: episode v - the empire strikes back", 12, star),
          new Input("the returned", 10, ret),
        };

    Path tempDir = createTempDir("BlendedInfixSuggesterTest");
    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);

    // if factor is small, we don't get the expected element
    BlendedInfixSuggester suggester =
        new BlendedInfixSuggester(
            newFSDirectory(tempDir),
            a,
            a,
            AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,
            BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,
            1,
            false);

    suggester.build(new InputArrayIterator(keys));

    // we don't find it for in the 2 first
    assertEquals(2, suggester.lookup("the", 2, true, false).size());
    long w0 = getInResults(suggester, "the", ret, 2);
    assertTrue(w0 < 0);

    // but it's there if we search for 3 elements
    assertEquals(3, suggester.lookup("the", 3, true, false).size());
    long w1 = getInResults(suggester, "the", ret, 3);
    assertTrue(w1 > 0);

    suggester.close();

    // if we increase the factor we have it
    suggester =
        new BlendedInfixSuggester(
            newFSDirectory(tempDir),
            a,
            a,
            AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,
            BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,
            2,
            false);
    suggester.build(new InputArrayIterator(keys));

    // we have it
    long w2 = getInResults(suggester, "the", ret, 2);
    assertTrue(w2 > 0);

    // but we don't have the other
    long w3 = getInResults(suggester, "the", star, 2);
    assertTrue(w3 < 0);

    suggester.close();
  }

