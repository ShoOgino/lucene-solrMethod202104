  /**
   * Creates a SortField for sorting by outside distance from a large polygon. This differs from the
   * related newOutsideLargePolygonSort in that it does little or no legality checking and is
   * optimized for very large numbers of polygon edges.
   *
   * <p>This sort orders documents by ascending outside distance from the polygon. Points within the
   * polygon have distance 0.0. The value returned in {@link FieldDoc} for the hits contains a
   * Double instance with the distance in meters.
   *
   * <p>If a document is missing the field, then by default it is treated as having {@link
   * Double#POSITIVE_INFINITY} distance (missing values sort last).
   *
   * <p>If a document contains multiple values for the field, the <i>closest</i> distance to the
   * polygon is used.
   *
   * @param field field name. must not be null.
   * @param polygons is the list of polygons to use to construct the query; must be at least one.
   * @return SortField ordering documents by distance
   * @throws IllegalArgumentException if {@code field} is null or polygon has invalid coordinates.
   */
  public static SortField newOutsideLargePolygonSort(
      final String field, final PlanetModel planetModel, final Polygon... polygons) {
    final GeoOutsideDistance shape = Geo3DUtil.fromLargePolygon(planetModel, polygons);
    return new Geo3DPointOutsideSortField(field, planetModel, shape);
  }

