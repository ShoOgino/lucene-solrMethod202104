  @Test
  public void interleavingModelsWithOriginalRankingSort_shouldInterleave() throws Exception {

    loadFeature("powpularityS", SolrFeature.class.getName(),
        "{\"q\":\"{!func}pow(popularity,2)\"}");

    loadModel("powpularityS-model", LinearModel.class.getName(),
        new String[] {"powpularityS"}, "{\"weights\":{\"powpularityS\":1.0}}");

    for (boolean originalRankingLast : new boolean[] { true, false }) {
      TeamDraftInterleaving.setRANDOM(new Random(10));//Random Boolean Choices Generation from Seed: [1,0]

      final SolrQuery query = new SolrQuery();
      query.setQuery("title:a1");
      query.add("rows", "10");
      if (originalRankingLast) {
        query.add("rq", "{!ltr reRankDocs=4 model=powpularityS-model model=_OriginalRanking_}");
      } else {
        query.add("rq", "{!ltr reRankDocs=4 model=_OriginalRanking_ model=powpularityS-model}");
      }
      query.add("fl", "*,score");
      query.add("sort", "description desc");

      /*
    Doc1 = "popularity=1", ScorePowpularityS(1)
    Doc5 = "popularity=5", ScorePowpularityS(25)
    Doc7 = "popularity=7", ScorePowpularityS(49)
    Doc8 = "popularity=8", ScorePowpularityS(64)

    PowpularitySRerankedList = [8,7,5,1]
    OriginalRanking = [1,5,8,7]

    Random Boolean Choices Generation from Seed: [1,0]
       */

      final int[] expectedInterleaved;
      if (originalRankingLast) {
        expectedInterleaved = new int[]{1, 8, 7, 5};
      } else {
        expectedInterleaved = new int[]{8, 1, 5, 7};
      }

      String[] tests = new String[5];
      tests[0] = "/response/numFound/==8";
      for (int i = 1; i <= 4; i++) {
        tests[i] = "/response/docs/[" + (i - 1) + "]/id==\"" + expectedInterleaved[(i - 1)] + "\"";
      }
      assertJQ("/query" + query.toQueryString(), tests);
    }

  }

