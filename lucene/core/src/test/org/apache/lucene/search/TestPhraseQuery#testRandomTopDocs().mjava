  public void testRandomTopDocs() throws IOException {
    Directory dir = newDirectory();
    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
    int numDocs =
        TEST_NIGHTLY
            ? atLeast(128 * 8 * 8 * 3)
            : atLeast(100); // at night, make sure some terms have skip data
    for (int i = 0; i < numDocs; ++i) {
      Document doc = new Document();
      int numTerms = random().nextInt(1 << random().nextInt(5));
      String text =
          IntStream.range(0, numTerms)
              .mapToObj(index -> random().nextBoolean() ? "a" : random().nextBoolean() ? "b" : "c")
              .collect(Collectors.joining(" "));
      doc.add(new TextField("foo", text, Store.NO));
      w.addDocument(doc);
    }
    IndexReader reader = DirectoryReader.open(w);
    w.close();
    IndexSearcher searcher = newSearcher(reader);

    for (String firstTerm : new String[] {"a", "b", "c"}) {
      for (String secondTerm : new String[] {"a", "b", "c"}) {
        Query query = new PhraseQuery("foo", new BytesRef(firstTerm), new BytesRef(secondTerm));

        TopScoreDocCollector collector1 =
            TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE
        TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES

        searcher.search(query, collector1);
        searcher.search(query, collector2);
        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);

        Query filteredQuery =
            new BooleanQuery.Builder()
                .add(query, Occur.MUST)
                .add(new TermQuery(new Term("foo", "b")), Occur.FILTER)
                .build();

        collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE
        collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES
        searcher.search(filteredQuery, collector1);
        searcher.search(filteredQuery, collector2);
        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);
      }
    }
    reader.close();
    dir.close();
  }

