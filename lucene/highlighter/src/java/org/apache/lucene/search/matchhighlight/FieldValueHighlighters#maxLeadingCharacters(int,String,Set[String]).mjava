  /**
   * Displays up to {@code maxLeadingCharacters} of the field's value, regardless of whether it
   * contained highlights or not.
   */
  public static MatchHighlighter.FieldValueHighlighter maxLeadingCharacters(
      int maxLeadingCharacters, String ellipsis, Set<String> fields) {
    PassageSelector passageSelector = defaultPassageSelector();
    PassageFormatter passageFormatter = new PassageFormatter(ellipsis, "", "");
    return new AbstractFieldValueHighlighter((field, hasMatches) -> fields.contains(field)) {
      @Override
      public List<String> format(
          String field,
          String[] values,
          String contiguousValue,
          List<OffsetRange> valueRanges,
          List<MatchHighlighter.QueryOffsetRange> matchOffsets) {
        List<Passage> bestPassages =
            passageSelector.pickBest(
                contiguousValue, Collections.emptyList(), maxLeadingCharacters, 1, valueRanges);

        return passageFormatter.format(contiguousValue, bestPassages, valueRanges);
      }

      @Override
      public Collection<String> alwaysFetchedFields() {
        return fields;
      }
    };
  }

