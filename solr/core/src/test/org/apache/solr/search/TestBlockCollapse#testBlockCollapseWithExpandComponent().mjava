  /**
   * There is no reason why ExpandComponent should care if/when block collapse is used,
   * this test just serves as a "future proofing" against the possibility that someone adds new expectations
   * to ExpandComponent of some side effect state that CollapseQParser should produce.
   *
   * We don't bother testing _root_ field collapsing in this test, since it contains different field values 
   * then our other collapse fields.
   * (and the other tests should adequeately prove that the block hueristics for _root_ collapsing work)
   */
  public void testBlockCollapseWithExpandComponent() throws Exception {
    // NOTE: due to SOLR-15078 we don't bother trying to collapse/expand on int in this test

    { // convert our docs + some docs w/o collapse fields, along with some commits, to update commands
      // in a shuffled order and process all of them...
      final List<String> updates = Stream.concat(Stream.of(commit(), commit()),
                                                 Stream.concat(makeBlockDocs().stream(),
                                                               sdocs(dupFields(sdoc("id","z1", "num_i", 1)),
                                                                     dupFields(sdoc("id","z2", "num_i", 2)),
                                                                     dupFields(sdoc("id","z3", "num_i", 3))).stream()
                                                               ).map(doc -> adoc(doc))).collect(Collectors.toList());
      Collections.shuffle(updates, random());
      for (String u : updates) {
        assertU(u);
      }
      assertU(commit());
    }

    final String EX = "/response/lst[@name='expanded']/result";
    // we don't bother testing _root_ field collapsing, since it contains different field values then block_s1
    for (String opt : Arrays.asList(// no block collapse logic used (sanity checks)
                                    "field=block_s1",            
                                    // "field=block_i", // TODO: SOLR-15078

                                    // block collapse used explicitly (int)
                                    // "field=block_i  hint=block", // TODO: SOLR-15078
                                    
                                    // block collapse used explicitly (ord)
                                    "field=block_s1 hint=block"
                                    )) {

      // these permutations should all give the same results, since the queries don't match any docs in 'null' groups
      for (String nullPolicy : Arrays.asList("", // ignore is default
                                             " nullPolicy=ignore",
                                             " nullPolicy=expand")) {
        
        // score based collapse with boost to change p1 group head
        assertQ(req("q", "txt_t:XX", // only child docs with XX match
                    "expand", "true",
                    "qt", "/elevate",
                    "elevateIds", "p1s1",
                    "fl", "id",
                    "fq", "{!collapse " + opt + nullPolicy + "}",
                    "sort", "score desc, num_i asc")
                , "*[count(/response/result/doc)=3]"
                , "/response/result/doc[1]/str[@name='id'][.='p1s1']"
                , "/response/result/doc[2]/str[@name='id'][.='p2s4']"
                , "/response/result/doc[3]/str[@name='id'][.='p3s1']"
                //
                ,"*[count("+EX+")=count(/response/result/doc)]" // group per doc
                //
                ,"*[count("+EX+"[@name='-1']/doc)=3]"
                ,EX+"[@name='-1']/doc[1]/str[@name='id'][.='p1s3']"
                ,EX+"[@name='-1']/doc[2]/str[@name='id'][.='p1s4']"
                ,EX+"[@name='-1']/doc[3]/str[@name='id'][.='p1s2']"
                //
                ,"*[count("+EX+"[@name='0']/doc)=2]"
                ,EX+"[@name='0']/doc[1]/str[@name='id'][.='p2s3']"
                ,EX+"[@name='0']/doc[2]/str[@name='id'][.='p2s1']"
                //
                ,"*[count("+EX+"[@name='1']/doc)=2]"
                ,EX+"[@name='1']/doc[1]/str[@name='id'][.='p3s4']"
                ,EX+"[@name='1']/doc[2]/str[@name='id'][.='p3s3']"
                );
      }

      // nullPolicy=expand w/ func query to assert expected scores
      for (String suffix : SELECTOR_FIELD_SUFFIXES) {
        for (String selector : Arrays.asList(" sort='asc" + suffix + " desc'",
                                             " sort='sum(asc" + suffix + ",42) desc'",
                                             " min=desc" + suffix,
                                             " max=asc" + suffix,
                                             " min='sum(desc" + suffix + ", 42)'",
                                             " max='sum(asc" + suffix + ", 42)'")) {
          assertQ(req("q", "{!func}sum(42, num_i)",
                      "expand", "true",
                      "fq", "{!collapse " + opt + " nullPolicy=expand}",
                      "fq", "num_i:[2 TO 13]",                                   // NOTE: FQ!!!!
                      "fl","score,id",
                      "sort", "score desc, num_i asc")
                  , "*[count(/response/result/doc)=5]"
                  , "/response/result/doc[1][str[@name='id'][.='p2s4'] and float[@name='score'][.=55.0]]"
                  , "/response/result/doc[2][str[@name='id'][.='p1s2'] and float[@name='score'][.=52.0]]"
                  , "/response/result/doc[3][str[@name='id'][.='p3s4'] and float[@name='score'][.=46.0]]"
                  , "/response/result/doc[4][str[@name='id'][.='z3']   and float[@name='score'][.=45.0]]"
                  , "/response/result/doc[5][str[@name='id'][.='z2']   and float[@name='score'][.=44.0]]"
                  //
                  ,"*[count("+EX+")=2]" // groups w/o any other docs don't expand
                  //
                  ,"*[count("+EX+"[@name='-1']/doc)=1]"
                  ,EX+"[@name='-1']/doc[1][str[@name='id'][.='p1s4'] and float[@name='score'][.=48.0]]"
                  //
                  ,"*[count("+EX+"[@name='0']/doc)=1]"
                  ,EX+"[@name='0']/doc[1][str[@name='id'][.='p2s2'] and float[@name='score'][.=52.0]]"
                  //
                  // no "expand" docs for group '1' because no other docs match query
                  // no "expand" docs for nulls unless/until SOLR-14330 is implemented
                  );
        }
      }
    }
  }

