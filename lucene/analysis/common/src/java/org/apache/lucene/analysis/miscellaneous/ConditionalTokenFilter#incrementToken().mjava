  @Override
  public final boolean incrementToken() throws IOException {
    lastTokenFiltered = false;
    while (true) {
      if (state == TokenState.READING) {
        if (bufferedState != null) {
          restoreState(bufferedState);
          bufferedState = null;
          lastTokenFiltered = false;
          return true;
        }
        if (exhausted == true) {
          return false;
        }
        if (input.incrementToken() == false) {
          exhausted = true;
          return false;
        }
        if (shouldFilter()) {
          lastTokenFiltered = true;
          state = TokenState.PREBUFFERING;
          // we determine that the delegate has emitted all the tokens it can at the current
          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To
          // signal this back to the delegate, we return false, so we now need to reset it
          // to ensure that it can continue to emit more tokens
          delegate.reset();
          boolean more = delegate.incrementToken();
          if (more) {
            state = TokenState.DELEGATING;
            if (adjustPosition) {
              int posInc = posIncAtt.getPositionIncrement();
              posIncAtt.setPositionIncrement(posInc - 1);
            }
            adjustPosition = false;
          } else {
            state = TokenState.READING;
            return endDelegating();
          }
          return true;
        }
        return true;
      }
      if (state == TokenState.DELEGATING) {
        lastTokenFiltered = true;
        if (delegate.incrementToken()) {
          return true;
        }
        // no more cached tokens
        state = TokenState.READING;
        return endDelegating();
      }
    }
  }

