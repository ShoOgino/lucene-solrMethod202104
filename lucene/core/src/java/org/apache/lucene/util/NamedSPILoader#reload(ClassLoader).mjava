  /**
   * Reloads the internal SPI list from the given {@link ClassLoader}. Changes to the service list
   * are visible after the method ends, all iterators ({@link #iterator()},...) stay consistent.
   *
   * <p><b>NOTE:</b> Only new service providers are added, existing ones are never removed or
   * replaced.
   *
   * <p><em>This method is expensive and should only be called for discovery of new service
   * providers on the given classpath/classloader!</em>
   */
  public void reload(ClassLoader classloader) {
    Objects.requireNonNull(classloader, "classloader");
    final LinkedHashMap<String, S> services = new LinkedHashMap<>(this.services);
    for (final S service : ServiceLoader.load(clazz, classloader)) {
      final String name = service.getName();
      // only add the first one for each name, later services will be ignored
      // this allows to place services before others in classpath to make
      // them used instead of others
      if (!services.containsKey(name)) {
        checkServiceName(name);
        services.put(name, service);
      }
    }
    this.services = Collections.unmodifiableMap(services);
  }

