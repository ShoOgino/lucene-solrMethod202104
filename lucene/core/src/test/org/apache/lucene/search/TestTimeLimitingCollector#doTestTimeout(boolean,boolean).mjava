  private void doTestTimeout(boolean multiThreaded, boolean greedy) {
    // setup
    MyHitCollector myHc = new MyHitCollector();
    myHc.setSlowDown(SLOW_DOWN);
    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);

    // search: must get exception
    TimeExceededException timeoutException =
        expectThrows(
            TimeExceededException.class,
            () -> {
              search(tlCollector);
            });

    // greediness affect last doc collected
    int exceptionDoc = timeoutException.getLastDocCollected();
    int lastCollected = myHc.getLastDocCollected();

    // exceptionDoc == -1 means we hit the timeout in getLeafCollector:
    if (exceptionDoc != -1) {
      assertTrue(
          "doc collected at timeout must be > 0! or == -1 but was: " + exceptionDoc,
          exceptionDoc > 0);
      if (greedy) {
        assertTrue(
            "greedy="
                + greedy
                + " exceptionDoc="
                + exceptionDoc
                + " != lastCollected="
                + lastCollected,
            exceptionDoc == lastCollected);
        assertTrue("greedy, but no hits found!", myHc.hitCount() > 0);
      } else {
        assertTrue(
            "greedy="
                + greedy
                + " exceptionDoc="
                + exceptionDoc
                + " not > lastCollected="
                + lastCollected,
            exceptionDoc > lastCollected);
      }
    }

    // verify that elapsed time at exception is within valid limits
    assertEquals(timeoutException.getTimeAllowed(), TIME_ALLOWED);
    // a) Not too early
    assertTrue(
        "elapsed="
            + timeoutException.getTimeElapsed()
            + " <= (allowed-resolution)="
            + (TIME_ALLOWED - counterThread.getResolution()),
        timeoutException.getTimeElapsed() > TIME_ALLOWED - counterThread.getResolution());
    // b) Not too late.
    //    This part is problematic in a busy test system, so we just print a warning.
    //    We already verified that a timeout occurred, we just can't be picky about how long it
    // took.
    if (timeoutException.getTimeElapsed() > maxTime(multiThreaded)) {
      System.out.println(
          "Informative: timeout exceeded (no action required: most probably just "
              + " because the test machine is slower than usual):  "
              + "lastDoc="
              + exceptionDoc
              + " ,&& allowed="
              + timeoutException.getTimeAllowed()
              + " ,&& elapsed="
              + timeoutException.getTimeElapsed()
              + " >= "
              + maxTimeStr(multiThreaded));
    }
  }

