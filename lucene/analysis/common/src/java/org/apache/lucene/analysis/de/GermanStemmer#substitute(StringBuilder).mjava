  /**
   * Do some substitutions for the term to reduce overstemming:
   *
   * <p>- Substitute Umlauts with their corresponding vowel:{@code äöü -> aou}, "ß" is substituted
   * by "ss" - Substitute a second char of a pair of equal characters with an asterisk: {@code ?? ->
   * ?*} - Substitute some common character combinations with a token: {@code sch/ch/ei/ie/ig/st ->
   * $/§/%/&/#/!}
   */
  private void substitute(StringBuilder buffer) {
    substCount = 0;
    for (int c = 0; c < buffer.length(); c++) {
      // Replace the second char of a pair of the equal characters with an asterisk
      if (c > 0 && buffer.charAt(c) == buffer.charAt(c - 1)) {
        buffer.setCharAt(c, '*');
      }
      // Substitute Umlauts.
      else if (buffer.charAt(c) == 'ä') {
        buffer.setCharAt(c, 'a');
      } else if (buffer.charAt(c) == 'ö') {
        buffer.setCharAt(c, 'o');
      } else if (buffer.charAt(c) == 'ü') {
        buffer.setCharAt(c, 'u');
      }
      // Fix bug so that 'ß' at the end of a word is replaced.
      else if (buffer.charAt(c) == 'ß') {
        buffer.setCharAt(c, 's');
        buffer.insert(c + 1, 's');
        substCount++;
      }
      // Take care that at least one character is left left side from the current one
      if (c < buffer.length() - 1) {
        // Masking several common character combinations with an token
        if ((c < buffer.length() - 2)
            && buffer.charAt(c) == 's'
            && buffer.charAt(c + 1) == 'c'
            && buffer.charAt(c + 2) == 'h') {
          buffer.setCharAt(c, '$');
          buffer.delete(c + 1, c + 3);
          substCount += 2;
        } else if (buffer.charAt(c) == 'c' && buffer.charAt(c + 1) == 'h') {
          buffer.setCharAt(c, '§');
          buffer.deleteCharAt(c + 1);
          substCount++;
        } else if (buffer.charAt(c) == 'e' && buffer.charAt(c + 1) == 'i') {
          buffer.setCharAt(c, '%');
          buffer.deleteCharAt(c + 1);
          substCount++;
        } else if (buffer.charAt(c) == 'i' && buffer.charAt(c + 1) == 'e') {
          buffer.setCharAt(c, '&');
          buffer.deleteCharAt(c + 1);
          substCount++;
        } else if (buffer.charAt(c) == 'i' && buffer.charAt(c + 1) == 'g') {
          buffer.setCharAt(c, '#');
          buffer.deleteCharAt(c + 1);
          substCount++;
        } else if (buffer.charAt(c) == 's' && buffer.charAt(c + 1) == 't') {
          buffer.setCharAt(c, '!');
          buffer.deleteCharAt(c + 1);
          substCount++;
        }
      }
    }
  }

