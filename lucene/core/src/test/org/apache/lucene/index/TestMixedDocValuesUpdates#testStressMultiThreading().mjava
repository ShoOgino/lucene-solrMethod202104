  public void testStressMultiThreading() throws Exception {
    final Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
    final IndexWriter writer = new IndexWriter(dir, conf);

    // create index
    final int numFields = TestUtil.nextInt(random(), 2, 4);
    final int numThreads = TestUtil.nextInt(random(), 3, 6);
    final int numDocs = atLeast(2000);
    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      doc.add(new StringField("id", "doc" + i, Store.NO));
      double group = random().nextDouble();
      String g;
      if (group < 0.1) g = "g0";
      else if (group < 0.5) g = "g1";
      else if (group < 0.8) g = "g2";
      else g = "g3";
      doc.add(new StringField("updKey", g, Store.NO));
      for (int j = 0; j < numFields; j++) {
        long value = random().nextInt();
        doc.add(new BinaryDocValuesField("f" + j, TestBinaryDocValuesUpdates.toBytes(value)));
        doc.add(new NumericDocValuesField("cf" + j, value * 2)); // control, always updated to f * 2
      }
      writer.addDocument(doc);
    }

    final CountDownLatch done = new CountDownLatch(numThreads);
    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));

    // same thread updates a field as well as reopens
    Thread[] threads = new Thread[numThreads];
    for (int i = 0; i < threads.length; i++) {
      threads[i] =
          new Thread("UpdateThread-" + i) {
            @Override
            public void run() {
              DirectoryReader reader = null;
              boolean success = false;
              try {
                Random random = random();
                while (numUpdates.getAndDecrement() > 0) {
                  double group = random.nextDouble();
                  Term t;
                  if (group < 0.1) t = new Term("updKey", "g0");
                  else if (group < 0.5) t = new Term("updKey", "g1");
                  else if (group < 0.8) t = new Term("updKey", "g2");
                  else t = new Term("updKey", "g3");
                  //              System.out.println("[" + Thread.currentThread().getName() + "]
                  // numUpdates=" + numUpdates + " updateTerm=" + t);
                  int field = random().nextInt(numFields);
                  final String f = "f" + field;
                  final String cf = "cf" + field;
                  long updValue = random.nextInt();
                  //              System.err.println("[" + Thread.currentThread().getName() + "] t="
                  // + t + ", f=" + f + ", updValue=" + updValue);
                  writer.updateDocValues(
                      t,
                      new BinaryDocValuesField(f, TestBinaryDocValuesUpdates.toBytes(updValue)),
                      new NumericDocValuesField(cf, updValue * 2));

                  if (random.nextDouble() < 0.2) {
                    // delete a random document
                    int doc = random.nextInt(numDocs);
                    //                System.out.println("[" + Thread.currentThread().getName() + "]
                    // deleteDoc=doc" + doc);
                    writer.deleteDocuments(new Term("id", "doc" + doc));
                  }

                  if (random.nextDouble() < 0.05) { // commit every 20 updates on average
                    //                  System.out.println("[" + Thread.currentThread().getName() +
                    // "] commit");
                    writer.commit();
                  }

                  if (random.nextDouble()
                      < 0.1) { // reopen NRT reader (apply updates), on average once every 10
                    // updates
                    if (reader == null) {
                      //                  System.out.println("[" + Thread.currentThread().getName()
                      // + "] open NRT");
                      reader = DirectoryReader.open(writer);
                    } else {
                      //                  System.out.println("[" + Thread.currentThread().getName()
                      // + "] reopen NRT");
                      DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);
                      if (r2 != null) {
                        reader.close();
                        reader = r2;
                      }
                    }
                  }
                }
                //            System.out.println("[" + Thread.currentThread().getName() + "] DONE");
                success = true;
              } catch (IOException e) {
                throw new RuntimeException(e);
              } finally {
                if (reader != null) {
                  try {
                    reader.close();
                  } catch (IOException e) {
                    if (success) { // suppress this exception only if there was another exception
                      throw new RuntimeException(e);
                    }
                  }
                }
                done.countDown();
              }
            }
          };
    }

    for (Thread t : threads) t.start();
    done.await();
    writer.close();

    DirectoryReader reader = DirectoryReader.open(dir);
    for (LeafReaderContext context : reader.leaves()) {
      LeafReader r = context.reader();
      for (int i = 0; i < numFields; i++) {
        BinaryDocValues bdv = r.getBinaryDocValues("f" + i);
        NumericDocValues control = r.getNumericDocValues("cf" + i);
        Bits liveDocs = r.getLiveDocs();
        for (int j = 0; j < r.maxDoc(); j++) {
          if (liveDocs == null || liveDocs.get(j)) {
            assertEquals(j, control.advance(j));
            long ctrlValue = control.longValue();
            assertEquals(j, bdv.advance(j));
            long bdvValue = TestBinaryDocValuesUpdates.getValue(bdv) * 2;
            //              if (ctrlValue != bdvValue) {
            //                System.out.println("seg=" + r + ", f=f" + i + ", doc=" + j + ",
            // group=" + r.document(j).get("updKey") + ", ctrlValue=" + ctrlValue + ", bdvBytes=" +
            // scratch);
            //              }
            assertEquals(ctrlValue, bdvValue);
          }
        }
      }
    }
    reader.close();

    dir.close();
  }

