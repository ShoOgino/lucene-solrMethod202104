  /**
   * rescores the documents:
   *
   * @param searcher
   *          current IndexSearcher
   * @param firstPassTopDocs
   *          documents to rerank;
   * @param topN
   *          documents to return;
   */
  @Override
  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs,
      int topN) throws IOException {
    if ((topN == 0) || (firstPassTopDocs.scoreDocs.length == 0)) {
      return firstPassTopDocs;
    }

    ScoreDoc[] firstPassResults = null;
    if(originalRankingIndex != null) {
      firstPassResults = new ScoreDoc[firstPassTopDocs.scoreDocs.length];
      System.arraycopy(firstPassTopDocs.scoreDocs, 0, firstPassResults, 0, firstPassTopDocs.scoreDocs.length);
    }
    topN = Math.toIntExact(Math.min(topN, firstPassTopDocs.totalHits.value));

    ScoreDoc[][] reRankedPerModel = rerank(searcher,topN,getFirstPassDocsRanked(firstPassTopDocs));
    if (originalRankingIndex != null) {
      reRankedPerModel[originalRankingIndex] = firstPassResults;
    }
    InterleavingResult interleaved = interleavingAlgorithm.interleave(reRankedPerModel[0], reRankedPerModel[1]);
    ScoreDoc[] interleavedResults = interleaved.getInterleavedResults();
    
    ArrayList<Set<Integer>> interleavingPicks = interleaved.getInterleavingPicks();
    rerankingQueries[0].setPickedInterleavingDocIds(interleavingPicks.get(0));
    rerankingQueries[1].setPickedInterleavingDocIds(interleavingPicks.get(1));

    return new TopDocs(firstPassTopDocs.totalHits, interleavedResults);
  }

