  public void testVariouslyCompressibleBinaryValues() throws IOException {
    Directory directory = newDirectory();
    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);
    int numDocs = 1 + random().nextInt(100);

    HashMap<Integer, BytesRef> writtenValues = new HashMap<>(numDocs);

    // Small vocabulary ranges will be highly compressible
    int vocabRange = 1 + random().nextInt(Byte.MAX_VALUE - 1);

    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();

      // Generate random-sized byte array with random choice of bytes in vocab range
      byte[] value = new byte[500 + random().nextInt(1024)];
      for (int j = 0; j < value.length; j++) {
        value[j] = (byte) random().nextInt(vocabRange);
      }
      BytesRef bytesRef = new BytesRef(value);
      writtenValues.put(i, bytesRef);
      doc.add(newTextField("id", Integer.toString(i), Field.Store.YES));
      doc.add(new BinaryDocValuesField("dv1", bytesRef));
      iwriter.addDocument(doc);
    }
    iwriter.forceMerge(1);
    iwriter.close();

    // Now search the index:
    IndexReader ireader = DirectoryReader.open(directory); // read-only=true
    IndexSearcher isearcher = new IndexSearcher(ireader);

    for (int i = 0; i < numDocs; i++) {
      String id = Integer.toString(i);
      Query query = new TermQuery(new Term("id", id));
      TopDocs hits = isearcher.search(query, 1);
      assertEquals(1, hits.totalHits.value);
      // Iterate through the results:
      int hitDocID = hits.scoreDocs[0].doc;
      Document hitDoc = isearcher.doc(hitDocID);
      assertEquals(id, hitDoc.get("id"));
      assert ireader.leaves().size() == 1;
      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues("dv1");
      assertEquals(hitDocID, dv.advance(hitDocID));
      BytesRef scratch = dv.binaryValue();
      assertEquals(writtenValues.get(i), scratch);
    }

    ireader.close();
    directory.close();
  }

