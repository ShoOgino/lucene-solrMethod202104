  /**
   * Creates an FSTCompletion with the specified options.
   *
   * @param buckets The number of buckets for weight discretization. Buckets are used in {@link
   *     #add(BytesRef, int)} and must be smaller than the number given here.
   * @param sorter {@link BytesRefSorter} used for re-sorting input for the automaton. For large
   *     inputs, use on-disk sorting implementations. The sorter is closed automatically in {@link
   *     #build()} if it implements {@link Closeable}.
   * @param shareMaxTailLength Max shared suffix sharing length.
   *     <p>See the description of this parameter in {@link
   *     org.apache.lucene.util.fst.FSTCompiler.Builder}. In general, for very large inputs you'll
   *     want to construct a non-minimal automaton which will be larger, but the construction will
   *     take far less ram. For minimal automata, set it to {@link Integer#MAX_VALUE}.
   */
  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {
    if (buckets < 1 || buckets > 255) {
      throw new IllegalArgumentException("Buckets must be >= 1 and <= 255: " + buckets);
    }

    if (sorter == null) {
      throw new IllegalArgumentException("BytesRefSorter must not be null.");
    }

    this.sorter = sorter;
    this.buckets = buckets;
    this.shareMaxTailLength = shareMaxTailLength;
  }

