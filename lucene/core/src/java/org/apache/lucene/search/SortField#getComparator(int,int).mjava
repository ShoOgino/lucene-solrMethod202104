  /**
   * Returns the {@link FieldComparator} to use for sorting.
   *
   * @lucene.experimental
   * @param numHits number of top hits the queue will store
   * @param sortPos position of this SortField within {@link Sort}. The comparator is primary if
   *     sortPos==0, secondary if sortPos==1, etc. Some comparators can optimize themselves when
   *     they are the primary sort.
   * @return {@link FieldComparator} to use when sorting
   */
  public FieldComparator<?> getComparator(final int numHits, final int sortPos) {

    switch (type) {
      case SCORE:
        return new FieldComparator.RelevanceComparator(numHits);

      case DOC:
        return new DocComparator(numHits, reverse, sortPos);

      case INT:
        return new IntComparator(numHits, field, (Integer) missingValue, reverse, sortPos);

      case FLOAT:
        return new FloatComparator(numHits, field, (Float) missingValue, reverse, sortPos);

      case LONG:
        return new LongComparator(numHits, field, (Long) missingValue, reverse, sortPos);

      case DOUBLE:
        return new DoubleComparator(numHits, field, (Double) missingValue, reverse, sortPos);

      case CUSTOM:
        assert comparatorSource != null;
        return comparatorSource.newComparator(field, numHits, sortPos, reverse);

      case STRING:
        return new FieldComparator.TermOrdValComparator(
            numHits, field, missingValue == STRING_LAST);

      case STRING_VAL:
        return new FieldComparator.TermValComparator(numHits, field, missingValue == STRING_LAST);

      case REWRITEABLE:
        throw new IllegalStateException(
            "SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)");

      default:
        throw new IllegalStateException("Illegal sort type: " + type);
    }
  }

