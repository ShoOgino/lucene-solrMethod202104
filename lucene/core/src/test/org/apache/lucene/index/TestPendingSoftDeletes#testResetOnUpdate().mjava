  public void testResetOnUpdate() throws IOException {
    Directory dir = newDirectory();
    IndexWriter writer =
        new IndexWriter(
            dir,
            newIndexWriterConfig()
                .setSoftDeletesField("_soft_deletes")
                .setMaxBufferedDocs(3) // make sure we write one segment
                .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));
    Document doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("_soft_deletes", 1));
    doc = new Document();
    doc.add(new StringField("id", "2", Field.Store.YES));
    writer.softUpdateDocument(
        new Term("id", "2"), doc, new NumericDocValuesField("_soft_deletes", 1));
    doc = new Document();
    doc.add(new StringField("id", "2", Field.Store.YES));
    writer.softUpdateDocument(
        new Term("id", "2"), doc, new NumericDocValuesField("_soft_deletes", 1));
    writer.commit();
    DirectoryReader reader = DirectoryReader.open(dir);
    assertEquals(1, reader.leaves().size());
    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();
    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();
    PendingDeletes deletes = newPendingDeletes(segmentInfo);
    deletes.onNewReader(segmentReader, segmentInfo);
    FieldInfo fieldInfo =
        new FieldInfo(
            "_soft_deletes",
            1,
            false,
            false,
            false,
            IndexOptions.NONE,
            DocValuesType.NUMERIC,
            segmentInfo.getNextDocValuesGen(),
            Collections.emptyMap(),
            0,
            0,
            0,
            0,
            NONE,
            true);
    List<DocValuesFieldUpdates> updates =
        Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));
    for (DocValuesFieldUpdates update : updates) {
      deletes.onDocValuesUpdate(fieldInfo, update.iterator());
    }
    assertEquals(0, deletes.numPendingDeletes());
    assertTrue(deletes.getLiveDocs().get(0));
    assertTrue(deletes.getLiveDocs().get(1));
    assertTrue(deletes.getLiveDocs().get(2));
    Bits liveDocs = deletes.getLiveDocs();
    deletes.onNewReader(segmentReader, segmentInfo);
    // no changes we keep this update
    assertSame(liveDocs, deletes.getLiveDocs());
    assertTrue(deletes.getLiveDocs().get(0));
    assertTrue(deletes.getLiveDocs().get(1));
    assertTrue(deletes.getLiveDocs().get(2));
    assertEquals(0, deletes.numPendingDeletes());

    segmentInfo.advanceDocValuesGen();
    fieldInfo =
        new FieldInfo(
            "_soft_deletes",
            1,
            false,
            false,
            false,
            IndexOptions.NONE,
            DocValuesType.NUMERIC,
            segmentInfo.getNextDocValuesGen(),
            Collections.emptyMap(),
            0,
            0,
            0,
            0,
            NONE,
            true);
    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));
    for (DocValuesFieldUpdates update : updates) {
      deletes.onDocValuesUpdate(fieldInfo, update.iterator());
    }
    // no changes we keep this update
    assertNotSame(liveDocs, deletes.getLiveDocs());
    assertTrue(deletes.getLiveDocs().get(0));
    assertFalse(deletes.getLiveDocs().get(1));
    assertTrue(deletes.getLiveDocs().get(2));
    assertEquals(0, deletes.numPendingDeletes());
    assertEquals(1, deletes.getDelCount());
    IOUtils.close(reader, writer, dir);
  }

