  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {
    BooleanQuery.Builder bq = new BooleanQuery.Builder();
    for (String value : values) {
      bq.add(new TermQuery(new Term("field", value)), BooleanClause.Occur.SHOULD);
    }
    bq.setMinimumNumberShouldMatch(minShouldMatch);

    BooleanWeight weight =
        (BooleanWeight) searcher.createWeight(searcher.rewrite(bq.build()), ScoreMode.COMPLETE, 1);

    switch (mode) {
      case DOC_VALUES:
        return new SlowMinShouldMatchScorer(weight, reader, searcher);
      case SCORER:
        return weight.scorer(reader.getContext());
      case BULK_SCORER:
        final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());
        if (bulkScorer == null) {
          if (weight.scorer(reader.getContext()) != null) {
            throw new AssertionError("BooleanScorer should be applicable for this query");
          }
          return null;
        }
        return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));
      default:
        throw new AssertionError();
    }
  }

