  public void testCheckIntegrity() throws IOException {
    Directory dir = newDirectory();
    String subFile = "_123.xyz";
    SegmentInfo si = newSegmentInfo(dir, "_123");
    try (IndexOutput os = dir.createOutput(subFile, newIOContext(random()))) {
      CodecUtil.writeIndexHeader(os, "Foo", 0, si.getId(), "suffix");
      for (int i = 0; i < 1024; i++) {
        os.writeByte((byte) i);
      }
      os.writeInt(CodecUtil.FOOTER_MAGIC);
      os.writeInt(0);
      long checksum = os.getChecksum();
      os.writeLong(checksum);
    }

    si.setFiles(Collections.singletonList(subFile));

    FileTrackingDirectoryWrapper writeTrackingDir = new FileTrackingDirectoryWrapper(dir);
    si.getCodec().compoundFormat().write(writeTrackingDir, si, IOContext.DEFAULT);
    final Set<String> createdFiles = writeTrackingDir.getFiles();

    ReadBytesDirectoryWrapper readTrackingDir = new ReadBytesDirectoryWrapper(dir);
    CompoundDirectory compoundDir =
        si.getCodec().compoundFormat().getCompoundReader(readTrackingDir, si, IOContext.READ);
    compoundDir.checkIntegrity();
    Map<String, FixedBitSet> readBytes = readTrackingDir.getReadBytes();
    assertEquals(createdFiles, readBytes.keySet());
    for (Map.Entry<String, FixedBitSet> entry : readBytes.entrySet()) {
      final String file = entry.getKey();
      final FixedBitSet set = entry.getValue().clone();
      set.flip(0, set.length());
      final int next = set.nextSetBit(0);
      assertEquals(
          "Byte at offset " + next + " of " + file + " was not read",
          DocIdSetIterator.NO_MORE_DOCS,
          next);
    }
    compoundDir.close();
    dir.close();
  }

