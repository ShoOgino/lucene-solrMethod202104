  public void testUpdatesAndDeletes() throws Exception {
    // create an index with a segment with only deletes, a segment with both
    // deletes and updates and a segment with only updates
    Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
    conf.setMaxBufferedDocs(10); // control segment flushing
    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test
    IndexWriter writer = new IndexWriter(dir, conf);

    for (int i = 0; i < 6; i++) {
      writer.addDocument(doc(i));
      if (i % 2 == 1) {
        writer.commit(); // create 2-docs segments
      }
    }

    // delete doc-1 and doc-2
    writer.deleteDocuments(
        new Term("id", "doc-1"), new Term("id", "doc-2")); // 1st and 2nd segments

    // update docs 3 and 5
    writer.updateBinaryDocValue(new Term("id", "doc-3"), "val", toBytes(17L));
    writer.updateBinaryDocValue(new Term("id", "doc-5"), "val", toBytes(17L));

    final DirectoryReader reader;
    if (random().nextBoolean()) { // not NRT
      writer.close();
      reader = DirectoryReader.open(dir);
    } else { // NRT
      reader = DirectoryReader.open(writer);
      writer.close();
    }

    Bits liveDocs = MultiBits.getLiveDocs(reader);
    boolean[] expectedLiveDocs = new boolean[] {true, false, false, true, true, true};
    for (int i = 0; i < expectedLiveDocs.length; i++) {
      assertEquals(expectedLiveDocs[i], liveDocs.get(i));
    }

    long[] expectedValues = new long[] {1, 2, 3, 17, 5, 17};
    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, "val");
    for (int i = 0; i < expectedValues.length; i++) {
      assertEquals(i, bdv.nextDoc());
      assertEquals(expectedValues[i], getValue(bdv));
    }

    reader.close();
    dir.close();
  }

