  /** Test the accuracy of the ramBytesUsed estimations. */
  @Nightly
  public void testRamBytesUsed() throws IOException {
    if (Codec.getDefault() instanceof RandomCodec) {
      // this test relies on the fact that two segments will be written with
      // the same codec so we need to disable MockRandomPF
      final Set<String> avoidCodecs = new HashSet<>(((RandomCodec) Codec.getDefault()).avoidCodecs);
      avoidCodecs.add(new MockRandomPostingsFormat().getName());
      Codec.setDefault(new RandomCodec(random(), avoidCodecs));
    }
    Directory dir = applyCreatedVersionMajor(newDirectory());
    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));
    IndexWriter w = new IndexWriter(dir, cfg);
    // we need to index enough documents so that constant overhead doesn't dominate
    final int numDocs = atLeast(10000);
    LeafReader reader1 = null;
    for (int i = 0; i < numDocs; ++i) {
      Document d = new Document();
      addRandomFields(d);
      w.addDocument(d);
      if (i == 100) {
        w.forceMerge(1);
        w.commit();
        reader1 = getOnlyLeafReader(DirectoryReader.open(dir));
      }
    }
    w.forceMerge(1);
    w.commit();
    w.close();

    LeafReader reader2 = getOnlyLeafReader(DirectoryReader.open(dir));

    for (LeafReader reader : Arrays.asList(reader1, reader2)) {
      new SimpleMergedSegmentWarmer(InfoStream.NO_OUTPUT).warm(reader);
    }

    long act1 = RamUsageTester.sizeOf(reader2, new Accumulator(reader2));
    long act2 = RamUsageTester.sizeOf(reader1, new Accumulator(reader1));
    final long measuredBytes = act1 - act2;

    long reported1 = ((SegmentReader) reader2).ramBytesUsed();
    long reported2 = ((SegmentReader) reader1).ramBytesUsed();
    final long reportedBytes = reported1 - reported2;

    final long absoluteError = Math.abs(measuredBytes - reportedBytes);
    final double relativeError = (double) absoluteError / measuredBytes;
    final String message =
        String.format(
            Locale.ROOT,
            "RamUsageTester reports %d bytes but ramBytesUsed() returned %d (%.1f error). "
                + " [Measured: %d, %d. Reported: %d, %d]",
            measuredBytes,
            reportedBytes,
            (100 * relativeError),
            act1,
            act2,
            reported1,
            reported2);

    assertTrue(message, relativeError < 0.20d || absoluteError < 1000);

    reader1.close();
    reader2.close();
    dir.close();
  }

