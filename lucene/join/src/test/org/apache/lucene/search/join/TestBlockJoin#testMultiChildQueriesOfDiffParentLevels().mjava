  public void testMultiChildQueriesOfDiffParentLevels() throws Exception {

    final Directory dir = newDirectory();
    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);

    // randomly generate resume->jobs[]->qualifications[]
    final int numResumes = atLeast(100);
    for (int r = 0; r < numResumes; r++) {
      final List<Document> docs = new ArrayList<>();

      final int rv = TestUtil.nextInt(random(), 1, 10);
      final int numJobs = atLeast(10);
      for (int j = 0; j < numJobs; j++) {
        final int jv =
            TestUtil.nextInt(random(), -10, -1); // neg so no overlap with q (both used for "year")

        final int numQualifications = atLeast(10);
        for (int q = 0; q < numQualifications; q++) {
          docs.add(makeQualification("q" + q + "_rv" + rv + "_jv" + jv, q));
        }
        docs.add(makeJob("j" + j, jv));
      }
      docs.add(makeResume("r" + r, "rv" + rv));
      w.addDocuments(docs);
    }

    final IndexReader r = w.getReader();
    final IndexSearcher s = newSearcher(r, false);
    w.close();

    BitSetProducer resumeFilter =
        new QueryBitSetProducer(new TermQuery(new Term("docType", "resume")));
    // anything with a skill is a job
    BitSetProducer jobFilter = new QueryBitSetProducer(new PrefixQuery(new Term("skill", "")));

    final int numQueryIters = atLeast(1);
    for (int i = 0; i < numQueryIters; i++) {
      final int qjv = TestUtil.nextInt(random(), -10, -1);
      final int qrv = TestUtil.nextInt(random(), 1, 10);

      Query resumeQuery =
          new ToChildBlockJoinQuery(new TermQuery(new Term("country", "rv" + qrv)), resumeFilter);

      Query jobQuery =
          new ToChildBlockJoinQuery(IntPoint.newRangeQuery("year", qjv, qjv), jobFilter);

      BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();
      fullQuery.add(new BooleanClause(jobQuery, Occur.MUST));
      fullQuery.add(new BooleanClause(resumeQuery, Occur.MUST));

      TopDocs hits =
          s.search(fullQuery.build(), 100); // NOTE: totally possible that we'll get no matches

      for (ScoreDoc sd : hits.scoreDocs) {
        // since we're looking for children of jobs, all results must be qualifications
        String q = r.document(sd.doc).get("qualification");
        assertNotNull(sd.doc + " has no qualification", q);
        assertTrue(q + " MUST contain jv" + qjv, q.contains("jv" + qjv));
        assertTrue(q + " MUST contain rv" + qrv, q.contains("rv" + qrv));
      }
    }

    r.close();
    dir.close();
  }

