  public void testRandom() throws Exception {
    String[] tokens = getRandomTokens(10);
    Directory indexDir = newDirectory();
    Directory taxoDir = newDirectory();

    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);
    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);
    FacetsConfig config = new FacetsConfig();
    int numDocs = atLeast(1000);
    int numDims = TestUtil.nextInt(random(), 1, 7);
    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);
    for (TestDoc testDoc : testDocs) {
      Document doc = new Document();
      doc.add(newStringField("content", testDoc.content, Field.Store.NO));
      for (int j = 0; j < numDims; j++) {
        if (testDoc.dims[j] != null) {
          doc.add(new FacetField("dim" + j, testDoc.dims[j]));
        }
      }
      w.addDocument(config.build(tw, doc));
    }

    // NRT open
    IndexSearcher searcher = newSearcher(w.getReader());

    // NRT open
    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);

    int iters = atLeast(100);
    for (int iter = 0; iter < iters; iter++) {
      String searchToken = tokens[random().nextInt(tokens.length)];
      if (VERBOSE) {
        System.out.println("\nTEST: iter content=" + searchToken);
      }
      FacetsCollector fc = new FacetsCollector();
      FacetsCollector.search(searcher, new TermQuery(new Term("content", searchToken)), 10, fc);
      Facets facets = getTaxonomyFacetCounts(tr, config, fc);

      // Slow, yet hopefully bug-free, faceting:
      @SuppressWarnings({"rawtypes", "unchecked"})
      Map<String, Integer>[] expectedCounts = new HashMap[numDims];
      List<List<FacetLabel>> expectedLabels = new ArrayList<>();

      for (int i = 0; i < numDims; i++) {
        expectedCounts[i] = new HashMap<>();
      }

      for (TestDoc doc : testDocs) {
        if (doc.content.equals(searchToken)) {
          List<FacetLabel> facetLabels = new ArrayList<>();
          for (int j = 0; j < numDims; j++) {
            if (doc.dims[j] != null) {
              Integer v = expectedCounts[j].get(doc.dims[j]);
              if (v == null) {
                expectedCounts[j].put(doc.dims[j], 1);
              } else {
                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);
              }
              // Add document facet labels
              facetLabels.add(new FacetLabel("dim" + j, doc.dims[j]));
            }
          }
          expectedLabels.add(facetLabels);
        }
      }

      List<FacetResult> expected = new ArrayList<>();
      for (int i = 0; i < numDims; i++) {
        List<LabelAndValue> labelValues = new ArrayList<>();
        int totCount = 0;
        for (Map.Entry<String, Integer> ent : expectedCounts[i].entrySet()) {
          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));
          totCount += ent.getValue();
        }
        sortLabelValues(labelValues);
        if (totCount > 0) {
          expected.add(
              new FacetResult(
                  "dim" + i,
                  new String[0],
                  totCount,
                  labelValues.toArray(new LabelAndValue[labelValues.size()]),
                  labelValues.size()));
        }
      }

      // Sort by highest value, tie break by value:
      sortFacetResults(expected);

      List<FacetResult> actual = facets.getAllDims(10);

      // Messy: fixup ties
      sortTies(actual);

      assertEquals(expected, actual);

      // Test facet labels for each matching test doc
      List<List<FacetLabel>> actualLabels = getAllTaxonomyFacetLabels(null, tr, fc);
      assertEquals(expectedLabels.size(), actualLabels.size());
      assertTrue(sortedFacetLabels(expectedLabels).equals(sortedFacetLabels(actualLabels)));

      // Test facet labels for each matching test doc, given a specific dimension chosen randomly
      final String dimension = "dim" + random().nextInt(numDims);
      expectedLabels.forEach(
          list -> list.removeIf(f -> f.components[0].equals(dimension) == false));

      actualLabels = getAllTaxonomyFacetLabels(dimension, tr, fc);
      assertTrue(sortedFacetLabels(expectedLabels).equals(sortedFacetLabels(actualLabels)));
    }

    w.close();
    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);
  }

