  /**
   * Constructor. The uninversion doesn't happen here; it's delayed till the first call to {@link
   * #incrementToken}.
   *
   * @param vector Terms that contains the data for creating the TokenStream. Must have positions
   *     and/or offsets.
   * @param maxStartOffset if a token's start offset exceeds this then the token is not added. -1
   *     disables the limit.
   */
  public TokenStreamFromTermVector(Terms vector, int maxStartOffset) throws IOException {
    this.maxStartOffset = maxStartOffset < 0 ? Integer.MAX_VALUE : maxStartOffset;
    assert !hasAttribute(PayloadAttribute.class) : "AttributeFactory shouldn't have payloads *yet*";
    if (!vector.hasPositions() && !vector.hasOffsets()) {
      throw new IllegalArgumentException("The term vector needs positions and/or offsets.");
    }
    assert vector.hasFreqs();
    this.vector = vector;
    termAttribute = addAttribute(CharTermAttribute.class);
    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);
  }

