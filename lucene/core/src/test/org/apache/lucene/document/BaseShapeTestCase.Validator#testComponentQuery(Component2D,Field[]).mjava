    public boolean testComponentQuery(Component2D query, Field[] fields) {
      ShapeField.DecodedTriangle decodedTriangle = new ShapeField.DecodedTriangle();
      for (Field field : fields) {
        boolean intersects;
        boolean contains;
        ShapeField.decodeTriangle(field.binaryValue().bytes, decodedTriangle);
        switch (decodedTriangle.type) {
          case POINT:
            {
              double y = encoder.decodeY(decodedTriangle.aY);
              double x = encoder.decodeX(decodedTriangle.aX);
              intersects = query.contains(x, y);
              contains = intersects;
              break;
            }
          case LINE:
            {
              double aY = encoder.decodeY(decodedTriangle.aY);
              double aX = encoder.decodeX(decodedTriangle.aX);
              double bY = encoder.decodeY(decodedTriangle.bY);
              double bX = encoder.decodeX(decodedTriangle.bX);
              intersects = query.intersectsLine(aX, aY, bX, bY);
              contains = query.containsLine(aX, aY, bX, bY);
              break;
            }
          case TRIANGLE:
            {
              double aY = encoder.decodeY(decodedTriangle.aY);
              double aX = encoder.decodeX(decodedTriangle.aX);
              double bY = encoder.decodeY(decodedTriangle.bY);
              double bX = encoder.decodeX(decodedTriangle.bX);
              double cY = encoder.decodeY(decodedTriangle.cY);
              double cX = encoder.decodeX(decodedTriangle.cX);
              intersects = query.intersectsTriangle(aX, aY, bX, bY, cX, cY);
              contains = query.containsTriangle(aX, aY, bX, bY, cX, cY);
              break;
            }
          default:
            throw new IllegalArgumentException(
                "Unsupported triangle type :[" + decodedTriangle.type + "]");
        }
        assertTrue((contains == intersects) || (contains == false && intersects == true));
        if (queryRelation == QueryRelation.DISJOINT && intersects) {
          return false;
        } else if (queryRelation == QueryRelation.WITHIN && contains == false) {
          return false;
        } else if (queryRelation == QueryRelation.INTERSECTS && intersects) {
          return true;
        }
      }
      return queryRelation == QueryRelation.INTERSECTS ? false : true;
    }

