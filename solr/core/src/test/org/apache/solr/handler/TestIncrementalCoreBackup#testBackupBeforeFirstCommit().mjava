    public void testBackupBeforeFirstCommit() throws Exception {

        // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created
        // an "empty" commit point that can be backed up...
        final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();
        assertNotNull(empty);

        // white box sanity check that the commit point of the "reader" available from SolrIndexSearcher
        // matches the commit point that IDPW claims is the "latest"
        //
        // this is important to ensure that backup/snapshot behavior is consistent with user expection
        // when using typical commit + openSearcher
        assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));

        assertEquals(1L, empty.getGeneration());
        assertNotNull(empty.getSegmentsFileName());
        final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();

        final CoreContainer cores = h.getCoreContainer();
        final CoreAdminHandler admin = new CoreAdminHandler(cores);
        final URI location = createAndBootstrapLocationForBackup();

        final ShardBackupId firstShardBackup = new ShardBackupId("shard1", BackupId.zero());
        { // first a backup before we've ever done *anything*...
            SolrQueryResponse resp = new SolrQueryResponse();
            admin.handleRequestBody
                    (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
                            "core", DEFAULT_TEST_COLLECTION_NAME,
                            "location", location.getPath(),
                            CoreAdminParams.SHARD_BACKUP_ID, firstShardBackup.getIdAsString()),
                            resp);
            assertNull("Backup should have succeeded", resp.getException());
            simpleBackupCheck(location, firstShardBackup, initialEmptyIndexSegmentFileName);
        }

        { // Empty (named) snapshot..
            SolrQueryResponse resp = new SolrQueryResponse();
            admin.handleRequestBody
                    (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),
                            "core", DEFAULT_TEST_COLLECTION_NAME,
                            "commitName", "empty_snapshotA"),
                            resp);
            assertNull("Snapshot A should have succeeded", resp.getException());
        }

        assertU(adoc("id", "1")); // uncommitted

        final ShardBackupId secondShardBackupId = new ShardBackupId("shard1", new BackupId(1));
        { // second backup w/uncommited docs
            SolrQueryResponse resp = new SolrQueryResponse();
            admin.handleRequestBody
                    (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
                            "core", DEFAULT_TEST_COLLECTION_NAME,
                            "location", location.getPath(),
                            CoreAdminParams.SHARD_BACKUP_ID, secondShardBackupId.getIdAsString()),
                            resp);
            assertNull("Backup should have succeeded", resp.getException());
            simpleBackupCheck(location, secondShardBackupId, initialEmptyIndexSegmentFileName);
        }

        { // Second empty (named) snapshot..
            SolrQueryResponse resp = new SolrQueryResponse();
            admin.handleRequestBody
                    (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),
                            "core", DEFAULT_TEST_COLLECTION_NAME,
                            "commitName", "empty_snapshotB"),
                            resp);
            assertNull("Snapshot A should have succeeded", resp.getException());
        }

        // Committing the doc now should not affect the existing backups or snapshots...
        assertU(commit());

        for (ShardBackupId shardBackupId: Arrays.asList(firstShardBackup, secondShardBackupId)) {
            simpleBackupCheck(location, shardBackupId, initialEmptyIndexSegmentFileName);
        }

        // Make backups from each of the snapshots and check they are still empty as well...
        {
            final ShardBackupId thirdShardBackup = new ShardBackupId("shard1", new BackupId(2));
            SolrQueryResponse resp = new SolrQueryResponse();
            admin.handleRequestBody
                    (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
                            "core", DEFAULT_TEST_COLLECTION_NAME,
                            "commitName", "empty_snapshotA",
                            "location", location.getPath(),
                            CoreAdminParams.SHARD_BACKUP_ID, thirdShardBackup.getIdAsString()),
                            resp);
            assertNull("Backup from snapshot empty_snapshotA should have succeeded", resp.getException());
            simpleBackupCheck(location, thirdShardBackup, initialEmptyIndexSegmentFileName);
        }
        {
            final ShardBackupId fourthShardBackup = new ShardBackupId("shard1", new BackupId(3));
            SolrQueryResponse resp = new SolrQueryResponse();
            admin.handleRequestBody
                    (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),
                            "core", DEFAULT_TEST_COLLECTION_NAME,
                            "commitName", "empty_snapshotB",
                            "location", location.getPath(),
                            CoreAdminParams.SHARD_BACKUP_ID, fourthShardBackup.getIdAsString()),
                            resp);
            assertNull("Backup from snapshot empty_snapshotB should have succeeded", resp.getException());
            simpleBackupCheck(location, fourthShardBackup, initialEmptyIndexSegmentFileName);
        }
        admin.close();
    }

