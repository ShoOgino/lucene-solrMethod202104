  /** Compose into standard form any compositions in the decompositions table. */
  private int compose(
      int ch0, Character.UnicodeBlock block0, ScriptData sd, char text[], int pos, int len) {
    if (pos + 1 >= len) /* need at least 2 chars! */ return len;

    final int ch1 = text[pos + 1] - sd.base;
    final Character.UnicodeBlock block1 = Character.UnicodeBlock.of(text[pos + 1]);
    if (block1 != block0) /* needs to be the same writing system */ return len;

    int ch2 = -1;

    if (pos + 2 < len) {
      ch2 = text[pos + 2] - sd.base;
      Character.UnicodeBlock block2 = Character.UnicodeBlock.of(text[pos + 2]);
      if (text[pos + 2] == '\u200D') // ZWJ
      ch2 = 0xFF;
      else if (block2 != block1) // still allow a 2-char match
      ch2 = -1;
    }

    for (int i = 0; i < decompositions.length; i++)
      if (decompositions[i][0] == ch0 && (decompositions[i][4] & sd.flag) != 0) {
        if (decompositions[i][1] == ch1
            && (decompositions[i][2] < 0 || decompositions[i][2] == ch2)) {
          text[pos] = (char) (sd.base + decompositions[i][3]);
          len = delete(text, pos + 1, len);
          if (decompositions[i][2] >= 0) len = delete(text, pos + 1, len);
          return len;
        }
      }

    return len;
  }

