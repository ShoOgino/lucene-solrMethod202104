  /**
   * Returns the node indexed by key, creating that node if it doesn't exist, and creating any
   * required intermediate nodes if they don't exist.
   *
   * @param key A <code>String</code> that indexes the node that is returned.
   * @return The node object indexed by key. This object is an instance of an inner class named
   *     <code>TernarySearchTrie.TSTNode</code>.
   * @exception NullPointerException If the key is <code>null</code>.
   * @exception IllegalArgumentException If the key is an empty <code>String</code>.
   */
  protected TSTNode getOrCreateNode(CharSequence key)
      throws NullPointerException, IllegalArgumentException {
    if (key == null) {
      throw new NullPointerException("attempt to get or create node with null key");
    }
    if (key.length() == 0) {
      throw new IllegalArgumentException("attempt to get or create node with key of zero length");
    }
    if (rootNode == null) {
      rootNode = new TSTNode(key.charAt(0), null);
    }
    TSTNode currentNode = rootNode;
    int charIndex = 0;
    while (true) {
      int charComp = compareCharsAlphabetically(key.charAt(charIndex), currentNode.splitchar);
      if (charComp == 0) {
        charIndex++;
        if (charIndex == key.length()) {
          return currentNode;
        }
        if (currentNode.relatives[TSTNode.EQKID] == null) {
          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key.charAt(charIndex), currentNode);
        }
        currentNode = currentNode.relatives[TSTNode.EQKID];
      } else if (charComp < 0) {
        if (currentNode.relatives[TSTNode.LOKID] == null) {
          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key.charAt(charIndex), currentNode);
        }
        currentNode = currentNode.relatives[TSTNode.LOKID];
      } else {
        if (currentNode.relatives[TSTNode.HIKID] == null) {
          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key.charAt(charIndex), currentNode);
        }
        currentNode = currentNode.relatives[TSTNode.HIKID];
      }
    }
  }

