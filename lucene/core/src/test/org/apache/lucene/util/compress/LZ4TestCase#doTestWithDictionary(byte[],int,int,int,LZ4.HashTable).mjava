  private void doTestWithDictionary(
      byte[] data, int dictOff, int dictLen, int length, LZ4.HashTable hashTable)
      throws IOException {
    ByteBuffersDataOutput out = new ByteBuffersDataOutput();
    LZ4.compressWithDictionary(data, dictOff, dictLen, length, out, hashTable);
    byte[] compressed = out.toArrayCopy();

    // Compress once again with the same hash table to test reuse
    ByteBuffersDataOutput out2 = new ByteBuffersDataOutput();
    LZ4.compressWithDictionary(data, dictOff, dictLen, length, out2, hashTable);
    assertArrayEquals(compressed, out2.toArrayCopy());

    // Now restore and compare bytes
    int restoreOffset = TestUtil.nextInt(random(), 1, 10);
    byte[] restored = new byte[restoreOffset + dictLen + length + random().nextInt(10)];
    System.arraycopy(data, dictOff, restored, restoreOffset, dictLen);
    LZ4.decompress(new ByteArrayDataInput(compressed), length, restored, dictLen + restoreOffset);
    assertArrayEquals(
        ArrayUtil.copyOfSubArray(data, dictOff + dictLen, dictOff + dictLen + length),
        ArrayUtil.copyOfSubArray(
            restored, restoreOffset + dictLen, restoreOffset + dictLen + length));
  }

