    /**
     * Score a single document. {@code freq} is the document-term sloppy frequency and must be
     * finite and positive. {@code norm} is the encoded normalization factor as computed by {@link
     * Similarity#computeNorm(FieldInvertState)} at index time, or {@code 1} if norms are disabled.
     * {@code norm} is never {@code 0}.
     *
     * <p>Score must not decrease when {@code freq} increases, ie. if {@code freq1 > freq2}, then
     * {@code score(freq1, norm) >= score(freq2, norm)} for any value of {@code norm} that may be
     * produced by {@link Similarity#computeNorm(FieldInvertState)}.
     *
     * <p>Score must not increase when the unsigned {@code norm} increases, ie. if {@code
     * Long.compareUnsigned(norm1, norm2) > 0} then {@code score(freq, norm1) <= score(freq, norm2)}
     * for any legal {@code freq}.
     *
     * <p>As a consequence, the maximum score that this scorer can produce is bound by {@code
     * score(Float.MAX_VALUE, 1)}.
     *
     * @param freq sloppy term frequency, must be finite and positive
     * @param norm encoded normalization factor or {@code 1} if norms are disabled
     * @return document's score
     */
    public abstract float score(float freq, long norm);

