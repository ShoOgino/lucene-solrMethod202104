  private static void checkDocValues(
      FieldInfo fi,
      DocValuesProducer dvReader,
      int maxDoc,
      PrintStream infoStream,
      DocValuesStatus status)
      throws Exception {
    switch (fi.getDocValuesType()) {
      case SORTED:
        status.totalSortedFields++;
        checkDVIterator(fi, maxDoc, dvReader::getSorted);
        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi), dvReader.getSorted(fi));
        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), dvReader.getSorted(fi));
        break;
      case SORTED_NUMERIC:
        status.totalSortedNumericFields++;
        checkDVIterator(fi, maxDoc, dvReader::getSortedNumeric);
        checkSortedNumericDocValues(
            fi.name, maxDoc, dvReader.getSortedNumeric(fi), dvReader.getSortedNumeric(fi));
        break;
      case SORTED_SET:
        status.totalSortedSetFields++;
        checkDVIterator(fi, maxDoc, dvReader::getSortedSet);
        checkSortedSetDocValues(
            fi.name, maxDoc, dvReader.getSortedSet(fi), dvReader.getSortedSet(fi));
        break;
      case BINARY:
        status.totalBinaryFields++;
        checkDVIterator(fi, maxDoc, dvReader::getBinary);
        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), dvReader.getBinary(fi));
        break;
      case NUMERIC:
        status.totalNumericFields++;
        checkDVIterator(fi, maxDoc, dvReader::getNumeric);
        checkNumericDocValues(fi.name, dvReader.getNumeric(fi), dvReader.getNumeric(fi));
        break;
      default:
        throw new AssertionError();
    }
  }

