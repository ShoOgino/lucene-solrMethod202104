    @Override
    public SpatialRelation relate(Shape other) {
      SpatialRelation r = relateApprox(other);
      if (r == DISJOINT)
        return r;
      if (r == CONTAINS)
        return r;
      if (r == WITHIN && !biasContainsThenWithin)
        return r;

      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,
      // creating a larger shape that contains the input shape.
      boolean pairTouches = shape1.relate(shape2).intersects();
      if (!pairTouches)
        return r;
      //test all 4 corners
      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means
      //  that "other" might wrap the world horizontally and yet all its corners could be in shape1 (or shape2) even
      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.
      Rectangle oRect = (Rectangle)other;
      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())
          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())
          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())
          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )
        return CONTAINS;
      return r;
    }

