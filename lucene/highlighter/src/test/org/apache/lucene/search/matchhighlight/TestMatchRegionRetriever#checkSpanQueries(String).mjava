  private void checkSpanQueries(String field) throws IOException {
    new IndexBuilder(this::toField)
        .doc(field, "foo bar baz")
        .doc(field, "bar foo baz")
        .doc(field, "bar baz foo")
        .doc(field, "bar bar bar irrelevant")
        .build(
            analyzer,
            reader -> {
              assertThat(
                  highlights(
                      reader,
                      SpanNearQuery.newOrderedNearQuery(field)
                          .addClause(new SpanTermQuery(new Term(field, "bar")))
                          .addClause(new SpanTermQuery(new Term(field, "foo")))
                          .build()),
                  containsInAnyOrder(fmt("1: (%s: '>bar foo< baz')", field)));

              assertThat(
                  highlights(
                      reader,
                      SpanNearQuery.newOrderedNearQuery(field)
                          .addClause(new SpanTermQuery(new Term(field, "bar")))
                          .addGap(1)
                          .addClause(new SpanTermQuery(new Term(field, "foo")))
                          .build()),
                  containsInAnyOrder(fmt("2: (%s: '>bar baz foo<')", field)));

              assertThat(
                  highlights(
                      reader,
                      SpanNearQuery.newUnorderedNearQuery(field)
                          .addClause(new SpanTermQuery(new Term(field, "foo")))
                          .addClause(new SpanTermQuery(new Term(field, "bar")))
                          .build()),
                  containsInAnyOrder(
                      fmt("0: (%s: '>foo bar< baz')", field),
                      fmt("1: (%s: '>bar foo< baz')", field)));

              assertThat(
                  highlights(
                      reader,
                      SpanNearQuery.newUnorderedNearQuery(field)
                          .addClause(new SpanTermQuery(new Term(field, "foo")))
                          .addClause(new SpanTermQuery(new Term(field, "bar")))
                          .setSlop(1)
                          .build()),
                  containsInAnyOrder(
                      fmt("0: (%s: '>foo bar< baz')", field),
                      fmt("1: (%s: '>bar foo< baz')", field),
                      fmt("2: (%s: '>bar baz foo<')", field)));
            });
  }

