  /** Three boxes, an island inside a hole inside a shape */
  public void testMultiPolygon() {
    Polygon hole =
        new Polygon(new double[] {-10, -10, 10, 10, -10}, new double[] {-10, 10, 10, -10, -10});
    Polygon outer =
        new Polygon(
            new double[] {-50, -50, 50, 50, -50}, new double[] {-50, 50, 50, -50, -50}, hole);
    Polygon island = new Polygon(new double[] {-5, -5, 5, 5, -5}, new double[] {-5, 5, 5, -5, -5});
    Component2D polygon = LatLonGeometry.create(outer, island);

    // contains(point)
    assertTrue(polygon.contains(-2, 2)); // on the island
    assertFalse(polygon.contains(-6, 6)); // in the hole
    assertTrue(polygon.contains(-25, 25)); // on the mainland
    assertFalse(polygon.contains(-51, 51)); // in the ocean

    // relate(box): this can conservatively return CELL_CROSSES_QUERY
    assertEquals(Relation.CELL_INSIDE_QUERY, polygon.relate(-2, 2, -2, 2)); // on the island
    assertEquals(Relation.CELL_OUTSIDE_QUERY, polygon.relate(6, 7, 6, 7)); // in the hole
    assertEquals(Relation.CELL_INSIDE_QUERY, polygon.relate(24, 25, 24, 25)); // on the mainland
    assertEquals(Relation.CELL_OUTSIDE_QUERY, polygon.relate(51, 52, 51, 52)); // in the ocean
    assertEquals(
        Relation.CELL_CROSSES_QUERY, polygon.relate(-60, 60, -60, 60)); // enclosing us completely
    assertEquals(
        Relation.CELL_CROSSES_QUERY, polygon.relate(49, 51, 49, 51)); // overlapping the mainland
    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(9, 11, 9, 11)); // overlapping the hole
    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(5, 6, 5, 6)); // overlapping the island
  }

