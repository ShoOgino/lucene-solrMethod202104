  /**
   * Expert: attempts to update doc values by document ID, as long as the provided reader is a
   * near-real-time reader (from {@link DirectoryReader#open(IndexWriter)}). If the provided reader
   * is an NRT reader obtained from this writer, and its segment has not been merged away, then the
   * update succeeds and this method returns a valid (&gt; 0) sequence number; else, it returns -1
   * and the caller must then either retry the update and resolve the document again. If a doc
   * values fields data is <code>null</code> the existing value is removed from all documents
   * matching the term. This can be used to un-delete a soft-deleted document since this method will
   * apply the field update even if the document is marked as deleted.
   *
   * <p><b>NOTE</b>: this method can only updates documents visible to the currently open NRT
   * reader. If you need to update documents indexed after opening the NRT reader you must use
   * {@link #updateDocValues(Term, Field...)}.
   */
  public synchronized long tryUpdateDocValue(IndexReader readerIn, int docID, Field... fields)
      throws IOException {
    // NOTE: DON'T use docID inside the closure
    final DocValuesUpdate[] dvUpdates = buildDocValuesUpdate(null, fields);
    return tryModifyDocument(
        readerIn,
        docID,
        (leafDocId, rld) -> {
          long nextGen = bufferedUpdatesStream.getNextGen();
          try {
            Map<String, DocValuesFieldUpdates> fieldUpdatesMap = new HashMap<>();
            for (DocValuesUpdate update : dvUpdates) {
              DocValuesFieldUpdates docValuesFieldUpdates =
                  fieldUpdatesMap.computeIfAbsent(
                      update.field,
                      k -> {
                        switch (update.type) {
                          case NUMERIC:
                            return new NumericDocValuesFieldUpdates(
                                nextGen, k, rld.info.info.maxDoc());
                          case BINARY:
                            return new BinaryDocValuesFieldUpdates(
                                nextGen, k, rld.info.info.maxDoc());
                          default:
                            throw new AssertionError("type: " + update.type + " is not supported");
                        }
                      });
              if (update.hasValue()) {
                switch (update.type) {
                  case NUMERIC:
                    docValuesFieldUpdates.add(
                        leafDocId, ((NumericDocValuesUpdate) update).getValue());
                    break;
                  case BINARY:
                    docValuesFieldUpdates.add(
                        leafDocId, ((BinaryDocValuesUpdate) update).getValue());
                    break;
                  default:
                    throw new AssertionError("type: " + update.type + " is not supported");
                }
              } else {
                docValuesFieldUpdates.reset(leafDocId);
              }
            }
            for (DocValuesFieldUpdates updates : fieldUpdatesMap.values()) {
              updates.finish();
              rld.addDVUpdate(updates);
            }
          } finally {
            bufferedUpdatesStream.finishedSegment(nextGen);
          }
          // Must bump changeCount so if no other changes
          // happened, we still commit this change:
          changed();
        });
  }

