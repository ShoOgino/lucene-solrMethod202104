  private void checkVariousQueryTypes(String field) throws IOException {
    new IndexBuilder(this::toField)
        .doc(field, "foo bar baz abc")
        .doc(field, "bar foo baz def")
        .doc(field, "bar baz foo xyz")
        .build(
            analyzer,
            reader -> {
              assertThat(
                  highlights(reader, stdQueryParser.apply("foo baz", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: '>foo< bar >baz< abc')", field),
                      fmt("1: (%s: 'bar >foo< >baz< def')", field),
                      fmt("2: (%s: 'bar >baz< >foo< xyz')", field)));

              assertThat(
                  highlights(reader, stdQueryParser.apply("foo OR xyz", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: '>foo< bar baz abc')", field),
                      fmt("1: (%s: 'bar >foo< baz def')", field),
                      fmt("2: (%s: 'bar baz >foo< >xyz<')", field)));

              assertThat(
                  highlights(reader, stdQueryParser.apply("bas~2", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo >bar< >baz< >abc<')", field),
                      fmt("1: (%s: '>bar< foo >baz< def')", field),
                      fmt("2: (%s: '>bar< >baz< foo xyz')", field)));

              assertThat(
                  highlights(reader, stdQueryParser.apply("\"foo bar\"", field)),
                  containsInAnyOrder((fmt("0: (%s: '>foo bar< baz abc')", field))));

              assertThat(
                  highlights(reader, stdQueryParser.apply("\"foo bar\"~3", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: '>foo bar< baz abc')", field),
                      fmt("1: (%s: '>bar foo< baz def')", field),
                      fmt("2: (%s: '>bar baz foo< xyz')", field)));

              assertThat(
                  highlights(reader, stdQueryParser.apply("ba*", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo >bar< >baz< abc')", field),
                      fmt("1: (%s: '>bar< foo >baz< def')", field),
                      fmt("2: (%s: '>bar< >baz< foo xyz')", field)));

              assertThat(
                  highlights(reader, stdQueryParser.apply("[bar TO bas]", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo >bar< baz abc')", field),
                      fmt("1: (%s: '>bar< foo baz def')", field),
                      fmt("2: (%s: '>bar< baz foo xyz')", field)));

              // Note how document '2' has 'bar' that isn't highlighted (because this
              // document is excluded in the first clause).
              assertThat(
                  highlights(reader, stdQueryParser.apply("([bar TO baz] -xyz) OR baz", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo >bar< >>baz<< abc')", field),
                      fmt("1: (%s: '>bar< foo >>baz<< def')", field),
                      fmt("2: (%s: 'bar >baz< foo xyz')", field)));

              assertThat(highlights(reader, new MatchAllDocsQuery()), Matchers.hasSize(0));
            });

    new IndexBuilder(this::toField)
        .doc(field, "foo baz foo")
        .doc(field, "bas baz foo")
        .doc(field, "bar baz foo xyz")
        .build(
            analyzer,
            reader -> {
              assertThat(
                  highlights(reader, stdQueryParser.apply("[bar TO baz] -bar", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo >baz< foo')", field),
                      fmt("1: (%s: '>bas< >baz< foo')", field)));
            });
  }

