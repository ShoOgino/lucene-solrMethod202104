  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {
    fst.readFirstRealTargetArc(address, scratchArc, in);

    // Fail fast for a node with fixed length arcs.
    if (scratchArc.bytesPerArc() != 0) {
      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {
        if (node.numArcs != scratchArc.numArcs()) {
          return false;
        }
      } else {
        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;
        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()
            || node.numArcs != FST.Arc.BitTable.countBits(scratchArc, in)) {
          return false;
        }
      }
    }

    for (int arcUpto = 0; arcUpto < node.numArcs; arcUpto++) {
      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];
      if (arc.label != scratchArc.label()
          || !arc.output.equals(scratchArc.output())
          || ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target()
          || !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput())
          || arc.isFinal != scratchArc.isFinal()) {
        return false;
      }

      if (scratchArc.isLast()) {
        if (arcUpto == node.numArcs - 1) {
          return true;
        } else {
          return false;
        }
      }
      fst.readNextRealArc(scratchArc, in);
    }

    return false;
  }

