  // Tests on N-dimensional points where each dimension is a BigInteger
  public void testBigIntNDims() throws Exception {

    int numDocs = atLeast(200);
    try (Directory dir = getDirectory(numDocs)) {
      int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);
      int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_INDEX_DIMENSIONS);
      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
      // We rely on docIDs not changing:
      iwc.setMergePolicy(newLogMergePolicy());
      RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);
      BigInteger[][] docs = new BigInteger[numDocs][];

      for (int docID = 0; docID < numDocs; docID++) {
        BigInteger[] values = new BigInteger[numDims];
        if (VERBOSE) {
          System.out.println("  docID=" + docID);
        }
        byte[][] bytes = new byte[numDims][];
        for (int dim = 0; dim < numDims; dim++) {
          values[dim] = randomBigInt(numBytesPerDim);
          bytes[dim] = new byte[numBytesPerDim];
          NumericUtils.bigIntToSortableBytes(values[dim], numBytesPerDim, bytes[dim], 0);
          if (VERBOSE) {
            System.out.println("    " + dim + " -> " + values[dim]);
          }
        }
        docs[docID] = values;
        Document doc = new Document();
        doc.add(new BinaryPoint("field", bytes));
        w.addDocument(doc);
      }

      DirectoryReader r = w.getReader();
      w.close();

      int iters = atLeast(100);
      for (int iter = 0; iter < iters; iter++) {
        if (VERBOSE) {
          System.out.println("\nTEST: iter=" + iter);
        }

        // Random N dims rect query:
        BigInteger[] queryMin = new BigInteger[numDims];
        BigInteger[] queryMax = new BigInteger[numDims];
        for (int dim = 0; dim < numDims; dim++) {
          queryMin[dim] = randomBigInt(numBytesPerDim);
          queryMax[dim] = randomBigInt(numBytesPerDim);
          if (queryMin[dim].compareTo(queryMax[dim]) > 0) {
            BigInteger x = queryMin[dim];
            queryMin[dim] = queryMax[dim];
            queryMax[dim] = x;
          }
          if (VERBOSE) {
            System.out.println(
                "  " + dim + "\n    min=" + queryMin[dim] + "\n    max=" + queryMax[dim]);
          }
        }

        final BitSet hits = new BitSet();
        for (LeafReaderContext ctx : r.leaves()) {
          PointValues dimValues = ctx.reader().getPointValues("field");
          if (dimValues == null) {
            continue;
          }

          final int docBase = ctx.docBase;

          dimValues.intersect(
              new IntersectVisitor() {
                @Override
                public void visit(int docID) {
                  hits.set(docBase + docID);
                  // System.out.println("visit docID=" + docID);
                }

                @Override
                public void visit(int docID, byte[] packedValue) {
                  // System.out.println("visit check docID=" + docID);
                  for (int dim = 0; dim < numDims; dim++) {
                    BigInteger x =
                        NumericUtils.sortableBytesToBigInt(
                            packedValue, dim * numBytesPerDim, numBytesPerDim);
                    if (x.compareTo(queryMin[dim]) < 0 || x.compareTo(queryMax[dim]) > 0) {
                      // System.out.println("  no");
                      return;
                    }
                  }

                  // System.out.println("  yes");
                  hits.set(docBase + docID);
                }

                @Override
                public Relation compare(byte[] minPacked, byte[] maxPacked) {
                  boolean crosses = false;
                  for (int dim = 0; dim < numDims; dim++) {
                    BigInteger min =
                        NumericUtils.sortableBytesToBigInt(
                            minPacked, dim * numBytesPerDim, numBytesPerDim);
                    BigInteger max =
                        NumericUtils.sortableBytesToBigInt(
                            maxPacked, dim * numBytesPerDim, numBytesPerDim);
                    assert max.compareTo(min) >= 0;

                    if (max.compareTo(queryMin[dim]) < 0 || min.compareTo(queryMax[dim]) > 0) {
                      return Relation.CELL_OUTSIDE_QUERY;
                    } else if (min.compareTo(queryMin[dim]) < 0
                        || max.compareTo(queryMax[dim]) > 0) {
                      crosses = true;
                    }
                  }

                  if (crosses) {
                    return Relation.CELL_CROSSES_QUERY;
                  } else {
                    return Relation.CELL_INSIDE_QUERY;
                  }
                }
              });
        }

        for (int docID = 0; docID < numDocs; docID++) {
          BigInteger[] docValues = docs[docID];
          boolean expected = true;
          for (int dim = 0; dim < numDims; dim++) {
            BigInteger x = docValues[dim];
            if (x.compareTo(queryMin[dim]) < 0 || x.compareTo(queryMax[dim]) > 0) {
              expected = false;
              break;
            }
          }
          boolean actual = hits.get(docID);
          assertEquals("docID=" + docID, expected, actual);
        }
      }
      r.close();
    }
  }

