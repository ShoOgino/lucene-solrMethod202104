  protected void doTestSortedSetVsStoredFields(
      int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues)
      throws Exception {
    Directory dir = newFSDirectory(createTempDir("dvduel"));
    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);

    Set<String> valueSet = new HashSet<String>();
    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {
      final int length = TestUtil.nextInt(random(), minLength, maxLength);
      valueSet.add(TestUtil.randomSimpleString(random(), length));
    }
    String[] uniqueValues = valueSet.toArray(new String[0]);

    // index some docs
    if (VERBOSE) {
      System.out.println("\nTEST: now add numDocs=" + numDocs);
    }
    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      Field idField = new StringField("id", Integer.toString(i), Field.Store.NO);
      doc.add(idField);
      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);
      // create a random set of strings
      Set<String> values = new TreeSet<>();
      for (int v = 0; v < numValues; v++) {
        values.add(RandomPicks.randomFrom(random(), uniqueValues));
      }

      // add ordered to the stored field
      for (String v : values) {
        doc.add(new StoredField("stored", v));
      }

      // add in any order to the dv field
      ArrayList<String> unordered = new ArrayList<>(values);
      Collections.shuffle(unordered, random());
      for (String v : unordered) {
        doc.add(new SortedSetDocValuesField("dv", new BytesRef(v)));
      }

      writer.addDocument(doc);
      if (random().nextInt(31) == 0) {
        writer.commit();
      }
    }

    // delete some docs
    int numDeletions = random().nextInt(numDocs / 10);
    if (VERBOSE) {
      System.out.println("\nTEST: now delete " + numDeletions + " docs");
    }
    for (int i = 0; i < numDeletions; i++) {
      int id = random().nextInt(numDocs);
      writer.deleteDocuments(new Term("id", Integer.toString(id)));
    }

    // compare
    if (VERBOSE) {
      System.out.println("\nTEST: now get reader");
    }
    DirectoryReader ir = writer.getReader();
    TestUtil.checkReader(ir);
    for (LeafReaderContext context : ir.leaves()) {
      LeafReader r = context.reader();
      SortedSetDocValues docValues = r.getSortedSetDocValues("dv");
      for (int i = 0; i < r.maxDoc(); i++) {
        String stringValues[] = r.document(i).getValues("stored");
        if (docValues != null) {
          if (docValues.docID() < i) {
            docValues.nextDoc();
          }
        }
        if (docValues != null && stringValues.length > 0) {
          assertEquals(i, docValues.docID());
          for (int j = 0; j < stringValues.length; j++) {
            assert docValues != null;
            long ord = docValues.nextOrd();
            assert ord != NO_MORE_ORDS;
            BytesRef scratch = docValues.lookupOrd(ord);
            assertEquals(stringValues[j], scratch.utf8ToString());
          }
          assertEquals(NO_MORE_ORDS, docValues.nextOrd());
        }
      }
    }
    if (VERBOSE) {
      System.out.println("\nTEST: now close reader");
    }
    ir.close();
    if (VERBOSE) {
      System.out.println("TEST: force merge");
    }
    writer.forceMerge(1);

    // compare again
    ir = writer.getReader();
    TestUtil.checkReader(ir);
    for (LeafReaderContext context : ir.leaves()) {
      LeafReader r = context.reader();
      SortedSetDocValues docValues = r.getSortedSetDocValues("dv");
      for (int i = 0; i < r.maxDoc(); i++) {
        String stringValues[] = r.document(i).getValues("stored");
        if (docValues.docID() < i) {
          docValues.nextDoc();
        }
        if (docValues != null && stringValues.length > 0) {
          assertEquals(i, docValues.docID());
          for (int j = 0; j < stringValues.length; j++) {
            assert docValues != null;
            long ord = docValues.nextOrd();
            assert ord != NO_MORE_ORDS;
            BytesRef scratch = docValues.lookupOrd(ord);
            assertEquals(stringValues[j], scratch.utf8ToString());
          }
          assertEquals(NO_MORE_ORDS, docValues.nextOrd());
        }
      }
    }
    if (VERBOSE) {
      System.out.println("TEST: close reader");
    }
    ir.close();
    if (VERBOSE) {
      System.out.println("TEST: close writer");
    }
    writer.close();
    if (VERBOSE) {
      System.out.println("TEST: close dir");
    }
    dir.close();
  }

