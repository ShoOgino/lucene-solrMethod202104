  @Test
  public void testFindUnhealthyCores() throws Exception {
    // Simulate two nodes, with two collections:
    //  node1: collection1 -> shard1: [ replica1 (active), replica3 (down) ]
    //         collection2 -> shard1: [ replica2 (recovering) ]
    //  node2: collection1 -> shard1: [ replica2 (active), replica4 (down) ]
    //         collection2 -> shard1: [ replica1 (active) ]
    try (ZkStateReader reader = ClusterStateMockUtil.buildClusterState(
        "csrr2rDr2Dcsr2FrR", 1, "baseUrl1:8983_", "baseUrl2:8984_")) {
      ClusterState clusterState = reader.getClusterState();

      // Node 1
      Collection<CloudDescriptor> node1Cores = Arrays.asList(
          mockCD("collection1", "slice1_replica1", "slice1", true, Replica.State.ACTIVE),
          mockCD("collection1", "slice1_replica3", "slice1", true, Replica.State.DOWN),
          mockCD("collection2", "slice1_replica5", "slice1", true, Replica.State.RECOVERING),
          // A dangling core for a non-existant collection will not fail the check
          mockCD("invalid", "invalid", "slice1", false, Replica.State.RECOVERING),
          // A core for a slice that is not an active slice will not fail the check
          mockCD("collection1", "invalid_replica1", "invalid", true, Replica.State.DOWN)
      );
      long unhealthy1 = HealthCheckHandler.findUnhealthyCores(node1Cores, clusterState);
      assertEquals(2, unhealthy1);

      // Node 2
      Collection<CloudDescriptor> node2Cores = Arrays.asList(
          mockCD("collection1", "slice1_replica2", "slice1", true, Replica.State.ACTIVE),
          mockCD("collection1", "slice1_replica4", "slice1", true, Replica.State.DOWN),
          mockCD("collection2", "slice1_replica1", "slice1", true, Replica.State.RECOVERY_FAILED)
      );
      long unhealthy2 = HealthCheckHandler.findUnhealthyCores(node2Cores, clusterState);
      assertEquals(1, unhealthy2);
    }
  }

