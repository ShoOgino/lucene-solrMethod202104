  /**
   * uses this test with a different classloader and tries to register it using the default
   * classloader, which should fail
   */
  public void testClassLoader() throws Exception {
    ClassLoader thisLoader = getClass().getClassLoader();
    Loader childLoader = new Loader(thisLoader);
    Class<?> fooClass = childLoader.createFakeClass();

    Method barMethod = fooClass.getMethod("bar");
    Map<String, Method> functions = Collections.singletonMap("bar", barMethod);
    assertNotSame(thisLoader, fooClass.getClassLoader());
    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());

    // this should pass:
    Expression expr = JavascriptCompiler.compile("bar()", functions, childLoader);
    assertEquals(2.0, expr.evaluate(null), DELTA);

    // use our classloader, not the foreign one, which should fail!
    IllegalArgumentException expected =
        expectThrows(
            IllegalArgumentException.class,
            () -> {
              JavascriptCompiler.compile("bar()", functions, thisLoader);
            });
    assertTrue(
        expected
            .getMessage()
            .contains(
                "is not declared by a class which is accessible by the given parent ClassLoader"));

    // mix foreign and default functions
    Map<String, Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);
    mixedFunctions.putAll(functions);
    expr = JavascriptCompiler.compile("bar()", mixedFunctions, childLoader);
    assertEquals(2.0, expr.evaluate(null), DELTA);
    expr = JavascriptCompiler.compile("sqrt(20)", mixedFunctions, childLoader);
    assertEquals(Math.sqrt(20), expr.evaluate(null), DELTA);

    // use our classloader, not the foreign one, which should fail!
    expected =
        expectThrows(
            IllegalArgumentException.class,
            () -> {
              JavascriptCompiler.compile("bar()", mixedFunctions, thisLoader);
            });
    assertTrue(
        expected
            .getMessage()
            .contains(
                "is not declared by a class which is accessible by the given parent ClassLoader"));
  }

