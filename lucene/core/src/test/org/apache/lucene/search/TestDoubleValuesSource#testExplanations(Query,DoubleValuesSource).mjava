  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {
    DoubleValuesSource rewritten = vs.rewrite(searcher);
    searcher.search(
        q,
        new SimpleCollector() {

          DoubleValues v;
          LeafReaderContext ctx;

          @Override
          protected void doSetNextReader(LeafReaderContext context) throws IOException {
            this.ctx = context;
          }

          @Override
          public void setScorer(Scorable scorer) throws IOException {
            this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));
          }

          @Override
          public void collect(int doc) throws IOException {
            Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);
            if (this.v.advanceExact(doc)) {
              CheckHits.verifyExplanation(
                  "", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));
            } else {
              assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());
            }
          }

          @Override
          public ScoreMode scoreMode() {
            return vs.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;
          }
        });
  }

