  /** Construct a sided plane from three points. */
  public static SidedPlane constructNormalizedThreePointSidedPlane(
      final Vector insidePoint, final Vector point1, final Vector point2, final Vector point3) {
    SidedPlane rval = null;

    if (rval == null) {
      try {
        final Vector planeNormal =
            new Vector(
                point1.x - point2.x,
                point1.y - point2.y,
                point1.z - point2.z,
                point2.x - point3.x,
                point2.y - point3.y,
                point2.z - point3.z);
        rval = new SidedPlane(insidePoint, planeNormal, -planeNormal.dotProduct(point2));
      } catch (IllegalArgumentException e) {
      }
    }

    if (rval == null) {
      try {
        final Vector planeNormal =
            new Vector(
                point1.x - point3.x,
                point1.y - point3.y,
                point1.z - point3.z,
                point3.x - point2.x,
                point3.y - point2.y,
                point3.z - point2.z);
        rval = new SidedPlane(insidePoint, planeNormal, -planeNormal.dotProduct(point3));
      } catch (IllegalArgumentException e) {
      }
    }

    if (rval == null) {
      try {
        final Vector planeNormal =
            new Vector(
                point3.x - point1.x,
                point3.y - point1.y,
                point3.z - point1.z,
                point1.x - point2.x,
                point1.y - point2.y,
                point1.z - point2.z);
        rval = new SidedPlane(insidePoint, planeNormal, -planeNormal.dotProduct(point1));
      } catch (IllegalArgumentException e) {
      }
    }

    return rval;
  }

