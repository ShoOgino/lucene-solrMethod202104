  /**
   * Returns the strings that can be produced from the given state, or false if more than <code>
   * limit</code> strings are found. <code>limit</code>&lt;0 means "infinite".
   */
  private static boolean getFiniteStrings(
      Automaton a,
      int s,
      HashSet<Integer> pathstates,
      HashSet<IntsRef> strings,
      IntsRefBuilder path,
      int limit) {
    pathstates.add(s);
    Transition t = new Transition();
    int count = a.initTransition(s, t);
    for (int i = 0; i < count; i++) {
      a.getNextTransition(t);
      if (pathstates.contains(t.dest)) {
        return false;
      }
      for (int n = t.min; n <= t.max; n++) {
        path.append(n);
        if (a.isAccept(t.dest)) {
          strings.add(path.toIntsRef());
          if (limit >= 0 && strings.size() > limit) {
            return false;
          }
        }
        if (!getFiniteStrings(a, t.dest, pathstates, strings, path, limit)) {
          return false;
        }
        path.setLength(path.length() - 1);
      }
    }
    pathstates.remove(s);
    return true;
  }

