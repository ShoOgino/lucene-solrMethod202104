  private float checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults)
      throws Exception {
    PhraseQuery.Builder builder = new PhraseQuery.Builder();
    Term[] terms = query.getTerms();
    int[] positions = query.getPositions();
    for (int i = 0; i < terms.length; ++i) {
      builder.add(terms[i], positions[i]);
    }
    builder.setSlop(slop);
    query = builder.build();

    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());
    RandomIndexWriter writer =
        new RandomIndexWriter(
            random(), ramDir, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));
    writer.addDocument(doc);

    IndexReader reader = writer.getReader();

    IndexSearcher searcher = newSearcher(reader);
    MaxFreqCollector c = new MaxFreqCollector();
    searcher.search(query, c);
    assertEquals(
        "slop: " + slop + "  query: " + query + "  doc: " + doc + "  Wrong number of hits",
        expectedNumResults,
        c.totalHits);

    // QueryUtils.check(query,searcher);
    writer.close();
    reader.close();
    ramDir.close();

    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats
    // are different
    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.
    return c.max;
  }

