  private static void checkOverrideMethods(Class<?> clazz)
      throws NoSuchMethodException, SecurityException {
    final Class<?> superClazz = clazz.getSuperclass();
    for (Method m : superClazz.getMethods()) {
      final int mods = m.getModifiers();
      if (Modifier.isStatic(mods)
          || Modifier.isAbstract(mods)
          || Modifier.isFinal(mods)
          || m.isSynthetic()
          || m.getName().equals("attributes")
          || m.getName().equals("getStats")) {
        continue;
      }
      // The point of these checks is to ensure that methods that have a default
      // impl through other methods are not overridden. This makes the number of
      // methods to override to have a working impl minimal and prevents from some
      // traps: for example, think about having getCoreCacheKey delegate to the
      // filtered impl by default
      final Method subM = clazz.getMethod(m.getName(), m.getParameterTypes());
      if (subM.getDeclaringClass() == clazz
          && m.getDeclaringClass() != Object.class
          && m.getDeclaringClass() != subM.getDeclaringClass()) {
        fail(clazz + " overrides " + m + " although it has a default impl");
      }
    }
  }

