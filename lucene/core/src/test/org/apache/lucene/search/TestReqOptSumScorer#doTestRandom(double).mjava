  private void doTestRandom(double optFreq) throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());
    int numDocs = atLeast(1000);
    for (int i = 0; i < numDocs; ++i) {
      int numAs = random().nextBoolean() ? 0 : 1 + random().nextInt(5);
      int numBs = random().nextDouble() < optFreq ? 0 : 1 + random().nextInt(5);
      Document doc = new Document();
      for (int j = 0; j < numAs; ++j) {
        doc.add(new StringField("f", "A", Store.NO));
      }
      for (int j = 0; j < numBs; ++j) {
        doc.add(new StringField("f", "B", Store.NO));
      }
      if (random().nextBoolean()) {
        doc.add(new StringField("f", "C", Store.NO));
      }
      w.addDocument(doc);
    }
    IndexReader r = w.getReader();
    w.close();
    IndexSearcher searcher = newSearcher(r);

    Query mustTerm = new TermQuery(new Term("f", "A"));
    Query shouldTerm = new TermQuery(new Term("f", "B"));
    Query query =
        new BooleanQuery.Builder().add(mustTerm, Occur.MUST).add(shouldTerm, Occur.SHOULD).build();

    TopScoreDocCollector coll = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE);
    searcher.search(query, coll);
    ScoreDoc[] expected = coll.topDocs().scoreDocs;

    // Also test a filtered query, since it does not compute the score on all
    // matches.
    query =
        new BooleanQuery.Builder()
            .add(query, Occur.MUST)
            .add(new TermQuery(new Term("f", "C")), Occur.FILTER)
            .build();

    coll = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE);
    searcher.search(query, coll);
    ScoreDoc[] expectedFiltered = coll.topDocs().scoreDocs;

    CheckHits.checkTopScores(random(), query, searcher);

    {
      Query q =
          new BooleanQuery.Builder()
              .add(new RandomApproximationQuery(mustTerm, random()), Occur.MUST)
              .add(shouldTerm, Occur.SHOULD)
              .build();

      coll = TopScoreDocCollector.create(10, null, 1);
      searcher.search(q, coll);
      ScoreDoc[] actual = coll.topDocs().scoreDocs;
      CheckHits.checkEqual(query, expected, actual);

      q =
          new BooleanQuery.Builder()
              .add(mustTerm, Occur.MUST)
              .add(new RandomApproximationQuery(shouldTerm, random()), Occur.SHOULD)
              .build();
      coll = TopScoreDocCollector.create(10, null, 1);
      searcher.search(q, coll);
      actual = coll.topDocs().scoreDocs;
      CheckHits.checkEqual(q, expected, actual);

      q =
          new BooleanQuery.Builder()
              .add(new RandomApproximationQuery(mustTerm, random()), Occur.MUST)
              .add(new RandomApproximationQuery(shouldTerm, random()), Occur.SHOULD)
              .build();
      coll = TopScoreDocCollector.create(10, null, 1);
      searcher.search(q, coll);
      actual = coll.topDocs().scoreDocs;
      CheckHits.checkEqual(q, expected, actual);
    }

    {
      Query nestedQ =
          new BooleanQuery.Builder()
              .add(query, Occur.MUST)
              .add(new TermQuery(new Term("f", "C")), Occur.FILTER)
              .build();
      CheckHits.checkTopScores(random(), nestedQ, searcher);

      query =
          new BooleanQuery.Builder()
              .add(query, Occur.MUST)
              .add(
                  new RandomApproximationQuery(new TermQuery(new Term("f", "C")), random()),
                  Occur.FILTER)
              .build();

      coll = TopScoreDocCollector.create(10, null, 1);
      searcher.search(nestedQ, coll);
      ScoreDoc[] actualFiltered = coll.topDocs().scoreDocs;
      CheckHits.checkEqual(nestedQ, expectedFiltered, actualFiltered);
    }

    {
      query =
          new BooleanQuery.Builder()
              .add(query, Occur.MUST)
              .add(new TermQuery(new Term("f", "C")), Occur.SHOULD)
              .build();

      CheckHits.checkTopScores(random(), query, searcher);

      query =
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("f", "C")), Occur.MUST)
              .add(query, Occur.SHOULD)
              .build();

      CheckHits.checkTopScores(random(), query, searcher);
    }

    r.close();
    dir.close();
  }

