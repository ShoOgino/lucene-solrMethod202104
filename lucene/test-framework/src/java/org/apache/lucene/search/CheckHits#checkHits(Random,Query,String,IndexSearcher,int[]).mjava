  /**
   * Tests that a query matches the an expected set of documents using Hits.
   *
   * <p>Note that when using the Hits API, documents will only be returned if they have a positive
   * normalized score.
   *
   * @param query the query to test
   * @param searcher the searcher to test the query against
   * @param defaultFieldName used for displaing the query in assertion messages
   * @param results a list of documentIds that must match the query
   * @see #checkHitCollector
   */
  public static void checkHits(
      Random random, Query query, String defaultFieldName, IndexSearcher searcher, int[] results)
      throws IOException {

    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;

    Set<Integer> correct = new TreeSet<>();
    for (int i = 0; i < results.length; i++) {
      correct.add(Integer.valueOf(results[i]));
    }

    Set<Integer> actual = new TreeSet<>();
    for (int i = 0; i < hits.length; i++) {
      actual.add(Integer.valueOf(hits[i].doc));
    }

    assertEquals(query.toString(defaultFieldName), correct, actual);

    QueryUtils.check(random, query, searcher, LuceneTestCase.rarely(random));
  }

