  @Test
  public void testPrelimSortingWithRefinement() throws Exception {
    // NOTE: distributed prelim_sort testing in TestJsonFacets uses identical shards, so never needs
    // refinement, so here we focus on the (re)sorting of different topN refined buckets
    // after the prelim_sorting from diff shards
  
    initServers();
    final Client client = servers.getClient(random().nextInt());
    client.queryDefaults().set("shards", servers.getShards()).set("debugQuery", Boolean.toString(random().nextBoolean()));

    List<SolrClient> clients = client.getClientProvider().all();
    assertTrue(clients.size() >= 3); // we only use 2, but assert 3 to also test empty shard
    final SolrClient c0 = clients.get(0);
    final SolrClient c1 = clients.get(1);

    client.deleteByQuery("*:*", null);
    int id = 0;

    // client 0 // shard1: A=1,B=1,C=2 ...
    c0.add(sdoc("id", id++, "cat_s","A", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","B", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","C", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","C", "price_i","1"));
    // ... X=3,Y=3
    c0.add(sdoc("id", id++, "cat_s","X", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","X", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","X", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","Y", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","Y", "price_i","1"));
    c0.add(sdoc("id", id++, "cat_s","Y", "price_i","1"));
    
    // client 1 // shard2: X=1,Y=2,Z=2 ...
    c1.add(sdoc("id", id++, "cat_s","X", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","Y", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","Y", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","Z", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","Z", "price_i","1"));
    // ... C=4
    c1.add(sdoc("id", id++, "cat_s","C", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","C", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","C", "price_i","1"));
    c1.add(sdoc("id", id++, "cat_s","C", "price_i","1"));
    
    // Whole Collection: A=1,B=1,Z=2,X=4,Y=5,C=6
    client.commit();
    
    // in both cases, neither C nor Z make the cut for the top3 buckets in phase#1 (due to tie breaker), 
    // so they aren't refined -- after refinement the re-sorting re-orders the buckets
    client.testJQ(params("q", "*:*", "rows", "0", "json.facet", "{"
                         + " cat_1 : { type:terms, field:cat_s, limit:3, overrequest:0"
                         + "           , refine:true, prelim_sort:'count asc', sort:'index desc' }, "
                         + " cat_2 : { type:terms, field:cat_s, limit:3, overrequest:0"
                         + "           , refine:true, prelim_sort:'sum_p asc', sort:'count desc' "
                         + "           , facet: { sum_p: 'sum(price_i)' } }"
                         + "}")
                  , "facets=={ count: "+id+","
                  + "  cat_1:{ buckets:[ "
                  + "            {val:X,count:4}," // index desc
                  + "            {val:B,count:1}," 
                  + "            {val:A,count:1}," 
                  + "  ] },"
                  + "  cat_2:{ buckets:[ "
                  + "            {val:X,count:4,sum_p:4.0}," // count desc
                  + "            {val:A,count:1,sum_p:1.0}," // index order tie break
                  + "            {val:B,count:1,sum_p:1.0},"
                  + "  ] }"
                  + "}"
                  );

    // with some explicit overrefinement=2, we also refine C and Y, giving us those additional
    // (fully populated) buckets to consider during re-sorting...
    client.testJQ(params("q", "*:*", "rows", "0", "json.facet", "{"
                         + " cat_1 : { type:terms, field:cat_s, limit:3, overrequest:0, overrefine:2"
                         + "           , refine:true, prelim_sort:'count asc', sort:'index desc' }, "
                         + " cat_2 : { type:terms, field:cat_s, limit:3, overrequest:0, overrefine:2"
                         + "           , refine:true, prelim_sort:'sum_p asc', sort:'count desc' "
                         + "           , facet: { sum_p: 'sum(price_i)' } }"
                         + "}")
                  , "facets=={ count: "+id+","
                  + "  cat_1:{ buckets:[ "
                  + "            {val:Y,count:5}," // index desc
                  + "            {val:X,count:4}," 
                  + "            {val:C,count:6}," 
                  + "  ] },"
                  + "  cat_2:{ buckets:[ "
                  + "            {val:C,count:6,sum_p:6.0}," // count desc
                  + "            {val:Y,count:5,sum_p:5.0},"
                  + "            {val:X,count:4,sum_p:4.0},"
                  + "  ] }"
                  + "}"
                  );
  }

