  /**
   * Uses morton code for speed to determine whether or a polygon node forms a valid ear w/ adjacent
   * nodes
   */
  private static final boolean mortonIsEar(final Node ear) {
    // triangle bbox (flip the bits so negative encoded values are < positive encoded values)
    int minTX = StrictMath.min(StrictMath.min(ear.previous.x, ear.x), ear.next.x) ^ 0x80000000;
    int minTY = StrictMath.min(StrictMath.min(ear.previous.y, ear.y), ear.next.y) ^ 0x80000000;
    int maxTX = StrictMath.max(StrictMath.max(ear.previous.x, ear.x), ear.next.x) ^ 0x80000000;
    int maxTY = StrictMath.max(StrictMath.max(ear.previous.y, ear.y), ear.next.y) ^ 0x80000000;

    // z-order range for the current triangle bbox;
    long minZ = BitUtil.interleave(minTX, minTY);
    long maxZ = BitUtil.interleave(maxTX, maxTY);

    // now make sure we don't have other points inside the potential ear;

    // look for points inside the triangle in both directions
    Node p = ear.previousZ;
    Node n = ear.nextZ;
    while (p != null
        && Long.compareUnsigned(p.morton, minZ) >= 0
        && n != null
        && Long.compareUnsigned(n.morton, maxZ) <= 0) {
      if (p.idx != ear.previous.idx
          && p.idx != ear.next.idx
          && pointInEar(
              p.getX(),
              p.getY(),
              ear.previous.getX(),
              ear.previous.getY(),
              ear.getX(),
              ear.getY(),
              ear.next.getX(),
              ear.next.getY())
          && area(
                  p.previous.getX(),
                  p.previous.getY(),
                  p.getX(),
                  p.getY(),
                  p.next.getX(),
                  p.next.getY())
              >= 0) return false;
      p = p.previousZ;

      if (n.idx != ear.previous.idx
          && n.idx != ear.next.idx
          && pointInEar(
              n.getX(),
              n.getY(),
              ear.previous.getX(),
              ear.previous.getY(),
              ear.getX(),
              ear.getY(),
              ear.next.getX(),
              ear.next.getY())
          && area(
                  n.previous.getX(),
                  n.previous.getY(),
                  n.getX(),
                  n.getY(),
                  n.next.getX(),
                  n.next.getY())
              >= 0) return false;
      n = n.nextZ;
    }

    // first look for points inside the triangle in decreasing z-order
    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0) {
      if (p.idx != ear.previous.idx
          && p.idx != ear.next.idx
          && pointInEar(
              p.getX(),
              p.getY(),
              ear.previous.getX(),
              ear.previous.getY(),
              ear.getX(),
              ear.getY(),
              ear.next.getX(),
              ear.next.getY())
          && area(
                  p.previous.getX(),
                  p.previous.getY(),
                  p.getX(),
                  p.getY(),
                  p.next.getX(),
                  p.next.getY())
              >= 0) {
        return false;
      }
      p = p.previousZ;
    }
    // then look for points in increasing z-order
    while (n != null && Long.compareUnsigned(n.morton, maxZ) <= 0) {
      if (n.idx != ear.previous.idx
          && n.idx != ear.next.idx
          && pointInEar(
              n.getX(),
              n.getY(),
              ear.previous.getX(),
              ear.previous.getY(),
              ear.getX(),
              ear.getY(),
              ear.next.getX(),
              ear.next.getY())
          && area(
                  n.previous.getX(),
                  n.previous.getY(),
                  n.getX(),
                  n.getY(),
                  n.next.getX(),
                  n.next.getY())
              >= 0) {
        return false;
      }
      n = n.nextZ;
    }
    return true;
  }

