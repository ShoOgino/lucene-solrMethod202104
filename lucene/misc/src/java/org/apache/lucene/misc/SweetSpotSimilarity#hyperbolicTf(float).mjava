  /**
   * Uses a hyperbolic tangent function that allows for a hard max... <code>
   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)
   * </code>
   *
   * <p>This code is provided as a convenience for subclasses that want to use a hyperbolic tf
   * function.
   *
   * @see #setHyperbolicTfFactors
   * @see <a href="doc-files/ss.hyperbolicTf.svg">An SVG visualization of this function</a>
   */
  public float hyperbolicTf(float freq) {
    if (0.0f == freq) return 0.0f;

    final float min = tf_hyper_min;
    final float max = tf_hyper_max;
    final double base = tf_hyper_base;
    final float xoffset = tf_hyper_xoffset;
    final double x = (double) (freq - xoffset);

    final float result =
        min
            + (float)
                ((max - min)
                    / 2.0f
                    * (((Math.pow(base, x) - Math.pow(base, -x))
                            / (Math.pow(base, x) + Math.pow(base, -x)))
                        + 1.0d));

    return Float.isNaN(result) ? max : result;
  }

