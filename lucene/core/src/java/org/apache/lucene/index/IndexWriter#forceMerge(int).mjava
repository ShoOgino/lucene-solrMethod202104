  /**
   * Forces merge policy to merge segments until there are {@code <= maxNumSegments}. The actual
   * merges to be executed are determined by the {@link MergePolicy}.
   *
   * <p>This is a horribly costly operation, especially when you pass a small {@code
   * maxNumSegments}; usually you should only call this if the index is static (will no longer be
   * changed).
   *
   * <p>Note that this requires free space that is proportional to the size of the index in your
   * Directory: 2X if you are not using compound file format, and 3X if you are. For example, if
   * your index size is 10 MB then you need an additional 20 MB free for this to complete (30 MB if
   * you're using compound file format). This is also affected by the {@link Codec} that is used to
   * execute the merge, and may result in even a bigger index. Also, it's best to call {@link
   * #commit()} afterwards, to allow IndexWriter to free up disk space.
   *
   * <p>If some but not all readers re-open while merging is underway, this will cause {@code > 2X}
   * temporary space to be consumed as those new readers will then hold open the temporary segments
   * at that time. It is best not to re-open readers while merging is running.
   *
   * <p>The actual temporary usage could be much less than these figures (it depends on many
   * factors).
   *
   * <p>In general, once this completes, the total size of the index will be less than the size of
   * the starting index. It could be quite a bit smaller (if there were many pending deletes) or
   * just slightly smaller.
   *
   * <p>If an Exception is hit, for example due to disk full, the index will not be corrupted and no
   * documents will be lost. However, it may have been partially merged (some segments were merged
   * but not all), and it's possible that one of the segments in the index will be in non-compound
   * format even when using compound file format. This will occur when the Exception is hit during
   * conversion of the segment into compound format.
   *
   * <p>This call will merge those segments present in the index when the call started. If other
   * threads are still adding documents and flushing segments, those newly created segments will not
   * be merged unless you call forceMerge again.
   *
   * @param maxNumSegments maximum number of segments left in the index after merging finishes
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   * @see MergePolicy#findMerges
   */
  public void forceMerge(int maxNumSegments) throws IOException {
    forceMerge(maxNumSegments, true);
  }

