    /**
     * Records a mutation method and its parameters so that it can be executed later to modify the corresponding Zookeeper state.
     * Note the message is identical to the one used for communicating with Overseer (at least initially) so it also contains
     * the action in parameter {@link org.apache.solr.cloud.Overseer#QUEUE_OPERATION}, but that value is ignored here
     * in favor of the value passed in {@code command}.
     *
     * @param message the parameters associated with the command that are kept in the recorded mutations to be played
     *                later. Note that this call usually replaces a call to {@link org.apache.solr.cloud.Overseer#offerStateUpdate(byte[])}
     *                that is passed a <b>copy</b> of the data!<br>
     *                This means that if  {@code message} passed in here is reused before the recorded commands are replayed,
     *                things will break! Need to make sure all places calling this method do not reuse the data passed in
     *                (otherwise need to make a copy).
     */
    public void record(MutatingCommand command, ZkNodeProps message) {
      if (isCollectionCreation && !creationCommandRecorded) {
        // First received command should be collection creation
        if (!command.isCollectionCreation()) {
          final String err = "Internal bug. Creation of collection " + collectionName + " unexpected command " + command.name();
          log.error(err);
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err);
        }
        creationCommandRecorded = true;
      } else {
        // If collection creation already received or not expected, should not get (another) one
        if (command.isCollectionCreation()) {
          final String err = "Internal bug. Creation of collection " + collectionName + " unexpected command " +
              command.name() + " (isCollectionCreation=" + isCollectionCreation + ", creationCommandRecorded=" + creationCommandRecorded + ")";
          log.error(err);
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err);
        }
      }

      if (!collectionName.equals(command.getCollectionName(message))) {
        // All recorded commands must be for same collection
        final String err = "Internal bug. State change for collection " + collectionName +
            " received command " + command + " for collection " + command.getCollectionName(message);
        log.error(err);
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err);
      }

      mutations.add(new Pair<>(command, message));
    }

