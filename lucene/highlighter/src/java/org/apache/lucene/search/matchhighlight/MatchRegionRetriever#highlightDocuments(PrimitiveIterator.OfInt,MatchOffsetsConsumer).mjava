  /**
   * Low-level, high-efficiency method for highlighting large numbers of documents at once in a
   * streaming fashion.
   *
   * @param docIds A stream of <em>sorted</em> document identifiers for which hit ranges should be
   *     returned.
   * @param consumer A streaming consumer for document-hits pairs.
   */
  public void highlightDocuments(PrimitiveIterator.OfInt docIds, MatchOffsetsConsumer consumer)
      throws IOException {
    if (leaves.isEmpty()) {
      return;
    }

    Iterator<LeafReaderContext> ctx = leaves.iterator();
    LeafReaderContext currentContext = ctx.next();
    int previousDocId = -1;
    Map<String, List<OffsetRange>> highlights = new TreeMap<>();
    while (docIds.hasNext()) {
      int docId = docIds.nextInt();

      if (docId < previousDocId) {
        throw new RuntimeException("Input document IDs must be sorted (increasing).");
      }
      previousDocId = docId;

      while (docId >= currentContext.docBase + currentContext.reader().maxDoc()) {
        currentContext = ctx.next();
      }

      int contextRelativeDocId = docId - currentContext.docBase;

      // Only preload fields we may potentially need.
      FieldValueProvider documentSupplier;
      if (preloadFields.isEmpty()) {
        documentSupplier = null;
      } else {
        Document doc = currentContext.reader().document(contextRelativeDocId, preloadFields);
        documentSupplier = new DocumentFieldValueProvider(doc);
      }

      highlights.clear();
      highlightDocument(
          currentContext, contextRelativeDocId, documentSupplier, (field) -> true, highlights);
      consumer.accept(docId, currentContext.reader(), contextRelativeDocId, highlights);
    }
  }

