  /**
   * Compute the angle for a point given rotation information.
   *
   * @param point is the point to assess
   * @param sinLatitude the sine of the latitude
   * @param cosLatitude the cosine of the latitude
   * @param sinLongitude the sine of the longitude
   * @param cosLongitude the cosine of the longitude
   * @return the angle of rotation, or null if not computable
   */
  private static Double computeAngle(
      final GeoPoint point,
      final double sinLatitude,
      final double cosLatitude,
      final double sinLongitude,
      final double cosLongitude) {
    // Coordinate rotation formula:
    // x1 = x0 cos T - y0 sin T
    // y1 = x0 sin T + y0 cos T
    // We need to rotate the point in question into the coordinate frame specified by
    // the lat and lon trig functions.
    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is
    // in x/z.
    // And we rotate in the negative direction.
    // So:
    // x1 = x0 cos az + y0 sin az
    // y1 = - x0 sin az + y0 cos az
    // z1 = z0
    // x2 = x1 cos al + z1 sin al
    // y2 = y1
    // z2 = - x1 sin al + z1 cos al

    final double x1 = point.x * cosLongitude + point.y * sinLongitude;
    final double y1 = -point.x * sinLongitude + point.y * cosLongitude;
    final double z1 = point.z;

    // final double x2 = x1 * cosLatitude + z1 * sinLatitude;
    final double y2 = y1;
    final double z2 = -x1 * sinLatitude + z1 * cosLatitude;

    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0,
    // 0). So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2)
    // is 0.0, then the point is on the pole and we need another one).
    if (Math.sqrt(y2 * y2 + z2 * z2) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }

    return Math.atan2(z2, y2);
  }

