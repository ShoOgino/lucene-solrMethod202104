  private void testSerialization(int maxDoc, int numLiveDocs, boolean fixedBitSet)
      throws IOException {
    final Codec codec = Codec.getDefault();
    final LiveDocsFormat format = codec.liveDocsFormat();

    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);
    if (numLiveDocs > maxDoc / 2) {
      liveDocs.set(0, maxDoc);
      for (int i = 0; i < maxDoc - numLiveDocs; ++i) {
        int clearBit;
        do {
          clearBit = random().nextInt(maxDoc);
        } while (liveDocs.get(clearBit) == false);
        liveDocs.clear(clearBit);
      }
    } else {
      for (int i = 0; i < numLiveDocs; ++i) {
        int setBit;
        do {
          setBit = random().nextInt(maxDoc);
        } while (liveDocs.get(setBit));
        liveDocs.set(setBit);
      }
    }

    final Bits bits;
    if (fixedBitSet) {
      bits = liveDocs;
    } else {
      // Make sure the impl doesn't only work with a FixedBitSet
      bits =
          new Bits() {

            @Override
            public boolean get(int index) {
              return liveDocs.get(index);
            }

            @Override
            public int length() {
              return liveDocs.length();
            }
          };
    }

    final Directory dir = newDirectory();
    final SegmentInfo si =
        new SegmentInfo(
            dir,
            Version.LATEST,
            Version.LATEST,
            "foo",
            maxDoc,
            random().nextBoolean(),
            codec,
            Collections.emptyMap(),
            StringHelper.randomId(),
            Collections.emptyMap(),
            null);
    SegmentCommitInfo sci = new SegmentCommitInfo(si, 0, 0, 0, -1, -1, StringHelper.randomId());
    format.writeLiveDocs(bits, dir, sci, maxDoc - numLiveDocs, IOContext.DEFAULT);

    sci = new SegmentCommitInfo(si, maxDoc - numLiveDocs, 0, 1, -1, -1, StringHelper.randomId());
    final Bits bits2 = format.readLiveDocs(dir, sci, IOContext.READONCE);
    assertEquals(maxDoc, bits2.length());
    for (int i = 0; i < maxDoc; ++i) {
      assertEquals(bits.get(i), bits2.get(i));
    }
    dir.close();
  }

