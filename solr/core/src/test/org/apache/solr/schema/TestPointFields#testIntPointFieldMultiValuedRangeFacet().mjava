  @Test
  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {
    String docValuesField = "number_p_i_mv_dv";
    String nonDocValuesField = "number_p_i_mv";
    int numValues = 20 * RANDOM_MULTIPLIER;
    int numBuckets = numValues / 2;
    List<Integer> values;
    List<PosVal<Integer>> sortedValues;
    int max;
    do {
      values = getRandomInts(numValues, false);
      sortedValues = toAscendingPosVals(values, true);
    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); // leave room for rounding
    int min = sortedValues.get(0).val;
    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);
    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);
    for (int i = 0 ; i < numBuckets ; ++i) {
      docIdBucket.add(new HashSet<>());
    }
    int bucketNum = 0;
    int minBucketVal = min;
    for (PosVal<Integer> value : sortedValues) {
      while ((long)value.val - (long)minBucketVal >= gap) {
        ++bucketNum;
        minBucketVal += gap;
      }
      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values 
    }
    for (int i = 0 ; i < numValues ; i += 2) {
      assertU(adoc("id", String.valueOf(i / 2),
          docValuesField, String.valueOf(values.get(i)),
          docValuesField, String.valueOf(values.get(i + 1)),
          nonDocValuesField, String.valueOf(values.get(i)),
          nonDocValuesField, String.valueOf(values.get(i + 1))));
    }
    assertU(commit());
    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());
    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);
    String[] testStrings = new String[numBuckets + 1];
    minBucketVal = min;
    testStrings[numBuckets] = "//*[@numFound='" + (numValues / 2) + "']";
    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {
      testStrings[i] = "//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='" + docValuesField
          + "']/lst[@name='counts']/int[@name='" + minBucketVal + "'][.='" + docIdBucket.get(i).size() + "']";
    }

    assertQ(req("q", "*:*", "facet", "true", "facet.range", docValuesField,
        "facet.range.start", String.valueOf(min), "facet.range.end", String.valueOf(max),
        "facet.range.gap", String.valueOf(gap), "indent", "on"),
        testStrings);
    assertQ(req("q", "*:*", "facet", "true", "facet.range", docValuesField,
        "facet.range.start", String.valueOf(min), "facet.range.end", String.valueOf(max),
        "facet.range.gap", String.valueOf(gap), "facet.range.method", "dv", "indent", "on"),
        testStrings);

    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());
    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);
    minBucketVal = min;
    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {
      testStrings[i] = "//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='" + nonDocValuesField
          + "']/lst[@name='counts']/int[@name='" + minBucketVal + "'][.='" + docIdBucket.get(i).size() + "']";
    }
    // Range Faceting with method = filter should work
    assertQ(req("q", "*:*", "facet", "true", "facet.range", nonDocValuesField,
        "facet.range.start", String.valueOf(min), "facet.range.end", String.valueOf(max),
        "facet.range.gap", String.valueOf(gap), "facet.range.method", "filter", "indent", "on"),
        testStrings);
    // this should actually use filter method instead of dv
    assertQ(req("q", "*:*", "facet", "true", "facet.range", nonDocValuesField,
        "facet.range.start", String.valueOf(min), "facet.range.end", String.valueOf(max),
        "facet.range.gap", String.valueOf(gap), "facet.range.method", "dv", "indent", "on"),
        testStrings);
  }

