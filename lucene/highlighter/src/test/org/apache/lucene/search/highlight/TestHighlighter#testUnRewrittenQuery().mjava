  public void testUnRewrittenQuery() throws Exception {
    final TestHighlightRunner helper =
        new TestHighlightRunner() {

          @Override
          public void run() throws Exception {
            numHighlights = 0;
            // test to show how rewritten query can still be used
            searcher = newSearcher(reader);

            BooleanQuery.Builder query = new BooleanQuery.Builder();
            query.add(new WildcardQuery(new Term(FIELD_NAME, "jf?")), Occur.SHOULD);
            query.add(new WildcardQuery(new Term(FIELD_NAME, "kenned*")), Occur.SHOULD);

            if (VERBOSE) System.out.println("Searching with primitive query");
            // forget to set this and...
            // query=query.rewrite(reader);
            TopDocs hits = searcher.search(query.build(), 1000);

            // create an instance of the highlighter with the tags used to surround
            // highlighted text
            // QueryHighlightExtractor highlighter = new
            // QueryHighlightExtractor(this,
            // query, new StandardAnalyzer(TEST_VERSION));

            int maxNumFragmentsRequired = 3;

            for (int i = 0; i < hits.totalHits.value; i++) {
              final int docId = hits.scoreDocs[i].doc;
              final Document doc = searcher.doc(docId);
              String text = doc.get(FIELD_NAME);
              TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);
              Highlighter highlighter =
                  getHighlighter(query.build(), FIELD_NAME, TestHighlighter.this, false);

              highlighter.setTextFragmenter(new SimpleFragmenter(40));

              String highlightedText =
                  highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, "...");

              if (VERBOSE) System.out.println(highlightedText);
            }
            // We expect to have zero highlights if the query is multi-terms and is
            // not
            // rewritten!
            assertTrue(
                "Failed to find correct number of highlights " + numHighlights + " found",
                numHighlights == 0);
          }
        };

    helper.start();
  }

