  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    /*
       We track update requests so that we can preserve consistency by waiting for them to complete
       on a node shutdown and then immediately trigger a leader election without waiting for the core to close.
       See how the SolrCoreState#pauseUpdatesAndAwaitInflightRequests() method is used in CoreContainer#shutdown()

       Also see https://issues.apache.org/jira/browse/SOLR-14942 for details on why we do not care for
       other kinds of requests.
    */
    SolrCoreState solrCoreState = req.getCore().getSolrCoreState();
    if (!solrCoreState.registerInFlightUpdate())  {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Updates are temporarily paused for core: " + req.getCore().getName());
    }
    try {
      SolrParams params = req.getParams();
      UpdateRequestProcessorChain processorChain =
              req.getCore().getUpdateProcessorChain(params);

      UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);

      try {
        ContentStreamLoader documentLoader = newLoader(req, processor);


        Iterable<ContentStream> streams = req.getContentStreams();
        if (streams == null) {
          if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "missing content stream");
          }
        } else {

          for (ContentStream stream : streams) {
            documentLoader.load(req, rsp, stream, processor);
          }

          // Perhaps commit from the parameters
          RequestHandlerUtils.handleCommit(req, processor, params, false);
          RequestHandlerUtils.handleRollback(req, processor, params, false);
        }
      } finally {
        // finish the request
        try {
          processor.finish();
        } finally {
          processor.close();
        }
      }
    } finally {
      solrCoreState.deregisterInFlightUpdate();
    }
  }

