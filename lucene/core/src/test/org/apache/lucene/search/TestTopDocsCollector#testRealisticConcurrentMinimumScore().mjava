  public void testRealisticConcurrentMinimumScore() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
    try (LineFileDocs docs = new LineFileDocs(random())) {
      int numDocs = atLeast(100);
      for (int i = 0; i < numDocs; i++) {
        writer.addDocument(docs.nextDoc());
      }
    }

    IndexReader reader = writer.getReader();
    writer.close();

    Terms terms = MultiTerms.getTerms(reader, "body");
    int termCount = 0;
    TermsEnum termsEnum = terms.iterator();
    while (termsEnum.next() != null) {
      termCount++;
    }
    assertTrue(termCount > 0);

    // Target ~10 terms to search:
    double chance = 10.0 / termCount;
    termsEnum = terms.iterator();
    while (termsEnum.next() != null) {
      if (random().nextDouble() <= chance) {
        BytesRef term = BytesRef.deepCopyOf(termsEnum.term());
        Query query = new TermQuery(new Term("body", term));

        TopDocsCollector<ScoreDoc> collector = doSearchWithThreshold(5, 0, query, reader);
        TopDocs tdc = doConcurrentSearchWithThreshold(5, 0, query, reader);
        TopDocs tdc2 = collector.topDocs();

        CheckHits.checkEqual(query, tdc.scoreDocs, tdc2.scoreDocs);
      }
    }

    reader.close();
    dir.close();
  }

