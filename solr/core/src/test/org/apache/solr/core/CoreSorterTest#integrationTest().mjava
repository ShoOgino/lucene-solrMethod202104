  @Test
  @SuppressWarnings({"unchecked"})
  public void integrationTest() {
    assumeWorkingMockito();

    List<CountsForEachShard> perShardCounts = new ArrayList<>(inputCounts);
    Collections.shuffle(perShardCounts, random());

    // compute nodes, some live, some down
    final int maxNodesOfAType = perShardCounts.stream() // not too important how many we have, but lets have plenty
        .mapToInt(c -> c.totalReplicasInLiveNodes + c.totalReplicasInDownNodes + c.myReplicas).max().getAsInt();
    List<String> liveNodes = IntStream.range(0, maxNodesOfAType).mapToObj(i -> "192.168.0." + i + ":8983_").collect(Collectors.toList());
    Collections.shuffle(liveNodes, random());
    String thisNode = liveNodes.get(0);
    List<String> otherLiveNodes = liveNodes.subList(1, liveNodes.size());
    List<String> downNodes = IntStream.range(0, maxNodesOfAType).mapToObj(i -> "192.168.1." + i + ":8983_").collect(Collectors.toList());

    // divide into two collections
    int numCol1 = random().nextInt(perShardCounts.size());
    Map<String,List<CountsForEachShard>> collToCounts = new HashMap<>();
    collToCounts.put("col1", perShardCounts.subList(0, numCol1));
    collToCounts.put("col2", perShardCounts.subList(numCol1, perShardCounts.size()));

    Map<String,DocCollection> collToState = new HashMap<>();
    Map<CountsForEachShard, List<CoreDescriptor>> myCountsToDescs = new HashMap<>();
    for (Map.Entry<String, List<CountsForEachShard>> entry : collToCounts.entrySet()) {
      String collection = entry.getKey();
      List<CountsForEachShard> collCounts = entry.getValue();
      Map<String, Slice> sliceMap = new HashMap<>(collCounts.size());
      for (CountsForEachShard shardCounts : collCounts) {
        String slice = "s" + shardCounts.hashCode();
        List<Replica> replicas = new ArrayList<>();
        for (int myRepNum = 0; myRepNum < shardCounts.myReplicas; myRepNum++) {
          addNewReplica(replicas, collection, slice, Collections.singletonList(thisNode));
          // save this mapping for later
          myCountsToDescs.put(shardCounts, replicas.stream().map(this::newCoreDescriptor).collect(Collectors.toList()));
        }
        for (int myRepNum = 0; myRepNum < shardCounts.totalReplicasInLiveNodes; myRepNum++) {
          addNewReplica(replicas, collection, slice, otherLiveNodes);
        }
        for (int myRepNum = 0; myRepNum < shardCounts.totalReplicasInDownNodes; myRepNum++) {
          addNewReplica(replicas, collection, slice, downNodes);
        }
        Map<String, Replica> replicaMap = replicas.stream().collect(Collectors.toMap(Replica::getName, Function.identity()));
        sliceMap.put(slice, new Slice(slice, replicaMap, map(), collection));
      }
      @SuppressWarnings({"unchecked"})
      DocCollection col = new DocCollection(collection, sliceMap, map(), DocRouter.DEFAULT);
      collToState.put(collection, col);
    }
    // reverse map
    Map<CoreDescriptor, CountsForEachShard> myDescsToCounts = new HashMap<>();
    for (Map.Entry<CountsForEachShard, List<CoreDescriptor>> entry : myCountsToDescs.entrySet()) {
      for (CoreDescriptor descriptor : entry.getValue()) {
        CountsForEachShard prev = myDescsToCounts.put(descriptor, entry.getKey());
        assert prev == null; // sanity check
      }
    }

    assert myCountsToDescs.size() == perShardCounts.size(); // just a sanity check

    CoreContainer mockCC = mock(CoreContainer.class);
    {
      when(mockCC.isZooKeeperAware()).thenReturn(true);

      ZkController mockZKC = mock(ZkController.class);
      when(mockCC.getZkController()).thenReturn(mockZKC);
      {
        ClusterState mockClusterState = mock(ClusterState.class);
        when(mockZKC.getClusterState()).thenReturn(mockClusterState);
        {
          when(mockClusterState.getLiveNodes()).thenReturn(new HashSet<>(liveNodes));
          for (Map.Entry<String, DocCollection> entry : collToState.entrySet()) {
            when(mockClusterState.getCollectionOrNull(entry.getKey())).thenReturn(entry.getValue());
          }
        }
      }

      NodeConfig mockNodeConfig = mock(NodeConfig.class);
      when(mockNodeConfig.getNodeName()).thenReturn(thisNode);
      when(mockCC.getNodeConfig()).thenReturn(mockNodeConfig);

    }

    List<CoreDescriptor> myDescs = new ArrayList<>(myDescsToCounts.keySet());
    for (int i = 0; i < 10; i++) {
      Collections.shuffle(myDescs, random());

      List<CoreDescriptor> resultDescs = CoreSorter.sortCores(mockCC, myDescs);
      // map descriptors back to counts, removing consecutive duplicates
      List<CountsForEachShard> resultCounts = new ArrayList<>();
      CountsForEachShard lastCounts = null;
      for (CoreDescriptor resultDesc : resultDescs) {
        CountsForEachShard counts = myDescsToCounts.get(resultDesc);
        if (counts != lastCounts) {
          resultCounts.add(counts);
        }
        lastCounts = counts;
      }
      assertEquals(expectedCounts, resultCounts);
    }
  }

