  public void testDocValues() throws IOException {
    Directory directory = newDirectory();
    IndexWriter writer =
        new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));

    Document d1 = new Document();
    addDVs(d1, 10);
    writer.addDocument(d1);

    Document d2 = new Document();
    addDVs(d2, 100);
    writer.addDocument(d2);

    Document d3 = new Document();
    addDVs(d3, 1000);
    writer.addDocument(d3);

    writer.forceMerge(1);
    writer.commit();
    writer.close();

    DirectoryReader directoryReader;
    DirectoryReader exitableDirectoryReader;

    for (DvFactory dvFactory :
        Arrays.<DvFactory>asList(
            (r) -> r.getSortedDocValues("sorted"),
            (r) -> r.getSortedSetDocValues("sortedset"),
            (r) -> r.getSortedNumericDocValues("sortednumeric"),
            (r) -> r.getNumericDocValues("numeric"),
            (r) -> r.getBinaryDocValues("binary"))) {
      directoryReader = DirectoryReader.open(directory);
      exitableDirectoryReader =
          new ExitableDirectoryReader(directoryReader, immediateQueryTimeout());

      {
        IndexReader reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));

        expectThrows(
            ExitingReaderException.class,
            () -> {
              LeafReader leaf = reader.leaves().get(0).reader();
              DocValuesIterator iter = dvFactory.create(leaf);
              scan(leaf, iter);
            });
        reader.close();
      }

      directoryReader = DirectoryReader.open(directory);
      exitableDirectoryReader =
          new ExitableDirectoryReader(
              directoryReader,
              random().nextBoolean() ? infiniteQueryTimeout() : disabledQueryTimeout());
      {
        IndexReader reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));
        final LeafReader leaf = reader.leaves().get(0).reader();
        scan(leaf, dvFactory.create(leaf));
        assertNull(leaf.getNumericDocValues("absent"));
        assertNull(leaf.getBinaryDocValues("absent"));
        assertNull(leaf.getSortedDocValues("absent"));
        assertNull(leaf.getSortedNumericDocValues("absent"));
        assertNull(leaf.getSortedSetDocValues("absent"));

        reader.close();
      }
    }

    directory.close();
  }

