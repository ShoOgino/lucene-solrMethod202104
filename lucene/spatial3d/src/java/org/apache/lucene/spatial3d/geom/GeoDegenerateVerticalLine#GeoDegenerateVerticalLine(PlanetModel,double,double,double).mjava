  /**
   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI
   * -> PI}
   */
  public GeoDegenerateVerticalLine(
      final PlanetModel planetModel,
      final double topLat,
      final double bottomLat,
      final double longitude) {
    super(planetModel);
    // Argument checking
    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)
      throw new IllegalArgumentException("Top latitude out of range");
    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)
      throw new IllegalArgumentException("Bottom latitude out of range");
    if (topLat < bottomLat)
      throw new IllegalArgumentException("Top latitude less than bottom latitude");
    if (longitude < -Math.PI || longitude > Math.PI)
      throw new IllegalArgumentException("Longitude out of range");

    this.topLat = topLat;
    this.bottomLat = bottomLat;
    this.longitude = longitude;

    final double sinTopLat = Math.sin(topLat);
    final double cosTopLat = Math.cos(topLat);
    final double sinBottomLat = Math.sin(bottomLat);
    final double cosBottomLat = Math.cos(bottomLat);
    final double sinLongitude = Math.sin(longitude);
    final double cosLongitude = Math.cos(longitude);

    // Now build the two points
    this.UHC =
        new GeoPoint(
            planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude, topLat, longitude);
    this.LHC =
        new GeoPoint(
            planetModel,
            sinBottomLat,
            sinLongitude,
            cosBottomLat,
            cosLongitude,
            bottomLat,
            longitude);

    this.plane = new Plane(cosLongitude, sinLongitude);

    final double middleLat = (topLat + bottomLat) * 0.5;
    final double sinMiddleLat = Math.sin(middleLat);
    final double cosMiddleLat = Math.cos(middleLat);

    this.centerPoint =
        new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);

    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);
    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);

    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);

    this.planePoints = new GeoPoint[] {UHC, LHC};

    this.edgePoints = new GeoPoint[] {centerPoint};
  }

