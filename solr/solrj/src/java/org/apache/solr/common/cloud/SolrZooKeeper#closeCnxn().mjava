  public void closeCnxn() {
    final Thread t = new Thread(new Runnable() {
      @Override
      public void run() {
        try {
          AccessController.doPrivileged((PrivilegedAction<Void>) this::closeZookeeperChannel);
        } finally {
          spawnedThreads.remove(this);
        }
      }
      
      @SuppressForbidden(reason = "Hack for Zookeeper needs access to private methods.")
      private Void closeZookeeperChannel() {
        final ClientCnxn cnxn = getConnection();
        synchronized (cnxn) {
          try {
            final Field sendThreadFld = cnxn.getClass().getDeclaredField("sendThread");
            sendThreadFld.setAccessible(true);
            Object sendThread = sendThreadFld.get(cnxn);
            if (sendThread != null) {
              Method method = sendThread.getClass().getDeclaredMethod("testableCloseSocket");
              method.setAccessible(true);
              try {
                method.invoke(sendThread);
              } catch (InvocationTargetException e) {
                // is fine
              }
            }
          } catch (Exception e) {
            throw new RuntimeException("Closing Zookeeper send channel failed.", e);
          }
        }
        return null; // Void
      }
    }, "closeCnxn");
    spawnedThreads.add(t);
    t.start();
  }

