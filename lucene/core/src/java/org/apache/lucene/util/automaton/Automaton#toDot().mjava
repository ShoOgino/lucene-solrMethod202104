  /**
   * Returns the dot (graphviz) representation of this automaton. This is extremely useful for
   * visualizing the automaton.
   */
  public String toDot() {
    // TODO: breadth first search so we can get layered output...

    StringBuilder b = new StringBuilder();
    b.append("digraph Automaton {\n");
    b.append("  rankdir = LR\n");
    b.append("  node [width=0.2, height=0.2, fontsize=8]\n");
    final int numStates = getNumStates();
    if (numStates > 0) {
      b.append("  initial [shape=plaintext,label=\"\"]\n");
      b.append("  initial -> 0\n");
    }

    Transition t = new Transition();

    for (int state = 0; state < numStates; state++) {
      b.append("  ");
      b.append(state);
      if (isAccept(state)) {
        b.append(" [shape=doublecircle,label=\"").append(state).append("\"]\n");
      } else {
        b.append(" [shape=circle,label=\"").append(state).append("\"]\n");
      }
      int numTransitions = initTransition(state, t);
      // System.out.println("toDot: state " + state + " has " + numTransitions + " transitions;
      // t.nextTrans=" + t.transitionUpto);
      for (int i = 0; i < numTransitions; i++) {
        getNextTransition(t);
        // System.out.println("  t.nextTrans=" + t.transitionUpto + " t=" + t);
        assert t.max >= t.min;
        b.append("  ");
        b.append(state);
        b.append(" -> ");
        b.append(t.dest);
        b.append(" [label=\"");
        appendCharString(t.min, b);
        if (t.max != t.min) {
          b.append('-');
          appendCharString(t.max, b);
        }
        b.append("\"]\n");
        // System.out.println("  t=" + t);
      }
    }
    b.append('}');
    return b.toString();
  }

