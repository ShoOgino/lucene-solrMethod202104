  private JPanel headerPanel() {
    JPanel header = new JPanel();
    header.setOpaque(false);
    header.setLayout(new BoxLayout(header, BoxLayout.PAGE_AXIS));

    JPanel fieldHeader = new JPanel(new FlowLayout(FlowLayout.LEADING, 3, 3));
    fieldHeader.setOpaque(false);
    fieldHeader.add(
        new JLabel(MessageUtils.getLocalizedMessage("documents.docvalues.label.doc_values")));
    fieldHeader.add(new JLabel(field));
    header.add(fieldHeader);

    JPanel typeHeader = new JPanel(new FlowLayout(FlowLayout.LEADING, 3, 3));
    typeHeader.setOpaque(false);
    typeHeader.add(new JLabel(MessageUtils.getLocalizedMessage("documents.docvalues.label.type")));
    typeHeader.add(new JLabel(docValues.getDvType().toString()));
    header.add(typeHeader);

    JPanel decodeHeader = new JPanel(new FlowLayout(FlowLayout.TRAILING, 3, 3));
    decodeHeader.setOpaque(false);
    decodeHeader.add(new JLabel("decoded as"));
    String[] decoders =
        Arrays.stream(Decoder.values()).map(Decoder::toString).toArray(String[]::new);
    decodersCombo.setModel(new DefaultComboBoxModel<>(decoders));
    decodersCombo.setSelectedItem(Decoder.LONG.toString());
    decodersCombo.addActionListener(listeners::selectDecoder);
    decodeHeader.add(decodersCombo);
    if (docValues.getValues().size() > 0) {
      decodeHeader.setEnabled(false);
    }
    header.add(decodeHeader);

    return header;
  }

