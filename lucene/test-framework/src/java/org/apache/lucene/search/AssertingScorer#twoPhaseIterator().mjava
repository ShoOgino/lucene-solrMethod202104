  @Override
  public TwoPhaseIterator twoPhaseIterator() {
    final TwoPhaseIterator in = this.in.twoPhaseIterator();
    if (in == null) {
      return null;
    }
    final DocIdSetIterator inApproximation = in.approximation();
    assert inApproximation.docID() == doc;
    final DocIdSetIterator assertingApproximation =
        new DocIdSetIterator() {

          @Override
          public int docID() {
            return inApproximation.docID();
          }

          @Override
          public int nextDoc() throws IOException {
            assert state != IteratorState.FINISHED : "advance() called after NO_MORE_DOCS";
            assert docID() + 1 >= lastShallowTarget;
            final int nextDoc = inApproximation.nextDoc();
            assert nextDoc > doc : "backwards advance from: " + doc + " to: " + nextDoc;
            if (nextDoc == NO_MORE_DOCS) {
              state = IteratorState.FINISHED;
            } else {
              state = IteratorState.APPROXIMATING;
            }
            assert inApproximation.docID() == nextDoc;
            return doc = nextDoc;
          }

          @Override
          public int advance(int target) throws IOException {
            assert state != IteratorState.FINISHED : "advance() called after NO_MORE_DOCS";
            assert target > doc : "target must be > docID(), got " + target + " <= " + doc;
            assert target >= lastShallowTarget;
            final int advanced = inApproximation.advance(target);
            assert advanced >= target : "backwards advance from: " + target + " to: " + advanced;
            if (advanced == NO_MORE_DOCS) {
              state = IteratorState.FINISHED;
            } else {
              state = IteratorState.APPROXIMATING;
            }
            assert inApproximation.docID() == advanced;
            return doc = advanced;
          }

          @Override
          public long cost() {
            return inApproximation.cost();
          }
        };
    return new TwoPhaseIterator(assertingApproximation) {
      @Override
      public boolean matches() throws IOException {
        assert state == IteratorState.APPROXIMATING : state;
        final boolean matches = in.matches();
        if (matches) {
          assert AssertingScorer.this.in.iterator().docID() == inApproximation.docID()
              : "Approximation and scorer don't advance synchronously";
          doc = inApproximation.docID();
          state = IteratorState.ITERATING;
        }
        return matches;
      }

      @Override
      public float matchCost() {
        float matchCost = in.matchCost();
        assert !Float.isNaN(matchCost);
        assert matchCost >= 0;
        return matchCost;
      }

      @Override
      public String toString() {
        return "AssertingScorer@asTwoPhaseIterator(" + in + ")";
      }
    };
  }

