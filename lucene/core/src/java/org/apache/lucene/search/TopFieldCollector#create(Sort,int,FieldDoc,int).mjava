  /**
   * Creates a new {@link TopFieldCollector} from the given arguments.
   *
   * <p><b>NOTE</b>: The instances returned by this method pre-allocate a full array of length
   * <code>numHits</code>.
   *
   * @param sort the sort criteria (SortFields).
   * @param numHits the number of results to collect.
   * @param after only hits after this FieldDoc will be collected
   * @param totalHitsThreshold the number of docs to count accurately. If the query matches more
   *     than {@code totalHitsThreshold} hits then its hit count will be a lower bound. On the other
   *     hand if the query matches less than or exactly {@code totalHitsThreshold} hits then the hit
   *     count of the result will be accurate. {@link Integer#MAX_VALUE} may be used to make the hit
   *     count accurate, but this will also make query processing slower. Setting totalHitsThreshold
   *     less than {@link Integer#MAX_VALUE} instructs Lucene to skip non-competitive documents
   *     whenever possible. For numeric sort fields the skipping functionality works when the same
   *     field is indexed both with doc values and points. In this case, there is an assumption that
   *     the same data is stored in these points and doc values.
   * @return a {@link TopFieldCollector} instance which will sort the results by the sort criteria.
   */
  public static TopFieldCollector create(
      Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {
    if (totalHitsThreshold < 0) {
      throw new IllegalArgumentException(
          "totalHitsThreshold must be >= 0, got " + totalHitsThreshold);
    }

    return create(
        sort,
        numHits,
        after,
        HitsThresholdChecker.create(Math.max(totalHitsThreshold, numHits)),
        null /* bottomValueChecker */);
  }

