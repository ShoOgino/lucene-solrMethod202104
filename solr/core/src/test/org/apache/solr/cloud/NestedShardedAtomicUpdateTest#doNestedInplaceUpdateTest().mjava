  @Test
  public void doNestedInplaceUpdateTest() throws Exception {
    assertEquals(4, cloudClient.getZkStateReader().getClusterState().getCollection(DEFAULT_COLLECTION).getSlices().size());
    final String[] ids = {"3", "4", "5", "6"};

    assertEquals("size of ids to index should be the same as the number of clients", clients.size(), ids.length);
    // for now,  we know how ranges will be distributed to shards.
    // may have to look it up in clusterstate if that assumption changes.

    SolrInputDocument doc = sdoc("id", "1", "level_s", "root");

    final SolrParams params = params("wt", "json", "_route_", "1");

    int which = (params.get("_route_").hashCode() & 0x7fffffff) % clients.size();
    SolrClient aClient = clients.get(which);

    indexDocAndRandomlyCommit(aClient, params, doc);

    doc = sdoc("id", "1", "children", map("add", sdocs(sdoc("id", "2", "level_s", "child"))));

    indexDocAndRandomlyCommit(aClient, params, doc);

    doc = sdoc("id", "2", "grandChildren", map("add", sdocs(sdoc("id", ids[0], "level_s", "grand_child"))));

    indexDocAndRandomlyCommit(aClient, params, doc);

    int id1InPlaceCounter = 0;
    int id2InPlaceCounter = 0;
    int id3InPlaceCounter = 0;
    for (int fieldValue = 1; fieldValue < 5; ++fieldValue) {
      // randomly increment a field on a root, middle, and leaf doc
      if (random().nextBoolean()) {
        id1InPlaceCounter++;
        indexDoc(
            getRandomSolrClient(),
            params,
            sdoc("id", "1", "inplace_updatable_int", map("inc", "1")));
      }
      if (random().nextBoolean()) {
        id2InPlaceCounter++;
        indexDoc(
            getRandomSolrClient(),
            params,
            sdoc("id", "2", "inplace_updatable_int", map("inc", "1")));
      }
      if (random().nextBoolean()) {
        id3InPlaceCounter++;
        indexDoc(
            getRandomSolrClient(),
            params, // add root merely to show it doesn't interfere
            sdoc("id", "3", "_root_", "1", "inplace_updatable_int", map("inc", "1")));
      }
      if (random().nextBoolean()) {
        getRandomSolrClient().commit();
      }

      if (random().nextBoolean()) {
        // assert RTG request respects _route_ param
        QueryResponse routeRsp = getRandomSolrClient().query(params("qt","/get", "id","2", "_route_", "1"));
        SolrDocument results = (SolrDocument) routeRsp.getResponse().get("doc");
        assertNotNull("RTG should find doc because _route_ was set to the root documents' ID", results);
        assertEquals("2", results.getFieldValue("id"));
      }

      if (random().nextBoolean()) {
        // assert all docs are indexed under the same root
        assertEquals(0, getRandomSolrClient().query(params("q", "-_root_:1")).getResults().size());
      }

      if (random().nextBoolean()) {
        // assert all docs are indexed inside the same block
        QueryResponse rsp = getRandomSolrClient().query(params("qt","/get", "id","1", "fl", "*, [child]"));
        SolrDocument val = (SolrDocument) rsp.getResponse().get("doc");
        assertEquals("1", val.getFieldValue("id"));
        assertInplaceCounter(id1InPlaceCounter, val);
        @SuppressWarnings({"unchecked"})
        List<SolrDocument> children = (List) val.getFieldValues("children");
        assertEquals(1, children.size());
        SolrDocument childDoc = children.get(0);
        assertEquals("2", childDoc.getFieldValue("id"));
        assertInplaceCounter(id2InPlaceCounter, childDoc);
        @SuppressWarnings({"unchecked"})
        List<SolrDocument> grandChildren = (List) childDoc.getFieldValues("grandChildren");
        assertEquals(1, grandChildren.size());
        SolrDocument grandChild = grandChildren.get(0);
        assertEquals("3", grandChild.getFieldValue("id"));
        assertInplaceCounter(id3InPlaceCounter, grandChild);
      }
    }
  }

