  private TopGroups<BytesRef> slowGrouping(
      GroupDoc[] groupDocs,
      String searchTerm,
      boolean getMaxScores,
      boolean doAllGroups,
      Sort groupSort,
      Sort docSort,
      int topNGroups,
      int docsPerGroup,
      int groupOffset,
      int docOffset) {

    final Comparator<GroupDoc> groupSortComp = getComparator(groupSort);

    Arrays.sort(groupDocs, groupSortComp);
    final HashMap<BytesRef, List<GroupDoc>> groups = new HashMap<>();
    final List<BytesRef> sortedGroups = new ArrayList<>();
    final List<Comparable<?>[]> sortedGroupFields = new ArrayList<>();

    int totalHitCount = 0;
    Set<BytesRef> knownGroups = new HashSet<>();

    // System.out.println("TEST: slowGrouping");
    for (GroupDoc d : groupDocs) {
      // TODO: would be better to filter by searchTerm before sorting!
      if (!d.content.startsWith(searchTerm)) {
        continue;
      }
      totalHitCount++;
      // System.out.println("  match id=" + d.id + " score=" + d.score);

      if (doAllGroups) {
        if (!knownGroups.contains(d.group)) {
          knownGroups.add(d.group);
          // System.out.println("    add group=" + groupToString(d.group));
        }
      }

      List<GroupDoc> l = groups.get(d.group);
      if (l == null) {
        // System.out.println("    add sortedGroup=" + groupToString(d.group));
        sortedGroups.add(d.group);
        sortedGroupFields.add(fillFields(d, groupSort));
        l = new ArrayList<>();
        groups.put(d.group, l);
      }
      l.add(d);
    }

    if (groupOffset >= sortedGroups.size()) {
      // slice is out of bounds
      return null;
    }

    final int limit = Math.min(groupOffset + topNGroups, groups.size());

    final Comparator<GroupDoc> docSortComp = getComparator(docSort);
    @SuppressWarnings({"unchecked", "rawtypes"})
    final GroupDocs<BytesRef>[] result = new GroupDocs[limit - groupOffset];
    int totalGroupedHitCount = 0;
    for (int idx = groupOffset; idx < limit; idx++) {
      final BytesRef group = sortedGroups.get(idx);
      final List<GroupDoc> docs = groups.get(group);
      totalGroupedHitCount += docs.size();
      Collections.sort(docs, docSortComp);
      final ScoreDoc[] hits;
      if (docs.size() > docOffset) {
        final int docIDXLimit = Math.min(docOffset + docsPerGroup, docs.size());
        hits = new ScoreDoc[docIDXLimit - docOffset];
        for (int docIDX = docOffset; docIDX < docIDXLimit; docIDX++) {
          final GroupDoc d = docs.get(docIDX);
          final FieldDoc fd;
          fd = new FieldDoc(d.id, Float.NaN, fillFields(d, docSort));
          hits[docIDX - docOffset] = fd;
        }
      } else {
        hits = new ScoreDoc[0];
      }

      result[idx - groupOffset] =
          new GroupDocs<>(
              Float.NaN,
              0.0f,
              new TotalHits(docs.size(), TotalHits.Relation.EQUAL_TO),
              hits,
              group,
              sortedGroupFields.get(idx));
    }

    if (doAllGroups) {
      return new TopGroups<>(
          new TopGroups<>(
              groupSort.getSort(),
              docSort.getSort(),
              totalHitCount,
              totalGroupedHitCount,
              result,
              Float.NaN),
          knownGroups.size());
    } else {
      return new TopGroups<>(
          groupSort.getSort(),
          docSort.getSort(),
          totalHitCount,
          totalGroupedHitCount,
          result,
          Float.NaN);
    }
  }

