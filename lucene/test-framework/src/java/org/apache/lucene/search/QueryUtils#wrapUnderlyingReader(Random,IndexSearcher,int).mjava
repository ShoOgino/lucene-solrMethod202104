  /**
   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader is a MultiReader
   * containing the Reader of the original IndexSearcher, as well as several "empty" IndexReaders --
   * some of which will have deleted documents in them. This new IndexSearcher should behave exactly
   * the same as the original IndexSearcher.
   *
   * @param s the searcher to wrap
   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s
   *     will be the last sub
   */
  public static IndexSearcher wrapUnderlyingReader(
      Random random, final IndexSearcher s, final int edge) throws IOException {

    IndexReader r = s.getIndexReader();

    // we can't put deleted docs before the nested reader, because
    // it will throw off the docIds
    IndexReader[] readers =
        new IndexReader[] {
          edge < 0 ? r : new MultiReader(),
          new MultiReader(),
          new MultiReader(
              edge < 0 ? emptyReader(4) : new MultiReader(),
              new MultiReader(),
              0 == edge ? r : new MultiReader()),
          0 < edge ? new MultiReader() : emptyReader(7),
          new MultiReader(),
          new MultiReader(
              0 < edge ? new MultiReader() : emptyReader(5),
              new MultiReader(),
              0 < edge ? r : new MultiReader())
        };

    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));
    out.setSimilarity(s.getSimilarity());
    return out;
  }

