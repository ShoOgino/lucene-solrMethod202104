    private void flushBlock() throws IOException {
      // System.out.println("BTW.flushBlock seg=" + segment + " pendingCount=" + pendingCount + "
      // fp=" + out.getFilePointer());

      // First pass: compute common prefix for all terms
      // in the block, against term before first term in
      // this block:
      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());
      for (int termCount = 1; termCount < pendingCount; termCount++) {
        commonPrefix =
            Math.min(
                commonPrefix, sharedPrefix(lastPrevTerm.get(), pendingTerms[termCount].term.get()));
      }

      out.writeVInt(pendingCount);
      out.writeVInt(commonPrefix);

      // 2nd pass: write suffixes, as separate byte[] blob
      for (int termCount = 0; termCount < pendingCount; termCount++) {
        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;
        // TODO: cutover to better intblock codec, instead
        // of interleaving here:
        bytesWriter.writeVInt(suffix);
        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);
      }
      out.writeVInt(Math.toIntExact(bytesWriter.size()));
      bytesWriter.copyTo(out);
      bytesWriter.reset();

      // 3rd pass: write the freqs as byte[] blob
      // TODO: cutover to better intblock codec.  simple64?
      // write prefix, suffix first:
      for (int termCount = 0; termCount < pendingCount; termCount++) {
        final BlockTermState state = pendingTerms[termCount].state;
        assert state != null;
        bytesWriter.writeVInt(state.docFreq);
        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {
          bytesWriter.writeVLong(state.totalTermFreq - state.docFreq);
        }
      }
      out.writeVInt(Math.toIntExact(bytesWriter.size()));
      bytesWriter.copyTo(out);
      bytesWriter.reset();

      // 4th pass: write the metadata
      boolean absolute = true;
      for (int termCount = 0; termCount < pendingCount; termCount++) {
        final BlockTermState state = pendingTerms[termCount].state;
        postingsWriter.encodeTerm(bytesWriter, fieldInfo, state, absolute);
        absolute = false;
      }
      out.writeVInt(Math.toIntExact(bytesWriter.size()));
      bytesWriter.copyTo(out);
      bytesWriter.reset();

      lastPrevTerm.copyBytes(pendingTerms[pendingCount - 1].term);
      pendingCount = 0;
    }

