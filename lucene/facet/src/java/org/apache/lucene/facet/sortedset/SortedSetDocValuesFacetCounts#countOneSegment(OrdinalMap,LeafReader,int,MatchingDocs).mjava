  private void countOneSegment(
      OrdinalMap ordinalMap, LeafReader reader, int segOrd, MatchingDocs hits) throws IOException {
    SortedSetDocValues segValues = reader.getSortedSetDocValues(field);
    if (segValues == null) {
      // nothing to count
      return;
    }

    DocIdSetIterator it;
    if (hits == null) {
      it = segValues;
    } else {
      it = ConjunctionDISI.intersectIterators(Arrays.asList(hits.bits.iterator(), segValues));
    }

    // TODO: yet another option is to count all segs
    // first, only in seg-ord space, and then do a
    // merge-sort-PQ in the end to only "resolve to
    // global" those seg ords that can compete, if we know
    // we just want top K?  ie, this is the same algo
    // that'd be used for merging facets across shards
    // (distributed faceting).  but this has much higher
    // temp ram req'ts (sum of number of ords across all
    // segs)
    if (ordinalMap != null) {
      final LongValues ordMap = ordinalMap.getGlobalOrds(segOrd);

      int numSegOrds = (int) segValues.getValueCount();

      if (hits != null && hits.totalHits < numSegOrds / 10) {
        // System.out.println("    remap as-we-go");
        // Remap every ord to global ord as we iterate:
        for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {
          int term = (int) segValues.nextOrd();
          while (term != SortedSetDocValues.NO_MORE_ORDS) {
            // System.out.println("      segOrd=" + segOrd + " ord=" + term + " globalOrd=" +
            // ordinalMap.getGlobalOrd(segOrd, term));
            counts[(int) ordMap.get(term)]++;
            term = (int) segValues.nextOrd();
          }
        }
      } else {
        // System.out.println("    count in seg ord first");

        // First count in seg-ord space:
        final int[] segCounts = new int[numSegOrds];
        for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {
          int term = (int) segValues.nextOrd();
          while (term != SortedSetDocValues.NO_MORE_ORDS) {
            // System.out.println("      ord=" + term);
            segCounts[term]++;
            term = (int) segValues.nextOrd();
          }
        }

        // Then, migrate to global ords:
        for (int ord = 0; ord < numSegOrds; ord++) {
          int count = segCounts[ord];
          if (count != 0) {
            // System.out.println("    migrate segOrd=" + segOrd + " ord=" + ord + " globalOrd=" +
            // ordinalMap.getGlobalOrd(segOrd, ord));
            counts[(int) ordMap.get(ord)] += count;
          }
        }
      }
    } else {
      // No ord mapping (e.g., single segment index):
      // just aggregate directly into counts:
      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {
        int term = (int) segValues.nextOrd();
        while (term != SortedSetDocValues.NO_MORE_ORDS) {
          counts[term]++;
          term = (int) segValues.nextOrd();
        }
      }
    }
  }

