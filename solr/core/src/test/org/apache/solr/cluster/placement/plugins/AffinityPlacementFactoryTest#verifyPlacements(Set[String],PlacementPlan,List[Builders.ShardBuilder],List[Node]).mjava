  /**
   * Verifies that a computed set of placements does match the expected placement on nodes.
   * @param expectedPlacements a set of strings of the form {@code "1 NRT 3"} where 1 would be the shard index, NRT the
   *                           replica type and 3 the node on which the replica is placed. Shards are 1-based. Nodes 0-based.<p>
   *                           Read carefully: <b>shard index</b> and not shard name. Index in the <b>order</b> of shards as defined
   *                           for the collection in the call to {@link org.apache.solr.cluster.placement.Builders.CollectionBuilder#customCollectionSetup(List, List)}
   * @param shardBuilders the shard builders are passed here to get the shard names by index (1-based) rather than by
   *                      parsing the shard names (which would break if we change the shard naming scheme).
   */
  private static void verifyPlacements(Set<String> expectedPlacements, PlacementPlan placementPlan,
                                       List<Builders.ShardBuilder> shardBuilders, List<Node> liveNodes) {
    Set<ReplicaPlacement> computedPlacements = placementPlan.getReplicaPlacements();

    // Prepare structures for looking up shard name index and node index
    Map<String, Integer> shardNumbering = new HashMap<>();
    int index = 1; // first shard is 1 not 0
    for (Builders.ShardBuilder sb : shardBuilders) {
      shardNumbering.put(sb.getShardName(), index++);
    }
    Map<Node, Integer> nodeNumbering = new HashMap<>();
    index = 0;
    for (Node n : liveNodes) {
      nodeNumbering.put(n, index++);
    }

    if (expectedPlacements.size() != computedPlacements.size()) {
      fail("Wrong number of placements, expected " + expectedPlacements.size() + " computed " + computedPlacements.size() + ". " +
          getExpectedVsComputedPlacement(expectedPlacements, computedPlacements, shardNumbering, nodeNumbering));
    }

    Set<String> expected = new HashSet<>(expectedPlacements);
    for (ReplicaPlacement p : computedPlacements) {
      String lookUpPlacementResult = shardNumbering.get(p.getShardName()) + " " + p.getReplicaType().name() + " " +  nodeNumbering.get(p.getNode());
      if (!expected.remove(lookUpPlacementResult)) {
        fail("Computed placement [" + lookUpPlacementResult + "] not expected. " +
            getExpectedVsComputedPlacement(expectedPlacements, computedPlacements, shardNumbering, nodeNumbering));
      }
    }
  }

