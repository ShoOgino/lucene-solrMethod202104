  public void testForceMergeDeletes() throws Exception {
    Directory dir = newDirectory();
    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField("soft_delete");
    config.setMergePolicy(
        newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge
    if (random().nextBoolean()) {
      config.setMergePolicy(
          new SoftDeletesRetentionMergePolicy(
              "soft_delete", () -> new MatchNoDocsQuery(), config.getMergePolicy()));
    }
    IndexWriter writer = new IndexWriter(dir, config);
    // The first segment includes d1 and d2
    for (int i = 0; i < 2; i++) {
      Document d = new Document();
      d.add(new StringField("id", Integer.toString(i), Field.Store.YES));
      writer.addDocument(d);
    }
    writer.flush();
    // The second segment includes only the tombstone
    Document tombstone = new Document();
    tombstone.add(new NumericDocValuesField("soft_delete", 1));
    writer.softUpdateDocument(
        new Term("id", "1"), tombstone, new NumericDocValuesField("soft_delete", 1));
    writer.flush(
        false,
        true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below
    // Now we have have two segments - both having soft-deleted documents.
    // We expect any MP to merge these segments into one segment
    // when calling forceMergeDeletes.
    writer.forceMergeDeletes(true);
    assertEquals(1, writer.cloneSegmentInfos().size());
    assertEquals(1, writer.getDocStats().numDocs);
    assertEquals(1, writer.getDocStats().maxDoc);
    writer.close();
    dir.close();
  }

