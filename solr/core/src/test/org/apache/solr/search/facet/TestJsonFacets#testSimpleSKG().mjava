  @Test
  public void testSimpleSKG() throws Exception {
    Client client = Client.localClient();
    indexSimple(client);

    // using relatedness() as a top level stat, not nested under any facet
    // (not particularly useful, but shouldn't error either)
    assertJQ(req("q", "cat_s:[* TO *]", "rows", "0",
                 "fore", "where_s:NY", "back", "*:*",
                 "json.facet", " { skg: 'relatedness($fore,$back)' }")
             , "facets=={"
             + "   count:5, "
             + "   skg : { relatedness: 0.00699,"
             + "           foreground_popularity: 0.33333,"
             + "           background_popularity: 0.83333,"
             + "   } }"
             );
    
    // simple single level facet w/skg stat & (re)sorting
    for (String sort : Arrays.asList("sort:'index asc'",
                                     "sort:'y desc'",
                                     "sort:'z desc'",
                                     "sort:'skg desc'",
                                     "prelim_sort:'count desc', sort:'index asc'",
                                     "prelim_sort:'count desc', sort:'y desc'",
                                     "prelim_sort:'count desc', sort:'z desc'",
                                     "prelim_sort:'count desc', sort:'skg desc'")) {
      // the relatedness score of each of our cat_s values is (conviniently) also alphabetical order,
      // (and the same order as 'sum(num_i) desc' & 'min(num_i) desc')
      //
      // So all of these re/sort options should produce identical output (since the num buckets is < limit)
      // - Testing "index" sort allows the randomized use of "stream" processor as default to be tested.
      // - Testing (re)sorts on other stats sanity checks code paths where relatedness() is a "defered" Agg
      for (String limit : Arrays.asList(", ", ", limit:5, ", ", limit:-1, ")) {
        // results shouldn't change regardless of our limit param"
        assertJQ(req("q", "cat_s:[* TO *]", "rows", "0",
                     "fore", "where_s:NY", "back", "*:*",
                     "json.facet", ""
                     + "{x: { type: terms, field: 'cat_s', "+sort + limit
                     + "      facet: { skg: 'relatedness($fore,$back)', y:'sum(num_i)', z:'min(num_i)' } } }")
                 , "facets=={count:5, x:{ buckets:["
                 + "   { val:'A', count:2, y:5.0, z:2, "
                 + "     skg : { relatedness: 0.00554, "
                 //+ "             foreground_count: 1, "
                 //+ "             foreground_size: 2, "
                 //+ "             background_count: 2, "
                 //+ "             background_size: 6,"
                 + "             foreground_popularity: 0.16667,"
                 + "             background_popularity: 0.33333, },"
                 + "   }, "
                 + "   { val:'B', count:3, y:-3.0, z:-5, "
                 + "     skg : { relatedness: 0.0, " // perfectly average and uncorrolated
                 //+ "             foreground_count: 1, "
                 //+ "             foreground_size: 2, "
                 //+ "             background_count: 3, "
                 //+ "             background_size: 6,"
                 + "             foreground_popularity: 0.16667,"
                 + "             background_popularity: 0.5 },"
                 + "   } ] } } "
                 );
        // same query with a prefix of 'B' should produce only a single bucket with exact same results
        assertJQ(req("q", "cat_s:[* TO *]", "rows", "0",
                     "fore", "where_s:NY", "back", "*:*",
                     "json.facet", ""
                     + "{x: { type: terms, field: 'cat_s', prefix:'B', "+sort + limit
                     + "      facet: { skg: 'relatedness($fore,$back)', y:'sum(num_i)', z:'min(num_i)' } } }")
                 , "facets=={count:5, x:{ buckets:["
                 + "   { val:'B', count:3, y:-3.0, z:-5, "
                 + "     skg : { relatedness: 0.0, " // perfectly average and uncorrolated
                 //+ "             foreground_count: 1, "
                 //+ "             foreground_size: 2, "
                 //+ "             background_count: 3, "
                 //+ "             background_size: 6,"
                 + "             foreground_popularity: 0.16667,"
                 + "             background_popularity: 0.5 },"
                 + "   } ] } } "
                 );
      }
    }

    // relatedness shouldn't be computed for allBuckets, but it also shouldn't cause any problems
    for (String sort : Arrays.asList("sort:'y desc'",
                                     "sort:'z desc'",
                                     "sort:'skg desc'",
                                     "sort:'index asc'",
                                     "prelim_sort:'count desc', sort:'skg desc'")) {
      // the relatedness score of each of our cat_s values is (conveniently) also alphabetical order,
      // (and the same order as 'sum(num_i) desc' & 'min(num_i) desc')
      //
      // So all of these re/sort options should produce identical output (since the num buckets is < limit)
      // - Testing "index" sort allows the randomized use of "stream" processor as default to be tested.
      // - Testing (re)sorts on other stats sanity checks code paths where relatedness() is a "deferred" Agg
      for (String limit : Arrays.asList(", ", ", limit:5, ", ", limit:-1, ")) {
        // results shouldn't change regardless of our limit param"
        assertJQ(req("q", "cat_s:[* TO *]", "rows", "0",
                     "fore", "where_s:NY", "back", "*:*",
                     "json.facet", ""
                     + "{x: { type: terms, field: 'cat_s', allBuckets:true, "+sort + limit
                     + "      facet: { skg: 'relatedness($fore,$back)', y:'sum(num_i)', z:'min(num_i)' } } }")
                 , "facets=={count:5, x:{ "
                 // 'skg' key must not exist in th allBuckets bucket
                 + "                      allBuckets: { count:5, y:2.0, z:-5 },"
                 + "buckets:["
                 + "   { val:'A', count:2, y:5.0, z:2, "
                 + "     skg : { relatedness: 0.00554, "
                 //+ "             foreground_count: 1, "
                 //+ "             foreground_size: 2, "
                 //+ "             background_count: 2, "
                 //+ "             background_size: 6,"
                 + "             foreground_popularity: 0.16667,"
                 + "             background_popularity: 0.33333, },"
                 + "   }, "
                 + "   { val:'B', count:3, y:-3.0, z:-5, "
                 + "     skg : { relatedness: 0.0, " // perfectly average and uncorrelated
                 //+ "             foreground_count: 1, "
                 //+ "             foreground_size: 2, "
                 //+ "             background_count: 3, "
                 //+ "             background_size: 6,"
                 + "             foreground_popularity: 0.16667,"
                 + "             background_popularity: 0.5 },"
                 + "   } ] } } "
                 );
        
        // really special case: allBuckets when there are no regular buckets...
        assertJQ(req("q", "cat_s:[* TO *]", "rows", "0",
                     "fore", "where_s:NY", "back", "*:*",
                     "json.facet", ""
                     + "{x: { type: terms, field: 'bogus_field_s', allBuckets:true, "+sort + limit
                     + "      facet: { skg: 'relatedness($fore,$back)', y:'sum(num_i)', z:'min(num_i)' } } }")
                 , "facets=={count:5, x:{ "
                 // 'skg' key (as well as 'z' since it's a min) must not exist in the allBuckets bucket
                 + "                      allBuckets: { count:0, y:0.0 },"
                 + "buckets:[ ]"
                 + "   } } "
                 );

        
      }
    }

    
    // trivial sanity check that we can (re)sort on SKG after pre-sorting on count...
    // ...and it's only computed for the top N buckets (based on our pre-sort)
    for (int overrequest : Arrays.asList(0, 1, 42)) {
      // based on our counts & relatedness values, the blackbox output should be the same for both
      // overrequest values ... only DebugAgg stats should change...
      DebugAgg.Acc.collectDocs.set(0);
      DebugAgg.Acc.collectDocSets.set(0);
      
      assertJQ(req("q", "cat_s:[* TO *]", "rows", "0",
                   "fore", "where_s:NJ", "back", "*:*",
                   "json.facet", ""
                   + "{x: { type: terms, field: 'cat_s', prelim_sort: 'count desc', sort:'skg desc', "
                   + "      limit: 1, overrequest: " + overrequest + ", "
                   + "      facet: { skg: 'debug(wrap,relatedness($fore,$back))' } } }")
               , "facets=={count:5, x:{ buckets:["
               + "   { val:'B', count:3, "
               + "     skg : { relatedness: 0.00638, " 
               //+ "             foreground_count: 2, "
               //+ "             foreground_size: 3, "
               //+ "             background_count: 3, "
               //+ "             background_size: 6,"
               + "             foreground_popularity: 0.33333,"
               + "             background_popularity: 0.5 },"
               + "   }, "
               + " ] } } "
               );
      // at most 2 buckets, regardless of overrequest...
      assertEqualsAndReset(0 < overrequest ? 2 : 1, DebugAgg.Acc.collectDocSets);
      assertEqualsAndReset(0, DebugAgg.Acc.collectDocs);
    }
      
    // SKG used in multiple nested facets
    //
    // we'll re-use these params in 2 requests, one will simulate a shard request
    final SolrParams nestedSKG = params
      ("q", "cat_s:[* TO *]", "rows", "0", "fore", "num_i:[-1000 TO 0]", "back", "*:*", "json.facet"
       , "{x: { type: terms, field: 'cat_s', sort: 'skg desc', "
       + "      facet: { skg: 'relatedness($fore,$back)', "
       + "               y:   { type: terms, field: 'where_s', sort: 'skg desc', "
       + "                      facet: { skg: 'relatedness($fore,$back)' } } } } }");
       
    // plain old request
    assertJQ(req(nestedSKG)
             , "facets=={count:5, x:{ buckets:["
             + "   { val:'B', count:3, "
             + "     skg : { relatedness: 0.01539, "
             //+ "             foreground_count: 2, "
             //+ "             foreground_size: 2, "
             //+ "             background_count: 3, "
             //+ "             background_size: 6, "
             + "             foreground_popularity: 0.33333,"
             + "             background_popularity: 0.5 },"
             + "     y : { buckets:["
             + "            {  val:'NY', count: 1, "
             + "               skg : { relatedness: 0.00554, " 
             //+ "                       foreground_count: 1, "
             //+ "                       foreground_size: 2, "
             //+ "                       background_count: 2, "
             //+ "                       background_size: 6, "
             + "                       foreground_popularity: 0.16667, "
             + "                       background_popularity: 0.33333, "
             + "            } }, "
             + "            {  val:'NJ', count: 2, "
             + "               skg : { relatedness: 0.0, " // perfectly average and uncorrolated
             //+ "                       foreground_count: 1, "
             //+ "                       foreground_size: 2, "
             //+ "                       background_count: 3, "
             //+ "                       background_size: 6, "
             + "                       foreground_popularity: 0.16667, "
             + "                       background_popularity: 0.5, "
             + "            } }, "
             + "     ] } "
             + "   }, "
             + "   { val:'A', count:2, "
             + "     skg : { relatedness:-0.01097, "
             //+ "             foreground_count: 0, "
             //+ "             foreground_size: 2, "
             //+ "             background_count: 2, "
             //+ "             background_size: 6,"
             + "             foreground_popularity: 0.0,"
             + "             background_popularity: 0.33333 },"
             + "     y : { buckets:["
             + "            {  val:'NJ', count: 1, "
             + "               skg : { relatedness: 0.0, " // perfectly average and uncorrolated
             //+ "                       foreground_count: 0, "
             //+ "                       foreground_size: 0, "
             //+ "                       background_count: 3, "
             //+ "                       background_size: 6, "
             + "                       foreground_popularity: 0.0, "
             + "                       background_popularity: 0.5, "
             + "            } }, "
             + "            {  val:'NY', count: 1, "
             + "               skg : { relatedness: 0.0, " // perfectly average and uncorrolated
             //+ "                       foreground_count: 0, "
             //+ "                       foreground_size: 0, "
             //+ "                       background_count: 2, "
             //+ "                       background_size: 6, "
             + "                       foreground_popularity: 0.0, "
             + "                       background_popularity: 0.33333, "
             + "            } }, "
             + "   ] } } ] } } ");

    // same request, but with whitebox params testing isShard
    // to verify the raw counts/sizes
    assertJQ(req(nestedSKG,
                 // fake an initial shard request
                 "distrib", "false", "isShard", "true", "_facet_", "{}",
                 "shards.purpose", ""+FacetModule.PURPOSE_GET_JSON_FACETS)
             , "facets=={count:5, x:{ buckets:["
             + "   { val:'B', count:3, "
             + "     skg : { "
             + "             foreground_count: 2, "
             + "             foreground_size: 2, "
             + "             background_count: 3, "
             + "             background_size: 6 }, "
             + "     y : { buckets:["
             + "            {  val:'NY', count: 1, "
             + "               skg : { " 
             + "                       foreground_count: 1, "
             + "                       foreground_size: 2, "
             + "                       background_count: 2, "
             + "                       background_size: 6, "
             + "            } }, "
             + "            {  val:'NJ', count: 2, "
             + "               skg : { " 
             + "                       foreground_count: 1, "
             + "                       foreground_size: 2, "
             + "                       background_count: 3, "
             + "                       background_size: 6, "
             + "            } }, "
             + "     ] } "
             + "   }, "
             + "   { val:'A', count:2, "
             + "     skg : { " 
             + "             foreground_count: 0, "
             + "             foreground_size: 2, "
             + "             background_count: 2, "
             + "             background_size: 6 },"
             + "     y : { buckets:["
             + "            {  val:'NJ', count: 1, "
             + "               skg : { " 
             + "                       foreground_count: 0, "
             + "                       foreground_size: 0, "
             + "                       background_count: 3, "
             + "                       background_size: 6, "
             + "            } }, "
             + "            {  val:'NY', count: 1, "
             + "               skg : { " 
             + "                       foreground_count: 0, "
             + "                       foreground_size: 0, "
             + "                       background_count: 2, "
             + "                       background_size: 6, "
             + "            } }, "
             + "   ] } } ] } } ");

    
    // SKG w/min_pop (NOTE: incredibly contrived and not-useful fore/back for testing min_pop w/shard sorting)
    //
    // we'll re-use these params in 2 requests, one will simulate a shard request
    final SolrParams minPopSKG = params
      ("q", "cat_s:[* TO *]", "rows", "0", "fore", "num_i:[0 TO 1000]", "back", "cat_s:B", "json.facet"
       , "{x: { type: terms, field: 'cat_s', sort: 'skg desc', "
       + "      facet: { skg: { type:func, func:'relatedness($fore,$back)', "
       + "                      min_popularity: 0.001 }" 
       + "             } } }");

    // plain old request
    assertJQ(req(minPopSKG)
             , "facets=={count:5, x:{ buckets:["
             + "   { val:'B', count:3, "
             + "     skg : { relatedness: -1.0, "
             //+ "             foreground_count: 1, "
             //+ "             foreground_size: 3, "
             //+ "             background_count: 3, "
             //+ "             background_size: 3, "
             + "             foreground_popularity: 0.33333," 
             + "             background_popularity: 1.0," 
             + "   } }, "
             + "   { val:'A', count:2, "
             + "     skg : { relatedness:'-Infinity', " // bg_pop is below min_pop (otherwise 1.0)
             //+ "             foreground_count: 2, "
             //+ "             foreground_size: 3, "
             //+ "             background_count: 0, "
             //+ "             background_size: 3, "
             + "             foreground_popularity: 0.66667,"
             + "             background_popularity: 0.0,"
             + "   } } ] } } ");

    // same request, but with whitebox params testing isShard
    // to verify the raw counts/sizes and that per-shard sorting doesn't pre-emptively sort "A" to the bottom
    assertJQ(req(minPopSKG,
                 // fake an initial shard request
                 "distrib", "false", "isShard", "true", "_facet_", "{}",
                 "shards.purpose", ""+FacetModule.PURPOSE_GET_JSON_FACETS)
             , "facets=={count:5, x:{ buckets:["
             + "   { val:'A', count:2, "
             + "     skg : { " 
             + "             foreground_count: 2, "
             + "             foreground_size: 3, "
             + "             background_count: 0, "
             + "             background_size: 3, "
             + "   } }, "
             + "   { val:'B', count:3, "
             + "     skg : { "
             + "             foreground_count: 1, "
             + "             foreground_size: 3, "
             + "             background_count: 3, "
             + "             background_size: 3, "
             + "   } } ] } }");
  }

