  /** Returns true if there is a new token. */
  protected boolean peekToken() throws IOException {
    if (DEBUG) {
      System.out.println(
          "LTF.peekToken inputPos="
              + inputPos
              + " outputPos="
              + outputPos
              + " tokenPending="
              + tokenPending);
    }
    assert !end;
    assert inputPos == -1 || outputPos <= inputPos;
    if (tokenPending) {
      positions.get(inputPos).add(captureState());
      tokenPending = false;
    }
    final boolean gotToken = input.incrementToken();
    if (DEBUG) {
      System.out.println("  input.incrToken() returned " + gotToken);
    }
    if (gotToken) {
      inputPos += posIncAtt.getPositionIncrement();
      assert inputPos >= 0;
      if (DEBUG) {
        System.out.println("  now inputPos=" + inputPos);
      }

      final Position startPosData = positions.get(inputPos);
      final Position endPosData = positions.get(inputPos + posLenAtt.getPositionLength());

      final int startOffset = offsetAtt.startOffset();
      if (startPosData.startOffset == -1) {
        startPosData.startOffset = startOffset;
      } else {
        // Make sure our input isn't messing up offsets:
        assert startPosData.startOffset == startOffset
            : "prev startOffset="
                + startPosData.startOffset
                + " vs new startOffset="
                + startOffset
                + " inputPos="
                + inputPos;
      }

      final int endOffset = offsetAtt.endOffset();
      if (endPosData.endOffset == -1) {
        endPosData.endOffset = endOffset;
      } else {
        // Make sure our input isn't messing up offsets:
        assert endPosData.endOffset == endOffset
            : "prev endOffset="
                + endPosData.endOffset
                + " vs new endOffset="
                + endOffset
                + " inputPos="
                + inputPos;
      }

      tokenPending = true;
    } else {
      end = true;
    }

    return gotToken;
  }

