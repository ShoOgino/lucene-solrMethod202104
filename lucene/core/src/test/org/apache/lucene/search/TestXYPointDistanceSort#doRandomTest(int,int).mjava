  private void doRandomTest(int numDocs, int numQueries) throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig iwc = newIndexWriterConfig();
    // else seeds may not to reproduce:
    iwc.setMergeScheduler(new SerialMergeScheduler());
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);

    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      doc.add(new StoredField("id", i));
      doc.add(new NumericDocValuesField("id", i));
      if (random().nextInt(10) > 7) {
        float x = ShapeTestUtil.nextFloat(random());
        float y = ShapeTestUtil.nextFloat(random());

        doc.add(new XYDocValuesField("field", x, y));
        doc.add(new StoredField("x", x));
        doc.add(new StoredField("y", y));
      } // otherwise "missing"
      writer.addDocument(doc);
    }
    IndexReader reader = writer.getReader();
    IndexSearcher searcher = newSearcher(reader);

    for (int i = 0; i < numQueries; i++) {
      float x = ShapeTestUtil.nextFloat(random());
      float y = ShapeTestUtil.nextFloat(random());
      double missingValue = Double.POSITIVE_INFINITY;

      Result expected[] = new Result[reader.maxDoc()];

      for (int doc = 0; doc < reader.maxDoc(); doc++) {
        Document targetDoc = reader.document(doc);
        final double distance;
        if (targetDoc.getField("x") == null) {
          distance = missingValue; // missing
        } else {
          double docX = targetDoc.getField("x").numericValue().floatValue();
          double docY = targetDoc.getField("y").numericValue().floatValue();
          distance = cartesianDistance(x, y, docX, docY);
        }
        int id = targetDoc.getField("id").numericValue().intValue();
        expected[doc] = new Result(id, distance);
      }

      Arrays.sort(expected);

      // randomize the topN a bit
      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());
      // sort by distance, then ID
      SortField distanceSort = XYDocValuesField.newDistanceSort("field", x, y);
      distanceSort.setMissingValue(missingValue);
      Sort sort = new Sort(distanceSort, new SortField("id", SortField.Type.INT));

      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);
      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {
        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];
        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);
        assertEquals(expected[resultNumber], actual);
      }

      // get page2 with searchAfter()
      if (topN < reader.maxDoc()) {
        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);
        TopDocs topDocs2 =
            searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);
        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {
          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];
          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);
          assertEquals(expected[topN + resultNumber], actual);
        }
      }
    }
    reader.close();
    writer.close();
    dir.close();
  }

