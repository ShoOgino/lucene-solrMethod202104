  private void doTestChangeIndexOptionsViaAddDocument(
      boolean preExistingField, boolean onNewSegment, IndexOptions from, IndexOptions to)
      throws IOException {
    Directory dir = newDirectory();
    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
    if (preExistingField) {
      w.addDocument(Collections.singleton(new IntPoint("foo", 1)));
      if (onNewSegment) {
        DirectoryReader.open(w).close();
      }
    }
    FieldType ft1 = new FieldType(TextField.TYPE_STORED);
    ft1.setIndexOptions(from);
    w.addDocument(Collections.singleton(new Field("foo", "bar", ft1)));
    if (onNewSegment) {
      DirectoryReader.open(w).close();
    }
    FieldType ft2 = new FieldType(TextField.TYPE_STORED);
    ft2.setIndexOptions(to);
    if (from == IndexOptions.NONE || to == IndexOptions.NONE || from == to) {
      w.addDocument(Collections.singleton(new Field("foo", "bar", ft2))); // no exception
      w.forceMerge(1);
      try (LeafReader r = getOnlyLeafReader(DirectoryReader.open(w))) {
        IndexOptions expected = from == IndexOptions.NONE ? to : from;
        assertEquals(expected, r.getFieldInfos().fieldInfo("foo").getIndexOptions());
      }
    } else {
      IllegalArgumentException e =
          expectThrows(
              IllegalArgumentException.class,
              () -> w.addDocument(Collections.singleton(new Field("foo", "bar", ft2))));
      assertEquals(
          "cannot change field \"foo\" from index options="
              + from
              + " to inconsistent index options="
              + to,
          e.getMessage());
    }
    w.close();
    dir.close();
  }

