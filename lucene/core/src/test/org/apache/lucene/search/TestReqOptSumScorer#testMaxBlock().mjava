  public void testMaxBlock() throws IOException {
    Directory dir = newDirectory();
    IndexWriter w =
        new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));
    FieldType ft = new FieldType();
    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);
    ft.setTokenized(true);
    ft.freeze();

    for (int i = 0; i < 1024; i++) {
      // create documents with an increasing number of As and one B
      Document doc = new Document();
      doc.add(new Field("foo", new TermFreqTokenStream("a", i + 1), ft));
      if (random().nextFloat() < 0.5f) {
        doc.add(new Field("foo", new TermFreqTokenStream("b", 1), ft));
      }
      w.addDocument(doc);
    }
    w.forceMerge(1);
    w.close();
    IndexReader reader = DirectoryReader.open(dir);
    IndexSearcher searcher = newSearcher(reader);
    searcher.setSimilarity(new TestSimilarity.SimpleSimilarity());
    // freq == score
    // searcher.setSimilarity(new TestSimilarity.SimpleSimilarity());
    final Query reqQ = new TermQuery(new Term("foo", "a"));
    final Query optQ = new TermQuery(new Term("foo", "b"));
    final Query boolQ =
        new BooleanQuery.Builder().add(reqQ, Occur.MUST).add(optQ, Occur.SHOULD).build();
    Scorer actual = reqOptScorer(searcher, reqQ, optQ, true);
    Scorer expected =
        searcher
            .createWeight(boolQ, ScoreMode.COMPLETE, 1)
            .scorer(searcher.getIndexReader().leaves().get(0));
    actual.setMinCompetitiveScore(Math.nextUp(1));
    // Checks that all blocks are fully visited
    for (int i = 0; i < 1024; i++) {
      assertEquals(i, actual.iterator().nextDoc());
      assertEquals(i, expected.iterator().nextDoc());
      assertEquals(actual.score(), expected.score(), 0);
    }
    reader.close();
    dir.close();
  }

