  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {
    Directory dir = newDirectory();
    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir,
        newIndexWriterConfig().setMergePolicy(new MockRandomMergePolicy(random())));
    int numThreads = atLeast(2);
    Thread[] threads = new Thread[numThreads];
    final CountDownLatch latch = new CountDownLatch(1);
    final CountDownLatch doneLatch = new CountDownLatch(numThreads);
    for (int i = 0; i < numThreads; i++) {
      final int offset = i;
      threads[i] = new Thread() {
        @Override
        public void run() {
          int id = offset * 1000;
          int value = 100;
          try {
            latch.await();
            for (int j = 0; j < 1000; j++) {
              Document doc = new Document();
              doc.add(newTextField("content", "aaa", Field.Store.NO));
              doc.add(newStringField("id", String.valueOf(id++), Field.Store.YES));
              doc.add(newStringField("value", String.valueOf(value), Field.Store.NO));
              doc.add(new NumericDocValuesField("dv", value));
              modifier.addDocument(doc);
              if (VERBOSE) {
                System.out.println("\tThread["+offset+"]: add doc: " + id);
              }
            }
          } catch (Exception e) {
            throw new RuntimeException(e);
          } finally {
            doneLatch.countDown();
            if (VERBOSE) {
              System.out.println("\tThread["+offset+"]: done indexing" );
            }
          }
        }
      };
      threads[i].start();
    }
    latch.countDown();
    while (!doneLatch.await(1, TimeUnit.MILLISECONDS)) {
      if (VERBOSE) {
        System.out.println("\nTEST: now deleteAll");
      }
      modifier.deleteAll();
      if (VERBOSE) {
        System.out.println("del all");
      }
    }

    if (VERBOSE) {
      System.out.println("\nTEST: now final deleteAll");
    }

    modifier.deleteAll();
    for (Thread thread : threads) {
      thread.join();
    }

    if (VERBOSE) {
      System.out.println("\nTEST: now close");
    }
    modifier.close();

    DirectoryReader reader = DirectoryReader.open(dir);
    if (VERBOSE) {
      System.out.println("\nTEST: got reader=" + reader);
    }
    assertEquals(0, reader.maxDoc());
    assertEquals(0, reader.numDocs());
    assertEquals(0, reader.numDeletedDocs(), 0);
    reader.close();

    dir.close();
  }

