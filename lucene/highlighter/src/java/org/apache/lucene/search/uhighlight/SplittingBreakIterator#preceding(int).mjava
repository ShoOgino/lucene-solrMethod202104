  @Override
  public int preceding(int offset) { // note: closely follows following() but reversed
    if (offset - 1 < sliceStartIdx || offset - 1 > sliceEndIdx) {
      if (offset == 0) { // DONE condition
        first(); // because https://bugs.openjdk.java.net/browse/JDK-8015110
        return DONE;
      }
      sliceEndIdx = text.indexOf(sliceChar, offset); // no -1
      if (sliceEndIdx == -1) {
        sliceEndIdx = text.length();
      }
      sliceStartIdx = text.lastIndexOf(sliceChar, offset - 1);
      if (sliceStartIdx == -1) {
        sliceStartIdx = 0;
      } else {
        sliceStartIdx = Math.min(sliceStartIdx + 1, sliceEndIdx);
      }
      if (sliceStartIdx != sliceEndIdx) { // otherwise, adjacent separator or separator at end
        baseIter.setText(text.substring(sliceStartIdx, sliceEndIdx));
      }
    }
    // lookup preceding() in this slice:
    if (sliceStartIdx == sliceEndIdx) {
      return current = offset - 1;
    } else {
      // note: preceding() can never be last() if the last character is a boundary (it usually is).
      //   So we have to check if we should call last() instead of preceding():
      if (offset == sliceEndIdx + 1) {
        // the last boundary preceding this offset is the very last boundary in this slice
        return current = sliceStartIdx + baseIter.last();
      } else {
        return current = sliceStartIdx + baseIter.preceding(offset - sliceStartIdx);
      }
    }
  }

