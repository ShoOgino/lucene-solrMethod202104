  /**
   * Close this to future searching; any searches still in process in other threads won't be
   * affected, and they should still call {@link #release} after they are done.
   *
   * <p><b>NOTE</b>: you must ensure no other threads are calling {@link #record} while you call
   * close(); otherwise it's possible not all searcher references will be freed.
   */
  @Override
  public synchronized void close() throws IOException {
    closed = true;
    final List<SearcherTracker> toClose = new ArrayList<>(searchers.values());

    // Remove up front in case exc below, so we don't
    // over-decRef on double-close:
    for (SearcherTracker tracker : toClose) {
      searchers.remove(tracker.version);
    }

    IOUtils.close(toClose);

    // Make some effort to catch mis-use:
    if (searchers.size() != 0) {
      throw new IllegalStateException(
          "another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed");
    }
  }

