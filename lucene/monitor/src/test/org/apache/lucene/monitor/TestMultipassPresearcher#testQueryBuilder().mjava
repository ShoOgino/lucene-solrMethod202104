  public void testQueryBuilder() throws IOException {

    IndexWriterConfig iwc = new IndexWriterConfig(new KeywordAnalyzer());
    Presearcher presearcher = createPresearcher();

    Directory dir = new ByteBuffersDirectory();
    IndexWriter writer = new IndexWriter(dir, iwc);
    MonitorConfiguration config =
        new MonitorConfiguration() {
          @Override
          public IndexWriter buildIndexWriter() {
            return writer;
          }
        };
    try (Monitor monitor = new Monitor(ANALYZER, presearcher, config)) {

      monitor.register(new MonitorQuery("1", parse("f:test")));

      try (IndexReader reader = DirectoryReader.open(writer, false, false)) {

        MemoryIndex mindex = new MemoryIndex();
        mindex.addField("f", "this is a test document", WHITESPACE);
        LeafReader docsReader = (LeafReader) mindex.createSearcher().getIndexReader();

        QueryIndex.QueryTermFilter termFilter = new QueryIndex.QueryTermFilter(reader);

        BooleanQuery q = (BooleanQuery) presearcher.buildQuery(docsReader, termFilter);
        BooleanQuery expected =
            new BooleanQuery.Builder()
                .add(
                    should(
                        new BooleanQuery.Builder()
                            .add(
                                must(
                                    new BooleanQuery.Builder()
                                        .add(
                                            should(new TermInSetQuery("f_0", new BytesRef("test"))))
                                        .build()))
                            .add(
                                must(
                                    new BooleanQuery.Builder()
                                        .add(
                                            should(new TermInSetQuery("f_1", new BytesRef("test"))))
                                        .build()))
                            .add(
                                must(
                                    new BooleanQuery.Builder()
                                        .add(
                                            should(new TermInSetQuery("f_2", new BytesRef("test"))))
                                        .build()))
                            .add(
                                must(
                                    new BooleanQuery.Builder()
                                        .add(
                                            should(new TermInSetQuery("f_3", new BytesRef("test"))))
                                        .build()))
                            .build()))
                .add(should(new TermQuery(new Term("__anytokenfield", "__ANYTOKEN__"))))
                .build();

        assertEquals(expected, q);
      }
    }
  }

