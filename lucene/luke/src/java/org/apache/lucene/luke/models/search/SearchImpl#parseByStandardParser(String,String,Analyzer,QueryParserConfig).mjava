  private Query parseByStandardParser(
      String expression, String defField, Analyzer analyzer, QueryParserConfig config) {
    StandardQueryParser parser = new StandardQueryParser(analyzer);

    switch (config.getDefaultOperator()) {
      case OR:
        parser.setDefaultOperator(StandardQueryConfigHandler.Operator.OR);
        break;
      case AND:
        parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);
        break;
    }

    parser.setEnablePositionIncrements(config.isEnablePositionIncrements());
    parser.setAllowLeadingWildcard(config.isAllowLeadingWildcard());
    parser.setDateResolution(config.getDateResolution());
    parser.setFuzzyMinSim(config.getFuzzyMinSim());
    parser.setFuzzyPrefixLength(config.getFuzzyPrefixLength());
    parser.setLocale(config.getLocale());
    parser.setTimeZone(config.getTimeZone());
    parser.setPhraseSlop(config.getPhraseSlop());

    if (config.getTypeMap() != null) {
      Map<String, PointsConfig> pointsConfigMap = new HashMap<>();

      for (Map.Entry<String, Class<? extends Number>> entry : config.getTypeMap().entrySet()) {
        String field = entry.getKey();
        Class<? extends Number> type = entry.getValue();
        PointsConfig pc;
        if (type == Integer.class || type == Long.class) {
          pc = new PointsConfig(NumberFormat.getIntegerInstance(Locale.ROOT), type);
        } else if (type == Float.class || type == Double.class) {
          pc = new PointsConfig(NumberFormat.getNumberInstance(Locale.ROOT), type);
        } else {
          log.warn(
              String.format(Locale.ENGLISH, "Ignored invalid number type: %s.", type.getName()));
          continue;
        }
        pointsConfigMap.put(field, pc);
      }

      parser.setPointsConfigMap(pointsConfigMap);
    }

    try {
      return parser.parse(expression, defField);
    } catch (QueryNodeException e) {
      throw new LukeException(
          String.format(Locale.ENGLISH, "Failed to parse query expression: %s", expression), e);
    }
  }

