  /**
   * Accepts only values in the following ranges: lon: {@code -PI -> PI}. Horizantal angle must be
   * greater than or equal to PI.
   *
   * @param planetModel is the planet model.
   * @param leftLon is the left longitude.
   * @param rightLon is the right longitude.
   */
  public GeoWideLongitudeSlice(
      final PlanetModel planetModel, final double leftLon, double rightLon) {
    super(planetModel);
    // Argument checking
    if (leftLon < -Math.PI || leftLon > Math.PI) {
      throw new IllegalArgumentException("Left longitude out of range");
    }
    if (rightLon < -Math.PI || rightLon > Math.PI) {
      throw new IllegalArgumentException("Right longitude out of range");
    }
    double extent = rightLon - leftLon;
    if (extent < 0.0) {
      extent += 2.0 * Math.PI;
    }
    if (extent < Math.PI) {
      throw new IllegalArgumentException("Width of rectangle too small");
    }

    this.leftLon = leftLon;
    this.rightLon = rightLon;

    final double sinLeftLon = Math.sin(leftLon);
    final double cosLeftLon = Math.cos(leftLon);
    final double sinRightLon = Math.sin(rightLon);
    final double cosRightLon = Math.cos(rightLon);

    // Normalize
    while (leftLon > rightLon) {
      rightLon += Math.PI * 2.0;
    }
    double middleLon = (leftLon + rightLon) * 0.5;
    while (middleLon > Math.PI) {
      middleLon -= Math.PI * 2.0;
    }
    while (middleLon < -Math.PI) {
      middleLon += Math.PI * 2.0;
    }
    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);

    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);
    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);

    this.planePoints = new GeoPoint[] {planetModel.NORTH_POLE, planetModel.SOUTH_POLE};
    this.edgePoints = new GeoPoint[] {planetModel.NORTH_POLE};
  }

