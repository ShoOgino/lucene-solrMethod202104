  private void testReaderClosedListener1(boolean closeSubReaders, int wrapMultiReaderType)
      throws IOException {
    final Directory dir1 = getDir1(random());
    final CompositeReader ir2, ir1 = DirectoryReader.open(dir1);
    switch (wrapMultiReaderType) {
      case 0:
        ir2 = ir1;
        break;
      case 1:
        // default case, does close subreaders:
        ir2 = new MultiReader(ir1);
        break;
      case 2:
        ir2 = new MultiReader(new CompositeReader[] {ir1}, false);
        break;
      default:
        throw new AssertionError();
    }

    // with overlapping
    ParallelCompositeReader pr =
        new ParallelCompositeReader(
            closeSubReaders, new CompositeReader[] {ir2}, new CompositeReader[] {ir2});

    assertEquals(3, pr.leaves().size());
    assertEquals(ir1.getReaderCacheHelper(), pr.getReaderCacheHelper());

    int i = 0;
    for (LeafReaderContext cxt : pr.leaves()) {
      LeafReader originalLeaf = ir1.leaves().get(i++).reader();
      assertEquals(originalLeaf.getCoreCacheHelper(), cxt.reader().getCoreCacheHelper());
      assertEquals(originalLeaf.getReaderCacheHelper(), cxt.reader().getReaderCacheHelper());
    }
    pr.close();
    if (!closeSubReaders) {
      ir1.close();
    }

    // We have to close the extra MultiReader, because it will not close its own subreaders:
    if (wrapMultiReaderType == 2) {
      ir2.close();
    }
    dir1.close();
  }

