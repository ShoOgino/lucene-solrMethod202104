  public void testIgnoreStoredFields() throws IOException {
    Directory dir1 = getDir1(random());
    Directory dir2 = getDir2(random());
    CompositeReader ir1 = DirectoryReader.open(dir1);
    CompositeReader ir2 = DirectoryReader.open(dir2);

    // with overlapping
    ParallelCompositeReader pr =
        new ParallelCompositeReader(
            false, new CompositeReader[] {ir1, ir2}, new CompositeReader[] {ir1});
    assertEquals("v1", pr.document(0).get("f1"));
    assertEquals("v1", pr.document(0).get("f2"));
    assertNull(pr.document(0).get("f3"));
    assertNull(pr.document(0).get("f4"));
    // check that fields are there
    assertNotNull(MultiTerms.getTerms(pr, "f1"));
    assertNotNull(MultiTerms.getTerms(pr, "f2"));
    assertNotNull(MultiTerms.getTerms(pr, "f3"));
    assertNotNull(MultiTerms.getTerms(pr, "f4"));
    pr.close();

    // no stored fields at all
    pr = new ParallelCompositeReader(false, new CompositeReader[] {ir2}, new CompositeReader[0]);
    assertNull(pr.document(0).get("f1"));
    assertNull(pr.document(0).get("f2"));
    assertNull(pr.document(0).get("f3"));
    assertNull(pr.document(0).get("f4"));
    // check that fields are there
    assertNull(MultiTerms.getTerms(pr, "f1"));
    assertNull(MultiTerms.getTerms(pr, "f2"));
    assertNotNull(MultiTerms.getTerms(pr, "f3"));
    assertNotNull(MultiTerms.getTerms(pr, "f4"));
    pr.close();

    // without overlapping
    pr =
        new ParallelCompositeReader(true, new CompositeReader[] {ir2}, new CompositeReader[] {ir1});
    assertEquals("v1", pr.document(0).get("f1"));
    assertEquals("v1", pr.document(0).get("f2"));
    assertNull(pr.document(0).get("f3"));
    assertNull(pr.document(0).get("f4"));
    // check that fields are there
    assertNull(MultiTerms.getTerms(pr, "f1"));
    assertNull(MultiTerms.getTerms(pr, "f2"));
    assertNotNull(MultiTerms.getTerms(pr, "f3"));
    assertNotNull(MultiTerms.getTerms(pr, "f4"));
    pr.close();

    // no main readers
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new ParallelCompositeReader(true, new CompositeReader[0], new CompositeReader[] {ir1});
        });

    dir1.close();
    dir2.close();
  }

