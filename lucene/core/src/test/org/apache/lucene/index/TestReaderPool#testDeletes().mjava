  public void testDeletes() throws IOException {
    Directory directory = newDirectory();
    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);
    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);
    SegmentInfos segmentInfos = reader.segmentInfos.clone();
    ReaderPool pool =
        new ReaderPool(
            directory,
            directory,
            segmentInfos,
            fieldNumbers,
            () -> 0l,
            new NullInfoStream(),
            null,
            null);
    int id = random().nextInt(10);
    if (random().nextBoolean()) {
      pool.enableReaderPooling();
    }
    for (SegmentCommitInfo commitInfo : segmentInfos) {
      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);
      SegmentReader readOnlyClone = readersAndUpdates.getReadOnlyClone(IOContext.READ);
      PostingsEnum postings = readOnlyClone.postings(new Term("id", "" + id));
      boolean expectUpdate = false;
      int doc = -1;
      if (postings != null && postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
        assertTrue(readersAndUpdates.delete(doc = postings.docID()));
        expectUpdate = true;
        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
      }
      assertFalse(pool.anyDocValuesChanges()); // deletes are not accounted here
      readOnlyClone.close();
      boolean writtenToDisk;
      if (pool.isReaderPoolingEnabled()) {
        writtenToDisk = pool.commit(segmentInfos);
        assertFalse(pool.release(readersAndUpdates, random().nextBoolean()));
      } else {
        writtenToDisk = pool.release(readersAndUpdates, random().nextBoolean());
      }
      assertFalse(pool.anyDocValuesChanges());
      assertEquals(expectUpdate, writtenToDisk);
      if (expectUpdate) {
        readersAndUpdates = pool.get(commitInfo, true);
        SegmentReader updatedReader = readersAndUpdates.getReadOnlyClone(IOContext.READ);
        assertNotSame(-1, doc);
        assertFalse(updatedReader.getLiveDocs().get(doc));
        readersAndUpdates.release(updatedReader);
        assertFalse(pool.release(readersAndUpdates, random().nextBoolean()));
      }
    }
    IOUtils.close(pool, reader, directory);
  }

