  // LUCENE-7719
  public void testMultiByteMTQ() throws IOException {
    Analyzer analyzer = new KeywordAnalyzer();
    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {
      for (int attempt = 0; attempt < 20; attempt++) {
        iw.deleteAll();
        String field = "title";
        String value = RandomStrings.randomUnicodeOfLength(random(), 3);
        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR + "")) { // will throw things off
          continue;
        }
        int[] valuePoints = value.codePoints().toArray();

        iw.addDocument(Collections.singleton(new Field(field, value, fieldType)));
        iw.commit();
        try (IndexReader ir = iw.getReader()) {
          IndexSearcher searcher = newSearcher(ir);
          UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, analyzer);
          highlighter.setBreakIterator(WholeBreakIterator::new);

          // Test PrefixQuery
          Query query = new PrefixQuery(new Term(field, UnicodeUtil.newString(valuePoints, 0, 1)));
          highlightAndAssertMatch(searcher, highlighter, query, field, value);

          // Test TermRangeQuery
          query = new TermRangeQuery(field, new BytesRef(value), new BytesRef(value), true, true);
          highlightAndAssertMatch(searcher, highlighter, query, field, value);

          // Test FuzzyQuery
          query = new FuzzyQuery(new Term(field, value + "Z"), 1);
          highlightAndAssertMatch(searcher, highlighter, query, field, value);

          if (valuePoints.length != 3) {
            continue; // even though we ask RandomStrings for a String with 3 code points, it seems
            // sometimes it's less
          }

          // Test WildcardQuery
          query =
              new WildcardQuery(
                  new Term(
                      field,
                      new StringBuilder()
                          .append(WildcardQuery.WILDCARD_ESCAPE)
                          .appendCodePoint(valuePoints[0])
                          .append(WildcardQuery.WILDCARD_CHAR)
                          .append(WildcardQuery.WILDCARD_ESCAPE)
                          .appendCodePoint(valuePoints[2])
                          .toString()));
          highlightAndAssertMatch(searcher, highlighter, query, field, value);

          // TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others
          // well.
        }
      }
    }
  }

