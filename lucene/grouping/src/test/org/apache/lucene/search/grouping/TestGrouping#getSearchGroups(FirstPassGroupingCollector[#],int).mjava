  private Collection<SearchGroup<BytesRef>> getSearchGroups(
      FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {
    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {
      @SuppressWarnings("unchecked")
      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;
      return collector.getTopGroups(groupOffset);
    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {
      @SuppressWarnings("unchecked")
      FirstPassGroupingCollector<MutableValue> collector =
          (FirstPassGroupingCollector<MutableValue>) c;
      Collection<SearchGroup<MutableValue>> mutableValueGroups =
          collector.getTopGroups(groupOffset);
      if (mutableValueGroups == null) {
        return null;
      }

      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());
      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {
        SearchGroup<BytesRef> sg = new SearchGroup<>();
        sg.groupValue =
            mutableValueGroup.groupValue.exists()
                ? ((MutableValueStr) mutableValueGroup.groupValue).value.get()
                : null;
        sg.sortValues = mutableValueGroup.sortValues;
        groups.add(sg);
      }
      return groups;
    }
    fail();
    return null;
  }

