  /** Write ourselves to the provided {@link IndexOutput} */
  public void write(IndexOutput out) throws IOException {
    CodecUtil.writeIndexHeader(
        out,
        "segments",
        VERSION_CURRENT,
        StringHelper.randomId(),
        Long.toString(generation, Character.MAX_RADIX));
    out.writeVInt(Version.LATEST.major);
    out.writeVInt(Version.LATEST.minor);
    out.writeVInt(Version.LATEST.bugfix);
    // System.out.println(Thread.currentThread().getName() + ": now write " + out.getName() + " with
    // version=" + version);

    out.writeVInt(indexCreatedVersionMajor);

    out.writeLong(version);
    out.writeVLong(counter); // write counter
    out.writeInt(size());

    if (size() > 0) {

      Version minSegmentVersion = null;

      // We do a separate loop up front so we can write the minSegmentVersion before
      // any SegmentInfo; this makes it cleaner to throw IndexFormatTooOldExc at read time:
      for (SegmentCommitInfo siPerCommit : this) {
        Version segmentVersion = siPerCommit.info.getVersion();
        if (minSegmentVersion == null || segmentVersion.onOrAfter(minSegmentVersion) == false) {
          minSegmentVersion = segmentVersion;
        }
      }

      out.writeVInt(minSegmentVersion.major);
      out.writeVInt(minSegmentVersion.minor);
      out.writeVInt(minSegmentVersion.bugfix);
    }

    // write infos
    for (SegmentCommitInfo siPerCommit : this) {
      SegmentInfo si = siPerCommit.info;
      if (indexCreatedVersionMajor >= 7 && si.minVersion == null) {
        throw new IllegalStateException(
            "Segments must record minVersion if they have been created on or after Lucene 7: "
                + si);
      }
      out.writeString(si.name);
      byte segmentID[] = si.getId();
      if (segmentID.length != StringHelper.ID_LENGTH) {
        throw new IllegalStateException(
            "cannot write segment: invalid id segment="
                + si.name
                + "id="
                + StringHelper.idToString(segmentID));
      }
      out.writeBytes(segmentID, segmentID.length);
      out.writeString(si.getCodec().getName());
      out.writeLong(siPerCommit.getDelGen());
      int delCount = siPerCommit.getDelCount();
      if (delCount < 0 || delCount > si.maxDoc()) {
        throw new IllegalStateException(
            "cannot write segment: invalid maxDoc segment="
                + si.name
                + " maxDoc="
                + si.maxDoc()
                + " delCount="
                + delCount);
      }
      out.writeInt(delCount);
      out.writeLong(siPerCommit.getFieldInfosGen());
      out.writeLong(siPerCommit.getDocValuesGen());
      int softDelCount = siPerCommit.getSoftDelCount();
      if (softDelCount < 0 || softDelCount > si.maxDoc()) {
        throw new IllegalStateException(
            "cannot write segment: invalid maxDoc segment="
                + si.name
                + " maxDoc="
                + si.maxDoc()
                + " softDelCount="
                + softDelCount);
      }
      out.writeInt(softDelCount);
      // we ensure that there is a valid ID for this SCI just in case
      // this is manually upgraded outside of IW
      byte[] sciId = siPerCommit.getId();
      if (sciId != null) {
        out.writeByte((byte) 1);
        assert sciId.length == StringHelper.ID_LENGTH
            : "invalid SegmentCommitInfo#id: " + Arrays.toString(sciId);
        out.writeBytes(sciId, 0, sciId.length);
      } else {
        out.writeByte((byte) 0);
      }

      out.writeSetOfStrings(siPerCommit.getFieldInfosFiles());
      final Map<Integer, Set<String>> dvUpdatesFiles = siPerCommit.getDocValuesUpdatesFiles();
      out.writeInt(dvUpdatesFiles.size());
      for (Entry<Integer, Set<String>> e : dvUpdatesFiles.entrySet()) {
        out.writeInt(e.getKey());
        out.writeSetOfStrings(e.getValue());
      }
    }
    out.writeMapOfStrings(userData);
    CodecUtil.writeFooter(out);
  }

