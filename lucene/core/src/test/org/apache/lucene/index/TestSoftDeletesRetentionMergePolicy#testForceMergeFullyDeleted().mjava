  public void testForceMergeFullyDeleted() throws IOException {
    Directory dir = newDirectory();
    AtomicBoolean letItGo = new AtomicBoolean(false);
    MergePolicy policy =
        new SoftDeletesRetentionMergePolicy(
            "soft_delete",
            () -> letItGo.get() ? new MatchNoDocsQuery() : new MatchAllDocsQuery(),
            new LogDocMergePolicy());
    IndexWriterConfig indexWriterConfig =
        newIndexWriterConfig().setMergePolicy(policy).setSoftDeletesField("soft_delete");
    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);

    Document doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new NumericDocValuesField("soft_delete", 1));
    writer.addDocument(doc);
    writer.commit();
    doc = new Document();
    doc.add(new StringField("id", "2", Field.Store.YES));
    doc.add(new NumericDocValuesField("soft_delete", 1));
    writer.addDocument(doc);
    DirectoryReader reader = writer.getReader();
    {
      assertEquals(2, reader.leaves().size());
      final SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();
      assertTrue(policy.keepFullyDeletedSegment(() -> segmentReader));
      assertEquals(
          0, policy.numDeletesToMerge(segmentReader.getSegmentInfo(), 0, () -> segmentReader));
    }
    {
      SegmentReader segmentReader = (SegmentReader) reader.leaves().get(1).reader();
      assertTrue(policy.keepFullyDeletedSegment(() -> segmentReader));
      assertEquals(
          0, policy.numDeletesToMerge(segmentReader.getSegmentInfo(), 0, () -> segmentReader));
      writer.forceMerge(1);
      reader.close();
    }
    reader = writer.getReader();
    {
      assertEquals(1, reader.leaves().size());
      SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();
      assertEquals(2, reader.maxDoc());
      assertTrue(policy.keepFullyDeletedSegment(() -> segmentReader));
      assertEquals(
          0, policy.numDeletesToMerge(segmentReader.getSegmentInfo(), 0, () -> segmentReader));
    }
    writer.forceMerge(1); // make sure we don't merge this
    assertNull(DirectoryReader.openIfChanged(reader));

    writer.forceMergeDeletes(); // make sure we don't merge this
    assertNull(DirectoryReader.openIfChanged(reader));
    letItGo.set(true);
    writer.forceMergeDeletes(); // make sure we don't merge this
    DirectoryReader directoryReader = DirectoryReader.openIfChanged(reader);
    assertNotNull(directoryReader);
    assertEquals(0, directoryReader.numDeletedDocs());
    assertEquals(0, directoryReader.maxDoc());
    IOUtils.close(directoryReader, reader, writer, dir);
  }

