  /**
   * Highlights chosen terms in a text, extracting the most relevant sections. The document text is
   * analysed in chunks to record hit statistics across the document. After accumulating stats, the
   * fragments with the highest scores are returned as an array of strings in order of score
   * (contiguous fragments are merged into one in their original order to improve readability)
   *
   * @param text text to highlight terms in
   * @param maxNumFragments the maximum number of fragments.
   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)
   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided
   *     text's length
   */
  public final String[] getBestFragments(TokenStream tokenStream, String text, int maxNumFragments)
      throws IOException, InvalidTokenOffsetsException {
    maxNumFragments = Math.max(1, maxNumFragments); // sanity check

    TextFragment[] frag = getBestTextFragments(tokenStream, text, true, maxNumFragments);

    // Get text
    ArrayList<String> fragTexts = new ArrayList<>();
    for (int i = 0; i < frag.length; i++) {
      if ((frag[i] != null) && (frag[i].getScore() > 0)) {
        fragTexts.add(frag[i].toString());
      }
    }
    return fragTexts.toArray(new String[0]);
  }

