  /**
   * Create a new SleepingLockFactory
   *
   * @param delegate underlying directory to wrap
   * @param lockWaitTimeout length of time to wait in milliseconds or {@link
   *     #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.
   * @param pollInterval poll once per this interval in milliseconds until {@code lockWaitTimeout}
   *     is exceeded.
   */
  public SleepingLockWrapper(Directory delegate, long lockWaitTimeout, long pollInterval) {
    super(delegate);
    this.lockWaitTimeout = lockWaitTimeout;
    this.pollInterval = pollInterval;
    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER) {
      throw new IllegalArgumentException(
          "lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got "
              + lockWaitTimeout
              + ")");
    }
    if (pollInterval < 0) {
      throw new IllegalArgumentException(
          "pollInterval must be a non-negative number (got " + pollInterval + ")");
    }
  }

