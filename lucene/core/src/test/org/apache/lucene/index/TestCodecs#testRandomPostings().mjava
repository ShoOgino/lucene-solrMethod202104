  public void testRandomPostings() throws Throwable {
    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));

    final FieldData[] fields = new FieldData[NUM_FIELDS];
    for (int i = 0; i < NUM_FIELDS; i++) {
      final boolean omitTF = 0 == (i % 3);
      final boolean storePayloads = 1 == (i % 3);
      fields[i] =
          new FieldData(
              fieldNames[i],
              builder,
              this.makeRandomTerms(omitTF, storePayloads),
              omitTF,
              storePayloads);
    }

    final Directory dir = newDirectory();
    final FieldInfos fieldInfos = builder.finish();

    if (VERBOSE) {
      System.out.println("TEST: now write postings");
    }

    Codec codec = Codec.getDefault();
    final SegmentInfo si =
        new SegmentInfo(
            dir,
            Version.LATEST,
            Version.LATEST,
            SEGMENT,
            10000,
            false,
            codec,
            Collections.emptyMap(),
            StringHelper.randomId(),
            new HashMap<>(),
            null);
    this.write(si, fieldInfos, dir, fields);

    if (VERBOSE) {
      System.out.println("TEST: now read postings");
    }
    final FieldsProducer terms =
        codec
            .postingsFormat()
            .fieldsProducer(new SegmentReadState(dir, si, fieldInfos, newIOContext(random())));

    final Verify[] threads = new Verify[NUM_TEST_THREADS - 1];
    for (int i = 0; i < NUM_TEST_THREADS - 1; i++) {
      threads[i] = new Verify(si, fields, terms);
      threads[i].setDaemon(true);
      threads[i].start();
    }

    new Verify(si, fields, terms).run();

    for (int i = 0; i < NUM_TEST_THREADS - 1; i++) {
      threads[i].join();
      assert !threads[i].failed;
    }

    terms.close();
    dir.close();
  }

