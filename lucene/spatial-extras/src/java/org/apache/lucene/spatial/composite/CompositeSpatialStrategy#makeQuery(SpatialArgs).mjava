  @Override
  public Query makeQuery(SpatialArgs args) {
    final SpatialOperation pred = args.getOperation();

    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {
      throw new UnsupportedSpatialOperation(pred);
    }

    if (pred == SpatialOperation.IsDisjointTo) {
      //      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects,
      // args.getShape()));
      //      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());
      // TODO resurrect Disjoint spatial query utility accepting a field name known to have
      // DocValues.
      // update class docs when it's added.
      throw new UnsupportedSpatialOperation(pred);
    }

    final ShapeValuesPredicate predicateValueSource =
        new ShapeValuesPredicate(geometryStrategy.makeShapeValueSource(), pred, args.getShape());
    // System.out.println("PredOpt: " + optimizePredicates);
    if (pred == SpatialOperation.Intersects && optimizePredicates) {
      // We have a smart Intersects impl

      final SpatialPrefixTree grid = indexStrategy.getGrid();
      final int detailLevel =
          grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0)); // default to max precision
      return new IntersectsRPTVerifyQuery(
          args.getShape(),
          indexStrategy.getFieldName(),
          grid,
          detailLevel,
          indexStrategy.getPrefixGridScanLevel(),
          predicateValueSource);
    } else {
      // The general path; all index matches get verified

      SpatialArgs indexArgs;
      if (pred == SpatialOperation.Contains) {
        // note: we could map IsWithin as well but it's pretty darned slow since it touches all
        // world grids
        indexArgs = args;
      } else {
        // TODO add args.clone method with new predicate? Or simply make non-final?
        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());
        indexArgs.setDistErr(args.getDistErr());
        indexArgs.setDistErrPct(args.getDistErrPct());
      }

      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {
        indexArgs.setDistErrPct(0.10);
      }

      final Query indexQuery = indexStrategy.makeQuery(indexArgs);
      return new CompositeVerifyQuery(indexQuery, predicateValueSource);
    }
  }

