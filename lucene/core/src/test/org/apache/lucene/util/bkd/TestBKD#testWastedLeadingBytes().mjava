  // Claims 16 bytes per dim, but only use the bottom N 1-3 bytes; this would happen e.g. if a user
  // indexes what are actually just short
  // values as a LongPoint:
  public void testWastedLeadingBytes() throws Exception {
    Random random = random();
    int numDims = TestUtil.nextInt(random, 1, PointValues.MAX_INDEX_DIMENSIONS);
    int numIndexDims = TestUtil.nextInt(random, 1, numDims);
    int bytesPerDim = PointValues.MAX_NUM_BYTES;
    int bytesUsed = TestUtil.nextInt(random, 1, 3);

    Directory dir = newFSDirectory(createTempDir());
    int numDocs = atLeast(10000);
    BKDWriter w =
        new BKDWriter(
            numDocs + 1,
            dir,
            "tmp",
            new BKDConfig(numDims, numIndexDims, bytesPerDim, 32),
            1f,
            numDocs);
    byte[] tmp = new byte[bytesUsed];
    byte[] buffer = new byte[numDims * bytesPerDim];
    for (int i = 0; i < numDocs; i++) {
      for (int dim = 0; dim < numDims; dim++) {
        random.nextBytes(tmp);
        System.arraycopy(tmp, 0, buffer, dim * bytesPerDim + (bytesPerDim - bytesUsed), tmp.length);
      }
      w.add(buffer, i);
    }

    IndexOutput out = dir.createOutput("bkd", IOContext.DEFAULT);
    Runnable finalizer = w.finish(out, out, out);
    long fp = out.getFilePointer();
    finalizer.run();
    out.close();

    IndexInput in = dir.openInput("bkd", IOContext.DEFAULT);
    in.seek(fp);
    BKDReader r = new BKDReader(in, in, in);
    int[] count = new int[1];
    r.intersect(
        new IntersectVisitor() {

          @Override
          public void visit(int docID) {
            count[0]++;
          }

          @Override
          public void visit(int docID, byte[] packedValue) {
            assert packedValue.length == numDims * bytesPerDim;
            visit(docID);
          }

          @Override
          public Relation compare(byte[] minPacked, byte[] maxPacked) {
            assert minPacked.length == numIndexDims * bytesPerDim;
            assert maxPacked.length == numIndexDims * bytesPerDim;
            if (random().nextInt(7) == 1) {
              return Relation.CELL_CROSSES_QUERY;
            } else {
              return Relation.CELL_INSIDE_QUERY;
            }
          }
        });
    assertEquals(numDocs, count[0]);
    in.close();
    dir.close();
  }

