  /**
   * Executes a 2-phase commit algorithm by first {@link TwoPhaseCommit#prepareCommit()} all objects
   * and only if all succeed, it proceeds with {@link TwoPhaseCommit#commit()}. If any of the
   * objects fail on either the preparation or actual commit, it terminates and {@link
   * TwoPhaseCommit#rollback()} all of them.
   *
   * <p><b>NOTE:</b> it may happen that an object fails to commit, after few have already
   * successfully committed. This tool will still issue a rollback instruction on them as well, but
   * depending on the implementation, it may not have any effect.
   *
   * <p><b>NOTE:</b> if any of the objects are {@code null}, this method simply skips over them.
   *
   * @throws PrepareCommitFailException if any of the objects fail to {@link
   *     TwoPhaseCommit#prepareCommit()}
   * @throws CommitFailException if any of the objects fail to {@link TwoPhaseCommit#commit()}
   */
  public static void execute(TwoPhaseCommit... objects)
      throws PrepareCommitFailException, CommitFailException {
    TwoPhaseCommit tpc = null;
    try {
      // first, all should successfully prepareCommit()
      for (int i = 0; i < objects.length; i++) {
        tpc = objects[i];
        if (tpc != null) {
          tpc.prepareCommit();
        }
      }
    } catch (Throwable t) {
      // first object that fails results in rollback all of them and
      // throwing an exception.
      rollback(objects);
      throw new PrepareCommitFailException(t, tpc);
    }

    // If all successfully prepareCommit(), attempt the actual commit()
    try {
      for (int i = 0; i < objects.length; i++) {
        tpc = objects[i];
        if (tpc != null) {
          tpc.commit();
        }
      }
    } catch (Throwable t) {
      // first object that fails results in rollback all of them and
      // throwing an exception.
      rollback(objects);
      throw new CommitFailException(t, tpc);
    }
  }

