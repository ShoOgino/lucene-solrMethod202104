  @Test
  // commented out on: 17-Feb-2019   @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // added 20-Sep-2018
  public void testSkipDownOperations() throws Exception {
    String overseerLeader = getOverseerLeader();
    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()
        .stream()
        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))
        .collect(Collectors.toList());
    String collection = "collection2";
    CollectionAdminRequest
        .createCollection(collection, 2, 2)
        .setCreateNodeSet(notOverseerNodes
            .stream()
            .map(JettySolrRunner::getNodeName)
            .collect(Collectors.joining(","))
        )
        .process(cluster.getSolrClient());
    
    cluster.waitForActiveCollection(collection, 2, 4);
    
    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();
    
    List<String> nodes = new ArrayList<>();
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      nodes.add(solrRunner.getNodeName());
    }
    
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      solrRunner.stop();
    }
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      cluster.waitForJettyToStop(solrRunner);
    }
    
    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {
      
      @Override
      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {
        boolean success = true;
        for (String lostNodeName : nodes) {
          if (newLiveNodes.contains(lostNodeName)) {
            success = false;
            break;
          }
        }
        
        return success;
      }
    });
    
    waitForState("Expected single liveNode", collection,
        (liveNodes, collectionState) -> liveNodes.size() == 1);

    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());
    for (JettySolrRunner solrRunner : notOverseerNodes) {
      solrRunner.start();
    }
    cluster.waitForAllNodes(30);
    waitForState("Expected 2x2 for collection: " + collection, collection,
        clusterShape(2, 4));
    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());

    // See comment in testSkipLeaderOperations() above why this assert is skipped
    if (!cluster.getOpenOverseer().getDistributedClusterStateUpdater().isDistributedStateUpdate()) {
      // 2 for recovering state, 4 for active state
      assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));
    }
    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());
  }

