  /**
   * Waits only for those in-flight packets that apply to these merge segments. This is called when
   * a merge needs to finish and must ensure all deletes to the merging segments are resolved.
   */
  void waitApplyForMerge(List<SegmentCommitInfo> mergeInfos, IndexWriter writer)
      throws IOException {
    long maxDelGen = Long.MIN_VALUE;
    for (SegmentCommitInfo info : mergeInfos) {
      maxDelGen = Math.max(maxDelGen, info.getBufferedDeletesGen());
    }

    Set<FrozenBufferedUpdates> waitFor = new HashSet<>();
    synchronized (this) {
      for (FrozenBufferedUpdates packet : updates) {
        if (packet.delGen() <= maxDelGen) {
          // We must wait for this packet before finishing the merge because its
          // deletes apply to a subset of the segments being merged:
          waitFor.add(packet);
        }
      }
    }

    if (infoStream.isEnabled("BD")) {
      infoStream.message(
          "BD",
          "waitApplyForMerge: "
              + waitFor.size()
              + " packets, "
              + mergeInfos.size()
              + " merging segments");
    }

    waitApply(waitFor, writer);
  }

