  /**
   * Create a predicate that checks whether points are within a distance of a given point. It works
   * by computing the bounding box around the circle that is defined by the given points/distance
   * and splitting it into between 1024 and 4096 smaller boxes (4096*0.75^2=2304 on average). Then
   * for each sub box, it computes the relation between this box and the distance query. Finally at
   * search time, it first computes the sub box that the point belongs to, most of the time, no
   * distance computation will need to be performed since all points from the sub box will either be
   * in or out of the circle.
   *
   * @lucene.internal
   */
  public static DistancePredicate createDistancePredicate(
      double lat, double lon, double radiusMeters) {
    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);
    final double axisLat = Rectangle.axisLat(lat, radiusMeters);
    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);
    final Function<Rectangle, Relation> boxToRelation =
        box ->
            GeoUtils.relate(
                box.minLat, box.maxLat, box.minLon, box.maxLon, lat, lon, distanceSortKey, axisLat);
    final Grid subBoxes =
        createSubBoxes(
            boundingBox.minLat,
            boundingBox.maxLat,
            boundingBox.minLon,
            boundingBox.maxLon,
            boxToRelation);

    return new DistancePredicate(
        subBoxes.latShift,
        subBoxes.lonShift,
        subBoxes.latBase,
        subBoxes.lonBase,
        subBoxes.maxLatDelta,
        subBoxes.maxLonDelta,
        subBoxes.relations,
        lat,
        lon,
        distanceSortKey);
  }

