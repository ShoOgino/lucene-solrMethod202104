  public void test1D() throws Exception {
    Directory dir = FSDirectory.open(createTempDir("2BBKDPoints1D"));

    final int numDocs = (Integer.MAX_VALUE / 26) + 100;

    BKDWriter w =
        new BKDWriter(
            numDocs,
            dir,
            "_0",
            new BKDConfig(1, 1, Long.BYTES, BKDConfig.DEFAULT_MAX_POINTS_IN_LEAF_NODE),
            BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP,
            26L * numDocs);
    int counter = 0;
    byte[] packedBytes = new byte[Long.BYTES];
    for (int docID = 0; docID < numDocs; docID++) {
      for (int j = 0; j < 26; j++) {
        // first a random int:
        NumericUtils.intToSortableBytes(random().nextInt(), packedBytes, 0);
        // then our counter, which will overflow a bit in the end:
        NumericUtils.intToSortableBytes(counter, packedBytes, Integer.BYTES);
        w.add(packedBytes, docID);
        counter++;
      }
      if (VERBOSE && docID % 100000 == 0) {
        System.out.println(docID + " of " + numDocs + "...");
      }
    }
    IndexOutput out = dir.createOutput("1d.bkd", IOContext.DEFAULT);
    Runnable finalizer = w.finish(out, out, out);
    long indexFP = out.getFilePointer();
    finalizer.run();
    out.close();

    IndexInput in = dir.openInput("1d.bkd", IOContext.DEFAULT);
    in.seek(indexFP);
    BKDReader r = new BKDReader(in, in, in);
    CheckIndex.VerifyPointsVisitor visitor = new CheckIndex.VerifyPointsVisitor("1d", numDocs, r);
    r.intersect(visitor);
    assertEquals(r.size(), visitor.getPointCountSeen());
    assertEquals(r.getDocCount(), visitor.getDocCountSeen());
    in.close();
    dir.close();
  }

