  public void assertThreadSafe(final Analyzer analyzer) throws Exception {
    int numTestPoints = 100;
    int numThreads = TestUtil.nextInt(random(), 3, 5);
    final HashMap<String, BytesRef> map = new HashMap<>();

    // create a map<String,SortKey> up front.
    // then with multiple threads, generate sort keys for all the keys in the map
    // and ensure they are the same as the ones we produced in serial fashion.

    for (int i = 0; i < numTestPoints; i++) {
      String term = TestUtil.randomSimpleString(random());
      try (TokenStream ts = analyzer.tokenStream("fake", term)) {
        TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);
        ts.reset();
        assertTrue(ts.incrementToken());
        // ensure we make a copy of the actual bytes too
        map.put(term, BytesRef.deepCopyOf(termAtt.getBytesRef()));
        assertFalse(ts.incrementToken());
        ts.end();
      }
    }

    Thread threads[] = new Thread[numThreads];
    for (int i = 0; i < numThreads; i++) {
      threads[i] =
          new Thread() {
            @Override
            public void run() {
              try {
                for (Map.Entry<String, BytesRef> mapping : map.entrySet()) {
                  String term = mapping.getKey();
                  BytesRef expected = mapping.getValue();
                  try (TokenStream ts = analyzer.tokenStream("fake", term)) {
                    TermToBytesRefAttribute termAtt =
                        ts.addAttribute(TermToBytesRefAttribute.class);
                    ts.reset();
                    assertTrue(ts.incrementToken());
                    assertEquals(expected, termAtt.getBytesRef());
                    assertFalse(ts.incrementToken());
                    ts.end();
                  }
                }
              } catch (IOException e) {
                throw new RuntimeException(e);
              }
            }
          };
    }
    for (int i = 0; i < numThreads; i++) {
      threads[i].start();
    }
    for (int i = 0; i < numThreads; i++) {
      threads[i].join();
    }
  }

