  private void checkVisits(
      IntervalsSource source, int expectedVisitCount, String... expectedTerms) {
    Set<String> actualTerms = new HashSet<>();
    int[] visitedSources = new int[1];
    source.visit(
        "field",
        new QueryVisitor() {
          @Override
          public void consumeTerms(Query query, Term... terms) {
            visitedSources[0]++;
            actualTerms.addAll(Arrays.stream(terms).map(Term::text).collect(Collectors.toList()));
          }

          @Override
          public void visitLeaf(Query query) {
            visitedSources[0]++;
            super.visitLeaf(query);
          }

          @Override
          public QueryVisitor getSubVisitor(BooleanClause.Occur occur, Query parent) {
            visitedSources[0]++;
            return super.getSubVisitor(occur, parent);
          }
        });

    Set<String> expectedSet = new HashSet<>(Arrays.asList(expectedTerms));
    expectedSet.removeAll(actualTerms);
    actualTerms.removeAll(Arrays.asList(expectedTerms));
    assertEquals(expectedVisitCount, visitedSources[0]);
    assertTrue("Unexpected terms collected: " + actualTerms, actualTerms.isEmpty());
    assertTrue("Missing expected terms: " + expectedSet, expectedSet.isEmpty());
  }

