  @Test
  public void init() throws IOException {
    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();
    Map<String,Object> config = new HashMap<>();
    config.put("class", "solr.MultiDestinationAuditLogger");
    config.put("async", false);
    config.put("eventTypes", Arrays.asList(AuditEvent.EventType.COMPLETED.name()));
    ArrayList<Map<String, Object>> plugins = new ArrayList<Map<String, Object>>();

    Map<String,Object> conf1 = new HashMap<>();
    conf1.put("class", "solr.SolrLogAuditLoggerPlugin");
    conf1.put("async", false);
    conf1.put("eventTypes", Arrays.asList(AuditEvent.EventType.ANONYMOUS.name()));
    plugins.add(conf1);
    Map<String,Object> conf2 = new HashMap<>();
    conf2.put("class", "solr.MockAuditLoggerPlugin");
    conf2.put("async", false);
    conf2.put("eventTypes", Arrays.asList(AuditEvent.EventType.AUTHENTICATED.name()));
    plugins.add(conf2);
    config.put("plugins", plugins);

    SolrResourceLoader loader = new SolrResourceLoader(Paths.get(""));
    al.inform(loader);
    al.init(config);

    al.doAudit(new AuditEvent(AuditEvent.EventType.ANONYMOUS).setUsername("me"));
    assertEquals(0, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); // not configured for ANONYMOUS
    al.doAudit(new AuditEvent(AuditEvent.EventType.AUTHENTICATED).setUsername("me"));
    assertEquals(1, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); // configured for authenticated
    
    assertFalse(al.shouldLog(AuditEvent.EventType.ERROR));
    assertFalse(al.shouldLog(AuditEvent.EventType.UNAUTHORIZED));
    assertTrue(al.shouldLog(AuditEvent.EventType.COMPLETED));
    assertTrue(al.shouldLog(AuditEvent.EventType.ANONYMOUS));
    assertTrue(al.shouldLog(AuditEvent.EventType.AUTHENTICATED));

    assertEquals(0, config.size());
    
    al.close();
    loader.close();
  }

