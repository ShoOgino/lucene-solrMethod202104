  @Override
  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)
      throws IOException {

    return new ConstantScoreWeight(this, boost) {

      final Component2D component2D = XYGeometry.create(geometries);

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);
        if (values == null) {
          return null;
        }

        final TwoPhaseIterator iterator =
            new TwoPhaseIterator(values) {

              @Override
              public boolean matches() throws IOException {
                for (int i = 0, count = values.docValueCount(); i < count; ++i) {
                  final long value = values.nextValue();
                  final double x = XYEncodingUtils.decode((int) (value >>> 32));
                  final double y = XYEncodingUtils.decode((int) (value & 0xFFFFFFFF));
                  if (component2D.contains(x, y)) {
                    return true;
                  }
                }
                return false;
              }

              @Override
              public float matchCost() {
                return 1000f; // TODO: what should it be?
              }
            };
        return new ConstantScoreScorer(this, boost, scoreMode, iterator);
      }

      @Override
      public boolean isCacheable(LeafReaderContext ctx) {
        return DocValues.isCacheable(ctx, field);
      }
    };
  }

