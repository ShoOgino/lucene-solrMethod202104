  public void testSplitSurrogatePairWithSpoonFeedReader() throws Exception {
    String text = "12345678\ud800\udf00"; // U+D800 U+DF00 = U+10300 = êåÄ (OLD ITALIC LETTER A)

    // Collect tokens with normal reader
    StandardAnalyzer a = new StandardAnalyzer();
    TokenStream ts = a.tokenStream("dummy", text);
    List<String> tokens = new ArrayList<>();
    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);
    ts.reset();
    while (ts.incrementToken()) {
      tokens.add(termAtt.toString());
    }
    ts.end();
    ts.close();

    // Tokens from a spoon-feed reader should be the same as from a normal reader
    // The 9th char is a high surrogate, so the 9-max-chars spoon-feed reader will split the
    // surrogate pair at a read boundary
    Reader reader = new SpoonFeedMaxCharsReaderWrapper(9, new StringReader(text));
    ts = a.tokenStream("dummy", reader);
    termAtt = ts.addAttribute(CharTermAttribute.class);
    ts.reset();
    for (int tokenNum = 0; ts.incrementToken(); ++tokenNum) {
      assertEquals("token #" + tokenNum + " mismatch: ", termAtt.toString(), tokens.get(tokenNum));
    }
    ts.end();
    ts.close();
  }

