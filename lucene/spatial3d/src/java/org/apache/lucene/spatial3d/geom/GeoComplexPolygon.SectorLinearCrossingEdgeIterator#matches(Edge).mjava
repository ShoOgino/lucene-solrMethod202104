    @Override
    public boolean matches(final Edge edge) {
      // System.out.println(" Edge ["+edge.startPoint + " --> " + edge.endPoint + "]"
      // + " potentially crosses travel plane " + plane);
      // Early exit if the point is on the edge.
      if (edge.isWithin(thePointX, thePointY, thePointZ)) {
        // The point is on the edge.  This means it's "in-set" by definition, so abort.
        // System.out.println("  Point is on the edge; in-set");
        onEdge = true;
        return false;
      }

      // System.out.println("  Finding intersections between edge plane and travel plane...");

      // This should precisely mirror what is in DualCrossingIterator, but without the dual
      // crossings.
      // Some edges are going to be given to us even when there's no real intersection, so do that
      // as a sanity check, first.
      final GeoPoint[] planeCrossings =
          plane.findIntersections(
              planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);
      if (planeCrossings == null) {
        // System.out.println("  Planes were identical");
      } else if (planeCrossings.length == 0) {
        // System.out.println("  There are no intersection points within bounds.");
        /*
        // For debugging purposes, let's repeat the intersection check without bounds, and figure out which bound(s) rejected it
        final GeoPoint[] unboundedCrossings = plane.findIntersections(planetModel, edge.plane);
        for (final GeoPoint crossing : unboundedCrossings) {
          if (!bound1.isWithin(crossing)) {
            System.out.println("   Crossing point "+crossing+" rejected by bound1 ("+((SidedPlane)bound1).evaluate(crossing)+")");
          }
          if (!bound2.isWithin(crossing)) {
            System.out.println("   Crossing point "+crossing+" rejected by bound2 ("+((SidedPlane)bound2).evaluate(crossing)+")");
          }
          if (!edge.startPlane.isWithin(crossing)) {
            System.out.println("   Crossing point "+crossing+" rejected by edge.startPlane ("+((SidedPlane)edge.startPlane).evaluate(crossing)+")");
          }
          if (!edge.endPlane.isWithin(crossing)) {
            System.out.println("   Crossing point "+crossing+" rejected by edge.endPlane ("+((SidedPlane)edge.endPlane).evaluate(crossing)+")");
          }
        }
        */
        // Sometimes on the hairy edge an intersection will be missed.  This check finds those.
        if (!plane.evaluateIsZero(edge.startPoint) && !plane.evaluateIsZero(edge.endPoint)) {
          // System.out.println("   Endpoint(s) of edge are not on travel plane; distances:"
          // + plane.evaluate(edge.startPoint) + " and " + plane.evaluate(edge.endPoint));
          // Edge doesn't actually intersect the travel plane.
          return true;
        } else {
          // System.out.println("   Endpoint(s) of edge are on travel plane!");
        }
      } else {
        // System.out.println("  There were intersection points!");
      }

      // System.out.println("  Edge intersects travel plane");

      // Determine crossings of this edge against all inside/outside planes.  There's no further
      // need to look at the actual travel plane itself.
      // System.out.println("  Getting above crossings...");
      final int aboveCrossings = countCrossings(edge, abovePlane, bound1, bound2);
      aboveCrossingCount += aboveCrossings;
      // System.out.println("  Getting below crossings...");
      final int belowCrossings = countCrossings(edge, belowPlane, bound1, bound2);
      belowCrossingCount += belowCrossings;
      // System.out.println("  Above crossings = "+aboveCrossings+"; below crossings = "
      // + belowCrossings);

      return true;
    }

