  /**
   * Constructor.
   *
   * @param planetModel is the planet model.
   * @param lat is the center latitude.
   * @param lon is the center longitude.
   * @param radius is the surface radius for the circle.
   * @param accuracy is the allowed error value (linear distance). Maximum accuracy is 1e-12.
   */
  public GeoExactCircle(
      final PlanetModel planetModel,
      final double lat,
      final double lon,
      final double radius,
      final double accuracy) {
    super(planetModel);
    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5) {
      throw new IllegalArgumentException("Latitude out of bounds");
    }
    if (lon < -Math.PI || lon > Math.PI) {
      throw new IllegalArgumentException("Longitude out of bounds");
    }
    if (radius < 0.0) {
      throw new IllegalArgumentException("Radius out of bounds");
    }
    if (radius < Vector.MINIMUM_RESOLUTION) {
      throw new IllegalArgumentException("Radius cannot be effectively zero");
    }
    if (planetModel.minimumPoleDistance - radius < Vector.MINIMUM_RESOLUTION) {
      throw new IllegalArgumentException(
          "Radius out of bounds. It cannot be bigger than "
              + planetModel.minimumPoleDistance
              + " for this planet model");
    }

    this.center = new GeoPoint(planetModel, lat, lon);
    this.radius = radius;

    if (accuracy < Vector.MINIMUM_RESOLUTION) {
      actualAccuracy = Vector.MINIMUM_RESOLUTION;
    } else {
      actualAccuracy = accuracy;
    }

    // We construct approximation planes until we have a low enough error estimate
    final List<ApproximationSlice> slices = new ArrayList<>(100);
    // Construct four cardinal points, and then we'll build the first two planes
    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, radius, 0.0);
    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI);
    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 0.5);
    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 1.5);

    final GeoPoint edgePoint;
    if (planetModel.zScaling > planetModel.xyScaling) {
      // z can be greater than x or y, so ellipse is longer in height than width
      slices.add(
          new ApproximationSlice(
              center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, true));
      slices.add(
          new ApproximationSlice(
              center,
              westPoint,
              Math.PI * 1.5,
              eastPoint,
              Math.PI * 0.5,
              southPoint,
              Math.PI,
              true));
      edgePoint = eastPoint;
    } else {
      // z will be less than x or y, so ellipse is shorter than it is tall
      slices.add(
          new ApproximationSlice(
              center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, true));
      slices.add(
          new ApproximationSlice(
              center,
              southPoint,
              Math.PI,
              northPoint,
              Math.PI * 2.0,
              westPoint,
              Math.PI * 1.5,
              true));
      edgePoint = northPoint;
    }
    // System.out.println("Edgepoint = " + edgePoint);

    this.circleSlices = new ArrayList<>();

    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.
    while (slices.size() > 0) {
      // Peel off a slice from the back
      final ApproximationSlice thisSlice = slices.remove(slices.size() - 1);
      // Assess it to see if it is OK as it is, or needs to be split.
      // To do this, we need to look at the part of the circle that will have the greatest error.
      // We will need to compute bearing points for these.
      final double interpPoint1Bearing =
          (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;
      final GeoPoint interpPoint1 =
          planetModel.surfacePointOnBearing(center, radius, interpPoint1Bearing);
      final double interpPoint2Bearing =
          (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;
      final GeoPoint interpPoint2 =
          planetModel.surfacePointOnBearing(center, radius, interpPoint2Bearing);

      // Is this point on the plane? (that is, is the approximation good enough?)
      if (!thisSlice.mustSplit
          && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy
          && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {
        circleSlices.add(
            new CircleSlice(
                thisSlice.plane,
                thisSlice.endPoint1,
                thisSlice.endPoint2,
                center,
                thisSlice.middlePoint));
        // assert thisSlice.plane.isWithin(center);
      } else {
        // Split the plane into two, and add it back to the end
        slices.add(
            new ApproximationSlice(
                center,
                thisSlice.endPoint1,
                thisSlice.point1Bearing,
                thisSlice.middlePoint,
                thisSlice.middlePointBearing,
                interpPoint1,
                interpPoint1Bearing,
                false));
        slices.add(
            new ApproximationSlice(
                center,
                thisSlice.middlePoint,
                thisSlice.middlePointBearing,
                thisSlice.endPoint2,
                thisSlice.point2Bearing,
                interpPoint2,
                interpPoint2Bearing,
                false));
      }
    }

    this.edgePoints = new GeoPoint[] {edgePoint};

    // System.out.println("Is edgepoint within? " + isWithin(edgePoint));
  }

