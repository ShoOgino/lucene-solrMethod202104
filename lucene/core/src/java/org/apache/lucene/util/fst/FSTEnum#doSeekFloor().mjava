  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /
  // SEEK_END)?  saves the eq check above?
  /** Seeks to largest term that's &lt;= target. */
  void doSeekFloor() throws IOException {

    // TODO: possibly caller could/should provide common
    // prefix length?  ie this work may be redundant if
    // caller is in fact intersecting against its own
    // automaton
    // System.out.println("FE: seek floor upto=" + upto);

    // Save CPU by starting at the end of the shared prefix
    // b/w our current term & the target:
    rewindPrefix();

    // System.out.println("FE: after rewind upto=" + upto);

    FST.Arc<T> arc = getArc(upto);

    // System.out.println("FE: init targetLabel=" + targetLabel);

    // Now scan forward, matching the new suffix of the target
    while (arc != null) {
      // System.out.println("  cycle upto=" + upto + " arc.label=" + arc.label + " (" + (char)
      // arc.label + ") targetLabel=" + targetLabel + " isLast?=" + arc.isLast() + " bba=" +
      // arc.bytesPerArc);
      int targetLabel = getTargetLabel();

      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {
        // Arcs are in an array
        final FST.BytesReader in = fst.getBytesReader();
        if (arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {
          arc = doSeekFloorArrayDirectAddressing(arc, targetLabel, in);
        } else {
          assert arc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH;
          arc = doSeekFloorArrayPacked(arc, targetLabel, in);
        }
      } else {
        arc = doSeekFloorList(arc, targetLabel);
      }
    }
  }

