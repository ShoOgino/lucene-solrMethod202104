  /**
   * Get a token stream from either un-inverting a term vector if possible, or by analyzing the
   * text.
   *
   * <p>WARNING: Don't call this if there is more than one value for this field. If there are, and
   * if there are term vectors, then there is a single tokenstream with offsets suggesting all the
   * field values were concatenated.
   *
   * @param field The field to either get term vectors from or to analyze the text from.
   * @param tvFields from {@link IndexReader#getTermVectors(int)}. Possibly null. For performance,
   *     this instance should be re-used for the same document (e.g. when highlighting multiple
   *     fields).
   * @param text the text to analyze, failing term vector un-inversion
   * @param analyzer the analyzer to analyze {@code text} with, failing term vector un-inversion
   * @param maxStartOffset Terms with a startOffset greater than this aren't returned. Use -1 for no
   *     limit. Suggest using {@link Highlighter#getMaxDocCharsToAnalyze()} - 1.
   * @return a token stream from either term vectors, or from analyzing the text. Never null.
   */
  public static TokenStream getTokenStream(
      String field, Fields tvFields, String text, Analyzer analyzer, int maxStartOffset)
      throws IOException {
    TokenStream tokenStream = getTermVectorTokenStreamOrNull(field, tvFields, maxStartOffset);
    if (tokenStream != null) {
      return tokenStream;
    }
    tokenStream = analyzer.tokenStream(field, text);
    if (maxStartOffset >= 0 && maxStartOffset < text.length() - 1) {
      tokenStream = new LimitTokenOffsetFilter(tokenStream, maxStartOffset);
    }
    return tokenStream;
  }

