  @Override
  @SuppressWarnings({"rawtypes"})
  public void init(NamedList args) {
    super.init(args);
    assert codec == null;
    String compressionModeStr = (String)args.get(COMPRESSION_MODE);
    Mode compressionMode;
    if (compressionModeStr != null) {
      try {
        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));
      } catch (IllegalArgumentException e) {
        throw new SolrException(ErrorCode.SERVER_ERROR, 
            "Invalid compressionMode: '" + compressionModeStr + 
            "'. Value must be one of " + Arrays.toString(Mode.values()));
      }
      log.debug("Using compressionMode: {}", compressionMode);
    } else {
      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;
      log.debug("Using default compressionMode: {}", compressionMode);
    }
    codec = new Lucene90Codec(compressionMode) {
      @Override
      public PostingsFormat getPostingsFormatForField(String field) {
        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);
        if (schemaField != null) {
          String postingsFormatName = schemaField.getType().getPostingsFormat();
          if (postingsFormatName != null) {
            return PostingsFormat.forName(postingsFormatName);
          }
        }
        return super.getPostingsFormatForField(field);
      }
      @Override
      public DocValuesFormat getDocValuesFormatForField(String field) {
        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);
        if (schemaField != null) {
          String docValuesFormatName = schemaField.getType().getDocValuesFormat();
          if (docValuesFormatName != null) {
            return DocValuesFormat.forName(docValuesFormatName);
          }
        }
        return super.getDocValuesFormatForField(field);
      }
    };
  }

