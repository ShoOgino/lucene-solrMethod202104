  /**
   * Returns the files required for replication. By default, this method returns all files that
   * exist in the new revision, but not in the handler.
   */
  protected Map<String, List<RevisionFile>> requiredFiles(
      Map<String, List<RevisionFile>> newRevisionFiles) {
    Map<String, List<RevisionFile>> handlerRevisionFiles = handler.currentRevisionFiles();
    if (handlerRevisionFiles == null) {
      return newRevisionFiles;
    }

    Map<String, List<RevisionFile>> requiredFiles = new HashMap<>();
    for (Entry<String, List<RevisionFile>> e : handlerRevisionFiles.entrySet()) {
      // put the handler files in a Set, for faster contains() checks later
      Set<String> handlerFiles = new HashSet<>();
      for (RevisionFile file : e.getValue()) {
        handlerFiles.add(file.fileName);
      }

      // make sure to preserve revisionFiles order
      ArrayList<RevisionFile> res = new ArrayList<>();
      String source = e.getKey();
      assert newRevisionFiles.containsKey(source)
          : "source not found in newRevisionFiles: " + newRevisionFiles;
      for (RevisionFile file : newRevisionFiles.get(source)) {
        if (!handlerFiles.contains(file.fileName)) {
          res.add(file);
        }
      }
      requiredFiles.put(source, res);
    }

    return requiredFiles;
  }

