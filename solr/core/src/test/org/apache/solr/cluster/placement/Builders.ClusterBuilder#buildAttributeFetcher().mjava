    public AttributeFetcher buildAttributeFetcher() {
      Map<Node, Integer> nodeToCoreCount = new HashMap<>();
      Map<Node, Long> nodeToFreeDisk = new HashMap<>();
      Map<String, Map<Node, String>> sysprops = new HashMap<>();
      Map<String, Map<Node, Double>> metrics = new HashMap<>();

      // TODO And a few more missing and will be added...

      // Slight redoing of work twice (building Node instances) but let's favor readability over tricks (I could think
      // of many) to reuse the nodes computed in build() or build the AttributeFetcher at the same time.
      for (NodeBuilder nodeBuilder : nodeBuilders) {
        Node node = nodeBuilder.build();

        if (nodeBuilder.getCoreCount() != null) {
          nodeToCoreCount.put(node, nodeBuilder.getCoreCount());
        }
        if (nodeBuilder.getFreeDiskGB() != null) {
          nodeToFreeDisk.put(node, nodeBuilder.getFreeDiskGB());
        }
        if (nodeBuilder.getSysprops() != null) {
          nodeBuilder.getSysprops().forEach((name, value) -> {
            sysprops.computeIfAbsent(name, n -> new HashMap<>())
                .put(node, value);
          });
        }
        if (nodeBuilder.getMetrics() != null) {
          nodeBuilder.getMetrics().forEach((name, value) -> {
            metrics.computeIfAbsent(name, n -> new HashMap<>())
                .put(node, value);
          });
        }
      }

      AttributeValues attributeValues = new AttributeValuesImpl(nodeToCoreCount, Map.of(), nodeToFreeDisk, Map.of(), Map.of(), Map.of(), sysprops, metrics);
      return new AttributeFetcherForTest(attributeValues);
    }

