  public void testVisitor() {
    // singleton reports back to consumeTerms()
    TermInSetQuery singleton = new TermInSetQuery("field", new BytesRef("term1"));
    singleton.visit(
        new QueryVisitor() {
          @Override
          public void consumeTerms(Query query, Term... terms) {
            assertEquals(1, terms.length);
            assertEquals(new Term("field", new BytesRef("term1")), terms[0]);
          }

          @Override
          public void consumeTermsMatching(
              Query query, String field, Supplier<ByteRunAutomaton> automaton) {
            fail("Singleton TermInSetQuery should not try to build ByteRunAutomaton");
          }
        });

    // multiple values built into automaton
    List<BytesRef> terms = new ArrayList<>();
    for (int i = 0; i < 100; i++) {
      terms.add(new BytesRef("term" + i));
    }
    TermInSetQuery t = new TermInSetQuery("field", terms);
    t.visit(
        new QueryVisitor() {
          @Override
          public void consumeTerms(Query query, Term... terms) {
            fail("TermInSetQuery with multiple terms should build automaton");
          }

          @Override
          public void consumeTermsMatching(
              Query query, String field, Supplier<ByteRunAutomaton> automaton) {
            ByteRunAutomaton a = automaton.get();
            BytesRef test = new BytesRef("nonmatching");
            assertFalse(a.run(test.bytes, test.offset, test.length));
            for (BytesRef term : terms) {
              assertTrue(a.run(term.bytes, term.offset, term.length));
            }
          }
        });
  }

