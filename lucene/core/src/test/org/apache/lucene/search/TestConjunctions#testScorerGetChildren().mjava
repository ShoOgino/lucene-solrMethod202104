  public void testScorerGetChildren() throws Exception {
    Directory dir = newDirectory();
    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
    Document doc = new Document();
    doc.add(newTextField("field", "a b", Field.Store.NO));
    w.addDocument(doc);
    IndexReader r = DirectoryReader.open(w);
    BooleanQuery.Builder b = new BooleanQuery.Builder();
    b.add(new TermQuery(new Term("field", "a")), BooleanClause.Occur.MUST);
    b.add(new TermQuery(new Term("field", "b")), BooleanClause.Occur.FILTER);
    Query q = b.build();
    IndexSearcher s = new IndexSearcher(r);
    final boolean[] setScorerCalled = new boolean[1];
    s.search(
        q,
        new SimpleCollector() {
          @Override
          public void setScorer(Scorable s) throws IOException {
            Collection<Scorer.ChildScorable> childScorers = s.getChildren();
            setScorerCalled[0] = true;
            assertEquals(2, childScorers.size());
            Set<String> terms = new HashSet<>();
            for (Scorer.ChildScorable childScorer : childScorers) {
              Query query = ((Scorer) childScorer.child).getWeight().getQuery();
              assertTrue(query instanceof TermQuery);
              Term term = ((TermQuery) query).getTerm();
              assertEquals("field", term.field());
              terms.add(term.text());
            }
            assertEquals(2, terms.size());
            assertTrue(terms.contains("a"));
            assertTrue(terms.contains("b"));
          }

          @Override
          public void collect(int doc) {}

          @Override
          public ScoreMode scoreMode() {
            return ScoreMode.COMPLETE;
          }
        });
    assertTrue(setScorerCalled[0]);
    IOUtils.close(r, w, dir);
  }

