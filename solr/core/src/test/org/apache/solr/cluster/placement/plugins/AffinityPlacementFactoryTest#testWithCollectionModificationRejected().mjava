  @Test
  public void testWithCollectionModificationRejected() throws Exception {
    int NUM_NODES = 2;
    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);
    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(secondaryCollectionName);
    collectionBuilder.initializeShardsReplicas(1, 4, 0, 0, clusterBuilder.getLiveNodeBuilders());
    clusterBuilder.addCollection(collectionBuilder);

    collectionBuilder = Builders.newCollectionBuilder(primaryCollectionName);
    collectionBuilder.initializeShardsReplicas(2, 2, 0, 0, clusterBuilder.getLiveNodeBuilders());
    clusterBuilder.addCollection(collectionBuilder);

    PlacementContext placementContext = clusterBuilder.buildPlacementContext();
    Cluster cluster = placementContext.getCluster();

    SolrCollection secondaryCollection = cluster.getCollection(secondaryCollectionName);
    SolrCollection primaryCollection = cluster.getCollection(primaryCollectionName);

    Node node = cluster.getLiveNodes().iterator().next();
    Set<Replica> secondaryReplicas = new HashSet<>();
    secondaryCollection.shards().forEach(shard ->
        shard.replicas().forEach(replica -> {
          if (secondaryReplicas.size() < 1 && replica.getNode().equals(node)) {
            secondaryReplicas.add(replica);
          }
        }));

    DeleteReplicasRequest deleteReplicasRequest = ModificationRequestImpl.createDeleteReplicasRequest(secondaryCollection, secondaryReplicas);
    try {
      plugin.verifyAllowedModification(deleteReplicasRequest, placementContext);
    } catch (PlacementException pe) {
      fail("should have succeeded: " + pe.toString());
    }

    secondaryCollection.shards().forEach(shard ->
        shard.replicas().forEach(replica -> {
          if (secondaryReplicas.size() < 2 && replica.getNode().equals(node)) {
            secondaryReplicas.add(replica);
          }
        }));

    deleteReplicasRequest = ModificationRequestImpl.createDeleteReplicasRequest(secondaryCollection, secondaryReplicas);
    try {
      plugin.verifyAllowedModification(deleteReplicasRequest, placementContext);
      fail("should have failed: " + deleteReplicasRequest);
    } catch (PlacementException pe) {
    }
  }

