  /**
   * Validates the codec footer previously written by {@link #writeFooter}, optionally passing an
   * unexpected exception that has already occurred.
   *
   * <p>When a {@code priorException} is provided, this method will add a suppressed exception
   * indicating whether the checksum for the stream passes, fails, or cannot be computed, and
   * rethrow it. Otherwise it behaves the same as {@link #checkFooter(ChecksumIndexInput)}.
   *
   * <p>Example usage:
   *
   * <pre class="prettyprint">
   * try (ChecksumIndexInput input = ...) {
   *   Throwable priorE = null;
   *   try {
   *     // ... read a bunch of stuff ...
   *   } catch (Throwable exception) {
   *     priorE = exception;
   *   } finally {
   *     CodecUtil.checkFooter(input, priorE);
   *   }
   * }
   * </pre>
   */
  public static void checkFooter(ChecksumIndexInput in, Throwable priorException)
      throws IOException {
    if (priorException == null) {
      checkFooter(in);
    } else {
      try {
        // If we have evidence of corruption then we return the corruption as the
        // main exception and the prior exception gets suppressed. Otherwise we
        // return the prior exception with a suppressed exception that notifies
        // the user that checksums matched.
        long remaining = in.length() - in.getFilePointer();
        if (remaining < footerLength()) {
          // corruption caused us to read into the checksum footer already: we can't proceed
          throw new CorruptIndexException(
              "checksum status indeterminate: remaining="
                  + remaining
                  + "; please run checkindex for more details",
              in);
        } else {
          // otherwise, skip any unread bytes.
          in.skipBytes(remaining - footerLength());

          // now check the footer
          long checksum = checkFooter(in);
          priorException.addSuppressed(
              new CorruptIndexException(
                  "checksum passed ("
                      + Long.toHexString(checksum)
                      + "). possibly transient resource issue, or a Lucene or JVM bug",
                  in));
        }
      } catch (CorruptIndexException corruptException) {
        corruptException.addSuppressed(priorException);
        throw corruptException;
      } catch (Throwable t) {
        // catch-all for things that shouldn't go wrong (e.g. OOM during readInt) but could...
        priorException.addSuppressed(
            new CorruptIndexException(
                "checksum status indeterminate: unexpected exception", in, t));
      }
      throw IOUtils.rethrowAlways(priorException);
    }
  }

