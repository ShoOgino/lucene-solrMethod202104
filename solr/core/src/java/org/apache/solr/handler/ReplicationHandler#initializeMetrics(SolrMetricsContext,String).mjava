  //TODO: Handle compatibility in 8.x
  @Override
  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {
    super.initializeMetrics(parentContext, scope);
    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : parentContext.nullString()),
        true, "indexSize", getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().toString() : parentContext.nullString()),
         true, "indexVersion", getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().generation : parentContext.nullNumber()),
        true, GENERATION, getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? core.getIndexDir() : parentContext.nullString()),
        true, "indexPath", getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> isLeader,
         true, "isLeader", getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> isFollower,
         true, "isFollower", getCategory().toString(), scope);
    final MetricsMap fetcherMap = new MetricsMap(map -> {
      IndexFetcher fetcher = currentIndexFetcher;
      if (fetcher != null) {
        map.put(LEADER_URL, fetcher.getLeaderUrl());
        if (getPollInterval() != null) {
          map.put(POLL_INTERVAL, getPollInterval());
        }
        map.put("isPollingDisabled", isPollingDisabled());
        map.put("isReplicating", isReplicating());
        long elapsed = fetcher.getReplicationTimeElapsed();
        long val = fetcher.getTotalBytesDownloaded();
        if (elapsed > 0) {
          map.put("timeElapsed", elapsed);
          map.put("bytesDownloaded", val);
          map.put("downloadSpeed", val / elapsed);
        }
        Properties props = loadReplicationProperties();
        addReplicationProperties(map::putNoEx, props);
      }
    });
    solrMetricsContext.gauge(fetcherMap, true, "fetcher", getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> isLeader && includeConfFiles != null ? includeConfFiles : "",
         true, "confFilesToReplicate", getCategory().toString(), scope);
    solrMetricsContext.gauge(() -> isLeader ? getReplicateAfterStrings() : Collections.<String>emptyList(),
        true, REPLICATE_AFTER, getCategory().toString(), scope);
    solrMetricsContext.gauge( () -> isLeader && replicationEnabled.get(),
        true, "replicationEnabled", getCategory().toString(), scope);
  }

