  @Test
  public void testReuse() throws IOException {
    AtomicInteger allocations = new AtomicInteger(0);
    ByteBuffersDataOutput.ByteBufferRecycler reuser =
        new ByteBuffersDataOutput.ByteBufferRecycler(
            (size) -> {
              allocations.incrementAndGet();
              return ByteBuffer.allocate(size);
            });

    ByteBuffersDataOutput o =
        new ByteBuffersDataOutput(
            ByteBuffersDataOutput.DEFAULT_MIN_BITS_PER_BLOCK,
            ByteBuffersDataOutput.DEFAULT_MAX_BITS_PER_BLOCK,
            reuser::allocate,
            reuser::reuse);

    // Add some random data first.
    long genSeed = randomLong();
    int addCount = randomIntBetween(1000, 5000);
    addRandomData(o, new Random(genSeed), addCount);
    byte[] data = o.toArrayCopy();

    // Use the same sequence over reused instance.
    final int expectedAllocationCount = allocations.get();
    o.reset();
    addRandomData(o, new Random(genSeed), addCount);

    assertEquals(expectedAllocationCount, allocations.get());
    assertArrayEquals(data, o.toArrayCopy());
  }

