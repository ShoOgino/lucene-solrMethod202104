    private void testMissingIndexFiles(BackupRepository repository, BackupFilePaths paths) throws IOException {
        PurgeGraph purgeGraph = new PurgeGraph();
        buildCompleteGraph(repository, paths, purgeGraph);

        Set<String> indexFiles = purgeGraph.indexFileNodeMap.keySet();
        when(repository.listAllOrEmpty(same(paths.getIndexDir()))).thenAnswer((Answer<String[]>) invocationOnMock -> {
            Set<String> newFiles = new HashSet<>(indexFiles);
            newFiles.remove("s1_102");
            return newFiles.toArray(new String[0]);
        });
        purgeGraph.findDeletableNodes(repository, paths);

        assertEquals(3, purgeGraph.backupIdDeletes.size());
        assertEquals(shardBackupIds.length, purgeGraph.shardBackupMetadataDeletes.size());
        assertEquals(purgeGraph.indexFileNodeMap.size(), purgeGraph.indexFileDeletes.size() + 1);

        purgeGraph = new PurgeGraph();
        buildCompleteGraph(repository, paths, purgeGraph);

        Set<String> indexFiles2 = purgeGraph.indexFileNodeMap.keySet();
        when(repository.listAllOrEmpty(same(paths.getIndexDir()))).thenAnswer((Answer<String[]>) invocationOnMock -> {
            Set<String> newFiles = new HashSet<>(indexFiles2);
            newFiles.remove("s1_101");
            return newFiles.toArray(new String[0]);
        });
        purgeGraph.findDeletableNodes(repository, paths);

        assertEquals(2, purgeGraph.backupIdDeletes.size());
        assertEquals(4, purgeGraph.shardBackupMetadataDeletes.size());
        assertTrue(purgeGraph.indexFileDeletes.contains("s1_100"));
        assertFalse(purgeGraph.indexFileDeletes.contains("s1_101"));
    }

