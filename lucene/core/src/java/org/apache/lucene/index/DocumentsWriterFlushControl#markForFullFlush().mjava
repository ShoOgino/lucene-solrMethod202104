  long markForFullFlush() {
    final DocumentsWriterDeleteQueue flushingQueue;
    long seqNo;
    synchronized (this) {
      assert fullFlush == false
          : "called DWFC#markForFullFlush() while full flush is still running";
      assert fullFlushMarkDone == false : "full flush collection marker is still set to true";
      fullFlush = true;
      flushingQueue = documentsWriter.deleteQueue;
      // Set a new delete queue - all subsequent DWPT will use this queue until
      // we do another full flush
      perThreadPool
          .lockNewWriters(); // no new thread-states while we do a flush otherwise the seqNo
      // accounting might be off
      try {
        // Insert a gap in seqNo of current active thread count, in the worst case each of those
        // threads now have one operation in flight.  It's fine
        // if we have some sequence numbers that were never assigned:
        DocumentsWriterDeleteQueue newQueue =
            documentsWriter.deleteQueue.advanceQueue(perThreadPool.size());
        seqNo = documentsWriter.deleteQueue.getMaxSeqNo();
        documentsWriter.resetDeleteQueue(newQueue);
      } finally {
        perThreadPool.unlockNewWriters();
      }
    }
    final List<DocumentsWriterPerThread> fullFlushBuffer = new ArrayList<>();
    for (final DocumentsWriterPerThread next :
        perThreadPool.filterAndLock(dwpt -> dwpt.deleteQueue == flushingQueue)) {
      try {
        assert next.deleteQueue == flushingQueue || next.deleteQueue == documentsWriter.deleteQueue
            : " flushingQueue: "
                + flushingQueue
                + " currentqueue: "
                + documentsWriter.deleteQueue
                + " perThread queue: "
                + next.deleteQueue
                + " numDocsInRam: "
                + next.getNumDocsInRAM();

        if (next.getNumDocsInRAM() > 0) {
          final DocumentsWriterPerThread flushingDWPT;
          synchronized (this) {
            if (next.isFlushPending() == false) {
              setFlushPending(next);
            }
            flushingDWPT = checkOutForFlush(next);
          }
          assert flushingDWPT != null
              : "DWPT must never be null here since we hold the lock and it holds documents";
          assert next == flushingDWPT : "flushControl returned different DWPT";
          fullFlushBuffer.add(flushingDWPT);
        } else {
          // it's possible that we get a DWPT with 0 docs if we flush concurrently to
          // threads getting DWPTs from the pool. In this case we simply remove it from
          // the pool and drop it on the floor.
          boolean checkout = perThreadPool.checkout(next);
          assert checkout;
        }
      } finally {
        next.unlock();
      }
    }
    synchronized (this) {
      /* make sure we move all DWPT that are where concurrently marked as
       * pending and moved to blocked are moved over to the flushQueue. There is
       * a chance that this happens since we marking DWPT for full flush without
       * blocking indexing.*/
      pruneBlockedQueue(flushingQueue);
      assert assertBlockedFlushes(documentsWriter.deleteQueue);
      flushQueue.addAll(fullFlushBuffer);
      updateStallState();
      fullFlushMarkDone =
          true; // at this point we must have collected all DWPTs that belong to the old delete
      // queue
    }
    assert assertActiveDeleteQueue(documentsWriter.deleteQueue);
    assert flushingQueue.getLastSequenceNumber() <= flushingQueue.getMaxSeqNo();
    return seqNo;
  }

