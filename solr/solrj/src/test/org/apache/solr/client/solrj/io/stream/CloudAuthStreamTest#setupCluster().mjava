  @BeforeClass
  public static void setupCluster() throws Exception {
    final List<String> users = Arrays.asList(READ_ONLY_USER, WRITE_X_USER, WRITE_Y_USER, ADMIN_USER);
    // For simplicity: every user uses a password the same as their name...
    final Map<String,String> credentials = users.stream()
      .collect(Collectors.toMap(Function.identity(), s -> getSaltedHashedValue(s)));
    
    // For simplicity: Every user is their own role...
    final Map<String,String> roles = users.stream()
      .collect(Collectors.toMap(Function.identity(), Function.identity()));

    final String SECURITY_JSON = Utils.toJSONString
      (Utils.makeMap("authorization",
                     Utils.makeMap("class", RuleBasedAuthorizationPlugin.class.getName(),
                                   "user-role", roles,
                                   // NOTE: permissions order matters!
                                   "permissions", Arrays.asList(// any authn user can 'read' or hit /stream
                                                                Utils.makeMap("name","read",
                                                                              "role","*"),
                                                                Utils.makeMap("name","stream",
                                                                              "collection", "*",
                                                                              "path", "/stream",
                                                                              "role","*"),
                                                                // per collection write perms
                                                                Utils.makeMap("name","update",
                                                                              "collection", COLLECTION_X,
                                                                              "role", WRITE_X_USER),
                                                                Utils.makeMap("name","update",
                                                                              "collection", COLLECTION_Y,
                                                                              "role", WRITE_Y_USER),
                                                                Utils.makeMap("name","all",
                                                                              "role",ADMIN_USER))),
                     "authentication",
                     Utils.makeMap("class", BasicAuthPlugin.class.getName(),
                                   "blockUnknown",true,
                                   "credentials", credentials)));
    
    // we want at most one core per node to force lots of network traffic to try and tickle distributed bugs
    configureCluster(5)
      .withSecurityJson(SECURITY_JSON)
      .configure();

    for (String collection : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {
      CollectionAdminRequest.createCollection(collection, "_default", 2, 2)
          .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)
          .setBasicAuthCredentials(ADMIN_USER, ADMIN_USER)
        .process(cluster.getSolrClient());
    }
    
    for (String collection : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {
      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS,
                                           (n, c) -> DocCollection.isFullyActive(n, c, 2, 2));
    }

    solrUrl = cluster.getRandomJetty(random()).getProxyBaseUrl().toString();
    
    log.info("All stream requests will be sent to random solrUrl: {}", solrUrl);
  }

