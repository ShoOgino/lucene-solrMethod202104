  @Override
  public void execute(CoreAdminHandler.CallInfo it) throws Exception {
    final SolrParams params = it.req.getParams();
    String cname = params.required().get(CoreAdminParams.CORE);
    String name = params.get(NAME);
    String shardBackupIdStr = params.get(CoreAdminParams.SHARD_BACKUP_ID);
    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);

    if (shardBackupIdStr == null && name == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Either 'name' or 'shardBackupId' must be specified");
    }

    ZkController zkController = it.handler.coreContainer.getZkController();
    if (zkController == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Only valid for SolrCloud");
    }

    try (BackupRepository repository = it.handler.coreContainer.newBackupRepository(repoName);
         SolrCore core = it.handler.coreContainer.getCore(cname)) {

      String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));
      if (location == null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'location' is not specified as a query"
                + " parameter or as a default repository property");
      }

      URI locationUri = repository.createURI(location);
      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();
      // this core must be the only replica in its shard otherwise
      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica
      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());
      if (slice.getReplicas().size() != 1) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
            "Failed to restore core=" + core.getName() + ", the core must be the only replica in its shard");
      }

      RestoreCore restoreCore;
      if (shardBackupIdStr != null) {
        final ShardBackupId shardBackupId = ShardBackupId.from(shardBackupIdStr);
        restoreCore = RestoreCore.createWithMetaFile(repository, core, locationUri, shardBackupId);
      } else {
        restoreCore = RestoreCore.create(repository, core, locationUri, name);
      }
      boolean success = restoreCore.doRestore();
      if (!success) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Failed to restore core=" + core.getName());
      }
      // other replicas to-be-created will know that they are out of date by
      // looking at their term : 0 compare to term of this core : 1
      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();
    }
  }

