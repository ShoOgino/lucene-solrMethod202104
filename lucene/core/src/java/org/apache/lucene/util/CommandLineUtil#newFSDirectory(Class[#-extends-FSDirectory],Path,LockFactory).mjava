  /**
   * Creates a new specific FSDirectory instance
   *
   * @param clazz The class of the object to be created
   * @param path The file to be used as parameter constructor
   * @param lf The lock factory to be used
   * @return The new FSDirectory instance
   * @throws NoSuchMethodException If the Directory does not have a constructor that takes <code>
   *     Path</code>.
   * @throws InstantiationException If the class is abstract or an interface.
   * @throws IllegalAccessException If the constructor does not have public visibility.
   * @throws InvocationTargetException If the constructor throws an exception
   */
  public static FSDirectory newFSDirectory(
      Class<? extends FSDirectory> clazz, Path path, LockFactory lf)
      throws ReflectiveOperationException {
    // Assuming every FSDirectory has a ctor(Path):
    Constructor<? extends FSDirectory> ctor = clazz.getConstructor(Path.class, LockFactory.class);
    return ctor.newInstance(path, lf);
  }

