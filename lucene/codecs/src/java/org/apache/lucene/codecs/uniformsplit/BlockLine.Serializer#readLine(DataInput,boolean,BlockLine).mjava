    /**
     * Reads the current line.
     *
     * @param isIncrementalEncodingSeed Whether the term is a seed of the incremental encoding.
     *     {@code true} for the first and middle term, {@code false} for other terms.
     * @param reuse A {@link BlockLine} instance to reuse; or null if none.
     */
    public BlockLine readLine(
        DataInput blockInput, boolean isIncrementalEncodingSeed, BlockLine reuse)
        throws IOException {
      int termStateRelativeOffset = blockInput.readVInt();
      if (termStateRelativeOffset < 0) {
        throw new CorruptIndexException(
            "Illegal termStateRelativeOffset= " + termStateRelativeOffset, blockInput);
      }
      return reuse == null
          ? new BlockLine(
              readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, null),
              termStateRelativeOffset)
          : reuse.reset(
              readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, reuse.termBytes),
              termStateRelativeOffset);
    }

