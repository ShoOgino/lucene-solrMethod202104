  /**
   * <p>Parses the {@link Map} obtained as the value for key {@link #PLACEMENT_PLUGIN_CONFIG_KEY} from
   * the {@code clusterprops.json} configuration {@link Map} (obtained by calling
   * {@link org.apache.solr.client.solrj.impl.ClusterStateProvider#getClusterProperties()}) and translates it into a
   * configuration consumable by the plugin (and that will not change as Solr changes internally how and where it stores
   * configuration).</p>
   *
   * <p>Configuration properties {@code class} and {@code name} are reserved: for defining the plugin factory class and
   * a human readable plugin name. All other properties are plugin specific.</p>
   *
   * <p>See configuration example and how-to in {@link AffinityPlacementFactory}.</p>
   */
  public static PlacementPluginConfig createConfigFromProperties(Map<String, Object> pluginConfig) {
    final Map<String, String> stringConfigs = new HashMap<>();
    final Map<String, Long> longConfigs = new HashMap<>();
    final Map<String, Boolean> boolConfigs = new HashMap<>();
    final Map<String, Double> doubleConfigs = new HashMap<>();

    for (Map.Entry<String, Object> e : pluginConfig.entrySet()) {
      String key = e.getKey();
      if (PlacementPluginConfig.FACTORY_CLASS.equals(key)) {
        continue;
      }

      if (key == null) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Missing config name attribute in parameter of " + PlacementPluginConfig.PLACEMENT_PLUGIN_CONFIG_KEY);
      }

      Object value = e.getValue();

      if (value == null) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Missing config value for parameter " + key + " of " + PlacementPluginConfig.PLACEMENT_PLUGIN_CONFIG_KEY);
      }

      if (value instanceof String) {
        stringConfigs.put(key, (String) value);
      } else if (value instanceof Long) {
        longConfigs.put(key, (Long) value);
      } else if (value instanceof Boolean) {
        boolConfigs.put(key, (Boolean) value);
      } else if (value instanceof Double) {
        doubleConfigs.put(key, (Double) value);
      } else {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unsupported config type " + value.getClass().getName() +
            " for parameter " + key + " of " + PlacementPluginConfig.PLACEMENT_PLUGIN_CONFIG_KEY);
      }
    }

    return new PlacementPluginConfigImpl(stringConfigs, longConfigs, boolConfigs, doubleConfigs);
  }

