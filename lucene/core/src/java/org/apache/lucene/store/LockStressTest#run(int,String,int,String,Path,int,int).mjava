  @SuppressForbidden(reason = "System.out required: command line tool")
  @SuppressWarnings("try")
  private static int run(
      int myID,
      String verifierHost,
      int verifierPort,
      String lockFactoryClassName,
      Path lockDirPath,
      int sleepTimeMS,
      int count)
      throws IOException, InterruptedException {
    if (myID < 0 || myID > 255) {
      System.out.println("myID must be a unique int 0..255");
      return 1;
    }

    final LockFactory lockFactory = getNewLockFactory(lockFactoryClassName);
    // we test the lock factory directly, so we don't need it on the directory itself (the directory
    // is just for testing)
    final FSDirectory lockDir = new NIOFSDirectory(lockDirPath, NoLockFactory.INSTANCE);
    final InetSocketAddress addr = new InetSocketAddress(verifierHost, verifierPort);
    System.out.println(
        "Connecting to server " + addr + " and registering as client " + myID + "...");
    try (Socket socket = new Socket()) {
      socket.setReuseAddress(true);
      socket.connect(addr, 500);
      final OutputStream out = socket.getOutputStream();
      final InputStream in = socket.getInputStream();

      out.write(myID);
      out.flush();
      LockFactory verifyLF = new VerifyingLockFactory(lockFactory, in, out);
      final Random rnd = new Random();

      // wait for starting gun
      if (in.read() != LockVerifyServer.START_GUN_SIGNAL) {
        throw new IOException("Protocol violation");
      }

      for (int i = 0; i < count; i++) {
        try (final Lock l = verifyLF.obtainLock(lockDir, LOCK_FILE_NAME)) {
          if (rnd.nextInt(10) == 0) {
            if (rnd.nextBoolean()) {
              verifyLF = new VerifyingLockFactory(getNewLockFactory(lockFactoryClassName), in, out);
            }
            try (final Lock secondLock = verifyLF.obtainLock(lockDir, LOCK_FILE_NAME)) {
              throw new IOException("Double obtain");
            } catch (LockObtainFailedException loe) {
              // pass
            }
          }
          Thread.sleep(sleepTimeMS);
        } catch (LockObtainFailedException loe) {
          // obtain failed
        }

        if (i % 500 == 0) {
          System.out.println((i * 100. / count) + "% done.");
        }

        Thread.sleep(sleepTimeMS);
      }
    }

    System.out.println("Finished " + count + " tries.");
    return 0;
  }

