    /**
     * Builds the URI for the backup location given the user-provided 'location' and backup 'name'.
     *
     * @param repository the backup repository, used to list files and resolve URI's.
     * @param location a URI representing the repository location holding each backup name
     * @param backupName the specific backup name to create a URI for
     */
    public static URI buildExistingBackupLocationURI(BackupRepository repository, URI location, String backupName) throws IOException {
        final URI backupNameUri = repository.resolve(location, backupName);
        final String[] entries = repository.listAll(backupNameUri);
        final boolean incremental = ! Arrays.stream(entries).anyMatch(entry -> entry.equals(BackupManager.TRADITIONAL_BACKUP_PROPS_FILE));
        if (incremental) {
            // Incremental backups have an additional URI path component representing the collection that was backed up.
            // This collection directory is the path assumed by other backup code.
            if (entries.length != 1) {
                throw new IllegalStateException("Incremental backup URI [" + backupNameUri + "] expected to hold a single directory");
            }
            final String collectionName = entries[0];
            return repository.resolve(backupNameUri, entries[0]);
        } else {
            return backupNameUri;
        }
    }

