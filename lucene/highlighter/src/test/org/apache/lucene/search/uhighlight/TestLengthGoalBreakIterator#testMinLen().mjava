  public void testMinLen() throws IOException {
    // minLen mode is simpler than targetLen... just test a few cases

    Query query = query("dd");
    assertEquals("almost two sent A",
        " Cc <b>dd</b>.", highlightMinLen(CONTENT, query, 0, 0.f));
    assertEquals("almost two sent B",
        " Cc <b>dd</b>.", highlightMinLen(CONTENT, query, 1, 0.5f));
    assertEquals("almost two sent C",
        " Cc <b>dd</b>.", highlightMinLen(CONTENT, query, 5, 1.f));

    assertEquals("barely two sent A",
        " Cc <b>dd</b>. Ee ff", highlightMinLen(CONTENT, query, 1, 0.f));
    assertEquals("barely two sent B",
        " Cc <b>dd</b>. Ee ff", highlightMinLen(CONTENT, query, 2, 0.5f));
    assertEquals("barely two sent C",
        "Aa bb. Cc <b>dd</b>.", highlightMinLen(CONTENT, query, 7, 1.f));
    assertEquals("barely two sent D/a",
        " Cc <b>dd</b>.", highlightMinLen(CONTENT, query, 2, 0.55f));
    assertEquals("barely two sent D/b",
        " Cc <b>dd</b>. Ee ff", highlightMinLen(CONTENT, query, 3, 0.55f));
    assertEquals("barely two sent E/a",
        " Cc <b>dd</b>. Ee ff", highlightMinLen(CONTENT, query, 10, 0.5f));
    assertEquals("barely two sent E/b",
        "Aa bb. Cc <b>dd</b>. Ee ff", highlightMinLen(CONTENT, query, 10, 0.7f));
    assertEquals("barely two sent E/c",
        "Aa bb. Cc <b>dd</b>.", highlightMinLen(CONTENT, query, 9, 0.9f));

    query = query("ddxyzee");
    assertEquals("test fragment search from the middle of the match; almost including",
        "<b>ddxyzee</b> ", highlightMinLen(CONTENT3, query, 7, 0.5f, ' '));
    assertEquals("test fragment search from the middle of the match; barely including",
        "bbcc <b>ddxyzee</b> ffgg ", highlightMinLen(CONTENT3, query, 8, 0.5f, ' '));
  }

