  private int createIndex(Path docsPath, Path indexPath) throws IOException {
    IndexWriterConfig iwc = new IndexWriterConfig().setOpenMode(IndexWriterConfig.OpenMode.CREATE);
    // iwc.setMergePolicy(NoMergePolicy.INSTANCE);
    iwc.setRAMBufferSizeMB(1994d);
    if (quiet == false) {
      iwc.setInfoStream(new PrintStreamInfoStream(System.out));
      System.out.println("creating index in " + indexPath);
    }
    long start = System.nanoTime();
    long totalBytes = (long) numDocs * dim * Float.BYTES, offset = 0;
    try (FSDirectory dir = FSDirectory.open(indexPath);
        IndexWriter iw = new IndexWriter(dir, iwc)) {
      int blockSize =
          (int)
              Math.min(totalBytes, (Integer.MAX_VALUE / (dim * Float.BYTES)) * (dim * Float.BYTES));
      float[] vector = new float[dim];
      try (FileChannel in = FileChannel.open(docsPath)) {
        int i = 0;
        while (i < numDocs) {
          FloatBuffer vectors =
              in.map(FileChannel.MapMode.READ_ONLY, offset, blockSize)
                  .order(ByteOrder.LITTLE_ENDIAN)
                  .asFloatBuffer();
          offset += blockSize;
          for (; vectors.hasRemaining() && i < numDocs; i++) {
            vectors.get(vector);
            Document doc = new Document();
            // System.out.println("vector=" + vector[0] + "," + vector[1] + "...");
            doc.add(
                new VectorField(KNN_FIELD, vector, VectorValues.SearchStrategy.DOT_PRODUCT_HNSW));
            doc.add(new StoredField(ID_FIELD, i));
            iw.addDocument(doc);
          }
        }
        if (quiet == false) {
          System.out.println("Done indexing " + numDocs + " documents; now flush");
        }
      }
    }
    long elapsed = System.nanoTime() - start;
    if (quiet == false) {
      System.out.println("Indexed " + numDocs + " documents in " + elapsed / 1_000_000_000 + "s");
    }
    return (int) (elapsed / 1_000_000);
  }

