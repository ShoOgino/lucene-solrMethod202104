  /**
   * Given a list of partitions (collections), open a select stream that projects the dimensions and
   * metrics produced by rolling up over a parallelized group of streams. If it's not possible to rollup
   * the metrics produced by the underlying metrics stream, this method returns Optional.empty.
   *
   * @param context    The current streaming expression context
   * @param partitions A list of collections to parallelize metrics computation across.
   * @param metrics    A list of metrics to rollup.
   * @return Either a TupleStream that performs a rollup over parallelized streams or empty if parallelization is not possible.
   * @throws IOException if an error occurs reading tuples from the parallelized streams
   */
  default Optional<TupleStream> openParallelStream(StreamContext context, List<String> partitions, Metric[] metrics) throws IOException {
    Optional<Metric[]> maybeRollupMetrics = getRollupMetrics(metrics);
    if (maybeRollupMetrics.isEmpty())
      return Optional.empty(); // some metric is incompatible with doing a rollup over the plist results

    TupleStream parallelStream = getSortedRollupStream(new ParallelListStream(parallelize(partitions)), maybeRollupMetrics.get());
    parallelStream.setStreamContext(context);
    parallelStream.open();
    return Optional.of(parallelStream);
  }

