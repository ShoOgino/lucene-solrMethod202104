  /**
   * Returns svg of polygon for debugging.
   *
   * <p>You can pass any number of objects: Polygon: polygon with optional holes Polygon[]: arrays
   * of polygons for convenience Rectangle: for a box double[2]: as latitude,longitude for a point
   *
   * <p>At least one object must be a polygon. The viewBox is formed around all polygons found in
   * the arguments.
   */
  public static String toSVG(Object... objects) {
    List<Object> flattened = new ArrayList<>();
    for (Object o : objects) {
      if (o instanceof Polygon[]) {
        flattened.addAll(Arrays.asList((Polygon[]) o));
      } else {
        flattened.add(o);
      }
    }
    // first compute bounding area of all the objects
    double minLat = Double.POSITIVE_INFINITY;
    double maxLat = Double.NEGATIVE_INFINITY;
    double minLon = Double.POSITIVE_INFINITY;
    double maxLon = Double.NEGATIVE_INFINITY;
    for (Object o : flattened) {
      final Rectangle r;
      if (o instanceof Polygon) {
        r = Rectangle.fromPolygon(new Polygon[] {(Polygon) o});
        minLat = Math.min(minLat, r.minLat);
        maxLat = Math.max(maxLat, r.maxLat);
        minLon = Math.min(minLon, r.minLon);
        maxLon = Math.max(maxLon, r.maxLon);
      }
    }
    if (Double.isFinite(minLat) == false
        || Double.isFinite(maxLat) == false
        || Double.isFinite(minLon) == false
        || Double.isFinite(maxLon) == false) {
      throw new IllegalArgumentException("you must pass at least one polygon");
    }

    // add some additional padding so we can really see what happens on the edges too
    double xpadding = (maxLon - minLon) / 64;
    double ypadding = (maxLat - minLat) / 64;
    // expand points to be this large
    double pointX = xpadding * 0.1;
    double pointY = ypadding * 0.1;
    StringBuilder sb = new StringBuilder();
    sb.append("<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"640\" width=\"480\" viewBox=\"");
    sb.append(minLon - xpadding)
        .append(" ")
        .append(90 - maxLat - ypadding)
        .append(" ")
        .append(maxLon - minLon + (2 * xpadding))
        .append(" ")
        .append(maxLat - minLat + (2 * ypadding));
    sb.append("\">\n");

    // encode each object
    for (Object o : flattened) {
      // tostring
      if (o instanceof double[]) {
        double point[] = (double[]) o;
        sb.append("<!-- point: ");
        sb.append(point[0]).append(',').append(point[1]);
        sb.append(" -->\n");
      } else {
        sb.append("<!-- ").append(o.getClass().getSimpleName()).append(": \n");
        sb.append(o.toString());
        sb.append("\n-->\n");
      }
      final Polygon gon;
      final String style;
      final String opacity;
      if (o instanceof Rectangle) {
        gon = boxPolygon((Rectangle) o);
        style = "fill:lightskyblue;stroke:black;stroke-width:0.2%;stroke-dasharray:0.5%,1%;";
        opacity = "0.3";
      } else if (o instanceof double[]) {
        double point[] = (double[]) o;
        gon =
            boxPolygon(
                new Rectangle(
                    Math.max(-90, point[0] - pointY),
                    Math.min(90, point[0] + pointY),
                    Math.max(-180, point[1] - pointX),
                    Math.min(180, point[1] + pointX)));
        style = "fill:red;stroke:red;stroke-width:0.1%;";
        opacity = "0.7";
      } else {
        gon = (Polygon) o;
        style = "fill:lawngreen;stroke:black;stroke-width:0.3%;";
        opacity = "0.5";
      }
      // polygon
      double polyLats[] = gon.getPolyLats();
      double polyLons[] = gon.getPolyLons();
      sb.append("<polygon fill-opacity=\"").append(opacity).append("\" points=\"");
      for (int i = 0; i < polyLats.length; i++) {
        if (i > 0) {
          sb.append(" ");
        }
        sb.append(polyLons[i]).append(",").append(90 - polyLats[i]);
      }
      sb.append("\" style=\"").append(style).append("\"/>\n");
      for (Polygon hole : gon.getHoles()) {
        double holeLats[] = hole.getPolyLats();
        double holeLons[] = hole.getPolyLons();
        sb.append("<polygon points=\"");
        for (int i = 0; i < holeLats.length; i++) {
          if (i > 0) {
            sb.append(" ");
          }
          sb.append(holeLons[i]).append(",").append(90 - holeLats[i]);
        }
        sb.append("\" style=\"fill:lightgray\"/>\n");
      }
    }
    sb.append("</svg>\n");
    return sb.toString();
  }

