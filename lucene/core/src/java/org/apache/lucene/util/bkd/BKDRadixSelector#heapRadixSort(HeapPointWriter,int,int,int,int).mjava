  /** Sort the heap writer by the specified dim. It is used to sort the leaves of the tree */
  public void heapRadixSort(
      final HeapPointWriter points, int from, int to, int dim, int commonPrefixLength) {
    final int dimOffset = dim * config.bytesPerDim + commonPrefixLength;
    final int dimCmpBytes = config.bytesPerDim - commonPrefixLength;
    final int dataOffset = config.packedIndexBytesLength - dimCmpBytes;
    new MSBRadixSorter(bytesSorted - commonPrefixLength) {

      @Override
      protected int byteAt(int i, int k) {
        assert k >= 0 : "negative prefix " + k;
        if (k < dimCmpBytes) {
          // dim bytes
          return points.block[i * config.bytesPerDoc + dimOffset + k] & 0xff;
        } else {
          // data bytes
          return points.block[i * config.bytesPerDoc + dataOffset + k] & 0xff;
        }
      }

      @Override
      protected void swap(int i, int j) {
        points.swap(i, j);
      }

      @Override
      protected Sorter getFallbackSorter(int k) {
        final int skypedBytes = k + commonPrefixLength;
        final int dimStart = dim * config.bytesPerDim + skypedBytes;
        final int dimEnd = dim * config.bytesPerDim + config.bytesPerDim;
        // data length is composed by the data dimensions plus the docID
        final int dataLength =
            (config.numDims - config.numIndexDims) * config.bytesPerDim + Integer.BYTES;
        return new IntroSorter() {

          @Override
          protected void swap(int i, int j) {
            points.swap(i, j);
          }

          @Override
          protected void setPivot(int i) {
            if (skypedBytes < config.bytesPerDim) {
              System.arraycopy(
                  points.block,
                  i * config.bytesPerDoc + dim * config.bytesPerDim,
                  scratch,
                  0,
                  config.bytesPerDim);
            }
            System.arraycopy(
                points.block,
                i * config.bytesPerDoc + config.packedIndexBytesLength,
                scratch,
                config.bytesPerDim,
                dataLength);
          }

          @Override
          protected int compare(int i, int j) {
            if (skypedBytes < config.bytesPerDim) {
              int iOffset = i * config.bytesPerDoc;
              int jOffset = j * config.bytesPerDoc;
              int cmp =
                  Arrays.compareUnsigned(
                      points.block,
                      iOffset + dimStart,
                      iOffset + dimEnd,
                      points.block,
                      jOffset + dimStart,
                      jOffset + dimEnd);
              if (cmp != 0) {
                return cmp;
              }
            }
            int iOffset = i * config.bytesPerDoc + config.packedIndexBytesLength;
            int jOffset = j * config.bytesPerDoc + config.packedIndexBytesLength;
            return Arrays.compareUnsigned(
                points.block,
                iOffset,
                iOffset + dataLength,
                points.block,
                jOffset,
                jOffset + dataLength);
          }

          @Override
          protected int comparePivot(int j) {
            if (skypedBytes < config.bytesPerDim) {
              int jOffset = j * config.bytesPerDoc;
              int cmp =
                  Arrays.compareUnsigned(
                      scratch,
                      skypedBytes,
                      config.bytesPerDim,
                      points.block,
                      jOffset + dimStart,
                      jOffset + dimEnd);
              if (cmp != 0) {
                return cmp;
              }
            }
            int jOffset = j * config.bytesPerDoc + config.packedIndexBytesLength;
            return Arrays.compareUnsigned(
                scratch,
                config.bytesPerDim,
                config.bytesPerDim + dataLength,
                points.block,
                jOffset,
                jOffset + dataLength);
          }
        };
      }
    }.sort(from, to);
  }

