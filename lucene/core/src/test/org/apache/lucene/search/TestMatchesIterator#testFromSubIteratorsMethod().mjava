  public void testFromSubIteratorsMethod() throws IOException {
    class CountIterator implements MatchesIterator {
      private int count;
      private int max;

      CountIterator(int count) {
        this.count = count;
        this.max = count;
      }

      @Override
      public boolean next() throws IOException {
        if (count == 0) {
          return false;
        } else {
          count--;
          return true;
        }
      }

      @Override
      public int startPosition() {
        return max - count;
      }

      @Override
      public int endPosition() {
        return max - count;
      }

      @Override
      public int startOffset() throws IOException {
        throw new AssertionError();
      }

      @Override
      public int endOffset() throws IOException {
        throw new AssertionError();
      }

      @Override
      public MatchesIterator getSubMatches() throws IOException {
        throw new AssertionError();
      }

      @Override
      public Query getQuery() {
        throw new AssertionError();
      }
    }

    int[][] checks = {
      {0}, {1}, {0, 0}, {0, 1}, {1, 0}, {1, 1}, {0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {1, 0, 0},
      {1, 0, 1}, {1, 1, 0}, {1, 1, 1},
    };

    for (int[] counts : checks) {
      List<MatchesIterator> its =
          IntStream.of(counts).mapToObj(CountIterator::new).collect(Collectors.toList());

      int expectedCount = IntStream.of(counts).sum();

      MatchesIterator merged = DisjunctionMatchesIterator.fromSubIterators(its);
      int actualCount = 0;
      while (merged.next()) {
        actualCount++;
      }

      assertEquals(
          "Sub-iterator count is not right for: " + Arrays.toString(counts),
          expectedCount,
          actualCount);
    }
  }

