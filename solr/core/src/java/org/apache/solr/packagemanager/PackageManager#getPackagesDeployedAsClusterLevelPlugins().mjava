  /**
   * Get a map of packages (key: package name, value: package instance) that have their plugins deployed as cluster level plugins.
   * The returned packages also contain the "pluginMeta" from "clusterprops.json" as custom data.
   */
  @SuppressWarnings({"unchecked"})
  public Map<String, SolrPackageInstance> getPackagesDeployedAsClusterLevelPlugins() {
    Map<String, String> packageVersions = new HashMap<>();
    MultiValuedMap<String, PluginMeta> packagePlugins = new HashSetValuedHashMap<>(); // map of package name to multiple values of pluginMeta (Map<String, String>)
    @SuppressWarnings({"unchecked"})
    Map<String, Object> result;
    try {
      result = (Map<String, Object>) Utils.executeGET(solrClient.getHttpClient(),
               solrBaseUrl + PackageUtils.CLUSTERPROPS_PATH, Utils.JSONCONSUMER);
    } catch (SolrException ex) {
      if (ex.code() == ErrorCode.NOT_FOUND.code) {
        result = Collections.emptyMap(); // Cluster props doesn't exist, that means there are no cluster level plugins installed.
      } else {
        throw ex;
      }
    }
    @SuppressWarnings({"unchecked"})
    Map<String, Object> clusterPlugins = (Map<String, Object>) result.getOrDefault(ContainerPluginsApi.PLUGIN, Collections.emptyMap());
    for (String key : clusterPlugins.keySet()) {
      // Map<String, String> pluginMeta = (Map<String, String>) clusterPlugins.get(key);
      PluginMeta pluginMeta;
      try {
        pluginMeta = PackageUtils.getMapper().readValue(Utils.toJSON(clusterPlugins.get(key)), PluginMeta.class);
      } catch (IOException e) {
        throw new SolrException(ErrorCode.SERVER_ERROR, "Exception while fetching plugins from /clusterprops.json in ZK.", e);
      }
      if (pluginMeta.klass.contains(":")) {
        String packageName = pluginMeta.klass.substring(0, pluginMeta.klass.indexOf(':'));
        packageVersions.put(packageName, pluginMeta.version);
        packagePlugins.put(packageName, pluginMeta);
      }
    }
    Map<String, SolrPackageInstance> ret = new HashMap<>();
    for (String packageName: packageVersions.keySet()) {
      if (Strings.isNullOrEmpty(packageName) == false && // There can be an empty key, storing the version here
          packageVersions.get(packageName) != null) { // null means the package was undeployed from this package before
        ret.put(packageName, getPackageInstance(packageName, packageVersions.get(packageName)));
        ret.get(packageName).setCustomData(packagePlugins.get(packageName));
      }
    }
    return ret;
  }

