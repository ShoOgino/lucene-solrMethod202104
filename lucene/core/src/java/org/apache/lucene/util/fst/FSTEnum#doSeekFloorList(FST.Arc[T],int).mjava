  private FST.Arc<T> doSeekFloorList(FST.Arc<T> arc, int targetLabel) throws IOException {
    if (arc.label() == targetLabel) {
      // Match -- recurse
      output[upto] = fst.outputs.add(output[upto - 1], arc.output());
      if (targetLabel == FST.END_LABEL) {
        return null;
      }
      setCurrentLabel(arc.label());
      incr();
      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
    } else if (arc.label() > targetLabel) {
      // TODO: if each arc could somehow read the arc just
      // before, we can save this re-scan.  The ceil case
      // doesn't need this because it reads the next arc
      // instead:
      while (true) {
        // First, walk backwards until we find a first arc
        // that's before our target label:
        fst.readFirstTargetArc(getArc(upto - 1), arc, fstReader);
        if (arc.label() < targetLabel) {
          // Then, scan forwards to the arc just before
          // the targetLabel:
          while (!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {
            fst.readNextArc(arc, fstReader);
          }
          pushLast();
          return null;
        }
        upto--;
        if (upto == 0) {
          return null;
        }
        targetLabel = getTargetLabel();
        arc = getArc(upto);
      }
    } else if (!arc.isLast()) {
      // System.out.println("  check next label=" + fst.readNextArcLabel(arc) + " (" + (char)
      // fst.readNextArcLabel(arc) + ")");
      if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {
        pushLast();
        return null;
      } else {
        // keep scanning
        return fst.readNextArc(arc, fstReader);
      }
    } else {
      pushLast();
      return null;
    }
  }

