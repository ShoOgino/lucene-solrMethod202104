  /**
   * Adds a sequence x_1, ..., x_n of run lengths to <code>runs</code> such that:<br>
   * 1. X = x_1 + ... + x_n <br>
   * 2. x_j >= minRun for all j <br>
   * 3. x_1 + ... + x_{j-2} < x_j < x_1 + ... + x_{j-1} for all j <br>
   * These conditions guarantee that TimSort merges all x_j's one by one (resulting in X) using only
   * merges on the second-to-last element.
   *
   * @param X The sum of the sequence that should be added to runs.
   */
  private static void generateWrongElem(int X, int minRun, List<Integer> runs) {
    for (int newTotal; X >= 2 * minRun + 1; X = newTotal) {
      // Default strategy
      newTotal = X / 2 + 1;

      // Specialized strategies
      if (3 * minRun + 3 <= X && X <= 4 * minRun + 1) {
        // add x_1=MIN+1, x_2=MIN, x_3=X-newTotal  to runs
        newTotal = 2 * minRun + 1;
      } else if (5 * minRun + 5 <= X && X <= 6 * minRun + 5) {
        // add x_1=MIN+1, x_2=MIN, x_3=MIN+2, x_4=X-newTotal  to runs
        newTotal = 3 * minRun + 3;
      } else if (8 * minRun + 9 <= X && X <= 10 * minRun + 9) {
        // add x_1=MIN+1, x_2=MIN, x_3=MIN+2, x_4=2MIN+2, x_5=X-newTotal  to runs
        newTotal = 5 * minRun + 5;
      } else if (13 * minRun + 15 <= X && X <= 16 * minRun + 17) {
        // add x_1=MIN+1, x_2=MIN, x_3=MIN+2, x_4=2MIN+2, x_5=3MIN+4, x_6=X-newTotal  to runs
        newTotal = 8 * minRun + 9;
      }
      runs.add(0, X - newTotal);
    }
    runs.add(0, X);
  }

