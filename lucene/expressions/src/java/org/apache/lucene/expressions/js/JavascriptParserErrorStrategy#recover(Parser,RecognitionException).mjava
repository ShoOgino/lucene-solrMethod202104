  /**
   * Ensures the ANTLR parser will throw an exception after the first error
   *
   * @param recognizer the parser being used
   * @param re the original exception from the parser
   */
  @Override
  public void recover(Parser recognizer, RecognitionException re) {
    Token token = re.getOffendingToken();
    String message;

    if (token == null) {
      message = "error " + getTokenErrorDisplay(token);
    } else if (re instanceof InputMismatchException) {
      message =
          "unexpected token "
              + getTokenErrorDisplay(token)
              + " on line ("
              + token.getLine()
              + ") position ("
              + token.getCharPositionInLine()
              + ")"
              + " was expecting one of "
              + re.getExpectedTokens().toString(recognizer.getVocabulary());
    } else if (re instanceof NoViableAltException) {
      if (token.getType() == JavascriptParser.EOF) {
        message = "unexpected end of expression";
      } else {
        message =
            "invalid sequence of tokens near "
                + getTokenErrorDisplay(token)
                + " on line ("
                + token.getLine()
                + ") position ("
                + token.getCharPositionInLine()
                + ")";
      }
    } else {
      message =
          " unexpected token near "
              + getTokenErrorDisplay(token)
              + " on line ("
              + token.getLine()
              + ") position ("
              + token.getCharPositionInLine()
              + ")";
    }

    ParseException parseException = new ParseException(message, token.getStartIndex());
    parseException.initCause(re);
    throw new RuntimeException(parseException);
  }

