  /** Sort input to a new temp file, returning its name. */
  public String sort(String inputFileName) throws IOException {

    sortInfo = new SortInfo();
    long startMS = System.currentTimeMillis();

    List<Future<Partition>> segments = new ArrayList<>();
    int[] levelCounts = new int[1];

    // So we can remove any partially written temp files on exception:
    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);

    boolean success = false;
    try (ByteSequencesReader is =
        getReader(dir.openChecksumInput(inputFileName, IOContext.READONCE), inputFileName)) {
      while (true) {
        Partition part = readPartition(is);
        if (part.count == 0) {
          if (partitionsInRAM != null) {
            partitionsInRAM.release();
          }
          assert part.exhausted;
          break;
        }

        Callable<Partition> job = new SortPartitionTask(trackingDir, part);

        segments.add(exec.submit(job));
        sortInfo.tempMergeFiles++;
        sortInfo.lineCount += part.count;
        levelCounts[0]++;

        // Handle intermediate merges; we need a while loop to "cascade" the merge when necessary:
        int mergeLevel = 0;
        while (levelCounts[mergeLevel] == maxTempFiles) {
          mergePartitions(trackingDir, segments);
          if (mergeLevel + 2 > levelCounts.length) {
            levelCounts = ArrayUtil.grow(levelCounts, mergeLevel + 2);
          }
          levelCounts[mergeLevel + 1]++;
          levelCounts[mergeLevel] = 0;
          mergeLevel++;
        }

        if (part.exhausted) {
          break;
        }
      }

      // TODO: we shouldn't have to do this?  Can't we return a merged reader to
      // the caller, who often consumes the result just once, instead?

      // Merge all partitions down to 1 (basically a forceMerge(1)):
      while (segments.size() > 1) {
        mergePartitions(trackingDir, segments);
      }

      String result;
      if (segments.isEmpty()) {
        try (IndexOutput out =
            trackingDir.createTempOutput(tempFileNamePrefix, "sort", IOContext.DEFAULT)) {
          // Write empty file footer
          CodecUtil.writeFooter(out);
          result = out.getName();
        }
      } else {
        result = getPartition(segments.get(0)).fileName;
      }

      // We should be explicitly removing all intermediate files ourselves unless there is an
      // exception:
      assert trackingDir.getCreatedFiles().size() == 1
          && trackingDir.getCreatedFiles().contains(result);

      sortInfo.totalTimeMS = System.currentTimeMillis() - startMS;

      CodecUtil.checkFooter(is.in);

      success = true;

      return result;

    } catch (InterruptedException ie) {
      throw new ThreadInterruptedException(ie);
    } finally {
      if (success == false) {
        IOUtils.deleteFilesIgnoringExceptions(trackingDir, trackingDir.getCreatedFiles());
      }
    }
  }

