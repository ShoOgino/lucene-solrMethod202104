  public void testFilterConstantScore() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
    Document doc = new Document();
    doc.add(new StringField("foo", "bar", Store.NO));
    doc.add(new StringField("foo", "bat", Store.NO));
    doc.add(new StringField("foo", "baz", Store.NO));
    w.addDocument(doc);
    IndexReader reader = w.getReader();
    IndexSearcher searcher = new IndexSearcher(reader);
    searcher.setQueryCache(null);

    {
      // single filter rewrites to a constant score query
      Query query =
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("foo", "bar")), Occur.FILTER)
              .build();
      Query rewrite = searcher.rewrite(query);
      assertTrue(rewrite instanceof BoostQuery);
      assertTrue(((BoostQuery) rewrite).getQuery() instanceof ConstantScoreQuery);
    }

    Query[] queries =
        new Query[] {
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("foo", "bar")), Occur.FILTER)
              .add(new TermQuery(new Term("foo", "baz")), Occur.FILTER)
              .build(),
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("foo", "baz")), Occur.FILTER)
              // non-existing term
              .add(new TermQuery(new Term("foo", "arf")), Occur.SHOULD)
              .build(),
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("foo", "baz")), Occur.FILTER)
              .add(new TermQuery(new Term("foo", "baz")), Occur.FILTER)
              // non-existing term
              .add(new TermQuery(new Term("foo", "arf")), Occur.SHOULD)
              .add(new TermQuery(new Term("foo", "arw")), Occur.SHOULD)
              .build()
        };
    for (Query query : queries) {
      Query rewrite = searcher.rewrite(query);
      for (ScoreMode scoreMode : ScoreMode.values()) {
        Weight weight = searcher.createWeight(rewrite, scoreMode, 1f);
        Scorer scorer = weight.scorer(reader.leaves().get(0));
        if (scoreMode == ScoreMode.TOP_SCORES) {
          assertTrue(scorer instanceof ConstantScoreScorer);
        } else {
          assertFalse(scorer instanceof ConstantScoreScorer);
        }
      }
    }

    queries =
        new Query[] {
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("foo", "bar")), Occur.FILTER)
              .add(new TermQuery(new Term("foo", "baz")), Occur.SHOULD)
              .build(),
          new BooleanQuery.Builder()
              .add(new TermQuery(new Term("foo", "bar")), Occur.FILTER)
              .add(new TermQuery(new Term("foo", "baz")), Occur.MUST)
              // non-existing term
              .add(new TermQuery(new Term("foo", "arf")), Occur.SHOULD)
              .build(),
          new BooleanQuery.Builder()
              // non-existing term
              .add(new TermQuery(new Term("foo", "bar")), Occur.FILTER)
              .add(new TermQuery(new Term("foo", "baz")), Occur.SHOULD)
              // non-existing term
              .add(new TermQuery(new Term("foo", "arf")), Occur.MUST)
              .build()
        };
    for (Query query : queries) {
      Query rewrite = searcher.rewrite(query);
      for (ScoreMode scoreMode : ScoreMode.values()) {
        Weight weight = searcher.createWeight(rewrite, scoreMode, 1f);
        Scorer scorer = weight.scorer(reader.leaves().get(0));
        assertFalse(scorer instanceof ConstantScoreScorer);
      }
    }

    reader.close();
    w.close();
    dir.close();
  }

