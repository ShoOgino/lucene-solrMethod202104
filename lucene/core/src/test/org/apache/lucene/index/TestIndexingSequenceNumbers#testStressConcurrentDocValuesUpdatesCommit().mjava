  @Nightly
  public void testStressConcurrentDocValuesUpdatesCommit() throws Exception {
    final int opCount = atLeast(10000);
    final int idCount = TestUtil.nextInt(random(), 10, 1000);

    Directory dir = newDirectory();
    IndexWriterConfig iwc = newIndexWriterConfig();
    iwc.setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);

    // Cannot use RIW since it randomly commits:
    final IndexWriter w = new IndexWriter(dir, iwc);

    final int numThreads = TestUtil.nextInt(random(), 2, 10);
    if (VERBOSE) {
      System.out.println("TEST: numThreads=" + numThreads);
    }
    Thread[] threads = new Thread[numThreads];
    // System.out.println("TEST: iter=" + iter + " opCount=" + opCount + " idCount=" + idCount + "
    // threadCount=" + threads.length);
    final CountDownLatch startingGun = new CountDownLatch(1);
    List<List<Operation>> threadOps = new ArrayList<>();

    Object commitLock = new Object();
    final List<Operation> commits = new ArrayList<>();

    List<Operation> ops1 = new ArrayList<>();
    threadOps.add(ops1);

    // pre-index every ID so none are missing:
    for (int id = 0; id < idCount; id++) {
      int threadID = 0;
      Operation op = new Operation();
      op.threadID = threadID;
      op.id = id;

      Document doc = new Document();
      doc.add(new StoredField("thread", threadID));
      doc.add(new NumericDocValuesField("thread", threadID));
      doc.add(new StringField("id", "" + id, Field.Store.NO));
      op.seqNo = w.addDocument(doc);
      ops1.add(op);
    }

    // multiple threads update the same set of documents, and we randomly commit, recording the
    // commit seqNo and then opening each commit in
    // the end to verify it reflects the correct updates
    for (int i = 0; i < threads.length; i++) {
      final List<Operation> ops;
      if (i == 0) {
        ops = threadOps.get(0);
      } else {
        ops = new ArrayList<>();
        threadOps.add(ops);
      }

      final int threadID = i;
      threads[i] =
          new Thread() {
            @Override
            public void run() {
              try {
                startingGun.await();
                for (int i = 0; i < opCount; i++) {
                  Operation op = new Operation();
                  op.threadID = threadID;
                  if (random().nextInt(500) == 17) {
                    op.what = 2;
                    synchronized (commitLock) {
                      op.seqNo = w.commit();
                      if (op.seqNo != -1) {
                        commits.add(op);
                      }
                    }
                  } else {
                    op.id = random().nextInt(idCount);
                    Term idTerm = new Term("id", "" + op.id);
                    op.seqNo = w.updateNumericDocValue(idTerm, "thread", threadID);
                    op.what = 0;
                    ops.add(op);
                  }
                }
              } catch (Exception e) {
                throw new RuntimeException(e);
              }
            }
          };
      threads[i].setName("thread" + i);
      threads[i].start();
    }
    startingGun.countDown();
    for (Thread thread : threads) {
      thread.join();
    }

    Operation commitOp = new Operation();
    commitOp.seqNo = w.commit();
    if (commitOp.seqNo != -1) {
      commits.add(commitOp);
    }

    List<IndexCommit> indexCommits = DirectoryReader.listCommits(dir);
    assertEquals(commits.size(), indexCommits.size());

    int[] expectedThreadIDs = new int[idCount];
    long[] seqNos = new long[idCount];

    // System.out.println("TEST: " + commits.size() + " commits");
    for (int i = 0; i < commits.size(); i++) {
      // this commit point should reflect all operations <= this seqNo
      long commitSeqNo = commits.get(i).seqNo;
      // System.out.println("  commit " + i + ": seqNo=" + commitSeqNo + " segs=" +
      // indexCommits.get(i));

      Arrays.fill(expectedThreadIDs, -1);
      Arrays.fill(seqNos, 0);

      for (int threadID = 0; threadID < threadOps.size(); threadID++) {
        long lastSeqNo = 0;
        for (Operation op : threadOps.get(threadID)) {
          if (op.seqNo <= commitSeqNo && op.seqNo > seqNos[op.id]) {
            seqNos[op.id] = op.seqNo;
            assert op.what == 0;
            expectedThreadIDs[op.id] = threadID;
          }

          assertTrue(op.seqNo > lastSeqNo);
          lastSeqNo = op.seqNo;
        }
      }

      DirectoryReader r = DirectoryReader.open(indexCommits.get(i));
      IndexSearcher s = new IndexSearcher(r);

      for (int id = 0; id < idCount; id++) {
        // System.out.println("TEST: check id=" + id + " expectedThreadID=" +
        // expectedThreadIDs[id]);
        TopDocs hits = s.search(new TermQuery(new Term("id", "" + id)), 1);
        NumericDocValues docValues = MultiDocValues.getNumericValues(r, "thread");

        // We pre-add all ids up front:
        assert expectedThreadIDs[id] != -1;
        assertEquals(1, hits.totalHits.value);
        int hitDoc = hits.scoreDocs[0].doc;
        assertEquals(hitDoc, docValues.advance(hitDoc));
        int actualThreadID = (int) docValues.longValue();
        if (expectedThreadIDs[id] != actualThreadID) {
          System.out.println(
              "FAIL: commit="
                  + i
                  + " (of "
                  + commits.size()
                  + ") id="
                  + id
                  + " expectedThreadID="
                  + expectedThreadIDs[id]
                  + " vs actualThreadID="
                  + actualThreadID
                  + " commitSeqNo="
                  + commitSeqNo
                  + " numThreads="
                  + numThreads
                  + " reader="
                  + r
                  + " commit="
                  + indexCommits.get(i));
          for (int threadID = 0; threadID < threadOps.size(); threadID++) {
            for (Operation op : threadOps.get(threadID)) {
              if (id == op.id) {
                System.out.println("  threadID=" + threadID + " seqNo=" + op.seqNo);
              }
            }
          }
          assertEquals(
              "id=" + id + " docID=" + hits.scoreDocs[0].doc,
              expectedThreadIDs[id],
              actualThreadID);
        }
      }
      w.close();
      r.close();
    }

    dir.close();
  }

