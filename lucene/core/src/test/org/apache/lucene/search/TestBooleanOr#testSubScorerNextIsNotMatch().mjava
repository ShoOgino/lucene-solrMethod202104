  // Make sure that BooleanScorer keeps working even if the sub clauses return
  // next matching docs which are less than the actual next match
  public void testSubScorerNextIsNotMatch() throws IOException {
    final List<BulkScorer> optionalScorers =
        Arrays.asList(
            scorer(100000, 1000001, 9999999),
            scorer(4000, 1000051),
            scorer(5000, 100000, 9999998, 9999999));
    Collections.shuffle(optionalScorers, random());
    BooleanScorer scorer = new BooleanScorer(null, optionalScorers, 1, random().nextBoolean());
    final List<Integer> matches = new ArrayList<>();
    scorer.score(
        new LeafCollector() {

          @Override
          public void setScorer(Scorable scorer) throws IOException {}

          @Override
          public void collect(int doc) throws IOException {
            matches.add(doc);
          }
        },
        null);
    assertEquals(Arrays.asList(4000, 5000, 100000, 1000001, 1000051, 9999998, 9999999), matches);
  }

