  /**
   * Create a packed integer array writer for the given output, format, value count, and number of
   * bits per value.
   *
   * <p>The resulting stream will be long-aligned. This means that depending on the format which is
   * used under the hoods, up to 63 bits will be wasted. An easy way to make sure that no space is
   * lost is to always use a <code>valueCount</code> that is a multiple of 64.
   *
   * <p>This method writes metadata to the stream, so that the resulting stream is sufficient to
   * restore a {@link Reader} from it. You don't need to track <code>valueCount</code> or <code>
   * bitsPerValue</code> by yourself. In case this is a problem, you should probably look at {@link
   * #getWriterNoHeader(DataOutput, Format, int, int, int)}.
   *
   * <p>The <code>acceptableOverheadRatio</code> parameter controls how readers that will be
   * restored from this stream trade space for speed by selecting a faster but potentially less
   * memory-efficient implementation. An <code>acceptableOverheadRatio</code> of {@link
   * PackedInts#COMPACT} will make sure that the most memory-efficient implementation is selected
   * whereas {@link PackedInts#FASTEST} will make sure that the fastest implementation is selected.
   * In case you are only interested in reading this stream sequentially later on, you should
   * probably use {@link PackedInts#COMPACT}.
   *
   * @param out the data output
   * @param valueCount the number of values
   * @param bitsPerValue the number of bits per value
   * @param acceptableOverheadRatio an acceptable overhead ratio per value
   * @return a Writer
   * @throws IOException If there is a low-level I/O error
   * @lucene.internal
   */
  public static Writer getWriter(
      DataOutput out, int valueCount, int bitsPerValue, float acceptableOverheadRatio)
      throws IOException {
    assert valueCount >= 0;

    final FormatAndBits formatAndBits =
        fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);
    final Writer writer =
        getWriterNoHeader(
            out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);
    writer.writeHeader();
    return writer;
  }

