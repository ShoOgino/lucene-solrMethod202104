  @Override
  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)
      throws IOException {
    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);
    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();
    Terms t = MultiTerms.getTerms(top, qfield);
    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();

    return new IntDocValues(this) {

      int lastDocID = -1;

      @Override
      public int intVal(int doc) throws IOException {
        if (doc < lastDocID) {
          throw new IllegalArgumentException(
              "docs were sent out-of-order: lastDocID=" + lastDocID + " vs docID=" + doc);
        }
        lastDocID = doc;
        int curDocID = terms.docID();
        if (doc > curDocID) {
          curDocID = terms.advance(doc);
        }
        if (doc == curDocID) {
          BytesRef term = terms.binaryValue();
          if (termsEnum.seekExact(term)) {
            return termsEnum.docFreq();
          }
        }
        return 0;
      }
    };
  }

