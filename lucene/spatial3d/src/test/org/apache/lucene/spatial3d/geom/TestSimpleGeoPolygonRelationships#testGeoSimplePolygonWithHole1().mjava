  /**
   * Test with two shapes with no crossing edges and polygon in hole  in convex case.
   */
  @Test
  public void testGeoSimplePolygonWithHole1() {
    //POLYGON((-135 -31, -135 -30, -137 -30, -137 -31, -135 -31),(-135.5 -30.7, -135.5 -30.4, -136.5 -30.4, -136.5 -30.7, -135.5 -30.7))
    GeoPolygon hole = buildConcaveGeoPolygon(-135.5, -30.7,
        -135.5, -30.4,
        -136.5, -30.4,
        -136.5, -30.7);
    GeoPolygon originalConvexPol = buildConvexGeoPolygonWithHole(-135, -31,
        -135, -30,
        -137, -30,
        -137, -31, hole);

    GeoPolygon holeInv = buildConvexGeoPolygon(-135, -31,
        -135, -30,
        -137, -30,
        -137, -31);

    GeoPolygon originalConvexPolInv = buildConcaveGeoPolygonWithHole(-135.5, -30.7,
        -135.5, -30.4,
        -136.5, -30.4,
        -136.5, -30.7, holeInv);

    //POLYGON((-135.7 -30.6, -135.7 -30.45, -136 -30.45, -136 -30.6, -135.7 -30.6)) in the hole
    GeoPolygon polConvex = buildConvexGeoPolygon(-135.7, -30.6,
        -135.7, -30.45,
        -136, -30.45,
        -136, -30.6);

    GeoPolygon polConcave = buildConcaveGeoPolygon(-135.7, -30.6,
        -135.7, -30.45,
        -136, -30.45,
        -136, -30.6);

    int rel = originalConvexPol.getRelationship(polConvex);
    assertEquals(GeoArea.DISJOINT,  rel);
    rel = polConvex.getRelationship(originalConvexPol);
    assertEquals(GeoArea.DISJOINT,  rel);

    rel = originalConvexPol.getRelationship(polConcave);
    assertEquals(GeoArea.CONTAINS,  rel);
    rel = polConcave.getRelationship(originalConvexPol);
    assertEquals(GeoArea.WITHIN,  rel);

    rel = originalConvexPolInv.getRelationship(polConvex);
    assertEquals(GeoArea.DISJOINT,  rel);
    rel = polConvex.getRelationship(originalConvexPolInv);
    assertEquals(GeoArea.DISJOINT,  rel);

    rel = originalConvexPolInv.getRelationship(polConcave);
    assertEquals(GeoArea.CONTAINS,  rel);
    rel = polConcave.getRelationship(originalConvexPolInv);
    assertEquals(GeoArea.WITHIN,  rel);
  }

