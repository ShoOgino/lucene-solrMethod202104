  /**
   * Compute a feature value that may be used as the {@code pivot} parameter of the {@link
   * #newSaturationQuery(String, String, float, float)} and {@link #newSigmoidQuery(String, String,
   * float, float, float)} factory methods. The implementation takes the average of the int bits of
   * the float representation in practice before converting it back to a float. Given that floats
   * store the exponent in the higher bits, it means that the result will be an approximation of the
   * geometric mean of all feature values.
   *
   * @param reader the {@link IndexReader} to search against
   * @param featureField the field that stores features
   * @param featureName the name of the feature
   */
  static float computePivotFeatureValue(IndexReader reader, String featureField, String featureName)
      throws IOException {
    Term term = new Term(featureField, featureName);
    TermStates states = TermStates.build(reader.getContext(), term, true);
    if (states.docFreq() == 0) {
      // avoid division by 0
      // The return value doesn't matter much here, the term doesn't exist,
      // it will never be used for scoring. Just Make sure to return a legal
      // value.
      return 1;
    }
    float avgFreq = (float) ((double) states.totalTermFreq() / states.docFreq());
    return decodeFeatureValue(avgFreq);
  }

