  public void testMultiValued() throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter w =
        new RandomIndexWriter(
            random(),
            dir,
            newIndexWriterConfig().setMergePolicy(newLogMergePolicy(random().nextBoolean())));

    Document doc = new Document();
    for (double[] point : new double[][] {{0, 0}, {30, 30}, {60, 60}}) {
      doc.add(new LatLonPoint("foo", point[0], point[1]));
      doc.add(new LatLonDocValuesField("foo", point[0], point[1]));
    }
    w.addDocument(doc);

    doc = new Document();
    for (double[] point : new double[][] {{45, 0}, {-45, 0}, {-90, 0}, {90, 0}}) {
      doc.add(new LatLonPoint("foo", point[0], point[1]));
      doc.add(new LatLonDocValuesField("foo", point[0], point[1]));
    }
    w.addDocument(doc);

    doc = new Document();
    for (double[] point : new double[][] {{0, 90}, {0, -90}, {0, 180}, {0, -180}}) {
      doc.add(new LatLonPoint("foo", point[0], point[1]));
      doc.add(new LatLonDocValuesField("foo", point[0], point[1]));
    }
    w.addDocument(doc);

    doc = new Document();
    for (double[] point : new double[][] {{3, 2}}) {
      doc.add(new LatLonPoint("foo", point[0], point[1]));
      doc.add(new LatLonDocValuesField("foo", point[0], point[1]));
    }
    w.addDocument(doc);

    doc = new Document();
    for (double[] point : new double[][] {{45, 45}, {-45, -45}}) {
      doc.add(new LatLonPoint("foo", point[0], point[1]));
      doc.add(new LatLonDocValuesField("foo", point[0], point[1]));
    }
    w.addDocument(doc);

    DirectoryReader reader = w.getReader();
    IndexSearcher searcher = newSearcher(reader);

    Query q = LatLonPoint.newDistanceFeatureQuery("foo", 3, 0, 0, 200);
    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, 1);
    searcher.search(q, collector);
    TopDocs topHits = collector.topDocs();
    assertEquals(2, topHits.scoreDocs.length);

    double distance1 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0)),
            0,
            0);
    double distance2 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(3)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(2)),
            0,
            0);

    CheckHits.checkEqual(
        q,
        new ScoreDoc[] {
          new ScoreDoc(0, (float) (3f * (200 / (200 + distance1)))),
          new ScoreDoc(3, (float) (3f * (200 / (200 + distance2))))
        },
        topHits.scoreDocs);

    q = LatLonPoint.newDistanceFeatureQuery("foo", 3, -90, 0, 10000.);
    collector = TopScoreDocCollector.create(2, null, 1);
    searcher.search(q, collector);
    topHits = collector.topDocs();
    assertEquals(2, topHits.scoreDocs.length);
    CheckHits.checkExplanations(q, "", searcher);

    distance1 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(-90)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0)),
            -90,
            0);
    distance2 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(-45)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(-45)),
            -90,
            0);

    CheckHits.checkEqual(
        q,
        new ScoreDoc[] {
          new ScoreDoc(1, (float) (3f * (10000. / (10000. + distance1)))),
          new ScoreDoc(4, (float) (3f * (10000. / (10000. + distance2))))
        },
        topHits.scoreDocs);

    reader.close();
    w.close();
    dir.close();
  }

