  @Override
  boolean start(IndexableField field, boolean first) {
    super.start(field, first);
    termFreqAtt = fieldState.termFreqAttribute;
    assert field.fieldType().indexOptions() != IndexOptions.NONE;

    if (first) {

      if (getNumTerms() != 0) {
        // Only necessary if previous doc hit a
        // non-aborting exception while writing vectors in
        // this field:
        reset();
      }

      reinitHash();

      hasPayloads = false;

      doVectors = field.fieldType().storeTermVectors();

      if (doVectors) {

        termsWriter.hasVectors = true;

        doVectorPositions = field.fieldType().storeTermVectorPositions();

        // Somewhat confusingly, unlike postings, you are
        // allowed to index TV offsets without TV positions:
        doVectorOffsets = field.fieldType().storeTermVectorOffsets();

        if (doVectorPositions) {
          doVectorPayloads = field.fieldType().storeTermVectorPayloads();
        } else {
          doVectorPayloads = false;
          if (field.fieldType().storeTermVectorPayloads()) {
            // TODO: move this check somewhere else, and impl the other missing ones
            throw new IllegalArgumentException(
                "cannot index term vector payloads without term vector positions (field=\""
                    + field.name()
                    + "\")");
          }
        }

      } else {
        if (field.fieldType().storeTermVectorOffsets()) {
          throw new IllegalArgumentException(
              "cannot index term vector offsets when term vectors are not indexed (field=\""
                  + field.name()
                  + "\")");
        }
        if (field.fieldType().storeTermVectorPositions()) {
          throw new IllegalArgumentException(
              "cannot index term vector positions when term vectors are not indexed (field=\""
                  + field.name()
                  + "\")");
        }
        if (field.fieldType().storeTermVectorPayloads()) {
          throw new IllegalArgumentException(
              "cannot index term vector payloads when term vectors are not indexed (field=\""
                  + field.name()
                  + "\")");
        }
      }
    } else {
      if (doVectors != field.fieldType().storeTermVectors()) {
        throw new IllegalArgumentException(
            "all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\""
                + field.name()
                + "\")");
      }
      if (doVectorPositions != field.fieldType().storeTermVectorPositions()) {
        throw new IllegalArgumentException(
            "all instances of a given field name must have the same term vectors settings (storeTermVectorPositions changed for field=\""
                + field.name()
                + "\")");
      }
      if (doVectorOffsets != field.fieldType().storeTermVectorOffsets()) {
        throw new IllegalArgumentException(
            "all instances of a given field name must have the same term vectors settings (storeTermVectorOffsets changed for field=\""
                + field.name()
                + "\")");
      }
      if (doVectorPayloads != field.fieldType().storeTermVectorPayloads()) {
        throw new IllegalArgumentException(
            "all instances of a given field name must have the same term vectors settings (storeTermVectorPayloads changed for field=\""
                + field.name()
                + "\")");
      }
    }

    if (doVectors) {
      if (doVectorOffsets) {
        offsetAttribute = fieldState.offsetAttribute;
        assert offsetAttribute != null;
      }

      if (doVectorPayloads) {
        // Can be null:
        payloadAttribute = fieldState.payloadAttribute;
      } else {
        payloadAttribute = null;
      }
    }

    return doVectors;
  }

