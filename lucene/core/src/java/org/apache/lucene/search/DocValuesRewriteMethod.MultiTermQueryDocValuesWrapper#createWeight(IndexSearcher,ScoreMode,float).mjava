    @Override
    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)
        throws IOException {
      return new ConstantScoreWeight(this, boost) {

        @Override
        public Matches matches(LeafReaderContext context, int doc) throws IOException {
          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);
          return MatchesUtils.forField(
              query.field,
              () ->
                  DisjunctionMatchesIterator.fromTermsEnum(
                      context, doc, query, query.field, getTermsEnum(fcsi)));
        }

        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {
          return query.getTermsEnum(
              new Terms() {

                @Override
                public TermsEnum iterator() throws IOException {
                  return fcsi.termsEnum();
                }

                @Override
                public long getSumTotalTermFreq() {
                  throw new UnsupportedOperationException();
                }

                @Override
                public long getSumDocFreq() {
                  throw new UnsupportedOperationException();
                }

                @Override
                public int getDocCount() {
                  throw new UnsupportedOperationException();
                }

                @Override
                public long size() {
                  return -1;
                }

                @Override
                public boolean hasFreqs() {
                  return false;
                }

                @Override
                public boolean hasOffsets() {
                  return false;
                }

                @Override
                public boolean hasPositions() {
                  return false;
                }

                @Override
                public boolean hasPayloads() {
                  return false;
                }
              });
        }

        @Override
        public Scorer scorer(LeafReaderContext context) throws IOException {
          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);
          TermsEnum termsEnum = getTermsEnum(fcsi);
          assert termsEnum != null;
          if (termsEnum.next() == null) {
            // no matching terms
            return null;
          }
          // fill into a bitset
          // Cannot use FixedBitSet because we require long index (ord):
          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());
          do {
            long ord = termsEnum.ord();
            if (ord >= 0) {
              termSet.set(ord);
            }
          } while (termsEnum.next() != null);

          return new ConstantScoreScorer(
              this,
              score(),
              scoreMode,
              new TwoPhaseIterator(fcsi) {

                @Override
                public boolean matches() throws IOException {
                  for (long ord = fcsi.nextOrd();
                      ord != SortedSetDocValues.NO_MORE_ORDS;
                      ord = fcsi.nextOrd()) {
                    if (termSet.get(ord)) {
                      return true;
                    }
                  }
                  return false;
                }

                @Override
                public float matchCost() {
                  return 3; // lookup in a bitset
                }
              });
        }

        @Override
        public boolean isCacheable(LeafReaderContext ctx) {
          return DocValues.isCacheable(ctx, query.field);
        }
      };
    }

