  /**
   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing the contents of <code>
   * reader</code>.
   *
   * <p>This method uses {@link #createComponents(String)} to obtain an instance of {@link
   * TokenStreamComponents}. It returns the sink of the components and stores the components
   * internally. Subsequent calls to this method will reuse the previously stored components after
   * resetting them through {@link TokenStreamComponents#setReader(Reader)}.
   *
   * <p><b>NOTE:</b> After calling this method, the consumer must follow the workflow described in
   * {@link TokenStream} to properly consume its contents. See the {@link org.apache.lucene.analysis
   * Analysis package documentation} for some examples demonstrating this.
   *
   * <p><b>NOTE:</b> If your data is available as a {@code String}, use {@link #tokenStream(String,
   * String)} which reuses a {@code StringReader}-like instance internally.
   *
   * @param fieldName the name of the field the created TokenStream is used for
   * @param reader the reader the streams source reads from
   * @return TokenStream for iterating the analyzed content of <code>reader</code>
   * @throws AlreadyClosedException if the Analyzer is closed.
   * @see #tokenStream(String, String)
   */
  public final TokenStream tokenStream(final String fieldName, final Reader reader) {
    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);
    final Reader r = initReader(fieldName, reader);
    if (components == null) {
      components = createComponents(fieldName);
      reuseStrategy.setReusableComponents(this, fieldName, components);
    }
    components.setReader(r);
    return components.getTokenStream();
  }

