  /**
   * Creates an FSDirectory instance, trying to pick the best implementation given the current
   * environment. The directory returned uses the {@link NativeFSLockFactory}. The directory is
   * created at the named location if it does not yet exist.
   *
   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical / real
   * path to ensure it can correctly lock the index directory and no other process can interfere
   * with changing possible symlinks to the index directory inbetween. If you want to use symlinks
   * and change them dynamically, close all {@code IndexWriters} and create a new {@code
   * FSDirectory} instance.
   *
   * <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris, and Windows 64-bit
   * JREs, and {@link NIOFSDirectory} for other JREs. It is highly recommended that you consult the
   * implementation's documentation for your platform before using this method.
   *
   * <p><b>NOTE</b>: this method may suddenly change which implementation is returned from release
   * to release, in the event that higher performance defaults become possible; if the precise
   * implementation is important to your application, please instantiate it directly, instead. For
   * optimal performance you should consider using {@link MMapDirectory} on 64 bit JVMs.
   *
   * <p>See <a href="#subclasses">above</a>
   */
  public static FSDirectory open(Path path) throws IOException {
    return open(path, FSLockFactory.getDefault());
  }

