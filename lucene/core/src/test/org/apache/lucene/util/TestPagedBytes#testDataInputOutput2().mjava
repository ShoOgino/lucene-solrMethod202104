  // Writes random byte/s into PagedBytes via
  // .getDataOutput(), then verifies with
  // PagedBytes.getDataInput():
  public void testDataInputOutput2() throws Exception {
    Random random = random();
    int numIters = atLeast(1);
    for (int iter = 0; iter < numIters; iter++) {
      final int blockBits = TestUtil.nextInt(random, 1, 20);
      final int blockSize = 1 << blockBits;
      final PagedBytes p = new PagedBytes(blockBits);
      final DataOutput out = p.getDataOutput();
      final int numBytes;
      if (TEST_NIGHTLY) {
        numBytes = random().nextInt(10_000_000);
      } else {
        numBytes = random().nextInt(1_000_000);
      }

      final byte[] answer = new byte[numBytes];
      random().nextBytes(answer);
      int written = 0;
      while (written < numBytes) {
        if (random().nextInt(10) == 7) {
          out.writeByte(answer[written++]);
        } else {
          int chunk = Math.min(random().nextInt(1000), numBytes - written);
          out.writeBytes(answer, written, chunk);
          written += chunk;
        }
      }

      final PagedBytes.Reader reader = p.freeze(random.nextBoolean());

      final DataInput in = p.getDataInput();

      final byte[] verify = new byte[numBytes];
      int read = 0;
      while (read < numBytes) {
        if (random().nextInt(10) == 7) {
          verify[read++] = in.readByte();
        } else {
          int chunk = Math.min(random().nextInt(1000), numBytes - read);
          in.readBytes(verify, read, chunk);
          read += chunk;
        }
      }
      assertTrue(Arrays.equals(answer, verify));

      final BytesRef slice = new BytesRef();
      for (int iter2 = 0; iter2 < 100; iter2++) {
        final int pos = random.nextInt(numBytes - 1);
        final int len = random.nextInt(Math.min(blockSize + 1, numBytes - pos));
        reader.fillSlice(slice, pos, len);
        for (int byteUpto = 0; byteUpto < len; byteUpto++) {
          assertEquals(answer[pos + byteUpto], slice.bytes[slice.offset + byteUpto]);
        }
      }

      // test skipping
      final DataInput in2 = p.getDataInput();
      int maxSkipTo = numBytes - 1;
      // skip chunks of bytes until exhausted
      for (int curr = 0; curr < maxSkipTo; ) {
        int skipTo = TestUtil.nextInt(random, curr, maxSkipTo);
        int step = skipTo - curr;
        in2.skipBytes(step);
        assertEquals(answer[skipTo], in2.readByte());
        curr = skipTo + 1; // +1 for read byte
      }
    }
  }

