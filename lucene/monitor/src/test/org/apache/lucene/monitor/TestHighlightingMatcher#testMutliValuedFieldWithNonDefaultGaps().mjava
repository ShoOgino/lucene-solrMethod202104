  public void testMutliValuedFieldWithNonDefaultGaps() throws IOException {

    Analyzer analyzer =
        new Analyzer() {
          @Override
          public int getPositionIncrementGap(String fieldName) {
            return 1000;
          }

          @Override
          public int getOffsetGap(String fieldName) {
            return 2000;
          }

          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            return new TokenStreamComponents(new WhitespaceTokenizer());
          }
        };

    MonitorQuery mq = new MonitorQuery("query", parse(FIELD + ":\"hello world\"~5"));
    try (Monitor monitor = newMonitor(analyzer)) {
      monitor.register(mq);

      Document doc1 = new Document();
      doc1.add(newTextField(FIELD, "hello world", Field.Store.NO));
      doc1.add(newTextField(FIELD, "goodbye", Field.Store.NO));
      MatchingQueries<HighlightsMatch> matcher1 = monitor.match(doc1, HighlightsMatch.MATCHER);
      assertEquals(1, matcher1.getMatchCount());
      HighlightsMatch m1 = matcher1.matches("query");
      assertNotNull(m1);
      assertTrue(m1.getFields().contains(FIELD));
      assertTrue(m1.getHits(FIELD).contains(new HighlightsMatch.Hit(0, 0, 1, 11)));

      Document doc2 = new Document();
      doc1.add(newTextField(FIELD, "hello", Field.Store.NO));
      doc1.add(newTextField(FIELD, "world", Field.Store.NO));
      MatchingQueries<HighlightsMatch> matcher2 = monitor.match(doc2, HighlightsMatch.MATCHER);
      assertNull(matcher2.matches("query"));
      assertEquals(0, matcher2.getMatchCount());

      Document doc3 = new Document();
      doc3.add(newTextField(FIELD, "hello world", Field.Store.NO));
      doc3.add(newTextField(FIELD, "hello goodbye world", Field.Store.NO));
      MatchingQueries<HighlightsMatch> matcher3 = monitor.match(doc3, HighlightsMatch.MATCHER);
      assertEquals(1, matcher3.getMatchCount());
      HighlightsMatch m3 = matcher3.matches("query");
      assertNotNull(m3);
      assertTrue(m3.getFields().contains(FIELD));
      assertTrue(m3.getHits(FIELD).contains(new HighlightsMatch.Hit(0, 0, 1, 11)));
      assertTrue(m3.getHits(FIELD).contains(new HighlightsMatch.Hit(1002, 2011, 1004, 2030)));
    }
  }

