    private void buildCompleteGraph(BackupRepository repository, BackupFilePaths paths,
                                    PurgeGraph purgeGraph) throws IOException {
        when(repository.listAllOrEmpty(same(paths.getShardBackupMetadataDir()))).thenAnswer((Answer<String[]>) invocationOnMock -> shardBackupIds);
        //logical

        for (String shardBackupId : shardBackupIds) {
            purgeGraph.addEdge(purgeGraph.getShardBackupIdNode(shardBackupId),
                    purgeGraph.getBackupIdNode(shardBackupId.substring(0, 2)));
            for (int i = 0; i < random().nextInt(30); i++) {
                String fileName = shardBackupId.substring(3) + "_" + random().nextInt(15);
                purgeGraph.addEdge(purgeGraph.getShardBackupIdNode(shardBackupId),
                        purgeGraph.getIndexFileNode(fileName));
            }
        }

        purgeGraph.addEdge(purgeGraph.getShardBackupIdNode("b1_s1"),
                purgeGraph.getIndexFileNode("s1_100"));

        purgeGraph.addEdge(purgeGraph.getShardBackupIdNode("b1_s1"),
                purgeGraph.getIndexFileNode("s1_101"));
        purgeGraph.addEdge(purgeGraph.getShardBackupIdNode("b2_s1"),
                purgeGraph.getIndexFileNode("s1_101"));

        purgeGraph.addEdge(purgeGraph.getShardBackupIdNode("b1_s1"),
                purgeGraph.getIndexFileNode("s1_102"));
        purgeGraph.addEdge(purgeGraph.getShardBackupIdNode("b2_s1"),
                purgeGraph.getIndexFileNode("s1_102"));
        purgeGraph.addEdge(purgeGraph.getShardBackupIdNode("b3_s1"),
                purgeGraph.getIndexFileNode("s1_102"));

        when(repository.listAllOrEmpty(same(paths.getIndexDir()))).thenAnswer((Answer<String[]>) invocationOnMock ->
                purgeGraph.indexFileNodeMap.keySet().toArray(new String[0]));
    }

