  /**
   * Returns next double within range.
   *
   * <p>Don't pass huge numbers or infinity or anything like that yet. may have bugs!
   */
  // the goal is to adjust random number generation to test edges, create more duplicates, create
  // "one-offs" in floating point space, etc.
  // we do this by first picking a good "base value" (explicitly targeting edges, zero if allowed,
  // or "discrete values"). but it also
  // ensures we pick any double in the range and generally still produces randomish looking numbers.
  // then we sometimes perturb that by one ulp.
  private static double nextDoubleInternal(double low, double high) {
    assert low >= Integer.MIN_VALUE;
    assert high <= Integer.MAX_VALUE;
    assert Double.isFinite(low);
    assert Double.isFinite(high);
    assert high >= low : "low=" + low + " high=" + high;

    // if they are equal, not much we can do
    if (low == high) {
      return low;
    }

    // first pick a base value.
    final double baseValue;
    int surpriseMe = random().nextInt(17);
    if (surpriseMe == 0) {
      // random bits
      long lowBits = NumericUtils.doubleToSortableLong(low);
      long highBits = NumericUtils.doubleToSortableLong(high);
      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));
    } else if (surpriseMe == 1) {
      // edge case
      baseValue = low;
    } else if (surpriseMe == 2) {
      // edge case
      baseValue = high;
    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {
      // may trigger divide by 0
      baseValue = 0.0;
    } else if (surpriseMe == 4) {
      // divide up space into block of 360
      double delta = (high - low) / 360;
      int block = random().nextInt(360);
      baseValue = low + delta * block;
    } else {
      // distributed ~ evenly
      baseValue = low + (high - low) * random().nextDouble();
    }

    assert baseValue >= low;
    assert baseValue <= high;

    // either return the base value or adjust it by 1 ulp in a random direction (if possible)
    int adjustMe = random().nextInt(17);
    if (adjustMe == 0) {
      return Math.nextAfter(adjustMe, high);
    } else if (adjustMe == 1) {
      return Math.nextAfter(adjustMe, low);
    } else {
      return baseValue;
    }
  }

