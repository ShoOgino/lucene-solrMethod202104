  /**
   * Returns an AttributeFactory returning an instance of the given {@code clazz} for the attributes
   * it implements. The given {@code clazz} must have a public no-arg constructor. For all other
   * attributes it calls the given delegate factory as fallback. This method can be used to prefer a
   * specific {@code AttributeImpl} which combines multiple attributes over separate classes.
   *
   * <p>Please save instances created by this method in a static final field, because on each call,
   * this does reflection for creating a {@link MethodHandle}.
   */
  public static <A extends AttributeImpl> AttributeFactory getStaticImplementation(
      AttributeFactory delegate, Class<A> clazz) {
    final MethodHandle constr = findAttributeImplCtor(clazz);
    return new StaticImplementationAttributeFactory<A>(delegate, clazz) {
      @Override
      protected A createInstance() {
        try {
          return (A) constr.invokeExact();
        } catch (Error | RuntimeException e) {
          throw e;
        } catch (Throwable e) {
          throw new UndeclaredThrowableException(e);
        }
      }
    };
  }

