  /**
   * Finds and reads an arc on the current node which label is strictly less than the given label.
   * Skips the first arc, finds next floor arc; or none if the floor arc is the first arc itself (in
   * this case it has already been read).
   *
   * <p>Precondition: the given arc is the first arc of the node.
   */
  private void findNextFloorArcDirectAddressing(
      FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {
    assert arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;
    assert arc.label() != FST.END_LABEL;
    assert arc.label() == arc.firstLabel();
    if (arc.numArcs() > 1) {
      int targetIndex = targetLabel - arc.firstLabel();
      assert targetIndex >= 0;
      if (targetIndex >= arc.numArcs()) {
        // Beyond last arc. Take last arc.
        fst.readLastArcByDirectAddressing(arc, in);
      } else {
        // Take the preceding arc, even if the target is present.
        int floorIndex = BitTable.previousBitSet(targetIndex, arc, in);
        if (floorIndex > 0) {
          fst.readArcByDirectAddressing(arc, in, floorIndex);
        }
      }
    }
  }

