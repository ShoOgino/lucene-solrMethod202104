  /**
   * Construct a SpanNearQuery. Matches spans matching a span from each clause, with up to <code>
   * slop</code> total unmatched positions between them. <br>
   * When <code>inOrder</code> is true, the spans from each clause must be in the same order as in
   * <code>clauses</code> and must be non-overlapping. <br>
   * When <code>inOrder</code> is false, the spans from each clause need not be ordered and may
   * overlap.
   *
   * @param clausesIn the clauses to find near each other, in the same field, at least 2.
   * @param slop The slop value
   * @param inOrder true if order is important
   */
  public SpanNearQuery(SpanQuery[] clausesIn, int slop, boolean inOrder) {
    this.clauses = new ArrayList<>(clausesIn.length);
    for (SpanQuery clause : clausesIn) {
      if (this.field == null) { // check field
        this.field = clause.getField();
      } else if (clause.getField() != null && !clause.getField().equals(field)) {
        throw new IllegalArgumentException("Clauses must have same field.");
      }
      this.clauses.add(clause);
    }
    this.slop = slop;
    this.inOrder = inOrder;
  }

