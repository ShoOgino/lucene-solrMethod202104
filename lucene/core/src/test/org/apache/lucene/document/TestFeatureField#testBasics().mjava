  public void testBasics() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig()
        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));
    Document doc = new Document();
    FeatureField pagerank = new FeatureField("features", "pagerank", 1);
    FeatureField urlLength = new FeatureField("features", "urlLen", 1);
    doc.add(pagerank);
    doc.add(urlLength);

    pagerank.setFeatureValue(10);
    urlLength.setFeatureValue(1f / 24);
    writer.addDocument(doc);

    pagerank.setFeatureValue(100);
    urlLength.setFeatureValue(1f / 20);
    writer.addDocument(doc);

    writer.addDocument(new Document()); // gap

    pagerank.setFeatureValue(1);
    urlLength.setFeatureValue(1f / 100);
    writer.addDocument(doc);

    pagerank.setFeatureValue(42);
    urlLength.setFeatureValue(1f / 23);
    writer.addDocument(doc);

    writer.forceMerge(1);
    DirectoryReader reader = writer.getReader();
    writer.close();

    IndexSearcher searcher = new IndexSearcher(reader);
    LeafReaderContext context = reader.leaves().get(0);

    Query q = FeatureField.newLogQuery("features", "pagerank", 3f, 4.5f);
    Weight w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);
    Scorer s = w.scorer(context);

    assertEquals(0, s.iterator().nextDoc());
    assertEquals((float) (6.0 * Math.log(4.5f + 10)), s.score(), 0f);

    assertEquals(1, s.iterator().nextDoc());
    assertEquals((float) (6.0 * Math.log(4.5f + 100)), s.score(), 0f);

    assertEquals(3, s.iterator().nextDoc());
    assertEquals((float) (6.0 * Math.log(4.5f + 1)), s.score(), 0f);

    assertEquals(4, s.iterator().nextDoc());
    assertEquals((float) (6.0 * Math.log(4.5f + 42)), s.score(), 0f);

    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());

    q = FeatureField.newLinearQuery("features", "pagerank", 3f);
    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);
    s = w.scorer(context);

    assertEquals(0, s.iterator().nextDoc());
    assertEquals((float) (6.0 * 10), s.score(), 0f);

    assertEquals(1, s.iterator().nextDoc());
    assertEquals((float) (6.0 * 100), s.score(), 0f);

    assertEquals(3, s.iterator().nextDoc());
    assertEquals((float) (6.0 * 1), s.score(), 0f);

    assertEquals(4, s.iterator().nextDoc());
    assertEquals((float) (6.0 * 42), s.score(), 0f);

    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());

    q = FeatureField.newSaturationQuery("features", "pagerank", 3f, 4.5f);
    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);
    s = w.scorer(context);

    assertEquals(0, s.iterator().nextDoc());
    assertEquals(6f * (1 - 4.5f / (4.5f + 10)), s.score(), 0f);

    assertEquals(1, s.iterator().nextDoc());
    assertEquals(6f * (1 - 4.5f / (4.5f + 100)), s.score(), 0f);

    assertEquals(3, s.iterator().nextDoc());
    assertEquals(6f * (1 - 4.5f / (4.5f + 1)), s.score(), 0f);

    assertEquals(4, s.iterator().nextDoc());
    assertEquals(6f * (1 - 4.5f / (4.5f + 42)), s.score(), 0f);

    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());

    q = FeatureField.newSigmoidQuery("features", "pagerank", 3f, 4.5f, 0.6f);
    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);
    s = w.scorer(context);
    double kPa = Math.pow(4.5f, 0.6f);

    assertEquals(0, s.iterator().nextDoc());
    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(10, 0.6f)))), s.score(), 0f);

    assertEquals(1, s.iterator().nextDoc());
    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(100, 0.6f)))), s.score(), 0f);

    assertEquals(3, s.iterator().nextDoc());
    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(1, 0.6f)))), s.score(), 0f);

    assertEquals(4, s.iterator().nextDoc());
    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(42, 0.6f)))), s.score(), 0f);

    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());

    q = FeatureField.newSaturationQuery("features", "urlLen", 3f, 1f/24);
    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);
    s = w.scorer(context);

    assertEquals(0, s.iterator().nextDoc());
    assertEquals(6f * (1 - (1f/24) / (1f/24 + round(1f/24))), s.score(), 0f);

    assertEquals(1, s.iterator().nextDoc());
    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/20))), s.score(), 0f);

    assertEquals(3, s.iterator().nextDoc());
    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/100))), s.score(), 0f);

    assertEquals(4, s.iterator().nextDoc());
    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/23))), s.score(), 0f);

    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());

    reader.close();
    dir.close();
  }

