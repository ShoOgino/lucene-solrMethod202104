  @Test
  public void testTransform() throws Exception {

    final String regex = ".*" + random().nextInt(10) + ".*";

    final ReplicaListTransformer transformer;
    if (random().nextBoolean()) {
      log.info("Using ToyMatching Transfomer");
      transformer = new ToyMatchingReplicaListTransformer(regex);

    } else {
      log.info("Using conditional Transfomer");
      transformer = new HttpShardHandlerFactory() {

        @Override
        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)
        {
          final SolrParams params = req.getParams();

          if (params.getBool("toyNoTransform", false)) {
            return new ToyNoOpReplicaListTransformer();
          }

          final String regex = params.get("toyRegEx");
          if (regex != null) {
            return new ToyMatchingReplicaListTransformer(regex);
          }

          return super.getReplicaListTransformer(req);
        }

      }.getReplicaListTransformer(
          new LocalSolrQueryRequest(null,
              new ModifiableSolrParams().add("toyRegEx", regex)));
    }

    final List<Replica> inputs = new ArrayList<>();
    final List<Replica> expectedTransformed = new ArrayList<>();

    final List<String> urls = createRandomUrls();
    for (int ii=0; ii<urls.size(); ++ii) {

      final String name = "replica"+(ii+1);
      final String url = urls.get(ii);
      final Map<String,Object> propMap = new HashMap<String,Object>();
      propMap.put("base_url", url);
      propMap.put("core", "test_core");
      propMap.put("node_name", "test_node:80_");
      propMap.put("type", "NRT");
      // a skeleton replica, good enough for this test's purposes
      final Replica replica = new Replica(name, propMap,"c1","s1");

      inputs.add(replica);
      final String coreUrl = replica.getCoreUrl();
      if (coreUrl.matches(regex)) {
        log.info("adding replica=[{}] to expected due to core url ({}) regex match on {} ",
                 replica, coreUrl, regex);
        expectedTransformed.add(replica);
      } else {
        log.info("NOT expecting replica=[{}] due to core url ({}) regex mismatch ({})",
                 replica, coreUrl, regex);
      }
      
    }

    final List<Replica> actualTransformed = new ArrayList<>(inputs);
    transformer.transform(actualTransformed);

    assertEquals(expectedTransformed, actualTransformed);
  }

