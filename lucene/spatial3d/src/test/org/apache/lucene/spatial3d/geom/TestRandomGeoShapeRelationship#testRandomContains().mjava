  /**
   * Test for contains shapes. We build a shape containing the geoAreaShape and create
   * shapes WITHIN that shape. The resulting shape should CONTAIN
   * the geoAreaShape.
   *
   * Note that if the geoAreaShape is concave the other shape must be concave.
   * If shape is concave, the shape for reference should be concave as well.
   *
   */
  // TODO: this test seems to hit pathological cases that cause it to run for many minutes?!
  @Test @Nightly
  public void testRandomContains() {
    int referenceShapeType = CONVEX_SIMPLE_POLYGON;
    PlanetModel planetModel = randomPlanetModel();
    int geoAreaShapeType = randomGeoAreaShapeType();
    while (geoAreaShapeType == COLLECTION ){
      geoAreaShapeType = randomGeoAreaShapeType();
    }
    int shapeType = randomShapeType();
    while (shapeType == POINT || shapeType == LINE) {
      shapeType = randomShapeType();
    }
    if (isConcave(geoAreaShapeType)){
      shapeType = randomConcaveShapeType();
    }
    if (isConcave(shapeType)){
      referenceShapeType = CONCAVE_SIMPLE_POLYGON;
    }
    GeoShape shape = null;
    GeoAreaShape geoAreaShape = null;
    while (shape == null) {
      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);
      Constraints constraints = getEmptyConstraint();
      constraints.put(geoAreaShape, GeoArea.CONTAINS);
      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);
      if (reference != null) {
        constraints = getEmptyConstraint();
        constraints.put(reference, GeoArea.CONTAINS);
        shape = randomGeoShape(shapeType, planetModel, constraints);
      }
    }
    StringBuilder b = new StringBuilder();
    b.append("geoAreaShape: " + geoAreaShape + "\n");
    b.append("shape: " + shape);
    int rel = geoAreaShape.getRelationship(shape);
    assertEquals(b.toString(), GeoArea.CONTAINS, rel);
    if (shape instanceof GeoArea) {
      rel = ((GeoArea)shape).getRelationship(geoAreaShape);
      assertEquals(b.toString(), GeoArea.WITHIN, rel);
    }
  }

