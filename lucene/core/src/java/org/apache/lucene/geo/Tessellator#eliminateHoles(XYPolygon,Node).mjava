  private static final Node eliminateHoles(final XYPolygon polygon, Node outerNode) {
    // Define a list to hole a reference to each filtered hole list.
    final List<Node> holeList = new ArrayList<>();
    // keep a reference to the hole
    final Map<Node, XYPolygon> holeListPolygons = new HashMap<>();
    // Iterate through each array of hole vertices.
    XYPolygon[] holes = polygon.getHoles();
    int nodeIndex = polygon.numPoints();
    for (int i = 0; i < polygon.numHoles(); ++i) {
      // create the doubly-linked hole list
      Node list =
          createDoublyLinkedList(
              XYEncodingUtils.floatArrayToDoubleArray(holes[i].getPolyX()),
              XYEncodingUtils.floatArrayToDoubleArray(holes[i].getPolyY()),
              holes[i].getWindingOrder(),
              false,
              nodeIndex,
              WindingOrder.CCW);
      // Determine if the resulting hole polygon was successful.
      if (list != null) {
        // Add the leftmost vertex of the hole.
        Node leftMost = fetchLeftmost(list);
        holeList.add(leftMost);
        holeListPolygons.put(leftMost, holes[i]);
      }
      nodeIndex += holes[i].numPoints();
    }
    return eliminateHoles(holeList, holeListPolygons, outerNode);
  }

