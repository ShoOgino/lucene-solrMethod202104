  private FST.Arc<T> doSeekFloorArrayDirectAddressing(
      FST.Arc<T> arc, int targetLabel, FST.BytesReader in) throws IOException {
    // The array is addressed directly by label, with presence bits to compute the actual arc
    // offset.

    int targetIndex = targetLabel - arc.firstLabel();
    if (targetIndex < 0) {
      // Before first arc.
      return backtrackToFloorArc(arc, targetLabel, in);
    } else if (targetIndex >= arc.numArcs()) {
      // After last arc.
      fst.readLastArcByDirectAddressing(arc, in);
      assert arc.label() < targetLabel;
      assert arc.isLast();
      pushLast();
      return null;
    } else {
      // Within label range.
      if (BitTable.isBitSet(targetIndex, arc, in)) {
        fst.readArcByDirectAddressing(arc, in, targetIndex);
        assert arc.label() == targetLabel;
        // found -- copy pasta from below
        output[upto] = fst.outputs.add(output[upto - 1], arc.output());
        if (targetLabel == FST.END_LABEL) {
          return null;
        }
        setCurrentLabel(arc.label());
        incr();
        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
      }
      // Scan backwards to find a floor arc.
      int floorIndex = BitTable.previousBitSet(targetIndex, arc, in);
      assert floorIndex != -1;
      fst.readArcByDirectAddressing(arc, in, floorIndex);
      assert arc.label() < targetLabel;
      assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;
      pushLast();
      return null;
    }
  }

