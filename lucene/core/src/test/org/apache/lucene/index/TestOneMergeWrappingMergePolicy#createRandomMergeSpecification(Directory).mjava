  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {
    MergePolicy.MergeSpecification ms;
    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null
      ms = new MergePolicy.MergeSpecification();
      // append up to 10 (random non-sensical) one merge objects
      for (int ii = 0; ii < random().nextInt(10); ++ii) {
        final SegmentInfo si =
            new SegmentInfo(
                dir, // dir
                Version.LATEST, // version
                Version.LATEST, // min version
                TestUtil.randomSimpleString(random()), // name
                random().nextInt(), // maxDoc
                random().nextBoolean(), // isCompoundFile
                null, // codec
                Collections.emptyMap(), // diagnostics
                TestUtil.randomSimpleString( // id
                        random(), StringHelper.ID_LENGTH, StringHelper.ID_LENGTH)
                    .getBytes(StandardCharsets.US_ASCII),
                Collections.emptyMap(), // attributes
                null /* indexSort */);
        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();
        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0, 0, StringHelper.randomId()));
        ms.add(new MergePolicy.OneMerge(segments));
      }
    }
    return null;
  }

