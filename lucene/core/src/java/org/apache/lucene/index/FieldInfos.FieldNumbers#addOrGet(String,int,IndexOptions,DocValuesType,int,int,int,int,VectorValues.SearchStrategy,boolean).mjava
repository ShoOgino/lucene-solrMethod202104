    /**
     * Returns the global field number for the given field name. If the name does not exist yet it
     * tries to add it with the given preferred field number assigned if possible otherwise the
     * first unassigned field number is used as the field number.
     */
    synchronized int addOrGet(
        String fieldName,
        int preferredFieldNumber,
        IndexOptions indexOptions,
        DocValuesType dvType,
        int dimensionCount,
        int indexDimensionCount,
        int dimensionNumBytes,
        int vectorDimension,
        VectorValues.SearchStrategy searchStrategy,
        boolean isSoftDeletesField) {
      if (indexOptions != IndexOptions.NONE) {
        IndexOptions currentOpts = this.indexOptions.get(fieldName);
        if (currentOpts == null) {
          this.indexOptions.put(fieldName, indexOptions);
        } else if (currentOpts != IndexOptions.NONE && currentOpts != indexOptions) {
          throw new IllegalArgumentException(
              "cannot change field \""
                  + fieldName
                  + "\" from index options="
                  + currentOpts
                  + " to inconsistent index options="
                  + indexOptions);
        }
      }
      if (dvType != DocValuesType.NONE) {
        DocValuesType currentDVType = docValuesType.get(fieldName);
        if (currentDVType == null) {
          docValuesType.put(fieldName, dvType);
        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {
          throw new IllegalArgumentException(
              "cannot change DocValues type from "
                  + currentDVType
                  + " to "
                  + dvType
                  + " for field \""
                  + fieldName
                  + "\"");
        }
      }
      if (dimensionCount != 0) {
        FieldDimensions dims = dimensions.get(fieldName);
        if (dims != null) {
          if (dims.dimensionCount != dimensionCount) {
            throw new IllegalArgumentException(
                "cannot change point dimension count from "
                    + dims.dimensionCount
                    + " to "
                    + dimensionCount
                    + " for field=\""
                    + fieldName
                    + "\"");
          }
          if (dims.indexDimensionCount != indexDimensionCount) {
            throw new IllegalArgumentException(
                "cannot change point index dimension count from "
                    + dims.indexDimensionCount
                    + " to "
                    + indexDimensionCount
                    + " for field=\""
                    + fieldName
                    + "\"");
          }
          if (dims.dimensionNumBytes != dimensionNumBytes) {
            throw new IllegalArgumentException(
                "cannot change point numBytes from "
                    + dims.dimensionNumBytes
                    + " to "
                    + dimensionNumBytes
                    + " for field=\""
                    + fieldName
                    + "\"");
          }
        } else {
          dimensions.put(
              fieldName,
              new FieldDimensions(dimensionCount, indexDimensionCount, dimensionNumBytes));
        }
      }
      if (vectorDimension != 0) {
        FieldVectorProperties props = vectorProps.get(fieldName);
        if (props != null) {
          if (props.numDimensions != vectorDimension) {
            throw new IllegalArgumentException(
                "cannot change vector dimension from "
                    + props.numDimensions
                    + " to "
                    + vectorDimension
                    + " for field=\""
                    + fieldName
                    + "\"");
          }
          if (props.searchStrategy != searchStrategy) {
            throw new IllegalArgumentException(
                "cannot change vector search strategy from "
                    + props.searchStrategy
                    + " to "
                    + searchStrategy
                    + " for field=\""
                    + fieldName
                    + "\"");
          }
        } else {
          vectorProps.put(fieldName, new FieldVectorProperties(vectorDimension, searchStrategy));
        }
      }
      Integer fieldNumber = nameToNumber.get(fieldName);
      if (fieldNumber == null) {
        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);
        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {
          // cool - we can use this number globally
          fieldNumber = preferredBoxed;
        } else {
          // find a new FieldNumber
          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {
            // might not be up to date - lets do the work once needed
          }
          fieldNumber = lowestUnassignedFieldNumber;
        }
        assert fieldNumber >= 0;
        numberToName.put(fieldNumber, fieldName);
        nameToNumber.put(fieldName, fieldNumber);
      }

      if (isSoftDeletesField) {
        if (softDeletesFieldName == null) {
          throw new IllegalArgumentException(
              "this index has ["
                  + fieldName
                  + "] as soft-deletes already but soft-deletes field is not configured in IWC");
        } else if (fieldName.equals(softDeletesFieldName) == false) {
          throw new IllegalArgumentException(
              "cannot configure ["
                  + softDeletesFieldName
                  + "] as soft-deletes; this index uses ["
                  + fieldName
                  + "] as soft-deletes already");
        }
      } else if (fieldName.equals(softDeletesFieldName)) {
        throw new IllegalArgumentException(
            "cannot configure ["
                + softDeletesFieldName
                + "] as soft-deletes; this index uses ["
                + fieldName
                + "] as non-soft-deletes already");
      }

      return fieldNumber.intValue();
    }

