  public void testSubtract() throws Exception {
    int iters = atLeast(1000);
    int numBytes = TestUtil.nextInt(random(), 1, 100);
    for (int iter = 0; iter < iters; iter++) {
      BigInteger v1 = new BigInteger(8 * numBytes - 1, random());
      BigInteger v2 = new BigInteger(8 * numBytes - 1, random());
      if (v1.compareTo(v2) < 0) {
        BigInteger tmp = v1;
        v1 = v2;
        v2 = tmp;
      }

      byte[] v1Bytes = new byte[numBytes];
      byte[] v1RawBytes = v1.toByteArray();
      assert v1RawBytes.length <= numBytes
          : "length=" + v1RawBytes.length + " vs numBytes=" + numBytes;
      System.arraycopy(
          v1RawBytes, 0, v1Bytes, v1Bytes.length - v1RawBytes.length, v1RawBytes.length);

      byte[] v2Bytes = new byte[numBytes];
      byte[] v2RawBytes = v2.toByteArray();
      assert v2RawBytes.length <= numBytes;
      assert v2RawBytes.length <= numBytes
          : "length=" + v2RawBytes.length + " vs numBytes=" + numBytes;
      System.arraycopy(
          v2RawBytes, 0, v2Bytes, v2Bytes.length - v2RawBytes.length, v2RawBytes.length);

      byte[] result = new byte[numBytes];
      NumericUtils.subtract(numBytes, 0, v1Bytes, v2Bytes, result);

      BigInteger diff = v1.subtract(v2);

      assertTrue(
          "diff=" + diff + " vs result=" + new BigInteger(result) + " v1=" + v1 + " v2=" + v2,
          diff.equals(new BigInteger(result)));
    }
  }

