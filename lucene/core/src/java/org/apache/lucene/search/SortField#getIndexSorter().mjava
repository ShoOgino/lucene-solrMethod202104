  /**
   * Returns an {@link IndexSorter} used for sorting index segments by this SortField.
   *
   * <p>If the SortField cannot be used for index sorting (for example, if it uses scores or other
   * query-dependent values) then this method should return {@code null}
   *
   * <p>SortFields that implement this method should also implement a companion {@link
   * SortFieldProvider} to serialize and deserialize the sort in index segment headers
   *
   * @lucene.experimental
   */
  public IndexSorter getIndexSorter() {
    switch (type) {
      case STRING:
        return new IndexSorter.StringSorter(
            Provider.NAME, missingValue, reverse, reader -> DocValues.getSorted(reader, field));
      case INT:
        return new IndexSorter.IntSorter(
            Provider.NAME,
            (Integer) missingValue,
            reverse,
            reader -> DocValues.getNumeric(reader, field));
      case LONG:
        return new IndexSorter.LongSorter(
            Provider.NAME,
            (Long) missingValue,
            reverse,
            reader -> DocValues.getNumeric(reader, field));
      case DOUBLE:
        return new IndexSorter.DoubleSorter(
            Provider.NAME,
            (Double) missingValue,
            reverse,
            reader -> DocValues.getNumeric(reader, field));
      case FLOAT:
        return new IndexSorter.FloatSorter(
            Provider.NAME,
            (Float) missingValue,
            reverse,
            reader -> DocValues.getNumeric(reader, field));
      default:
        return null;
    }
  }

