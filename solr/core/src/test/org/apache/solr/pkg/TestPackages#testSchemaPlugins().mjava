  public void testSchemaPlugins() throws Exception {
    String COLLECTION_NAME = "testSchemaLoadingColl";
    System.setProperty("managed.schema.mutable", "true");

    MiniSolrCloudCluster cluster =
            configureCluster(4)
                    .withJettyConfig(jetty -> jetty.enableV2(true))
                    .addConfig("conf1", configset("schema-package"))
                    .configure();
    try {
      String FILE1 = "/schemapkg/schema-plugins.jar";
      byte[] derFile = readFile("cryptokeys/pub_key512.der");
      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+"/pub_key512.der", cluster);
      postFileAndWait(cluster, "runtimecode/schema-plugins.jar.bin", FILE1,
          "U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==");

      String FILE2 = "/schemapkg/payload-component.jar";
      postFileAndWait(cluster, "runtimecode/payload-component.jar.bin", FILE2,
          "gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==");

      Package.AddVersion add = new Package.AddVersion();
      add.version = "1.0";
      add.pkg = "schemapkg";
      add.files = Arrays.asList(FILE1,FILE2);
      V2Request req = new V2Request.Builder("/cluster/package")
          .forceV2(true)
          .withMethod(SolrRequest.METHOD.POST)
          .withPayload(Collections.singletonMap("add", add))
          .build();
      req.process(cluster.getSolrClient());

      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/cluster/package").
              withMethod(SolrRequest.METHOD.GET)
              .build().process(cluster.getSolrClient()),
          Utils.makeMap(
              ":result:packages:schemapkg[0]:version", "1.0",
              ":result:packages:schemapkg[0]:files[0]", FILE1
          ));

      CollectionAdminRequest
              .createCollection(COLLECTION_NAME, "conf1", 2, 2)
              .process(cluster.getSolrClient());
      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);

      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, "/schema/fieldtypes/myNewTextFieldWithAnalyzerClass",
              Utils.makeMap(":fieldType:analyzer:charFilters[0]:_packageinfo_:version" ,"1.0",
                      ":fieldType:analyzer:tokenizer:_packageinfo_:version","1.0",
                      ":fieldType:_packageinfo_:version","1.0"));

      add = new Package.AddVersion();
      add.version = "2.0";
      add.pkg = "schemapkg";
      add.files = Arrays.asList(FILE1);
      req = new V2Request.Builder("/cluster/package")
          .forceV2(true)
          .withMethod(SolrRequest.METHOD.POST)
          .withPayload(Collections.singletonMap("add", add))
          .build();
      req.process(cluster.getSolrClient());

      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/cluster/package").
              withMethod(SolrRequest.METHOD.GET)
              .build().process(cluster.getSolrClient()),
          Utils.makeMap(
              ":result:packages:schemapkg[0]:version", "2.0",
              ":result:packages:schemapkg[0]:files[0]", FILE1
          ));

      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, "/schema/fieldtypes/myNewTextFieldWithAnalyzerClass",
          Utils.makeMap(":fieldType:analyzer:charFilters[0]:_packageinfo_:version" ,"2.0",
              ":fieldType:analyzer:tokenizer:_packageinfo_:version","2.0",
              ":fieldType:_packageinfo_:version","2.0"));

    } finally {
      cluster.shutdown();
    }

  }

