  /*
   * Check if src and dest have overlapped part and if it is, create PhraseQueries and add expandQueries.
   *
   * ex1) src="a b", dest="c d"       => no overlap
   * ex2) src="a b", dest="a b c"     => no overlap
   * ex3) src="a b", dest="b c"       => overlap; expandQueries={"a b c"}
   * ex4) src="a b c", dest="b c d"   => overlap; expandQueries={"a b c d"}
   * ex5) src="a b c", dest="b c"     => no overlap
   * ex6) src="a b c", dest="b"       => no overlap
   * ex7) src="a a a a", dest="a a a" => overlap;
   *                                     expandQueries={"a a a a a","a a a a a a"}
   * ex8) src="a b c d", dest="b c"   => no overlap
   */
  private void checkOverlap(
      Collection<Query> expandQueries, Term[] src, Term[] dest, int slop, float boost) {
    // beginning from 1 (not 0) is safe because that the PhraseQuery has multiple terms
    // is guaranteed in flatten() method (if PhraseQuery has only one term, flatten()
    // converts PhraseQuery to TermQuery)
    for (int i = 1; i < src.length; i++) {
      boolean overlap = true;
      for (int j = i; j < src.length; j++) {
        if ((j - i) < dest.length && !src[j].text().equals(dest[j - i].text())) {
          overlap = false;
          break;
        }
      }
      if (overlap && src.length - i < dest.length) {
        PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();
        for (Term srcTerm : src) pqBuilder.add(srcTerm);
        for (int k = src.length - i; k < dest.length; k++) {
          pqBuilder.add(new Term(src[0].field(), dest[k].text()));
        }
        pqBuilder.setSlop(slop);
        Query pq = pqBuilder.build();
        if (boost != 1f) {
          pq = new BoostQuery(pq, 1f);
        }
        if (!expandQueries.contains(pq)) expandQueries.add(pq);
      }
    }
  }

