  @Override
  public void revisionReady(
      String version,
      Map<String, List<RevisionFile>> revisionFiles,
      Map<String, List<String>> copiedFiles,
      Map<String, Directory> sourceDirectory)
      throws IOException {
    Directory taxoClientDir = sourceDirectory.get(IndexAndTaxonomyRevision.TAXONOMY_SOURCE);
    Directory indexClientDir = sourceDirectory.get(IndexAndTaxonomyRevision.INDEX_SOURCE);
    List<String> taxoFiles = copiedFiles.get(IndexAndTaxonomyRevision.TAXONOMY_SOURCE);
    List<String> indexFiles = copiedFiles.get(IndexAndTaxonomyRevision.INDEX_SOURCE);
    String taxoSegmentsFile = IndexReplicationHandler.getSegmentsFile(taxoFiles, true);
    String indexSegmentsFile = IndexReplicationHandler.getSegmentsFile(indexFiles, false);
    String taxoPendingFile = taxoSegmentsFile == null ? null : "pending_" + taxoSegmentsFile;
    String indexPendingFile = "pending_" + indexSegmentsFile;

    boolean success = false;
    try {
      // copy taxonomy files before index files
      IndexReplicationHandler.copyFiles(taxoClientDir, taxoDir, taxoFiles);
      IndexReplicationHandler.copyFiles(indexClientDir, indexDir, indexFiles);

      // fsync all copied files (except segmentsFile)
      if (!taxoFiles.isEmpty()) {
        taxoDir.sync(taxoFiles);
      }
      indexDir.sync(indexFiles);

      // now copy, fsync, and rename segmentsFile, taxonomy first because it is ok if a
      // reader sees a more advanced taxonomy than the index.

      if (taxoSegmentsFile != null) {
        taxoDir.copyFrom(taxoClientDir, taxoSegmentsFile, taxoPendingFile, IOContext.READONCE);
      }
      indexDir.copyFrom(indexClientDir, indexSegmentsFile, indexPendingFile, IOContext.READONCE);

      if (taxoSegmentsFile != null) {
        taxoDir.sync(Collections.singletonList(taxoPendingFile));
      }
      indexDir.sync(Collections.singletonList(indexPendingFile));

      if (taxoSegmentsFile != null) {
        taxoDir.rename(taxoPendingFile, taxoSegmentsFile);
        taxoDir.syncMetaData();
      }

      indexDir.rename(indexPendingFile, indexSegmentsFile);
      indexDir.syncMetaData();

      success = true;
    } finally {
      if (!success) {
        if (taxoSegmentsFile != null) {
          taxoFiles.add(taxoSegmentsFile); // add it back so it gets deleted too
          taxoFiles.add(taxoPendingFile);
        }
        IndexReplicationHandler.cleanupFilesOnFailure(taxoDir, taxoFiles);
        indexFiles.add(indexSegmentsFile); // add it back so it gets deleted too
        indexFiles.add(indexPendingFile);
        IndexReplicationHandler.cleanupFilesOnFailure(indexDir, indexFiles);
      }
    }

    // all files have been successfully copied + sync'd. update the handler's state
    currentRevisionFiles = revisionFiles;
    currentVersion = version;

    if (infoStream.isEnabled(INFO_STREAM_COMPONENT)) {
      infoStream.message(
          INFO_STREAM_COMPONENT,
          "revisionReady(): currentVersion="
              + currentVersion
              + " currentRevisionFiles="
              + currentRevisionFiles);
    }

    // Cleanup the index directory from old and unused index files.
    // NOTE: we don't use IndexWriter.deleteUnusedFiles here since it may have
    // side-effects, e.g. if it hits sudden IO errors while opening the index
    // (and can end up deleting the entire index). It is not our job to protect
    // against those errors, app will probably hit them elsewhere.
    IndexReplicationHandler.cleanupOldIndexFiles(indexDir, indexSegmentsFile, infoStream);
    IndexReplicationHandler.cleanupOldIndexFiles(taxoDir, taxoSegmentsFile, infoStream);

    // successfully updated the index, notify the callback that the index is
    // ready.
    if (callback != null) {
      try {
        callback.call();
      } catch (Exception e) {
        throw new IOException(e);
      }
    }
  }

