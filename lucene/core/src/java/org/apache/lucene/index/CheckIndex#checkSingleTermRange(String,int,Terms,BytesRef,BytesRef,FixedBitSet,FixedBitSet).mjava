  /**
   * Test Terms.intersect on this range, and validates that it returns the same doc ids as using
   * non-intersect TermsEnum. Returns true if any fake terms were seen.
   */
  private static boolean checkSingleTermRange(
      String field,
      int maxDoc,
      Terms terms,
      BytesRef minTerm,
      BytesRef maxTerm,
      FixedBitSet normalDocs,
      FixedBitSet intersectDocs)
      throws IOException {
    // System.out.println("    check minTerm=" + minTerm.utf8ToString() + " maxTerm=" +
    // maxTerm.utf8ToString());
    assert minTerm.compareTo(maxTerm) <= 0;

    TermsEnum termsEnum = terms.iterator();
    TermsEnum.SeekStatus status = termsEnum.seekCeil(minTerm);
    if (status != TermsEnum.SeekStatus.FOUND) {
      throw new RuntimeException(
          "failed to seek to existing term field=" + field + " term=" + minTerm);
    }

    // Do "dumb" iteration to visit all terms in the range:
    long normalTermCount =
        getDocsFromTermRange(field, maxDoc, termsEnum, normalDocs, minTerm, maxTerm, false);

    // Now do the same operation using intersect:
    long intersectTermCount =
        getDocsFromTermRange(
            field,
            maxDoc,
            terms.intersect(
                new CompiledAutomaton(
                    Automata.makeBinaryInterval(minTerm, true, maxTerm, false),
                    true,
                    false,
                    Integer.MAX_VALUE,
                    true),
                null),
            intersectDocs,
            minTerm,
            maxTerm,
            true);

    if (intersectTermCount > normalTermCount) {
      throw new RuntimeException(
          "intersect returned too many terms: field="
              + field
              + " intersectTermCount="
              + intersectTermCount
              + " normalTermCount="
              + normalTermCount);
    }

    if (normalDocs.equals(intersectDocs) == false) {
      throw new RuntimeException(
          "intersect visited different docs than straight terms enum: "
              + normalDocs.cardinality()
              + " for straight enum, vs "
              + intersectDocs.cardinality()
              + " for intersect, minTerm="
              + minTerm
              + " maxTerm="
              + maxTerm);
    }
    // System.out.println("      docs=" + normalTermCount);
    // System.out.println("    " + intersectTermCount + " vs " + normalTermCount);
    return intersectTermCount != normalTermCount;
  }

