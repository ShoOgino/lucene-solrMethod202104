  public void testIndexSortDocValuesWithOddLength(boolean reverse) throws Exception {
    Directory dir = newDirectory();

    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
    Sort indexSort = new Sort(new SortedNumericSortField("field", SortField.Type.LONG, reverse));
    iwc.setIndexSort(indexSort);
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);

    writer.addDocument(createDocument("field", -80));
    writer.addDocument(createDocument("field", -5));
    writer.addDocument(createDocument("field", 0));
    writer.addDocument(createDocument("field", 0));
    writer.addDocument(createDocument("field", 5));
    writer.addDocument(createDocument("field", 30));
    writer.addDocument(createDocument("field", 35));

    DirectoryReader reader = writer.getReader();
    IndexSearcher searcher = newSearcher(reader);

    // Test ranges consisting of one value.
    assertEquals(1, searcher.count(createQuery("field", -80, -80)));
    assertEquals(1, searcher.count(createQuery("field", -5, -5)));
    assertEquals(2, searcher.count(createQuery("field", 0, 0)));
    assertEquals(1, searcher.count(createQuery("field", 5, 5)));
    assertEquals(1, searcher.count(createQuery("field", 30, 30)));
    assertEquals(1, searcher.count(createQuery("field", 35, 35)));

    assertEquals(0, searcher.count(createQuery("field", -90, -90)));
    assertEquals(0, searcher.count(createQuery("field", 6, 6)));
    assertEquals(0, searcher.count(createQuery("field", 40, 40)));

    // Test the lower end of the document value range.
    assertEquals(2, searcher.count(createQuery("field", -90, -4)));
    assertEquals(2, searcher.count(createQuery("field", -80, -4)));
    assertEquals(1, searcher.count(createQuery("field", -70, -4)));
    assertEquals(2, searcher.count(createQuery("field", -80, -5)));

    // Test the upper end of the document value range.
    assertEquals(1, searcher.count(createQuery("field", 25, 34)));
    assertEquals(2, searcher.count(createQuery("field", 25, 35)));
    assertEquals(2, searcher.count(createQuery("field", 25, 36)));
    assertEquals(2, searcher.count(createQuery("field", 30, 35)));

    // Test multiple occurrences of the same value.
    assertEquals(2, searcher.count(createQuery("field", -4, 4)));
    assertEquals(2, searcher.count(createQuery("field", -4, 0)));
    assertEquals(2, searcher.count(createQuery("field", 0, 4)));
    assertEquals(4, searcher.count(createQuery("field", 0, 30)));

    // Test ranges that span all documents.
    assertEquals(7, searcher.count(createQuery("field", -80, 35)));
    assertEquals(7, searcher.count(createQuery("field", -90, 40)));

    writer.close();
    reader.close();
    dir.close();
  }

