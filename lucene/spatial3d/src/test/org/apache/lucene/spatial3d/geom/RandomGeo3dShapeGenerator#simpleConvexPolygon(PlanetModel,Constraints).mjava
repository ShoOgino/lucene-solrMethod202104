  /**
   * Method that returns a random generated a concave square GeoPolygon under given constraints.
   * Returns NULL if it cannot build the concave GeoPolygon under the given constraints. This shape
   * is an utility to build constraints.
   *
   * @param planetModel The planet model.
   * @param constraints The given constraints.
   * @return The random generated GeoPolygon.
   */
  private GeoPolygon simpleConvexPolygon(PlanetModel planetModel, Constraints constraints) {
    int iterations = 0;
    while (iterations < MAX_SHAPE_ITERATIONS) {
      iterations++;
      List<GeoPoint> points = points(3, planetModel, constraints);
      if (points.size() < 3) {
        continue;
      }
      points = orderPoints(points);
      try {
        GeoPolygon polygon = GeoPolygonFactory.makeGeoConvexPolygon(planetModel, points);
        if (!constraints.valid(polygon) || isConcave(planetModel, polygon)) {
          continue;
        }
        return polygon;
      } catch (IllegalArgumentException e) {
        continue;
      }
    }
    return null;
  }

