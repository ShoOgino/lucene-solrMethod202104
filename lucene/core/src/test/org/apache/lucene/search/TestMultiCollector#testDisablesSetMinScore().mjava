  public void testDisablesSetMinScore() throws IOException {
    Directory dir = newDirectory();
    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
    w.addDocument(new Document());
    IndexReader reader = DirectoryReader.open(w);
    w.close();

    Scorable scorer =
        new Scorable() {
          @Override
          public int docID() {
            throw new UnsupportedOperationException();
          }

          @Override
          public float score() {
            return 0;
          }

          @Override
          public void setMinCompetitiveScore(float minScore) {
            throw new AssertionError();
          }
        };

    Collector collector =
        new SimpleCollector() {
          private Scorable scorer;
          float minScore = 0;

          @Override
          public ScoreMode scoreMode() {
            return ScoreMode.TOP_SCORES;
          }

          @Override
          public void setScorer(Scorable scorer) throws IOException {
            this.scorer = scorer;
          }

          @Override
          public void collect(int doc) throws IOException {
            minScore = Math.nextUp(minScore);
            scorer.setMinCompetitiveScore(minScore);
          }
        };
    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());
    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));
    leafCollector.setScorer(scorer);
    leafCollector.collect(0); // no exception

    reader.close();
    dir.close();
  }

