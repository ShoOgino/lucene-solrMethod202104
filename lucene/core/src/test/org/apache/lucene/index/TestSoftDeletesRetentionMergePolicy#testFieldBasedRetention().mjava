  public void testFieldBasedRetention() throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();
    Instant now = Instant.now();
    Instant time24HoursAgo = now.minus(Duration.ofDays(1));
    String softDeletesField = "soft_delete";
    Supplier<Query> docsOfLast24Hours =
        () ->
            LongPoint.newRangeQuery(
                "creation_date", time24HoursAgo.toEpochMilli(), now.toEpochMilli());
    indexWriterConfig.setMergePolicy(
        new SoftDeletesRetentionMergePolicy(
            softDeletesField, docsOfLast24Hours, new LogDocMergePolicy()));
    indexWriterConfig.setSoftDeletesField(softDeletesField);
    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);

    long time28HoursAgo = now.minus(Duration.ofHours(28)).toEpochMilli();
    Document doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "1", Field.Store.YES));
    doc.add(new LongPoint("creation_date", time28HoursAgo));
    writer.addDocument(doc);

    writer.flush();
    long time26HoursAgo = now.minus(Duration.ofHours(26)).toEpochMilli();
    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "2", Field.Store.YES));
    doc.add(new LongPoint("creation_date", time26HoursAgo));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    if (random().nextBoolean()) {
      writer.flush();
    }
    long time23HoursAgo = now.minus(Duration.ofHours(23)).toEpochMilli();
    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "3", Field.Store.YES));
    doc.add(new LongPoint("creation_date", time23HoursAgo));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    if (random().nextBoolean()) {
      writer.flush();
    }
    long time12HoursAgo = now.minus(Duration.ofHours(12)).toEpochMilli();
    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "4", Field.Store.YES));
    doc.add(new LongPoint("creation_date", time12HoursAgo));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    if (random().nextBoolean()) {
      writer.flush();
    }
    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new StringField("version", "5", Field.Store.YES));
    doc.add(new LongPoint("creation_date", now.toEpochMilli()));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    if (random().nextBoolean()) {
      writer.flush();
    }
    writer.forceMerge(1);
    DirectoryReader reader = writer.getReader();
    assertEquals(1, reader.numDocs());
    assertEquals(3, reader.maxDoc());
    Set<String> versions = new HashSet<>();
    versions.add(reader.document(0, Collections.singleton("version")).get("version"));
    versions.add(reader.document(1, Collections.singleton("version")).get("version"));
    versions.add(reader.document(2, Collections.singleton("version")).get("version"));
    assertTrue(versions.contains("5"));
    assertTrue(versions.contains("4"));
    assertTrue(versions.contains("3"));
    IOUtils.close(reader, writer, dir);
  }

