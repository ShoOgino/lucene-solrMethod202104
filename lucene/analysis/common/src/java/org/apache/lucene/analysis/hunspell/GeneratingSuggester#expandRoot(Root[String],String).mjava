  private List<String> expandRoot(Root<String> root, String misspelled) {
    List<String> crossProducts = new ArrayList<>();
    Set<String> result = new LinkedHashSet<>();

    if (!dictionary.hasFlag(root.entryId, dictionary.needaffix)) {
      result.add(root.word);
    }

    // suffixes
    processAffixes(
        false,
        misspelled,
        (suffixLength, suffixId) -> {
          if (!hasCompatibleFlags(root, suffixId) || !checkAffixCondition(suffixId, root.word)) {
            return;
          }

          String suffix = misspelled.substring(misspelled.length() - suffixLength);
          String withSuffix =
              root.word.substring(0, root.word.length() - affixStripLength(suffixId)) + suffix;
          result.add(withSuffix);
          if (dictionary.isCrossProduct(suffixId)) {
            crossProducts.add(withSuffix);
          }
        });

    // cross-product prefixes
    processAffixes(
        true,
        misspelled,
        (prefixLength, prefixId) -> {
          if (!dictionary.hasFlag(root.entryId, dictionary.affixData(prefixId, AFFIX_FLAG))
              || !dictionary.isCrossProduct(prefixId)) {
            return;
          }

          String prefix = misspelled.substring(0, prefixLength);
          for (String suffixed : crossProducts) {
            if (checkAffixCondition(prefixId, suffixed)) {
              result.add(prefix + suffixed.substring(affixStripLength(prefixId)));
            }
          }
        });

    // pure prefixes
    processAffixes(
        true,
        misspelled,
        (prefixLength, prefixId) -> {
          if (hasCompatibleFlags(root, prefixId) && checkAffixCondition(prefixId, root.word)) {
            String prefix = misspelled.substring(0, prefixLength);
            result.add(prefix + root.word.substring(affixStripLength(prefixId)));
          }
        });

    return result.stream().limit(MAX_WORDS).collect(Collectors.toList());
  }

