  /**
   * Returns all fields with the number of terms for each field sorted by {@link TermCountsOrder}
   *
   * @param order - sort order
   */
  Map<String, Long> sortedTermCounts(TermCountsOrder order) {
    Objects.requireNonNull(order);

    Comparator<Map.Entry<String, Long>> comparator;
    switch (order) {
      case NAME_ASC:
        comparator = Map.Entry.comparingByKey();
        break;
      case NAME_DESC:
        comparator = Map.Entry.<String, Long>comparingByKey().reversed();
        break;
      case COUNT_ASC:
        comparator = Map.Entry.comparingByValue();
        break;
      case COUNT_DESC:
        comparator = Map.Entry.<String, Long>comparingByValue().reversed();
        break;
      default:
        comparator = Map.Entry.comparingByKey();
    }
    return sortedTermCounts(comparator);
  }

