  /** tests soft deletes that carry over deleted documents on merge for history rentention. */
  public void testSoftDeleteWithRetention() throws IOException, InterruptedException {
    AtomicInteger seqIds = new AtomicInteger(0);
    Directory dir = newDirectory();
    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();
    indexWriterConfig.setMergePolicy(
        new SoftDeletesRetentionMergePolicy(
            "soft_delete",
            () -> IntPoint.newRangeQuery("seq_id", seqIds.intValue() - 50, Integer.MAX_VALUE),
            indexWriterConfig.getMergePolicy()));
    indexWriterConfig.setSoftDeletesField("soft_delete");
    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);
    Thread[] threads = new Thread[2 + random().nextInt(3)];
    CountDownLatch startLatch = new CountDownLatch(1);
    CountDownLatch started = new CountDownLatch(threads.length);
    boolean updateSeveralDocs = random().nextBoolean();
    Set<String> ids = Collections.synchronizedSet(new HashSet<>());
    for (int i = 0; i < threads.length; i++) {
      threads[i] =
          new Thread(
              () -> {
                try {
                  started.countDown();
                  startLatch.await();
                  for (int d = 0; d < 100; d++) {
                    String id = String.valueOf(random().nextInt(10));
                    int seqId = seqIds.incrementAndGet();
                    if (updateSeveralDocs) {
                      Document doc = new Document();
                      doc.add(new StringField("id", id, Field.Store.YES));
                      doc.add(new IntPoint("seq_id", seqId));
                      writer.softUpdateDocuments(
                          new Term("id", id),
                          Arrays.asList(doc, doc),
                          new NumericDocValuesField("soft_delete", 1));
                    } else {
                      Document doc = new Document();
                      doc.add(new StringField("id", id, Field.Store.YES));
                      doc.add(new IntPoint("seq_id", seqId));
                      writer.softUpdateDocument(
                          new Term("id", id), doc, new NumericDocValuesField("soft_delete", 1));
                    }
                    if (rarely()) {
                      writer.flush();
                    }
                    ids.add(id);
                  }
                } catch (IOException | InterruptedException e) {
                  throw new AssertionError(e);
                }
              });
      threads[i].start();
    }
    started.await();
    startLatch.countDown();

    for (int i = 0; i < threads.length; i++) {
      threads[i].join();
    }
    DirectoryReader reader = DirectoryReader.open(writer);
    IndexSearcher searcher = new IndexSearcher(reader);
    for (String id : ids) {
      TopDocs topDocs = searcher.search(new TermQuery(new Term("id", id)), 10);
      if (updateSeveralDocs) {
        assertEquals(2, topDocs.totalHits.value);
        assertEquals(Math.abs(topDocs.scoreDocs[0].doc - topDocs.scoreDocs[1].doc), 1);
      } else {
        assertEquals(1, topDocs.totalHits.value);
      }
    }
    writer.addDocument(new Document()); // add a dummy doc to trigger a segment here
    writer.flush();
    writer.forceMerge(1);
    DirectoryReader oldReader = reader;
    reader = DirectoryReader.openIfChanged(reader, writer);
    if (reader != null) {
      oldReader.close();
      assertNotSame(oldReader, reader);
    } else {
      reader = oldReader;
    }
    assertEquals(1, reader.leaves().size());
    LeafReaderContext leafReaderContext = reader.leaves().get(0);
    LeafReader leafReader = leafReaderContext.reader();
    searcher =
        new IndexSearcher(
            new FilterLeafReader(leafReader) {
              @Override
              public CacheHelper getCoreCacheHelper() {
                return leafReader.getCoreCacheHelper();
              }

              @Override
              public CacheHelper getReaderCacheHelper() {
                return leafReader.getReaderCacheHelper();
              }

              @Override
              public Bits getLiveDocs() {
                return null;
              }

              @Override
              public int numDocs() {
                return maxDoc();
              }
            });
    TopDocs seq_id =
        searcher.search(
            IntPoint.newRangeQuery("seq_id", seqIds.intValue() - 50, Integer.MAX_VALUE), 10);
    assertTrue(seq_id.totalHits.value + " hits", seq_id.totalHits.value >= 50);
    searcher = new IndexSearcher(reader);
    for (String id : ids) {
      if (updateSeveralDocs) {
        assertEquals(2, searcher.search(new TermQuery(new Term("id", id)), 10).totalHits.value);
      } else {
        assertEquals(1, searcher.search(new TermQuery(new Term("id", id)), 10).totalHits.value);
      }
    }
    IOUtils.close(reader, writer, dir);
  }

