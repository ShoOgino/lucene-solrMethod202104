    /**
     * Given the set of all nodes on which to do placement and fetched attributes, builds the sets representing
     * candidate nodes for placement of replicas of each replica type.
     * These sets are packaged and returned in an EnumMap keyed by replica type (1st member of the Pair).
     * Also builds the number of existing cores on each node present in the returned EnumMap (2nd member of the returned Pair).
     * Nodes for which the number of cores is not available for whatever reason are excluded from acceptable candidate nodes
     * as it would not be possible to make any meaningful placement decisions.
     *
     * @param nodes      all nodes on which this plugin should compute placement
     * @param attrValues attributes fetched for the nodes. This method uses system property {@link #REPLICA_TYPE_SYSPROP} as
     *                   well as the number of cores on each node.
     */
    private Pair<EnumMap<Replica.ReplicaType, Set<Node>>, Map<Node, Integer>> getNodesPerReplicaType(Set<Node> nodes, final AttributeValues attrValues) {
      EnumMap<Replica.ReplicaType, Set<Node>> replicaTypeToNodes = new EnumMap<>(Replica.ReplicaType.class);
      Map<Node, Integer> coresOnNodes = new HashMap<>();

      for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {
        replicaTypeToNodes.put(replicaType, new HashSet<>());
      }

      for (Node node : nodes) {
        // Exclude nodes with unknown or too small disk free space
        if (attrValues.getFreeDisk(node).isEmpty()) {
          if (log.isWarnEnabled()) {
            log.warn("Unknown free disk on node {}, excluding it from placement decisions.", node.getName());
          }
          // We rely later on the fact that the free disk optional is present (see CoresAndDiskComparator), be careful it you change anything here.
          continue;
        }
        if (attrValues.getFreeDisk(node).get() < minimalFreeDiskGB) {
          if (log.isWarnEnabled()) {
            log.warn("Node {} free disk ({}GB) lower than configured minimum {}GB, excluding it from placement decisions.", node.getName(), attrValues.getFreeDisk(node).get(), minimalFreeDiskGB);
          }
          continue;
        }

        if (attrValues.getCoresCount(node).isEmpty()) {
          if (log.isWarnEnabled()) {
            log.warn("Unknown number of cores on node {}, excluding it from placement decisions.", node.getName());
          }
          // We rely later on the fact that the number of cores optional is present (see CoresAndDiskComparator), be careful it you change anything here.
          continue;
        }

        Integer coresCount = attrValues.getCoresCount(node).get();
        coresOnNodes.put(node, coresCount);

        String supportedReplicaTypes = attrValues.getSystemProperty(node, REPLICA_TYPE_SYSPROP).isPresent() ? attrValues.getSystemProperty(node, REPLICA_TYPE_SYSPROP).get() : null;
        // If property not defined or is only whitespace on a node, assuming node can take any replica type
        if (supportedReplicaTypes == null || supportedReplicaTypes.isBlank()) {
          for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {
            replicaTypeToNodes.get(rt).add(node);
          }
        } else {
          Set<String> acceptedTypes = Arrays.stream(supportedReplicaTypes.split(",")).map(String::trim).map(s -> s.toLowerCase(Locale.ROOT)).collect(Collectors.toSet());
          for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {
            if (acceptedTypes.contains(rt.name().toLowerCase(Locale.ROOT))) {
              replicaTypeToNodes.get(rt).add(node);
            }
          }
        }
      }
      return new Pair<>(replicaTypeToNodes, coresOnNodes);
    }

