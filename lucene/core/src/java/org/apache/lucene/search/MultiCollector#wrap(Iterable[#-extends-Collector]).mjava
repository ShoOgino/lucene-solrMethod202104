  /**
   * Wraps a list of {@link Collector}s with a {@link MultiCollector}. This method works as follows:
   *
   * <ul>
   *   <li>Filters out the <code>null</code> collectors, so they are not used during search time.
   *   <li>If the input contains 1 real collector (i.e. non-<code>null</code> ), it is returned.
   *   <li>Otherwise the method returns a {@link MultiCollector} which wraps the non-<code>null
   *       </code> ones.
   * </ul>
   *
   * @throws IllegalArgumentException if either 0 collectors were input, or all collectors are
   *     <code>null</code>.
   */
  public static Collector wrap(Iterable<? extends Collector> collectors) {
    // For the user's convenience, we allow null collectors to be passed.
    // However, to improve performance, these null collectors are found
    // and dropped from the array we save for actual collection time.
    int n = 0;
    for (Collector c : collectors) {
      if (c != null) {
        n++;
      }
    }

    if (n == 0) {
      throw new IllegalArgumentException("At least 1 collector must not be null");
    } else if (n == 1) {
      // only 1 Collector - return it.
      Collector col = null;
      for (Collector c : collectors) {
        if (c != null) {
          col = c;
          break;
        }
      }
      return col;
    } else {
      Collector[] colls = new Collector[n];
      n = 0;
      for (Collector c : collectors) {
        if (c != null) {
          colls[n++] = c;
        }
      }
      return new MultiCollector(colls);
    }
  }

