  /**
   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>
   * TokenStream</code>. Uses a supplied <code>IndexReader</code> to properly weight terms (for
   * gradient highlighting).
   *
   * <p>
   *
   * @param query that caused hit
   * @param tokenStream of text to be highlighted
   * @param fieldName restricts Term's used based on field name
   * @param reader to use for scoring
   * @return Map of WeightedSpanTerms with quasi tf/idf scores
   * @throws IOException If there is a low-level I/O error
   */
  public Map<String, WeightedSpanTerm> getWeightedSpanTermsWithScores(
      Query query, float boost, TokenStream tokenStream, String fieldName, IndexReader reader)
      throws IOException {
    if (fieldName != null) {
      this.fieldName = fieldName;
    } else {
      this.fieldName = null;
    }
    this.tokenStream = tokenStream;

    Map<String, WeightedSpanTerm> terms = new PositionCheckingMap<>();
    extract(query, boost, terms);

    int totalNumDocs = reader.maxDoc();
    Set<String> weightedTerms = terms.keySet();
    Iterator<String> it = weightedTerms.iterator();

    try {
      while (it.hasNext()) {
        WeightedSpanTerm weightedSpanTerm = terms.get(it.next());
        int docFreq = reader.docFreq(new Term(fieldName, weightedSpanTerm.term));
        // IDF algorithm taken from ClassicSimilarity class
        float idf = (float) (Math.log(totalNumDocs / (double) (docFreq + 1)) + 1.0);
        weightedSpanTerm.weight *= idf;
      }
    } finally {
      IOUtils.close(internalReader);
    }

    return terms;
  }

