  // LUCENE-2593
  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {
    MockDirectoryWrapper dir = newMockDirectory();
    // IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new
    // MockAnalyzer(random)).setReaderPooling(true));
    IndexWriter w =
        new IndexWriter(
            dir,
            newIndexWriterConfig(new MockAnalyzer(random()))
                .setMergeScheduler(new SerialMergeScheduler())
                .setReaderPooling(true)
                .setMergePolicy(
                    new FilterMergePolicy(newLogMergePolicy(2)) {
                      @Override
                      public boolean keepFullyDeletedSegment(
                          IOSupplier<CodecReader> readerIOSupplier) throws IOException {
                        // we can do this because we add/delete/add (and dont merge to "nothing")
                        return true;
                      }
                    }));
    Document doc = new Document();

    doc.add(newTextField("f", "doctor who", Field.Store.NO));
    w.addDocument(doc);
    w.commit();

    w.deleteDocuments(new Term("f", "who"));
    w.addDocument(doc);

    // disk fills up!
    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();
    ftdm.setDoFail();
    dir.failOn(ftdm);

    expectThrows(
        IOException.class,
        () -> {
          w.commit();
        });
    assertTrue(ftdm.didFail1 || ftdm.didFail2);

    TestUtil.checkIndex(dir);
    ftdm.clearDoFail();
    expectThrows(
        AlreadyClosedException.class,
        () -> {
          w.addDocument(doc);
        });

    dir.close();
  }

