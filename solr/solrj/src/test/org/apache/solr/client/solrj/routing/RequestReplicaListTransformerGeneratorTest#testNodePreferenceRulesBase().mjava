  @Test
  public void testNodePreferenceRulesBase() {
    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();
    ModifiableSolrParams params = new ModifiableSolrParams();
    List<Replica> replicas = getBasicReplicaList();

    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + ":stable:dividend:routingPreference";

    params.add("routingPreference", "0");
    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);

    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);
    rlt.transform(replicas);
    assertEquals("node1", getHost(replicas.get(0).getNodeName()));
    assertEquals("node2", getHost(replicas.get(1).getNodeName()));
    assertEquals("node3", getHost(replicas.get(2).getNodeName()));

    params.set("routingPreference", "1");
    rlt = generator.getReplicaListTransformer(params);
    rlt.transform(replicas);
    assertEquals("node2", getHost(replicas.get(0).getNodeName()));
    assertEquals("node3", getHost(replicas.get(1).getNodeName()));
    assertEquals("node1", getHost(replicas.get(2).getNodeName()));

    params.set("routingPreference", "2");
    rlt = generator.getReplicaListTransformer(params);
    rlt.transform(replicas);
    assertEquals("node3", getHost(replicas.get(0).getNodeName()));
    assertEquals("node1", getHost(replicas.get(1).getNodeName()));
    assertEquals("node2", getHost(replicas.get(2).getNodeName()));

    params.set("routingPreference", "3");
    rlt = generator.getReplicaListTransformer(params);
    rlt.transform(replicas);
    assertEquals("node1", getHost(replicas.get(0).getNodeName()));
    assertEquals("node2", getHost(replicas.get(1).getNodeName()));
    assertEquals("node3", getHost(replicas.get(2).getNodeName()));
  }

