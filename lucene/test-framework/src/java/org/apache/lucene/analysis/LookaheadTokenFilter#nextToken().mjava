  /**
   * Call this when you are done looking ahead; it will set the next token to return. Return the
   * boolean back to the caller.
   */
  protected boolean nextToken() throws IOException {
    // System.out.println("  nextToken: tokenPending=" + tokenPending);
    if (DEBUG) {
      System.out.println(
          "LTF.nextToken inputPos="
              + inputPos
              + " outputPos="
              + outputPos
              + " tokenPending="
              + tokenPending);
    }

    Position posData = positions.get(outputPos);

    // While loop here in case we have to
    // skip over a hole from the input:
    while (true) {

      // System.out.println("    check buffer @ outputPos=" +
      // outputPos + " inputPos=" + inputPos + " nextRead=" +
      // posData.nextRead + " vs size=" +
      // posData.inputTokens.size());

      // See if we have a previously buffered token to
      // return at the current position:
      if (posData.nextRead < posData.inputTokens.size()) {
        if (DEBUG) {
          System.out.println("  return previously buffered token");
        }
        // This position has buffered tokens to serve up:
        if (tokenPending) {
          positions.get(inputPos).add(captureState());
          tokenPending = false;
        }
        restoreState(positions.get(outputPos).nextState());
        // System.out.println("      return!");
        return true;
      }

      if (inputPos == -1 || outputPos == inputPos) {
        // No more buffered tokens:
        // We may still get input tokens at this position
        // System.out.println("    break buffer");
        if (tokenPending) {
          // Fast path: just return token we had just incr'd,
          // without having captured/restored its state:
          if (DEBUG) {
            System.out.println("  pass-through: return pending token");
          }
          tokenPending = false;
          return true;
        } else if (end || !peekToken()) {
          if (DEBUG) {
            System.out.println("  END");
          }
          afterPosition();
          if (insertPending) {
            // Subclass inserted a token at this same
            // position:
            if (DEBUG) {
              System.out.println("  return inserted token");
            }
            assert insertedTokenConsistent();
            insertPending = false;
            return true;
          }

          return false;
        }
      } else {
        if (posData.startOffset != -1) {
          // This position had at least one token leaving
          if (DEBUG) {
            System.out.println("  call afterPosition");
          }
          afterPosition();
          if (insertPending) {
            // Subclass inserted a token at this same
            // position:
            if (DEBUG) {
              System.out.println("  return inserted token");
            }
            assert insertedTokenConsistent();
            insertPending = false;
            return true;
          }
        }

        // Done with this position; move on:
        outputPos++;
        if (DEBUG) {
          System.out.println("  next position: outputPos=" + outputPos);
        }
        positions.freeBefore(outputPos);
        posData = positions.get(outputPos);
      }
    }
  }

