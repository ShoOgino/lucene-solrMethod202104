  /**
   * Sets the upper and lower bounds of this range query node and the {@link PointsConfig}
   * associated with these bounds.
   *
   * @param lower the lower bound
   * @param upper the upper bound
   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false
   *     </code>
   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false
   *     </code>
   * @param pointsConfig the {@link PointsConfig} that represents associated with the upper and
   *     lower bounds
   */
  public void setBounds(
      PointQueryNode lower,
      PointQueryNode upper,
      boolean lowerInclusive,
      boolean upperInclusive,
      PointsConfig pointsConfig)
      throws QueryNodeException {

    if (pointsConfig == null) {
      throw new IllegalArgumentException("pointsConfig must not be null!");
    }

    Class<? extends Number> lowerNumberType, upperNumberType;

    if (lower != null && lower.getValue() != null) {
      lowerNumberType = lower.getValue().getClass();
    } else {
      lowerNumberType = null;
    }

    if (upper != null && upper.getValue() != null) {
      upperNumberType = upper.getValue().getClass();
    } else {
      upperNumberType = null;
    }

    if (lowerNumberType != null && !lowerNumberType.equals(pointsConfig.getType())) {
      throw new IllegalArgumentException(
          "lower value's type should be the same as numericConfig type: "
              + lowerNumberType
              + " != "
              + pointsConfig.getType());
    }

    if (upperNumberType != null && !upperNumberType.equals(pointsConfig.getType())) {
      throw new IllegalArgumentException(
          "upper value's type should be the same as numericConfig type: "
              + upperNumberType
              + " != "
              + pointsConfig.getType());
    }

    super.setBounds(lower, upper, lowerInclusive, upperInclusive);
    this.numericConfig = pointsConfig;
  }

