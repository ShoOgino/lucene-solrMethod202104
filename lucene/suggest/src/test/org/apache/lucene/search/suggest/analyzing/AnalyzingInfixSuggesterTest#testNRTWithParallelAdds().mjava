  public void testNRTWithParallelAdds() throws IOException, InterruptedException {
    String[] keys =
        new String[] {
          "python", "java", "c", "scala", "ruby", "clojure", "erlang", "go", "swift", "lisp"
        };
    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
    Path tempDir = createTempDir("AIS_NRT_PERSIST_TEST");
    AnalyzingInfixSuggester suggester =
        new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);
    Thread[] multiAddThreads = new Thread[10];
    // Cannot call refresh on an suggester when no docs are added to the index
    expectThrows(
        IllegalStateException.class,
        () -> {
          suggester.refresh();
        });

    for (int i = 0; i < 10; i++) {
      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));
    }
    for (int i = 0; i < 10; i++) {
      multiAddThreads[i].start();
    }
    // Make sure all threads have completed indexing
    for (int i = 0; i < 10; i++) {
      multiAddThreads[i].join();
    }

    suggester.refresh();
    List<LookupResult> results =
        suggester.lookup(TestUtil.stringToCharSequence("python", random()), 10, true, false);
    assertEquals(1, results.size());
    assertEquals("python", results.get(0).key);

    // Test if the index is getting persisted correctly and can be reopened.
    suggester.commit();
    suggester.close();

    AnalyzingInfixSuggester suggester2 =
        new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);
    results = suggester2.lookup(TestUtil.stringToCharSequence("python", random()), 10, true, false);
    assertEquals(1, results.size());
    assertEquals("python", results.get(0).key);

    suggester2.close();
    a.close();
  }

