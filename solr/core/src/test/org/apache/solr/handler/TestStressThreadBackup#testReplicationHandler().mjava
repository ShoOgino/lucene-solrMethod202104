  @Test
  public void testReplicationHandler() throws Exception {
    // Create a custom BackupAPIImpl which uses ReplicatoinHandler for the backups
    // but still defaults to CoreAdmin for making named snapshots (since that's what's documented)
    testSnapshotsAndBackupsDuringConcurrentCommitsAndOptimizes(new BackupAPIImpl() {
      final BackupStatusChecker backupStatus = new BackupStatusChecker(coreClient);
      /** no solrj API for ReplicationHandler */
      private GenericSolrRequest makeReplicationReq(SolrParams p) {
        return new GenericSolrRequest(GenericSolrRequest.METHOD.GET, "/replication", p);
      }
      
      /** 
       * Override default backup impl to hit ReplicationHandler, 
       * and then poll that same handler until success
       */
      public void makeBackup(final String backupName, final String snapName) throws Exception {
        final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
        ModifiableSolrParams p = params("command", "backup",
                                        "name", backupName,
                                        CoreAdminParams.BACKUP_LOCATION, backupDir.getAbsolutePath());
        if (null != snapName) {
          p.add(CoreAdminParams.COMMIT_NAME, snapName);
        }
        makeReplicationReq(p).process(coreClient);
        backupStatus.waitForBackupSuccess(backupName, timeout);
      }
    });
    
  }

