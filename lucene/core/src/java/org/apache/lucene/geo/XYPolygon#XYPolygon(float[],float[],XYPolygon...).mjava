  /** Creates a new Polygon from the supplied x, y arrays, and optionally any holes. */
  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {
    if (x == null) {
      throw new IllegalArgumentException("x must not be null");
    }
    if (y == null) {
      throw new IllegalArgumentException("y must not be null");
    }
    if (holes == null) {
      throw new IllegalArgumentException("holes must not be null");
    }
    if (x.length != y.length) {
      throw new IllegalArgumentException("x and y must be equal length");
    }
    if (x.length < 4) {
      throw new IllegalArgumentException("at least 4 polygon points required");
    }
    if (x[0] != x[x.length - 1]) {
      throw new IllegalArgumentException(
          "first and last points of the polygon must be the same (it must close itself): x[0]="
              + x[0]
              + " x["
              + (x.length - 1)
              + "]="
              + x[x.length - 1]);
    }
    if (y[0] != y[y.length - 1]) {
      throw new IllegalArgumentException(
          "first and last points of the polygon must be the same (it must close itself): y[0]="
              + y[0]
              + " y["
              + (y.length - 1)
              + "]="
              + y[y.length - 1]);
    }
    for (int i = 0; i < holes.length; i++) {
      XYPolygon inner = holes[i];
      if (inner.holes.length > 0) {
        throw new IllegalArgumentException("holes may not contain holes: polygons may not nest.");
      }
    }
    this.x = x.clone();
    this.y = y.clone();
    this.holes = holes.clone();

    // compute bounding box
    float minX = checkVal(x[0]);
    float maxX = x[0];
    float minY = checkVal(y[0]);
    float maxY = y[0];

    double windingSum = 0d;
    final int numPts = x.length - 1;
    for (int i = 1, j = 0; i < numPts; j = i++) {
      minX = Math.min(checkVal(x[i]), minX);
      maxX = Math.max(x[i], maxX);
      minY = Math.min(checkVal(y[i]), minY);
      maxY = Math.max(y[i], maxY);
      // compute signed area
      windingSum +=
          (x[j] - x[numPts]) * (y[i] - y[numPts]) - (y[j] - y[numPts]) * (x[i] - x[numPts]);
    }
    this.minX = minX;
    this.maxX = maxX;
    this.minY = minY;
    this.maxY = maxY;
    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;
  }

