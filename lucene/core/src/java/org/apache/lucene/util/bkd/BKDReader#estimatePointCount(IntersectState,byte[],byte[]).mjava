  private long estimatePointCount(
      IntersectState state, byte[] cellMinPacked, byte[] cellMaxPacked) {

    /*
    System.out.println("\nR: intersect nodeID=" + state.index.getNodeID());
    for(int dim=0;dim<numDims;dim++) {
      System.out.println("  dim=" + dim + "\n    cellMin=" + new BytesRef(cellMinPacked, dim*config.bytesPerDim, config.bytesPerDim) + "\n    cellMax=" + new BytesRef(cellMaxPacked, dim*config.bytesPerDim, config.bytesPerDim));
    }
    */

    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);

    if (r == Relation.CELL_OUTSIDE_QUERY) {
      // This cell is fully outside of the query shape: stop recursing
      return 0L;
    } else if (r == Relation.CELL_INSIDE_QUERY) {
      return (long) config.maxPointsInLeafNode * state.index.getNumLeaves();
    } else if (state.index.isLeafNode()) {
      // Assume half the points matched
      return (config.maxPointsInLeafNode + 1) / 2;
    } else {

      // Non-leaf node: recurse on the split left and right nodes
      int splitDim = state.index.getSplitDim();
      assert splitDim >= 0
          : "splitDim=" + splitDim + ", config.numIndexDims=" + config.numIndexDims;
      assert splitDim < config.numIndexDims
          : "splitDim=" + splitDim + ", config.numIndexDims=" + config.numIndexDims;

      byte[] splitPackedValue = state.index.getSplitPackedValue();
      BytesRef splitDimValue = state.index.getSplitDimValue();
      assert splitDimValue.length == config.bytesPerDim;
      // System.out.println("  splitDimValue=" + splitDimValue + " splitDim=" + splitDim);

      // make sure cellMin <= splitValue <= cellMax:
      assert Arrays.compareUnsigned(
                  cellMinPacked,
                  splitDim * config.bytesPerDim,
                  splitDim * config.bytesPerDim + config.bytesPerDim,
                  splitDimValue.bytes,
                  splitDimValue.offset,
                  splitDimValue.offset + config.bytesPerDim)
              <= 0
          : "config.bytesPerDim="
              + config.bytesPerDim
              + " splitDim="
              + splitDim
              + " config.numIndexDims="
              + config.numIndexDims
              + " config.numDims="
              + config.numDims;
      assert Arrays.compareUnsigned(
                  cellMaxPacked,
                  splitDim * config.bytesPerDim,
                  splitDim * config.bytesPerDim + config.bytesPerDim,
                  splitDimValue.bytes,
                  splitDimValue.offset,
                  splitDimValue.offset + config.bytesPerDim)
              >= 0
          : "config.bytesPerDim="
              + config.bytesPerDim
              + " splitDim="
              + splitDim
              + " config.numIndexDims="
              + config.numIndexDims
              + " config.numDims="
              + config.numDims;

      // Recurse on left sub-tree:
      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, config.packedIndexBytesLength);
      System.arraycopy(
          splitDimValue.bytes,
          splitDimValue.offset,
          splitPackedValue,
          splitDim * config.bytesPerDim,
          config.bytesPerDim);
      state.index.pushLeft();
      final long leftCost = estimatePointCount(state, cellMinPacked, splitPackedValue);
      state.index.pop();

      // Restore the split dim value since it may have been overwritten while recursing:
      System.arraycopy(
          splitPackedValue,
          splitDim * config.bytesPerDim,
          splitDimValue.bytes,
          splitDimValue.offset,
          config.bytesPerDim);

      // Recurse on right sub-tree:
      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, config.packedIndexBytesLength);
      System.arraycopy(
          splitDimValue.bytes,
          splitDimValue.offset,
          splitPackedValue,
          splitDim * config.bytesPerDim,
          config.bytesPerDim);
      state.index.pushRight();
      final long rightCost = estimatePointCount(state, splitPackedValue, cellMaxPacked);
      state.index.pop();
      return leftCost + rightCost;
    }
  }

