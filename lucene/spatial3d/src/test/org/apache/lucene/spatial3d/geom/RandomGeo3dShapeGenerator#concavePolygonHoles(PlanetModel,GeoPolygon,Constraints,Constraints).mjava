  /**
   * Method that returns a random list if concave GeoPolygons under given constraints. Method use to
   * generate convex holes. Note that constraints for points and holes are different,
   *
   * @param planetModel The planet model.
   * @param polygon The polygon where the holes are within.
   * @param holeConstraints The given constraints that a hole must comply.
   * @param pointConstraints The given constraints that a point must comply.
   * @return The random generated GeoPolygon.
   */
  private List<GeoPolygon> concavePolygonHoles(
      PlanetModel planetModel,
      GeoPolygon polygon,
      Constraints holeConstraints,
      Constraints pointConstraints) {
    int iterations = 0;
    int holesCount = random().nextInt(3) + 1;
    List<GeoPolygon> holes = new ArrayList<>();
    while (iterations < MAX_SHAPE_ITERATIONS) {
      iterations++;
      int vertexCount = random().nextInt(3) + 3;
      List<GeoPoint> geoPoints = points(vertexCount, planetModel, pointConstraints);
      if (geoPoints.size() < 3) {
        continue;
      }
      geoPoints = orderPoints(geoPoints);
      GeoPolygon inversePolygon = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);
      // The convex polygon must be within
      if (inversePolygon == null || polygon.getRelationship(inversePolygon) != GeoArea.WITHIN) {
        continue;
      }
      // make it concave
      Collections.reverse(geoPoints);
      try {
        GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);
        if (!holeConstraints.valid(hole) || isConvex(planetModel, hole)) {
          continue;
        }
        holes.add(hole);
        if (holes.size() == holesCount) {
          return holes;
        }
        pointConstraints.put(hole, GeoArea.DISJOINT);
      } catch (IllegalArgumentException e) {
        continue;
      }
    }
    return holes;
  }

