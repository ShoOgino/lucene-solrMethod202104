    protected void computeInsideOutside() {
      if (!computedInsideOutside) {
        // Convert travel plane to a sided plane
        final Membership intersectionBound1 = new SidedPlane(testPoint, travelPlane, travelPlane.D);
        // Convert testPoint plane to a sided plane
        final Membership intersectionBound2 =
            new SidedPlane(thePointX, thePointY, thePointZ, testPointPlane, testPointPlane.D);

        assert intersectionBound1.isWithin(intersectionPoint)
            : "intersection must be within intersectionBound1";
        assert intersectionBound2.isWithin(intersectionPoint)
            : "intersection must be within intersectionBound2";

        // Figure out which of the above/below planes are inside vs. outside.  To do this,
        // we look for the point that is within the bounds of the testPointPlane and travelPlane.
        // The two sides that intersected there are the inside borders.
        // Each of these can generate two solutions.  We need to refine them to generate only one
        // somehow -- the one in the same area of the world as intersectionPoint.
        // Since the travel/testpoint planes have one fixed coordinate, and that is represented by
        // the plane's D value, it should be possible to choose based on the
        // point's coordinates.
        final GeoPoint[] aboveAbove =
            travelAbovePlane.findIntersections(
                planetModel, testPointAbovePlane, intersectionBound1, intersectionBound2);
        assert aboveAbove != null : "Above + above should not be coplanar";
        final GeoPoint[] aboveBelow =
            travelAbovePlane.findIntersections(
                planetModel, testPointBelowPlane, intersectionBound1, intersectionBound2);
        assert aboveBelow != null : "Above + below should not be coplanar";
        final GeoPoint[] belowBelow =
            travelBelowPlane.findIntersections(
                planetModel, testPointBelowPlane, intersectionBound1, intersectionBound2);
        assert belowBelow != null : "Below + below should not be coplanar";
        final GeoPoint[] belowAbove =
            travelBelowPlane.findIntersections(
                planetModel, testPointAbovePlane, intersectionBound1, intersectionBound2);
        assert belowAbove != null : "Below + above should not be coplanar";

        assert ((aboveAbove.length > 0) ? 1 : 0)
                    + ((aboveBelow.length > 0) ? 1 : 0)
                    + ((belowBelow.length > 0) ? 1 : 0)
                    + ((belowAbove.length > 0) ? 1 : 0)
                == 1
            : "Can be exactly one inside point, instead was: aa="
                + aboveAbove.length
                + " xyScaling="
                + aboveBelow.length
                + " bb="
                + belowBelow.length
                + " ba="
                + belowAbove.length;

        final GeoPoint[] insideInsidePoints;
        if (aboveAbove.length > 0) {
          travelInsidePlane = travelAbovePlane;
          testPointInsidePlane = testPointAbovePlane;
          travelOutsidePlane = travelBelowPlane;
          testPointOutsidePlane = testPointBelowPlane;
          insideInsidePoints = aboveAbove;
        } else if (aboveBelow.length > 0) {
          travelInsidePlane = travelAbovePlane;
          testPointInsidePlane = testPointBelowPlane;
          travelOutsidePlane = travelBelowPlane;
          testPointOutsidePlane = testPointAbovePlane;
          insideInsidePoints = aboveBelow;
        } else if (belowBelow.length > 0) {
          travelInsidePlane = travelBelowPlane;
          testPointInsidePlane = testPointBelowPlane;
          travelOutsidePlane = travelAbovePlane;
          testPointOutsidePlane = testPointAbovePlane;
          insideInsidePoints = belowBelow;
        } else if (belowAbove.length > 0) {
          travelInsidePlane = travelBelowPlane;
          testPointInsidePlane = testPointAbovePlane;
          travelOutsidePlane = travelAbovePlane;
          testPointOutsidePlane = testPointBelowPlane;
          insideInsidePoints = belowAbove;
        } else {
          throw new IllegalStateException(
              "Can't find traversal intersection among: "
                  + travelAbovePlane
                  + ", "
                  + testPointAbovePlane
                  + ", "
                  + travelBelowPlane
                  + ", "
                  + testPointBelowPlane);
        }

        // Get the inside-inside intersection point
        // Picking which point, out of two, that corresponds to the already-selected
        // intersectionPoint, is tricky, but it must be done.
        // We expect the choice to be within a small delta of the intersection point in 2 of the
        // dimensions, but not the third.
        final GeoPoint insideInsidePoint = pickProximate(insideInsidePoints);

        // Get the outside-outside intersection point
        // System.out.println("Computing outside-outside intersection");
        final GeoPoint[] outsideOutsidePoints =
            testPointOutsidePlane.findIntersections(
                planetModel,
                travelOutsidePlane); // these don't add anything: , checkPointCutoffPlane,
        // testPointCutoffPlane);
        final GeoPoint outsideOutsidePoint = pickProximate(outsideOutsidePoints);

        insideTravelCutoffPlane =
            new SidedPlane(thePointX, thePointY, thePointZ, travelInsidePlane, insideInsidePoint);
        outsideTravelCutoffPlane =
            new SidedPlane(thePointX, thePointY, thePointZ, travelInsidePlane, outsideOutsidePoint);
        insideTestPointCutoffPlane =
            new SidedPlane(testPoint, testPointInsidePlane, insideInsidePoint);
        outsideTestPointCutoffPlane =
            new SidedPlane(testPoint, testPointOutsidePlane, outsideOutsidePoint);

        /*
        System.out.println("insideTravelCutoffPlane = "+insideTravelCutoffPlane);
        System.out.println("outsideTravelCutoffPlane = "+outsideTravelCutoffPlane);
        System.out.println("insideTestPointCutoffPlane = "+insideTestPointCutoffPlane);
        System.out.println("outsideTestPointCutoffPlane = "+outsideTestPointCutoffPlane);
        */

        computedInsideOutside = true;
      }
    }

