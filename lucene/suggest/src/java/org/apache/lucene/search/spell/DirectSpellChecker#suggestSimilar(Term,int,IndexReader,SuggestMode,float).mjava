  /**
   * Suggest similar words.
   *
   * <p>Unlike {@link SpellChecker}, the similarity used to fetch the most relevant terms is an edit
   * distance, therefore typically a low value for numSug will work very well.
   *
   * @param term Term you want to spell check on
   * @param numSug the maximum number of suggested words
   * @param ir IndexReader to find terms from
   * @param suggestMode specifies when to return suggested words
   * @param accuracy return only suggested words that match with this similarity
   * @return sorted list of the suggested words according to the comparator
   * @throws IOException If there is a low-level I/O error.
   */
  public SuggestWord[] suggestSimilar(
      Term term, int numSug, IndexReader ir, SuggestMode suggestMode, float accuracy)
      throws IOException {
    final CharsRefBuilder spare = new CharsRefBuilder();
    String text = term.text();

    int textLength = text.codePointCount(0, text.length());
    if (textLength < minQueryLength || textLength > maxQueryLength) {
      return new SuggestWord[0];
    }

    if (lowerCaseTerms) {
      term = new Term(term.field(), text.toLowerCase(Locale.ROOT));
    }

    int docfreq = ir.docFreq(term);

    if (suggestMode == SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && docfreq > 0) {
      return new SuggestWord[0];
    }

    int maxDoc = ir.maxDoc();

    if (maxQueryFrequency >= 1f && docfreq > maxQueryFrequency) {
      return new SuggestWord[0];
    } else if (docfreq > (int) Math.ceil(maxQueryFrequency * (float) maxDoc)) {
      return new SuggestWord[0];
    }

    if (suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) docfreq = 0;

    if (thresholdFrequency >= 1f) {
      docfreq = Math.max(docfreq, (int) thresholdFrequency);
    } else if (thresholdFrequency > 0f) {
      docfreq = Math.max(docfreq, (int) (thresholdFrequency * (float) maxDoc) - 1);
    }

    Collection<ScoreTerm> terms = null;
    int inspections = numSug * maxInspections;

    // try ed=1 first, in case we get lucky
    terms = suggestSimilar(term, inspections, ir, docfreq, 1, accuracy, spare);
    if (maxEdits > 1 && terms.size() < inspections) {
      HashSet<ScoreTerm> moreTerms = new HashSet<>();
      moreTerms.addAll(terms);
      moreTerms.addAll(suggestSimilar(term, inspections, ir, docfreq, maxEdits, accuracy, spare));
      terms = moreTerms;
    }

    // create the suggestword response, sort it, and trim it to size.

    SuggestWord suggestions[] = new SuggestWord[terms.size()];
    int index = suggestions.length - 1;
    for (ScoreTerm s : terms) {
      SuggestWord suggestion = new SuggestWord();
      if (s.termAsString == null) {
        spare.copyUTF8Bytes(s.term);
        s.termAsString = spare.toString();
      }
      suggestion.string = s.termAsString;
      suggestion.score = s.score;
      suggestion.freq = s.docfreq;
      suggestions[index--] = suggestion;
    }

    ArrayUtil.timSort(suggestions, Collections.reverseOrder(comparator));
    if (numSug < suggestions.length) {
      SuggestWord trimmed[] = new SuggestWord[numSug];
      System.arraycopy(suggestions, 0, trimmed, 0, numSug);
      suggestions = trimmed;
    }
    return suggestions;
  }

