  protected String checkRandomExpression(String docValue) {
    // Generate and test a random regular expression which should match the given docValue
    StringBuilder result = new StringBuilder();
    // Pick a part of the string to change
    int substitutionPoint = randomInt(docValue.length() - 1);
    int substitutionLength = 1 + randomInt(Math.min(10, docValue.length() - substitutionPoint));

    // Add any head to the result, unchanged
    if (substitutionPoint > 0) {
      result.append(docValue.substring(0, substitutionPoint));
    }

    // Modify the middle...
    String replacementPart =
        docValue.substring(substitutionPoint, substitutionPoint + substitutionLength);
    int mutation = random().nextInt(15);
    switch (mutation) {
      case 0:
        // OR with random alpha of same length
        result.append(
            "(" + replacementPart + "|d" + randomDocValue(replacementPart.length()) + ")");
        break;
      case 1:
        // OR with non-existant value
        result.append("(" + replacementPart + "|doesnotexist)");
        break;
      case 2:
        // OR with another randomised regex (used to create nested levels of expression).
        result.append("(" + checkRandomExpression(replacementPart) + "|doesnotexist)");
        break;
      case 3:
        // Star-replace all ab sequences.
        result.append(replacementPart.replaceAll("ab", ".*"));
        break;
      case 4:
        // .-replace all b chars
        result.append(replacementPart.replaceAll("b", "."));
        break;
      case 5:
        // length-limited stars {1,2}
        result.append(".{1," + replacementPart.length() + "}");
        break;
      case 6:
        // replace all chars with .
        result.append(replacementPart.replaceAll(".", "."));
        break;
      case 7:
        // OR with uppercase chars eg [aA] (many of these sorts of expression in the wild..
        char[] chars = replacementPart.toCharArray();
        for (char c : chars) {
          result.append("[" + c + Character.toUpperCase(c) + "]");
        }
        break;
      case 8:
        // NOT a character - replace all b's with "not a"
        result.append(replacementPart.replaceAll("b", "[^a]"));
        break;
      case 9:
        // Make whole part repeatable 1 or more times
        result.append("(" + replacementPart + ")+");
        break;
      case 10:
        // Make whole part repeatable 0 or more times
        result.append("(" + replacementPart + ")?");
        break;
      case 11:
        // Make any digits replaced by character class
        result.append(replacementPart.replaceAll("\\d", "\\\\d"));
        break;
      case 12:
        // Make any whitespace chars replaced by not word class
        result.append(replacementPart.replaceAll("\\s", "\\\\W"));
        break;
      case 13:
        // Make any whitespace chars replace by whitespace class
        result.append(replacementPart.replaceAll("\\s", "\\\\s"));
        break;
      case 14:
        // Switch case of characters
        StringBuilder switchedCase = new StringBuilder();
        replacementPart
            .codePoints()
            .forEach(
                p -> {
                  int switchedP = p;
                  if (Character.isLowerCase(p)) {
                    switchedP = Character.toUpperCase(p);
                  } else {
                    switchedP = Character.toLowerCase(p);
                  }
                  switchedCase.appendCodePoint(switchedP);
                  if (p != switchedP) {
                    caseSensitiveQuery = false;
                  }
                });
        result.append(switchedCase.toString());
        break;
      default:
        break;
    }
    // add any remaining tail, unchanged
    if (substitutionPoint + substitutionLength <= docValue.length() - 1) {
      result.append(docValue.substring(substitutionPoint + substitutionLength));
    }

    String regexPattern = result.toString();
    // Assert our randomly generated regex actually matches the provided raw input using java's
    // expression matcher
    Pattern pattern =
        caseSensitiveQuery
            ? Pattern.compile(regexPattern)
            : Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
    ;
    Matcher matcher = pattern.matcher(docValue);
    assertTrue(
        "Java regex " + regexPattern + " did not match doc value " + docValue, matcher.matches());

    int matchFlags = caseSensitiveQuery ? 0 : RegExp.ASCII_CASE_INSENSITIVE;
    RegExp regex = new RegExp(regexPattern, RegExp.ALL, matchFlags);
    Automaton automaton = regex.toAutomaton();
    ByteRunAutomaton bytesMatcher = new ByteRunAutomaton(automaton);
    BytesRef br = new BytesRef(docValue);
    assertTrue(
        "["
            + regexPattern
            + "]should match ["
            + docValue
            + "]"
            + substitutionPoint
            + "-"
            + substitutionLength
            + "/"
            + docValue.length(),
        bytesMatcher.run(br.bytes, br.offset, br.length));
    if (caseSensitiveQuery == false) {
      RegExp caseSensitiveRegex = new RegExp(regexPattern);
      Automaton csAutomaton = caseSensitiveRegex.toAutomaton();
      ByteRunAutomaton csBytesMatcher = new ByteRunAutomaton(csAutomaton);
      assertFalse(
          "[" + regexPattern + "] with case sensitive setting should not match [" + docValue + "]",
          csBytesMatcher.run(br.bytes, br.offset, br.length));
    }
    return regexPattern;
  }

