  public void testDiverseDocs() throws IOException {
    Directory dir = newDirectory();
    IndexWriter writer =
        new IndexWriter(
            dir, newIndexWriterConfig(new MockAnalyzer(random())).setRAMBufferSizeMB(0.5));
    int n = atLeast(1);
    for (int i = 0; i < n; i++) {
      // First, docs where every term is unique (heavy on
      // Posting instances)
      for (int j = 0; j < 100; j++) {
        Document doc = new Document();
        for (int k = 0; k < 100; k++) {
          doc.add(newField("field", Integer.toString(random().nextInt()), storedTextType));
        }
        writer.addDocument(doc);
      }

      // Next, many single term docs where only one term
      // occurs (heavy on byte blocks)
      for (int j = 0; j < 100; j++) {
        Document doc = new Document();
        doc.add(newField("field", "aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa", storedTextType));
        writer.addDocument(doc);
      }

      // Next, many single term docs where only one term
      // occurs but the terms are very long (heavy on
      // char[] arrays)
      for (int j = 0; j < 100; j++) {
        StringBuilder b = new StringBuilder();
        String x = Integer.toString(j) + ".";
        for (int k = 0; k < 1000; k++) b.append(x);
        String longTerm = b.toString();

        Document doc = new Document();
        doc.add(newField("field", longTerm, storedTextType));
        writer.addDocument(doc);
      }
    }
    writer.close();

    IndexReader reader = DirectoryReader.open(dir);
    IndexSearcher searcher = newSearcher(reader);
    long totalHits = searcher.count(new TermQuery(new Term("field", "aaa")));
    assertEquals(n * 100, totalHits);
    reader.close();

    dir.close();
  }

