  /**
   * Start a replication handler thread that will periodically pull indices from the shard leader
   *
   * <p>This is separate from the ReplicationHandler that listens at /replication, used for recovery
   * and leader actions. It is simpler to discard the entire polling ReplicationHandler rather then
   * worrying about disabling polling and correctly setting all of the leader bits if we need to reset.
   *
   * <p>TODO: It may be cleaner to extract the polling logic use that directly instead of creating
   * what might be a fairly heavyweight instance here.
   *
   * @param switchTransactionLog if true, ReplicationHandler will rotate the transaction log once
   * the replication is done
   */
  public void startReplication(boolean switchTransactionLog) {
    try (SolrCore core = cc.getCore(coreName)) {
      if (core == null) {
        if (cc.isShutDown()) {
          return;
        } else {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "SolrCore not found:" + coreName + " in " + cc.getLoadedCoreNames());
        }
      }
      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();
      String pollIntervalStr = "00:00:03";
      if (System.getProperty("jetty.testMode") != null) {
        pollIntervalStr = "00:00:01";
      }
      if (uinfo.autoCommmitMaxTime != -1) {
        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);
      } else if (uinfo.autoSoftCommmitMaxTime != -1) {
        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);
      }
      log.info("Will start replication from leader with poll interval: {}", pollIntervalStr );

      NamedList<Object> followerConfig = new NamedList<>();
      followerConfig.add("fetchFromLeader", Boolean.TRUE);
      followerConfig.add(ReplicationHandler.SKIP_COMMIT_ON_LEADER_VERSION_ZERO, switchTransactionLog);
      followerConfig.add("pollInterval", pollIntervalStr);
      NamedList<Object> replicationConfig = new NamedList<>();
      replicationConfig.add("follower", followerConfig);

      String lastCommitVersion = getCommitVersion(core);
      if (lastCommitVersion != null) {
        lastVersion = Long.parseLong(lastCommitVersion);
      }

      replicationProcess = new ReplicationHandler();
      if (switchTransactionLog) {
        replicationProcess.setPollListener((solrCore, fetchResult) -> {
          if (fetchResult == IndexFetcher.IndexFetchResult.INDEX_FETCH_SUCCESS) {
            String commitVersion = getCommitVersion(core);
            if (commitVersion == null) return;
            if (Long.parseLong(commitVersion) == lastVersion) return;
            UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();
            SolrQueryRequest req = new LocalSolrQueryRequest(core,
                new ModifiableSolrParams());
            CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);
            cuc.setVersion(Long.parseLong(commitVersion));
            updateLog.commitAndSwitchToNewTlog(cuc);
            lastVersion = Long.parseLong(commitVersion);
          }
        });
      }
      replicationProcess.init(replicationConfig);
      replicationProcess.inform(core);
    }
  }

