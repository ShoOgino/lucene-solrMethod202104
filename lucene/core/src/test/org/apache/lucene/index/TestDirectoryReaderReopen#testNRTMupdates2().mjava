  /** test reopening backwards from an NRT reader with DV updates */
  public void testNRTMupdates2() throws Exception {
    Directory dir = newDirectory();
    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
    SnapshotDeletionPolicy snapshotter =
        new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
    iwc.setIndexDeletionPolicy(snapshotter);
    IndexWriter writer = new IndexWriter(dir, iwc);
    writer.commit(); // make sure all index metadata is written out

    Document doc = new Document();
    doc.add(new StringField("key", "value1", Field.Store.YES));
    doc.add(new NumericDocValuesField("dv", 1));
    writer.addDocument(doc);

    writer.commit();

    IndexCommit ic1 = snapshotter.snapshot();

    writer.updateNumericDocValue(new Term("key", "value1"), "dv", 2);

    DirectoryReader latest = DirectoryReader.open(writer);
    assertEquals(1, latest.leaves().size());

    // This reader will be used for searching against commit point 1
    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);
    assertEquals(1, oldest.leaves().size());

    // sharing same core
    assertSame(
        latest.leaves().get(0).reader().getCoreCacheHelper().getKey(),
        oldest.leaves().get(0).reader().getCoreCacheHelper().getKey());

    NumericDocValues values = getOnlyLeafReader(oldest).getNumericDocValues("dv");
    assertEquals(0, values.nextDoc());
    assertEquals(1, values.longValue());

    values = getOnlyLeafReader(latest).getNumericDocValues("dv");
    assertEquals(0, values.nextDoc());
    assertEquals(2, values.longValue());

    latest.close();
    oldest.close();

    snapshotter.release(ic1);
    writer.close();
    dir.close();
  }

