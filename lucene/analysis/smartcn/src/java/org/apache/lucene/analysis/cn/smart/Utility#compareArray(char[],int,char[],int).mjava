  /**
   * compare two arrays starting at the specified offsets.
   *
   * @param larray left array
   * @param lstartIndex start offset into larray
   * @param rarray right array
   * @param rstartIndex start offset into rarray
   * @return 0 if the arrays are equalï¼Œ1 if larray &gt; rarray, -1 if larray &lt; rarray
   */
  public static int compareArray(char[] larray, int lstartIndex, char[] rarray, int rstartIndex) {

    if (larray == null) {
      if (rarray == null || rstartIndex >= rarray.length) return 0;
      else return -1;
    } else {
      // larray != null
      if (rarray == null) {
        if (lstartIndex >= larray.length) return 0;
        else return 1;
      }
    }

    int li = lstartIndex, ri = rstartIndex;
    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {
      li++;
      ri++;
    }
    if (li == larray.length) {
      if (ri == rarray.length) {
        // Both arrays are equivalent, return 0.
        return 0;
      } else {
        // larray < rarray because larray has ended first.
        return -1;
      }
    } else {
      // differing lengths
      if (ri == rarray.length) {
        // larray > rarray because rarray has ended first.
        return 1;
      } else {
        // determine by comparison
        if (larray[li] > rarray[ri]) return 1;
        else return -1;
      }
    }
  }

