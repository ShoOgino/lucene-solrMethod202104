    /**
     * Using optimistic locking (and retries when needed) updates Zookeeper with the changes previously recorded by calls
     * to {@link #record(MutatingCommand, ZkNodeProps)}.
     */
    public void executeStateUpdates(SolrCloudManager scm, ZkStateReader zkStateReader) throws KeeperException, InterruptedException {
      if (log.isDebugEnabled()) {
        log.debug("Executing updates for collection " + collectionName + ", is creation=" + isCollectionCreation + ", " + mutations.size() + " recorded mutations.", new Exception("StackTraceOnly")); // nowarn
      }
      if (mutations.isEmpty()) {
        final String err = "Internal bug. Unexpected empty set of mutations to apply for collection " + collectionName;
        log.error(err);
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err);
      }

      RecordedMutationsPlayer mutationPlayer = new RecordedMutationsPlayer(scm, collectionName, isCollectionCreation, mutations);
      ZkUpdateApplicator.applyUpdate(zkStateReader, mutationPlayer);

      // TODO update stats here for the various commands executed successfully or not?
      // This would replace the stats about cluster state updates that the Collection API currently makes available using
      // the OVERSEERSTATUS command, but obviously would be per node and will not have stats about queues (since there
      // will be no queues). Would be useful in some tests though, for example TestSkipOverseerOperations.
      // Probably better to rethink what types of stats are expected from a distributed system rather than trying to present
      // those previously provided by a central server in the system (the Overseer).
    }

