    static Options parse(String args[]) throws ReflectiveOperationException {
      Options options = new Options();
      int index = 0;
      while (index < args.length) {
        if (!args[index].startsWith("-")) {
          break;
        }
        if (args[index] == "--") {
          break;
        }
        switch (args[index]) {
          case "-merge-policy":
            String clazzName = args[++index];
            Class<? extends MergePolicy> clazz =
                Class.forName(clazzName).asSubclass(MergePolicy.class);
            options.config.setMergePolicy(clazz.getConstructor().newInstance());
            break;
          case "-max-segments":
            options.maxSegments = Integer.parseInt(args[++index]);
            break;
          case "-verbose":
            options.config.setInfoStream(System.err);
            break;
          default:
            throw new IllegalArgumentException(
                "unrecognized option: '" + args[index] + "'\n" + USAGE);
        }
        index++;
      }

      // process any remaining arguments as the target and source index paths.
      int numPaths = args.length - index;
      if (numPaths < 3) {
        throw new IllegalArgumentException("not enough parameters.\n" + USAGE);
      }

      options.mergedIndexPath = args[index];
      options.indexPaths = new String[numPaths - 1];
      System.arraycopy(args, index + 1, options.indexPaths, 0, options.indexPaths.length);
      return options;
    }

