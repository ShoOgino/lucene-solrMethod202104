    @Test
    public void testRestoreAllProperties() throws Exception {
        final SolrParams v1Params = captureConvertedV1Params("/collections", "POST",
                "{'restore-collection': {" +
                        "'name': 'backupName', " +
                        "'collection': 'collectionName', " +
                        "'location': '/some/location/uri', " +
                        "'repository': 'someRepository', " +
                        "'backupId': 123, " +
                        "'async': 'requestTrackingId', " +
                        "'create-collection': {" +
                        "     'numShards': 1, " +
                        "     'properties': {'foo': 'bar', 'foo2': 'bar2'}, " +
                        "     'replicationFactor': 3 " +
                        "}" +
                        "}}");

        assertEquals(CollectionParams.CollectionAction.RESTORE.lowerName, v1Params.get(ACTION));
        assertEquals("backupName", v1Params.get(CommonParams.NAME));
        assertEquals("collectionName", v1Params.get(BackupManager.COLLECTION_NAME_PROP));
        assertEquals("/some/location/uri", v1Params.get(CoreAdminParams.BACKUP_LOCATION));
        assertEquals("someRepository", v1Params.get(CoreAdminParams.BACKUP_REPOSITORY));
        assertEquals(123, v1Params.getPrimitiveInt(CoreAdminParams.BACKUP_ID));
        assertEquals("requestTrackingId", v1Params.get(CommonAdminParams.ASYNC));
        // NOTE: Unlike other v2 APIs that have a nested object for collection-creation params, restore's v1 equivalent
        // for these properties doesn't have a "create-collection." prefix.
        assertEquals(1, v1Params.getPrimitiveInt(CollectionAdminParams.NUM_SHARDS));
        assertEquals("bar", v1Params.get("property.foo"));
        assertEquals("bar2", v1Params.get("property.foo2"));
        assertEquals(3, v1Params.getPrimitiveInt(ZkStateReader.REPLICATION_FACTOR));
    }

