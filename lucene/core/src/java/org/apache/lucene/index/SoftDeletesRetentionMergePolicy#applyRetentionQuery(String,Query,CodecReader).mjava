  // pkg private for testing
  static CodecReader applyRetentionQuery(
      String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {
    Bits liveDocs = reader.getLiveDocs();
    if (liveDocs == null) { // no deletes - just keep going
      return reader;
    }
    CodecReader wrappedReader =
        FilterCodecReader.wrapLiveDocs(
            reader,
            new Bits() { // only search deleted
              @Override
              public boolean get(int index) {
                return liveDocs.get(index) == false;
              }

              @Override
              public int length() {
                return liveDocs.length();
              }
            },
            reader.maxDoc() - reader.numDocs());
    BooleanQuery.Builder builder = new BooleanQuery.Builder();
    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);
    builder.add(retentionQuery, BooleanClause.Occur.FILTER);
    Scorer scorer = getScorer(builder.build(), wrappedReader);
    if (scorer != null) {
      FixedBitSet cloneLiveDocs = FixedBitSet.copyOf(liveDocs);
      DocIdSetIterator iterator = scorer.iterator();
      int numExtraLiveDocs = 0;
      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {
          // if we bring one back to live we need to account for it
          numExtraLiveDocs++;
        }
      }
      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc()
          : "numDocs: "
              + reader.numDocs()
              + " numExtraLiveDocs: "
              + numExtraLiveDocs
              + " maxDoc: "
              + reader.maxDoc();
      return FilterCodecReader.wrapLiveDocs(
          reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);
    } else {
      return reader;
    }
  }

