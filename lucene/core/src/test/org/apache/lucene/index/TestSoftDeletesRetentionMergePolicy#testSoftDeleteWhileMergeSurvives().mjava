  public void testSoftDeleteWhileMergeSurvives() throws IOException {
    Directory dir = newDirectory();
    String softDelete = "soft_delete";
    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);
    AtomicBoolean update = new AtomicBoolean(true);
    config.setReaderPooling(true);
    config.setMergePolicy(
        new SoftDeletesRetentionMergePolicy(
            "soft_delete", () -> new DocValuesFieldExistsQuery("keep"), new LogDocMergePolicy()));
    IndexWriter writer = new IndexWriter(dir, config);
    writer
        .getConfig()
        .setMergedSegmentWarmer(
            sr -> {
              if (update.compareAndSet(true, false)) {
                try {
                  writer.softUpdateDocument(
                      new Term("id", "0"),
                      new Document(),
                      new NumericDocValuesField(softDelete, 1),
                      new NumericDocValuesField("keep", 1));
                  writer.commit();
                } catch (IOException e) {
                  throw new AssertionError(e);
                }
              }
            });

    boolean preExistingDeletes = random().nextBoolean();
    for (int i = 0; i < 2; i++) {
      Document d = new Document();
      d.add(new StringField("id", Integer.toString(i), Field.Store.YES));
      if (preExistingDeletes && random().nextBoolean()) {
        writer.addDocument(d); // randomly add a preexisting hard-delete that we don't carry over
        writer.deleteDocuments(new Term("id", Integer.toString(i)));
        d.add(new NumericDocValuesField("keep", 1));
        writer.addDocument(d);
      } else {
        d.add(new NumericDocValuesField("keep", 1));
        writer.addDocument(d);
      }
      writer.flush();
    }
    writer.forceMerge(1);
    writer.commit();
    assertFalse(update.get());
    DirectoryReader open = DirectoryReader.open(dir);
    assertEquals(0, open.numDeletedDocs());
    assertEquals(3, open.maxDoc());
    IOUtils.close(open, writer, dir);
  }

