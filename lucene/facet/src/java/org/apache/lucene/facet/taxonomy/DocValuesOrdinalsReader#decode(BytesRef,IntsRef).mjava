  /**
   * Subclass and override if you change the encoding. The method is marked 'public' to allow
   * decoding of binary payload containing ordinals without instantiating an {@link
   * org.apache.lucene.facet.taxonomy.OrdinalsReader.OrdinalsSegmentReader}.
   *
   * <p>This takes care of use cases where an application instantiates {@link
   * org.apache.lucene.index.BinaryDocValues} reader for a facet field outside this class, reads the
   * binary payload for a document and decodes the ordinals in the payload.
   *
   * @param buf binary payload containing encoded ordinals
   * @param ordinals buffer for decoded ordinals
   */
  public void decode(BytesRef buf, IntsRef ordinals) {

    // grow the buffer up front, even if by a large number of values (buf.length)
    // that saves the need to check inside the loop for every decoded value if
    // the buffer needs to grow.
    if (ordinals.ints.length < buf.length) {
      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);
    }

    ordinals.offset = 0;
    ordinals.length = 0;

    // it is better if the decoding is inlined like so, and not e.g.
    // in a utility method
    int upto = buf.offset + buf.length;
    int value = 0;
    int offset = buf.offset;
    int prev = 0;
    while (offset < upto) {
      byte b = buf.bytes[offset++];
      if (b >= 0) {
        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;
        value = 0;
        prev = ordinals.ints[ordinals.length];
        ordinals.length++;
      } else {
        value = (value << 7) | (b & 0x7F);
      }
    }
  }

