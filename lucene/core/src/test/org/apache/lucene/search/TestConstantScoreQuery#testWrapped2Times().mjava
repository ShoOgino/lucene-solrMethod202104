  public void testWrapped2Times() throws Exception {
    Directory directory = null;
    IndexReader reader = null;
    IndexSearcher searcher = null;
    try {
      directory = newDirectory();
      RandomIndexWriter writer = new RandomIndexWriter(random(), directory);

      Document doc = new Document();
      doc.add(newStringField("field", "term1", Field.Store.NO));
      doc.add(newStringField("field", "term2", Field.Store.NO));
      writer.addDocument(doc);

      reader = writer.getReader();
      writer.close();
      // we don't wrap with AssertingIndexSearcher in order to have the original scorer in
      // setScorer.
      searcher = newSearcher(reader, true, false);
      searcher.setQueryCache(null); // to assert on scorer impl

      final BoostQuery csq1 =
          new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term("field", "term1"))), 2f);
      final BoostQuery csq2 =
          new BoostQuery(
              new ConstantScoreQuery(
                  new ConstantScoreQuery(new TermQuery(new Term("field", "term2")))),
              5f);

      final BooleanQuery.Builder bq = new BooleanQuery.Builder();
      bq.add(csq1, BooleanClause.Occur.SHOULD);
      bq.add(csq2, BooleanClause.Occur.SHOULD);

      final BoostQuery csqbq = new BoostQuery(new ConstantScoreQuery(bq.build()), 17f);

      checkHits(searcher, csq1, csq1.getBoost(), TermScorer.class);
      checkHits(searcher, csq2, csq2.getBoost(), TermScorer.class);

      // for the combined BQ, the scorer should always be BooleanScorer's BucketScorer, because our
      // scorer supports out-of order collection!
      final Class<ScoreAndDoc> bucketScorerClass = ScoreAndDoc.class;
      checkHits(searcher, csqbq, csqbq.getBoost(), bucketScorerClass);
    } finally {
      IOUtils.close(reader, directory);
    }
  }

