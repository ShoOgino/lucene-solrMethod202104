  private void verifyEnum(
      Random random,
      ThreadState threadState,
      String field,
      BytesRef term,
      TermsEnum termsEnum,

      // Maximum options (docs/freqs/positions/offsets) to test:
      IndexOptions maxTestOptions,
      IndexOptions maxIndexOptions,
      EnumSet<Option> options,
      boolean alwaysTestMax)
      throws IOException {

    if (LuceneTestCase.VERBOSE) {
      System.out.println("  verifyEnum: options=" + options + " maxTestOptions=" + maxTestOptions);
    }

    // Make sure TermsEnum really is positioned on the
    // expected term:
    assertEquals(term, termsEnum.term());

    FieldInfo fieldInfo = currentFieldInfos.fieldInfo(field);

    // NOTE: can be empty list if we are using liveDocs:
    SeedPostings expected =
        getSeedPostings(
            term.utf8ToString(), fields.get(field).get(term).seed, maxIndexOptions, true);
    assertEquals(expected.docFreq, termsEnum.docFreq());

    boolean allowFreqs =
        fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0
            && maxTestOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;
    boolean doCheckFreqs = allowFreqs && (alwaysTestMax || random.nextInt(3) <= 2);

    boolean allowPositions =
        fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0
            && maxTestOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
    boolean doCheckPositions = allowPositions && (alwaysTestMax || random.nextInt(3) <= 2);

    boolean allowOffsets =
        fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)
                >= 0
            && maxTestOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
    boolean doCheckOffsets = allowOffsets && (alwaysTestMax || random.nextInt(3) <= 2);

    boolean doCheckPayloads =
        options.contains(Option.PAYLOADS)
            && allowPositions
            && fieldInfo.hasPayloads()
            && (alwaysTestMax || random.nextInt(3) <= 2);

    PostingsEnum prevPostingsEnum = null;

    PostingsEnum postingsEnum;

    if (!doCheckPositions) {
      if (allowPositions && random.nextInt(10) == 7) {
        // 10% of the time, even though we will not check positions, pull a DocsAndPositions enum

        if (options.contains(Option.REUSE_ENUMS) && random.nextInt(10) < 9) {
          prevPostingsEnum = threadState.reusePostingsEnum;
        }

        int flags = PostingsEnum.POSITIONS;
        if (alwaysTestMax || random.nextBoolean()) {
          flags |= PostingsEnum.OFFSETS;
        }
        if (alwaysTestMax || random.nextBoolean()) {
          flags |= PostingsEnum.PAYLOADS;
        }

        if (LuceneTestCase.VERBOSE) {
          System.out.println("  get DocsEnum (but we won't check positions) flags=" + flags);
        }

        threadState.reusePostingsEnum = termsEnum.postings(prevPostingsEnum, flags);
        postingsEnum = threadState.reusePostingsEnum;
      } else {
        if (LuceneTestCase.VERBOSE) {
          System.out.println("  get DocsEnum");
        }
        if (options.contains(Option.REUSE_ENUMS) && random.nextInt(10) < 9) {
          prevPostingsEnum = threadState.reusePostingsEnum;
        }
        threadState.reusePostingsEnum =
            termsEnum.postings(
                prevPostingsEnum, doCheckFreqs ? PostingsEnum.FREQS : PostingsEnum.NONE);
        postingsEnum = threadState.reusePostingsEnum;
      }
    } else {
      if (options.contains(Option.REUSE_ENUMS) && random.nextInt(10) < 9) {
        prevPostingsEnum = threadState.reusePostingsEnum;
      }

      int flags = PostingsEnum.POSITIONS;
      if (alwaysTestMax || doCheckOffsets || random.nextInt(3) == 1) {
        flags |= PostingsEnum.OFFSETS;
      }
      if (alwaysTestMax || doCheckPayloads || random.nextInt(3) == 1) {
        flags |= PostingsEnum.PAYLOADS;
      }

      if (LuceneTestCase.VERBOSE) {
        System.out.println("  get DocsEnum flags=" + flags);
      }

      threadState.reusePostingsEnum = termsEnum.postings(prevPostingsEnum, flags);
      postingsEnum = threadState.reusePostingsEnum;
    }

    assertNotNull("null DocsEnum", postingsEnum);
    int initialDocID = postingsEnum.docID();
    assertEquals("inital docID should be -1" + postingsEnum, -1, initialDocID);

    if (LuceneTestCase.VERBOSE) {
      if (prevPostingsEnum == null) {
        System.out.println("  got enum=" + postingsEnum);
      } else if (prevPostingsEnum == postingsEnum) {
        System.out.println("  got reuse enum=" + postingsEnum);
      } else {
        System.out.println(
            "  got enum=" + postingsEnum + " (reuse of " + prevPostingsEnum + " failed)");
      }
    }

    // 10% of the time don't consume all docs:
    int stopAt;
    if (!alwaysTestMax
        && options.contains(Option.PARTIAL_DOC_CONSUME)
        && expected.docFreq > 1
        && random.nextInt(10) == 7) {
      stopAt = random.nextInt(expected.docFreq - 1);
      if (LuceneTestCase.VERBOSE) {
        System.out.println(
            "  will not consume all docs (" + stopAt + " vs " + expected.docFreq + ")");
      }
    } else {
      stopAt = expected.docFreq;
      if (LuceneTestCase.VERBOSE) {
        System.out.println("  consume all docs");
      }
    }

    double skipChance = alwaysTestMax ? 0.5 : random.nextDouble();
    int numSkips =
        expected.docFreq < 3 ? 1 : TestUtil.nextInt(random, 1, Math.min(20, expected.docFreq / 3));
    int skipInc = expected.docFreq / numSkips;
    int skipDocInc = maxDoc / numSkips;

    // Sometimes do 100% skipping:
    boolean doAllSkipping = options.contains(Option.SKIPPING) && random.nextInt(7) == 1;

    double freqAskChance = alwaysTestMax ? 1.0 : random.nextDouble();
    double payloadCheckChance = alwaysTestMax ? 1.0 : random.nextDouble();
    double offsetCheckChance = alwaysTestMax ? 1.0 : random.nextDouble();

    if (LuceneTestCase.VERBOSE) {
      if (options.contains(Option.SKIPPING)) {
        System.out.println("  skipChance=" + skipChance + " numSkips=" + numSkips);
      } else {
        System.out.println("  no skipping");
      }
      if (doCheckFreqs) {
        System.out.println("  freqAskChance=" + freqAskChance);
      }
      if (doCheckPayloads) {
        System.out.println("  payloadCheckChance=" + payloadCheckChance);
      }
      if (doCheckOffsets) {
        System.out.println("  offsetCheckChance=" + offsetCheckChance);
      }
    }

    while (expected.upto <= stopAt) {
      if (expected.upto == stopAt) {
        if (stopAt == expected.docFreq) {
          assertEquals(
              "DocsEnum should have ended but didn't",
              PostingsEnum.NO_MORE_DOCS,
              postingsEnum.nextDoc());

          // Common bug is to forget to set this.doc=NO_MORE_DOCS in the enum!:
          assertEquals(
              "DocsEnum should have ended but didn't",
              PostingsEnum.NO_MORE_DOCS,
              postingsEnum.docID());
        }
        break;
      }

      if (options.contains(Option.SKIPPING)
          && (doAllSkipping || random.nextDouble() <= skipChance)) {
        int targetDocID = -1;
        if (expected.upto < stopAt && random.nextBoolean()) {
          // Pick target we know exists:
          final int skipCount = TestUtil.nextInt(random, 1, skipInc);
          for (int skip = 0; skip < skipCount; skip++) {
            if (expected.nextDoc() == PostingsEnum.NO_MORE_DOCS) {
              break;
            }
          }
        } else {
          // Pick random target (might not exist):
          final int skipDocIDs = TestUtil.nextInt(random, 1, skipDocInc);
          if (skipDocIDs > 0) {
            targetDocID = expected.docID() + skipDocIDs;
            expected.advance(targetDocID);
          }
        }

        if (expected.upto >= stopAt) {
          int target = random.nextBoolean() ? maxDoc : PostingsEnum.NO_MORE_DOCS;
          if (LuceneTestCase.VERBOSE) {
            System.out.println("  now advance to end (target=" + target + ")");
          }
          assertEquals(
              "DocsEnum should have ended but didn't",
              PostingsEnum.NO_MORE_DOCS,
              postingsEnum.advance(target));
          break;
        } else {
          if (LuceneTestCase.VERBOSE) {
            if (targetDocID != -1) {
              System.out.println(
                  "  now advance to random target="
                      + targetDocID
                      + " ("
                      + expected.upto
                      + " of "
                      + stopAt
                      + ") current="
                      + postingsEnum.docID());
            } else {
              System.out.println(
                  "  now advance to known-exists target="
                      + expected.docID()
                      + " ("
                      + expected.upto
                      + " of "
                      + stopAt
                      + ") current="
                      + postingsEnum.docID());
            }
          }
          int docID = postingsEnum.advance(targetDocID != -1 ? targetDocID : expected.docID());
          assertEquals("docID is wrong", expected.docID(), docID);
        }
      } else {
        expected.nextDoc();
        if (LuceneTestCase.VERBOSE) {
          System.out.println(
              "  now nextDoc to "
                  + expected.docID()
                  + " ("
                  + expected.upto
                  + " of "
                  + stopAt
                  + ")");
        }
        int docID = postingsEnum.nextDoc();
        assertEquals("docID is wrong", expected.docID(), docID);
        if (docID == PostingsEnum.NO_MORE_DOCS) {
          break;
        }
      }

      if (doCheckFreqs && random.nextDouble() <= freqAskChance) {
        if (LuceneTestCase.VERBOSE) {
          System.out.println("    now freq()=" + expected.freq());
        }
        int freq = postingsEnum.freq();
        assertEquals("freq is wrong", expected.freq(), freq);
      }

      if (doCheckPositions) {
        int freq = postingsEnum.freq();
        int numPosToConsume;
        if (!alwaysTestMax
            && options.contains(Option.PARTIAL_POS_CONSUME)
            && random.nextInt(5) == 1) {
          numPosToConsume = random.nextInt(freq);
        } else {
          numPosToConsume = freq;
        }

        for (int i = 0; i < numPosToConsume; i++) {
          int pos = expected.nextPosition();
          if (LuceneTestCase.VERBOSE) {
            System.out.println("    now nextPosition to " + pos);
          }
          assertEquals("position is wrong", pos, postingsEnum.nextPosition());

          if (doCheckPayloads) {
            BytesRef expectedPayload = expected.getPayload();
            if (random.nextDouble() <= payloadCheckChance) {
              if (LuceneTestCase.VERBOSE) {
                System.out.println(
                    "      now check expectedPayload length="
                        + (expectedPayload == null ? 0 : expectedPayload.length));
              }
              if (expectedPayload == null || expectedPayload.length == 0) {
                assertNull("should not have payload", postingsEnum.getPayload());
              } else {
                BytesRef payload = postingsEnum.getPayload();
                assertNotNull("should have payload but doesn't", payload);

                assertEquals("payload length is wrong", expectedPayload.length, payload.length);
                for (int byteUpto = 0; byteUpto < expectedPayload.length; byteUpto++) {
                  assertEquals(
                      "payload bytes are wrong",
                      expectedPayload.bytes[expectedPayload.offset + byteUpto],
                      payload.bytes[payload.offset + byteUpto]);
                }

                // make a deep copy
                payload = BytesRef.deepCopyOf(payload);
                assertEquals(
                    "2nd call to getPayload returns something different!",
                    payload,
                    postingsEnum.getPayload());
              }
            } else {
              if (LuceneTestCase.VERBOSE) {
                System.out.println(
                    "      skip check payload length="
                        + (expectedPayload == null ? 0 : expectedPayload.length));
              }
            }
          }

          if (doCheckOffsets) {
            if (random.nextDouble() <= offsetCheckChance) {
              if (LuceneTestCase.VERBOSE) {
                System.out.println(
                    "      now check offsets: startOff="
                        + expected.startOffset()
                        + " endOffset="
                        + expected.endOffset());
              }
              assertEquals(
                  "startOffset is wrong", expected.startOffset(), postingsEnum.startOffset());
              assertEquals("endOffset is wrong", expected.endOffset(), postingsEnum.endOffset());
            } else {
              if (LuceneTestCase.VERBOSE) {
                System.out.println("      skip check offsets");
              }
            }
          } else if (fieldInfo
                  .getIndexOptions()
                  .compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)
              < 0) {
            if (LuceneTestCase.VERBOSE) {
              System.out.println("      now check offsets are -1");
            }
            assertEquals("startOffset isn't -1", -1, postingsEnum.startOffset());
            assertEquals("endOffset isn't -1", -1, postingsEnum.endOffset());
          }
        }
      }
    }

    if (options.contains(Option.SKIPPING)) {
      final IntToLongFunction docToNorm;
      if (fieldInfo.hasNorms()) {
        docToNorm = DOC_TO_NORM;
      } else {
        docToNorm = doc -> 1L;
      }

      // First check impacts and block uptos
      int max = -1;
      List<Impact> impactsCopy = null;
      int flags = PostingsEnum.FREQS;
      if (doCheckPositions) {
        flags |= PostingsEnum.POSITIONS;
        if (doCheckOffsets) {
          flags |= PostingsEnum.OFFSETS;
        }
        if (doCheckPayloads) {
          flags |= PostingsEnum.PAYLOADS;
        }
      }

      ImpactsEnum impactsEnum = termsEnum.impacts(flags);
      PostingsEnum postings = termsEnum.postings(null, flags);
      for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {
        assertEquals(postings.nextDoc(), doc);
        if (doc == DocIdSetIterator.NO_MORE_DOCS) {
          break;
        }
        int freq = postings.freq();
        assertEquals("freq is wrong", freq, impactsEnum.freq());
        for (int i = 0; i < freq; ++i) {
          int pos = postings.nextPosition();
          assertEquals("position is wrong", pos, impactsEnum.nextPosition());
          if (doCheckOffsets) {
            assertEquals("startOffset is wrong", postings.startOffset(), impactsEnum.startOffset());
            assertEquals("endOffset is wrong", postings.endOffset(), impactsEnum.endOffset());
          }
          if (doCheckPayloads) {
            assertEquals("payload is wrong", postings.getPayload(), impactsEnum.getPayload());
          }
        }
        if (doc > max) {
          impactsEnum.advanceShallow(doc);
          Impacts impacts = impactsEnum.getImpacts();
          CheckIndex.checkImpacts(impacts, doc);
          impactsCopy =
              impacts.getImpacts(0).stream()
                  .map(i -> new Impact(i.freq, i.norm))
                  .collect(Collectors.toList());
        }
        freq = impactsEnum.freq();
        long norm = docToNorm.applyAsLong(doc);
        int idx =
            Collections.binarySearch(
                impactsCopy, new Impact(freq, norm), Comparator.comparing(i -> i.freq));
        if (idx < 0) {
          idx = -1 - idx;
        }
        assertTrue(
            "Got "
                + new Impact(freq, norm)
                + " in postings, but no impact triggers equal or better scores in "
                + impactsCopy,
            idx <= impactsCopy.size() && impactsCopy.get(idx).norm <= norm);
      }

      // Now check advancing
      impactsEnum = termsEnum.impacts(flags);
      postings = termsEnum.postings(postings, flags);

      max = -1;
      while (true) {
        int doc = impactsEnum.docID();
        boolean advance;
        int target;
        if (random.nextBoolean()) {
          advance = false;
          target = doc + 1;
        } else {
          advance = true;
          int delta = Math.min(1 + random.nextInt(512), DocIdSetIterator.NO_MORE_DOCS - doc);
          target = impactsEnum.docID() + delta;
        }

        if (target > max && random.nextBoolean()) {
          int delta = Math.min(random.nextInt(512), DocIdSetIterator.NO_MORE_DOCS - target);
          max = target + delta;

          impactsEnum.advanceShallow(target);
          Impacts impacts = impactsEnum.getImpacts();
          CheckIndex.checkImpacts(impacts, target);
          impactsCopy = Collections.singletonList(new Impact(Integer.MAX_VALUE, 1L));
          for (int level = 0; level < impacts.numLevels(); ++level) {
            if (impacts.getDocIdUpTo(level) >= max) {
              impactsCopy =
                  impacts.getImpacts(level).stream()
                      .map(i -> new Impact(i.freq, i.norm))
                      .collect(Collectors.toList());
              break;
            }
          }
        }

        if (advance) {
          doc = impactsEnum.advance(target);
        } else {
          doc = impactsEnum.nextDoc();
        }

        assertEquals(postings.advance(target), doc);
        if (doc == DocIdSetIterator.NO_MORE_DOCS) {
          break;
        }
        int freq = postings.freq();
        assertEquals("freq is wrong", freq, impactsEnum.freq());
        for (int i = 0; i < postings.freq(); ++i) {
          int pos = postings.nextPosition();
          assertEquals("position is wrong", pos, impactsEnum.nextPosition());
          if (doCheckOffsets) {
            assertEquals("startOffset is wrong", postings.startOffset(), impactsEnum.startOffset());
            assertEquals("endOffset is wrong", postings.endOffset(), impactsEnum.endOffset());
          }
          if (doCheckPayloads) {
            assertEquals("payload is wrong", postings.getPayload(), impactsEnum.getPayload());
          }
        }

        if (doc > max) {
          int delta = Math.min(1 + random.nextInt(512), DocIdSetIterator.NO_MORE_DOCS - doc);
          max = doc + delta;
          Impacts impacts = impactsEnum.getImpacts();
          CheckIndex.checkImpacts(impacts, doc);
          impactsCopy = Collections.singletonList(new Impact(Integer.MAX_VALUE, 1L));
          for (int level = 0; level < impacts.numLevels(); ++level) {
            if (impacts.getDocIdUpTo(level) >= max) {
              impactsCopy =
                  impacts.getImpacts(level).stream()
                      .map(i -> new Impact(i.freq, i.norm))
                      .collect(Collectors.toList());
              break;
            }
          }
        }

        freq = impactsEnum.freq();
        long norm = docToNorm.applyAsLong(doc);
        int idx =
            Collections.binarySearch(
                impactsCopy, new Impact(freq, norm), Comparator.comparing(i -> i.freq));
        if (idx < 0) {
          idx = -1 - idx;
        }
        assertTrue(
            "Got "
                + new Impact(freq, norm)
                + " in postings, but no impact triggers equal or better scores in "
                + impactsCopy,
            idx <= impactsCopy.size() && impactsCopy.get(idx).norm <= norm);
      }
    }
  }

