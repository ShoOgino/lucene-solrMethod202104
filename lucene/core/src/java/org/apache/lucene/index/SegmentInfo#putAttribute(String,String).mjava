  /**
   * Puts a codec attribute value.
   *
   * <p>This is a key-value mapping for the field that the codec can use to store additional
   * metadata, and will be available to the codec when reading the segment via {@link
   * #getAttribute(String)}
   *
   * <p>If a value already exists for the field, it will be replaced with the new value. This method
   * make a copy on write for every attribute change.
   */
  public String putAttribute(String key, String value) {
    HashMap<String, String> newMap = new HashMap<>(attributes);
    String oldValue = newMap.put(key, value);
    // we make a full copy of this to prevent concurrent modifications to this in the toString
    // method
    // this method is only called when a segment is written but the SegmentInfo might be exposed
    // in running merges which can cause ConcurrentModificationExceptions if we modify / share
    // the same instance. Technically that's an unsafe publication but IW design would require
    // significant changes to prevent this. On the other hand, since we expose the map in
    // getAttributes()
    // it's a good design to make it unmodifiable anyway.
    attributes = Collections.unmodifiableMap(newMap);
    return oldValue;
  }

