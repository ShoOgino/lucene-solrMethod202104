  /**
   * Demo of using anonymous children when indexing hierarchical documents.
   * This test code is used as an 'include' from the ref-guide
   */
  public void testIndexingAnonKids() throws Exception {
    final String collection = "test_anon";
    CollectionAdminRequest.createCollection(collection, ANON_KIDS_CONFIG, 1, 1)
        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)
        .process(cluster.getSolrClient());
    cluster.getSolrClient().setDefaultCollection(collection);
    
    //
    // DO NOT MODIFY THESE EXAMPLE DOCS WITH OUT MAKING THE SAME CHANGES TO THE JSON AND XML
    // EQUIVILENT EXAMPLES IN 'indexing-nested-documents.adoc'
    //

    // tag::anon-kids[]
    final SolrClient client = getSolrClient();

    final SolrInputDocument p1 = new SolrInputDocument();
    p1.setField("id", "P11!prod");
    p1.setField("type_s", "PRODUCT");
    p1.setField("name_s", "Swingline Stapler");
    p1.setField("description_t", "The Cadillac of office staplers ...");
    {
      final SolrInputDocument s1 = new SolrInputDocument();
      s1.setField("id", "P11!S21");
      s1.setField("type_s", "SKU");
      s1.setField("color_s", "RED");
      s1.setField("price_i", 42);
      { 
        final SolrInputDocument m1 = new SolrInputDocument();
        m1.setField("id", "P11!D41");
        m1.setField("type_s", "MANUAL");
        m1.setField("name_s", "Red Swingline Brochure");
        m1.setField("pages_i", 1);
        m1.setField("content_t", "...");

        s1.addChildDocument(m1);
      }

      final SolrInputDocument s2 = new SolrInputDocument();
      s2.setField("id", "P11!S31");
      s2.setField("type_s", "SKU");
      s2.setField("color_s", "BLACK");
      s2.setField("price_i", 3);

      final SolrInputDocument m1 = new SolrInputDocument();
      m1.setField("id", "P11!D51");
      m1.setField("type_s", "MANUAL");
      m1.setField("name_s", "Quick Reference Guide");
      m1.setField("pages_i", 1);
      m1.setField("content_t", "How to use your stapler ...");

      final SolrInputDocument m2 = new SolrInputDocument();
      m2.setField("id", "P11!D61");
      m2.setField("type_s", "MANUAL");
      m2.setField("name_s", "Warranty Details");
      m2.setField("pages_i", 42);
      m2.setField("content_t", "... lifetime guarantee ...");

      p1.addChildDocuments(Arrays.asList(s1, s2, m1, m2));
    }
    
    client.add(p1);
    // end::anon-kids[]
    
    client.commit();

    final SolrDocumentList docs = getSolrClient().query
      (new SolrQuery("description_t:Cadillac").set("fl", "*,[child parentFilter='type_s:PRODUCT']")).getResults();
    
    assertEquals(1, docs.getNumFound());
    assertEquals("P11!prod", docs.get(0).getFieldValue("id"));

    // [child] returns a flat list of all (anon) descendents
    assertEquals(5, docs.get(0).getChildDocumentCount());
    assertEquals(5, docs.get(0).getChildDocuments().size());

    // flat list is depth first...
    final SolrDocument red_stapler_brochure = docs.get(0).getChildDocuments().get(0);
    assertEquals("P11!D41", red_stapler_brochure.getFieldValue("id"));
    
    final SolrDocument red_stapler = docs.get(0).getChildDocuments().get(1);
    assertEquals("P11!S21", red_stapler.getFieldValue("id"));

  }

