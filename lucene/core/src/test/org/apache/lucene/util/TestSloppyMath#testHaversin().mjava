  public void testHaversin() {
    assertTrue(Double.isNaN(haversinMeters(1, 1, 1, Double.NaN)));
    assertTrue(Double.isNaN(haversinMeters(1, 1, Double.NaN, 1)));
    assertTrue(Double.isNaN(haversinMeters(1, Double.NaN, 1, 1)));
    assertTrue(Double.isNaN(haversinMeters(Double.NaN, 1, 1, 1)));

    assertEquals(0, haversinMeters(0, 0, 0, 0), 0D);
    assertEquals(0, haversinMeters(0, -180, 0, -180), 0D);
    assertEquals(0, haversinMeters(0, -180, 0, 180), 0D);
    assertEquals(0, haversinMeters(0, 180, 0, 180), 0D);
    assertEquals(0, haversinMeters(90, 0, 90, 0), 0D);
    assertEquals(0, haversinMeters(90, -180, 90, -180), 0D);
    assertEquals(0, haversinMeters(90, -180, 90, 180), 0D);
    assertEquals(0, haversinMeters(90, 180, 90, 180), 0D);

    // Test half a circle on the equator, using WGS84 mean earth radius in meters
    double earthRadiusMs = 6_371_008.7714;
    double halfCircle = earthRadiusMs * Math.PI;
    assertEquals(halfCircle, haversinMeters(0, 0, 0, 180), 0D);

    Random r = random();
    double randomLat1 = 40.7143528 + (r.nextInt(10) - 5) * 360;
    double randomLon1 = -74.0059731 + (r.nextInt(10) - 5) * 360;

    double randomLat2 = 40.65 + (r.nextInt(10) - 5) * 360;
    double randomLon2 = -73.95 + (r.nextInt(10) - 5) * 360;

    assertEquals(8_572.1137, haversinMeters(randomLat1, randomLon1, randomLat2, randomLon2), 0.01D);

    // from solr and ES tests (with their respective epsilons)
    assertEquals(0, haversinMeters(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);
    assertEquals(5_285.89, haversinMeters(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);
    assertEquals(462.10, haversinMeters(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);
    assertEquals(1_054.98, haversinMeters(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);
    assertEquals(1_258.12, haversinMeters(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);
    assertEquals(2_028.52, haversinMeters(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);
    assertEquals(8_572.11, haversinMeters(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);
  }

