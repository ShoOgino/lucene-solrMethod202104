  /**
   * Loads the copy fields
   */
  protected synchronized void loadCopyFields(ConfigNode n) {
    List<ConfigNode> nodes = n.children(COPY_FIELD);
    ConfigNode f = n.child(FIELDS);
    if (f != null) {
      List<ConfigNode> c = f.children(COPY_FIELD);
      if (nodes.isEmpty()) nodes = c;
      else nodes.addAll(c);
    }
    for (ConfigNode node : nodes) {

      String source = DOMUtil.getAttr(node, SOURCE, COPY_FIELD + " definition");
      String dest   = DOMUtil.getAttr(node, DESTINATION,  COPY_FIELD + " definition");
      String maxChars = DOMUtil.getAttr(node, MAX_CHARS, null);

      int maxCharsInt = CopyField.UNLIMITED;
      if (maxChars != null) {
        try {
          maxCharsInt = Integer.parseInt(maxChars);
        } catch (NumberFormatException e) {
          log.warn("Couldn't parse {} attribute for '{}' from '{}' to '{}' as integer. The whole field will be copied."
              , MAX_CHARS, COPY_FIELD, source, dest);
        }
      }

      if (dest.equals(uniqueKeyFieldName)) {
        String msg = UNIQUE_KEY + " field ("+uniqueKeyFieldName+
          ") can not be the " + DESTINATION + " of a " + COPY_FIELD + "(" + SOURCE + "=" +source+")";
        log.error(msg);
        throw new SolrException(ErrorCode.SERVER_ERROR, msg);
      }

      registerCopyField(source, dest, maxCharsInt);
    }

    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {
      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {
        log.warn("Field {} is not multivalued and destination for multiople {} ({})"
            , entry.getKey().name, COPY_FIELDS, entry.getValue());
      }
    }
  }

