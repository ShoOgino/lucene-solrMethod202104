  private void createIndex(int numHits) throws IOException {
    int numDocs = 500;

    final Analyzer analyzer =
        new Analyzer() {
          @Override
          public TokenStreamComponents createComponents(String fieldName) {
            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));
          }
        };
    Directory directory = new SeekCountingDirectory(new ByteBuffersDirectory());
    // note: test explicitly disables payloads
    IndexWriter writer =
        new IndexWriter(
            directory,
            newIndexWriterConfig(analyzer)
                .setMaxBufferedDocs(10)
                .setMergePolicy(newLogMergePolicy(false)));

    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      String content;
      if (i % (numDocs / numHits) == 0) {
        // add a document that matches the query "term1 term2"
        content = this.term1 + " " + this.term2;
      } else if (i % 15 == 0) {
        // add a document that only contains term1
        content = this.term1 + " " + this.term1;
      } else {
        // add a document that contains term2 but not term 1
        content = this.term3 + " " + this.term2;
      }

      doc.add(newTextField(this.field, content, Field.Store.YES));
      writer.addDocument(doc);
    }

    // make sure the index has only a single segment
    writer.forceMerge(1);
    writer.close();

    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(directory));

    this.searcher = newSearcher(reader);
  }

