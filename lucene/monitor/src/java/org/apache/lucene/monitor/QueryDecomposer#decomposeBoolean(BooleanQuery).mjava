  /**
   * Decompose a {@link org.apache.lucene.search.BooleanQuery}
   *
   * @param q the boolean query
   * @return a collection of subqueries
   */
  public Set<Query> decomposeBoolean(BooleanQuery q) {
    if (q.getMinimumNumberShouldMatch() > 1) return Collections.singleton(q);

    Set<Query> subqueries = new HashSet<>();
    Set<Query> exclusions = new HashSet<>();
    Set<Query> mandatory = new HashSet<>();

    for (BooleanClause clause : q) {
      if (clause.getOccur() == BooleanClause.Occur.MUST
          || clause.getOccur() == BooleanClause.Occur.FILTER) mandatory.add(clause.getQuery());
      else if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) exclusions.add(clause.getQuery());
      else {
        subqueries.addAll(decompose(clause.getQuery()));
      }
    }

    // More than one MUST clause, or a single MUST clause with disjunctions
    if (mandatory.size() > 1 || (mandatory.size() == 1 && subqueries.size() > 0))
      return Collections.singleton(q);

    // If we only have a single MUST clause and no SHOULD clauses, then we can
    // decompose the MUST clause instead
    if (mandatory.size() == 1) {
      subqueries.addAll(decompose(mandatory.iterator().next()));
    }

    if (exclusions.size() == 0) return subqueries;

    // If there are exclusions, then we need to add them to all the decomposed
    // queries
    Set<Query> rewrittenSubqueries = new HashSet<>(subqueries.size());
    for (Query subquery : subqueries) {
      BooleanQuery.Builder bq = new BooleanQuery.Builder();
      bq.add(subquery, BooleanClause.Occur.MUST);
      for (Query ex : exclusions) {
        bq.add(ex, BooleanClause.Occur.MUST_NOT);
      }
      rewrittenSubqueries.add(bq.build());
    }
    return rewrittenSubqueries;
  }

