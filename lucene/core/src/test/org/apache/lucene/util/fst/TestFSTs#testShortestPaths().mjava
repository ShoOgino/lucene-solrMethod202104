  public void testShortestPaths() throws Exception {
    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();
    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);

    final IntsRefBuilder scratch = new IntsRefBuilder();
    fstCompiler.add(Util.toIntsRef(new BytesRef("aab"), scratch), 22L);
    fstCompiler.add(Util.toIntsRef(new BytesRef("aac"), scratch), 7L);
    fstCompiler.add(Util.toIntsRef(new BytesRef("ax"), scratch), 17L);
    final FST<Long> fst = fstCompiler.compile();
    // Writer w = new OutputStreamWriter(new FileOutputStream("out.dot"));
    // Util.toDot(fst, w, false, false);
    // w.close();

    Util.TopResults<Long> res =
        Util.shortestPaths(
            fst,
            fst.getFirstArc(new FST.Arc<Long>()),
            outputs.getNoOutput(),
            minLongComparator,
            3,
            true);
    assertTrue(res.isComplete);
    assertEquals(3, res.topN.size());
    assertEquals(Util.toIntsRef(new BytesRef("aac"), scratch), res.topN.get(0).input);
    assertEquals(7L, res.topN.get(0).output.longValue());

    assertEquals(Util.toIntsRef(new BytesRef("ax"), scratch), res.topN.get(1).input);
    assertEquals(17L, res.topN.get(1).output.longValue());

    assertEquals(Util.toIntsRef(new BytesRef("aab"), scratch), res.topN.get(2).input);
    assertEquals(22L, res.topN.get(2).output.longValue());
  }

