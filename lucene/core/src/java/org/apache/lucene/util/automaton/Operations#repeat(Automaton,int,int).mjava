  /**
   * Returns an automaton that accepts between <code>min</code> and <code>max</code> (including
   * both) concatenated repetitions of the language of the given automaton.
   *
   * <p>Complexity: linear in number of states and in <code>min</code> and <code>max</code>.
   */
  public static Automaton repeat(Automaton a, int min, int max) {
    if (min > max) {
      return Automata.makeEmpty();
    }

    Automaton b;
    if (min == 0) {
      b = Automata.makeEmptyString();
    } else if (min == 1) {
      b = new Automaton();
      b.copy(a);
    } else {
      List<Automaton> as = new ArrayList<>();
      for (int i = 0; i < min; i++) {
        as.add(a);
      }
      b = concatenate(as);
    }

    Set<Integer> prevAcceptStates = toSet(b, 0);
    Automaton.Builder builder = new Automaton.Builder();
    builder.copy(b);
    for (int i = min; i < max; i++) {
      int numStates = builder.getNumStates();
      builder.copy(a);
      for (int s : prevAcceptStates) {
        builder.addEpsilon(s, numStates);
      }
      prevAcceptStates = toSet(a, numStates);
    }

    return builder.finish();
  }

