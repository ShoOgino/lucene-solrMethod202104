  public void testWithSameTermQuery() throws IOException {
    indexWriter.addDocument(newDoc("Yin yang, yin gap yang"));
    initReaderSearcherHighlighter();

    BooleanQuery query =
        new BooleanQuery.Builder()
            .add(new TermQuery(new Term("body", "yin")), BooleanClause.Occur.MUST)
            .add(newPhraseQuery("body", "yin yang"), BooleanClause.Occur.MUST)
            // add queries for other fields; we shouldn't highlight these because of that.
            .add(new TermQuery(new Term("title", "yang")), BooleanClause.Occur.SHOULD)
            .build();

    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    dupMatchAllowed.set(
        false); // We don't want duplicates from "Yin" being in TermQuery & PhraseQuery.
    String[] snippets = highlighter.highlight("body", query, topDocs);
    if (highlighter.getFlags("body").contains(HighlightFlag.WEIGHT_MATCHES)) {
      assertArrayEquals(new String[] {"<b>Yin yang</b>, <b>yin</b> gap yang"}, snippets);
    } else {
      assertArrayEquals(new String[] {"<b>Yin</b> <b>yang</b>, <b>yin</b> gap yang"}, snippets);
    }
  }

