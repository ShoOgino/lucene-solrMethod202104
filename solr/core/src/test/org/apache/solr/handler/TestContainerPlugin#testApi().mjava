  @Test
  public void testApi() throws Exception {
    MiniSolrCloudCluster cluster =
        configureCluster(4)
            .withJettyConfig(jetty -> jetty.enableV2(true))
            .configure();
    String errPath = "/error/details[0]/errorMessages[0]";
    try {
      PluginMeta plugin = new PluginMeta();
      plugin.name = "testplugin";
      plugin.klass = C2.class.getName();
      //test with an invalid class
      V2Request req = new V2Request.Builder("/cluster/plugin")
          .forceV2(true)
          .POST()
          .withPayload(singletonMap("add", plugin))
          .build();
      expectError(req, cluster.getSolrClient(), errPath, "No method with @Command in class");

      //test with a valid class. This should succeed now
      plugin.klass = C3.class.getName();
      req.process(cluster.getSolrClient());

      //just check if the plugin is indeed registered
      V2Request readPluginState = new V2Request.Builder("/cluster/plugin")
          .forceV2(true)
          .GET()
          .build();
      V2Response rsp = readPluginState.process(cluster.getSolrClient());
      assertEquals(C3.class.getName(), rsp._getStr("/plugin/testplugin/class", null));

      //let's test the plugin
      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/plugin/my/plugin")
              .forceV2(true)
              .GET()
              .build().process(cluster.getSolrClient()),
          ImmutableMap.of("/testkey", "testval"));

      //now remove the plugin
      new V2Request.Builder("/cluster/plugin")
          .POST()
          .forceV2(true)
          .withPayload("{remove : testplugin}")
          .build()
          .process(cluster.getSolrClient());

      //verify it is removed
      rsp = readPluginState.process(cluster.getSolrClient());
      assertEquals(null, rsp._get("/plugin/testplugin/class", null));

      //test with a class  @EndPoint methods. This also uses a template in the path name
      plugin.klass = C4.class.getName();
      plugin.name = "collections";
      plugin.pathPrefix = "collections";
      expectError(req, cluster.getSolrClient(), errPath, "path must not have a prefix: collections");

      plugin.name = "my-random-name";
      plugin.pathPrefix = "my-random-prefix";

      req.process(cluster.getSolrClient());

      //let's test the plugin
      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/my-random-name/my/plugin")
              .forceV2(true)
              .GET()
              .build().process(cluster.getSolrClient()),
          ImmutableMap.of("/method.name", "m1"));

  TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("/my-random-prefix/their/plugin")
              .forceV2(true)
              .GET()
              .build().process(cluster.getSolrClient()),
          ImmutableMap.of("/method.name", "m2"));
      //now remove the plugin
      new V2Request.Builder("/cluster/plugin")
          .POST()
          .forceV2(true)
          .withPayload("{remove : my-random-name}")
          .build()
          .process(cluster.getSolrClient());

      expectFail( () -> new V2Request.Builder("/my-random-prefix/their/plugin")
          .forceV2(true)
          .GET()
          .build()
          .process(cluster.getSolrClient()));
      expectFail(() -> new V2Request.Builder("/my-random-prefix/their/plugin")
          .forceV2(true)
          .GET()
          .build()
          .process(cluster.getSolrClient()));

      // test ClusterSingleton plugin
      plugin.name = "clusterSingleton";
      plugin.klass = C6.class.getName();
      req.process(cluster.getSolrClient());

      //just check if the plugin is indeed registered
      readPluginState = new V2Request.Builder("/cluster/plugin")
          .forceV2(true)
          .GET()
          .build();
      rsp = readPluginState.process(cluster.getSolrClient());
      assertEquals(C6.class.getName(), rsp._getStr("/plugin/clusterSingleton/class", null));

      assertTrue("ccProvided", C6.ccProvided);
      assertTrue("startCalled", C6.startCalled);
      assertFalse("stopCalled", C6.stopCalled);

      assertEquals( CConfig.class, ContainerPluginsRegistry.getConfigClass(new CC()));
      assertEquals( CConfig.class, ContainerPluginsRegistry.getConfigClass(new CC1()));
      assertEquals( CConfig.class, ContainerPluginsRegistry.getConfigClass(new CC2()));

      CConfig cfg = new CConfig();
      cfg.boolVal = Boolean.TRUE;
      cfg.strVal = "Something";
      cfg.longVal = 1234L;
      PluginMeta p = new PluginMeta();
      p.name = "hello";
      p.klass = CC.class.getName();
      p.config = cfg;

      new V2Request.Builder("/cluster/plugin")
          .forceV2(true)
          .POST()
          .withPayload(singletonMap("add", p))
          .build()
          .process(cluster.getSolrClient());
      TestDistribPackageStore.assertResponseValues(10,
          () -> new V2Request.Builder("hello/plugin")
              .forceV2(true)
              .GET()
              .build().process(cluster.getSolrClient()),
          ImmutableMap.of("/config/boolVal", "true", "/config/strVal", "Something","/config/longVal", "1234" ));

        cfg.strVal = "Something else";
        new V2Request.Builder("/cluster/plugin")
                .forceV2(true)
                .POST()
                .withPayload(singletonMap("update", p))
                .build()
                .process(cluster.getSolrClient());

        TestDistribPackageStore.assertResponseValues(10,
                () -> new V2Request.Builder("hello/plugin")
                        .forceV2(true)
                        .GET()
                        .build().process(cluster.getSolrClient()),
                ImmutableMap.of("/config/boolVal", "true", "/config/strVal", cfg.strVal,"/config/longVal", "1234" ));

        // kill the Overseer leader
      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {
        if (!jetty.getCoreContainer().getZkController().getOverseer().isClosed()) {
          cluster.stopJettySolrRunner(jetty);
          cluster.waitForJettyToStop(jetty);
        }
      }
      assertTrue("stopCalled", C6.stopCalled);
    } finally {
      cluster.shutdown();
    }
  }

