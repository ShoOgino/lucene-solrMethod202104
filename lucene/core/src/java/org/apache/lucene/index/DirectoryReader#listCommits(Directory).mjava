  /**
   * Returns all commit points that exist in the Directory. Normally, because the default is {@link
   * KeepOnlyLastCommitDeletionPolicy}, there would be only one commit point. But if you're using a
   * custom {@link IndexDeletionPolicy} then there could be many commits. Once you have a given
   * commit, you can open a reader on it by calling {@link DirectoryReader#open(IndexCommit)} There
   * must be at least one commit in the Directory, else this method throws {@link
   * IndexNotFoundException}. Note that if a commit is in progress while this method is running,
   * that commit may or may not be returned.
   *
   * @return a sorted list of {@link IndexCommit}s, from oldest to latest.
   */
  public static List<IndexCommit> listCommits(Directory dir) throws IOException {
    final String[] files = dir.listAll();

    List<IndexCommit> commits = new ArrayList<>();

    SegmentInfos latest = SegmentInfos.readLatestCommit(dir, 0);
    final long currentGen = latest.getGeneration();

    commits.add(new StandardDirectoryReader.ReaderCommit(null, latest, dir));

    for (int i = 0; i < files.length; i++) {

      final String fileName = files[i];

      if (fileName.startsWith(IndexFileNames.SEGMENTS)
          && SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {

        SegmentInfos sis = null;
        try {
          // IOException allowed to throw there, in case
          // segments_N is corrupt
          sis = SegmentInfos.readCommit(dir, fileName, 0);
        } catch (FileNotFoundException | NoSuchFileException fnfe) {
          // LUCENE-948: on NFS (and maybe others), if
          // you have writers switching back and forth
          // between machines, it's very likely that the
          // dir listing will be stale and will claim a
          // file segments_X exists when in fact it
          // doesn't.  So, we catch this and handle it
          // as if the file does not exist
        }

        if (sis != null) {
          commits.add(new StandardDirectoryReader.ReaderCommit(null, sis, dir));
        }
      }
    }

    // Ensure that the commit points are sorted in ascending order.
    Collections.sort(commits);

    return commits;
  }

