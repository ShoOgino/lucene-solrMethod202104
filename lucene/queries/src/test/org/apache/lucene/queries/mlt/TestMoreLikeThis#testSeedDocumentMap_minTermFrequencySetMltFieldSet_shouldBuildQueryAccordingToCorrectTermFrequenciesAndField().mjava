  public void
      testSeedDocumentMap_minTermFrequencySetMltFieldSet_shouldBuildQueryAccordingToCorrectTermFrequenciesAndField()
          throws Exception {
    mlt.setMinTermFreq(3);

    String mltField = "text";
    mlt.setFieldNames(new String[] {mltField});

    Map<String, Collection<Object>> seedDocument = new HashMap<>();
    String sampleField2 = "text2";
    String textValue1 = "apache apache lucene lucene";
    String textValue2 = "apache2 apache2 lucene2 lucene2 lucene2";
    seedDocument.put(mltField, Arrays.asList(textValue1));
    seedDocument.put(sampleField2, Arrays.asList(textValue2));

    BooleanQuery query = (BooleanQuery) mlt.like(seedDocument);
    Collection<BooleanClause> clauses = query.clauses();

    HashSet<Term> unexpectedTerms = new HashSet<>();
    unexpectedTerms.add(
        new Term(mltField, "apache")); // Term Frequency < Minimum Accepted Term Frequency
    unexpectedTerms.add(
        new Term(mltField, "lucene")); // Term Frequency < Minimum Accepted Term Frequency
    unexpectedTerms.add(
        new Term(mltField, "apache2")); // Term Frequency < Minimum Accepted Term Frequency
    unexpectedTerms.add(new Term(mltField, "lucene2")); // Wrong Field

    // None of the Not Expected terms is in the query
    for (BooleanClause clause : clauses) {
      Term term = ((TermQuery) clause.getQuery()).getTerm();
      assertFalse(
          "Unexpected term '" + term + "' found in query terms", unexpectedTerms.contains(term));
    }

    assertEquals("Expected 0 clauses only!", 0, clauses.size());

    analyzer.close();
  }

