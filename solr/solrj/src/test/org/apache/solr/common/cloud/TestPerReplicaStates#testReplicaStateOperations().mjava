  public void testReplicaStateOperations() throws Exception {
    String root = "/testReplicaStateOperations";
    cluster.getZkClient().create(root, null, CreateMode.PERSISTENT, true);

    ImmutableList<String> states = ImmutableList.of("R1:2:A", "R1:1:A:L", "R1:0:D", "R3:0:A", "R4:13:A");

    for (String state : states) {
      cluster.getZkClient().create(root + "/" + state, null, CreateMode.PERSISTENT, true);
    }

    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();
    PerReplicaStates rs = PerReplicaStates.fetch (root, zkStateReader.getZkClient(),null);
    assertEquals(3, rs.states.size());
    assertTrue(rs.cversion >= 5);

    PerReplicaStatesOps ops = PerReplicaStatesOps.addReplica("R5",State.ACTIVE, false, rs);
    assertEquals(1, ops.get().size());
    assertEquals(PerReplicaStates.Operation.Type.ADD , ops.ops.get(0).typ );
    ops.persist(root,cluster.getZkClient());
    rs = PerReplicaStates.fetch (root, zkStateReader.getZkClient(),null);
    assertEquals(4, rs.states.size());
    assertTrue(rs.cversion >= 6);
    assertEquals(6,  cluster.getZkClient().getChildren(root, null,true).size());
    ops =  PerReplicaStatesOps.flipState("R1", State.DOWN , rs);

    assertEquals(4, ops.ops.size());
    assertEquals(PerReplicaStates.Operation.Type.ADD,  ops.ops.get(0).typ);
    assertEquals(PerReplicaStates.Operation.Type.DELETE,  ops.ops.get(1).typ);
    assertEquals(PerReplicaStates.Operation.Type.DELETE,  ops.ops.get(2).typ);
    assertEquals(PerReplicaStates.Operation.Type.DELETE,  ops.ops.get(3).typ);
    ops.persist(root, cluster.getZkClient());
    rs = PerReplicaStates.fetch (root, zkStateReader.getZkClient(),null);
    assertEquals(4, rs.states.size());
    assertEquals(3, rs.states.get("R1").version);

    ops =  PerReplicaStatesOps.deleteReplica("R5" , rs);
    assertEquals(1, ops.ops.size());
    ops.persist(root,cluster.getZkClient());

    rs = PerReplicaStates.fetch (root, zkStateReader.getZkClient(),null);
    assertEquals(3, rs.states.size());

    ops = PerReplicaStatesOps.flipLeader(ImmutableSet.of("R4","R3","R1"), "R4",rs);
    assertEquals(2, ops.ops.size());
    assertEquals(PerReplicaStates.Operation.Type.ADD, ops.ops.get(0).typ);
    assertEquals(PerReplicaStates.Operation.Type.DELETE, ops.ops.get(1).typ);
    ops.persist(root,cluster.getZkClient());
    rs = PerReplicaStates.fetch (root, zkStateReader.getZkClient(),null);
    ops =  PerReplicaStatesOps.flipLeader(ImmutableSet.of("R4","R3","R1"),"R3",rs);
    assertEquals(4, ops.ops.size());
    ops.persist(root,cluster.getZkClient());
    rs =PerReplicaStates.fetch (root, zkStateReader.getZkClient(),null);
    assertTrue(rs.get("R3").isLeader);
  }

