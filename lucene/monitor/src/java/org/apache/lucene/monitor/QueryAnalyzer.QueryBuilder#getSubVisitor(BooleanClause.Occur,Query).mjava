    @Override
    public QueryVisitor getSubVisitor(BooleanClause.Occur occur, Query parent) {
      if (occur == BooleanClause.Occur.MUST || occur == BooleanClause.Occur.FILTER) {
        QueryBuilder n = new QueryBuilder();
        children.add(n);
        return n;
      }
      if (occur == BooleanClause.Occur.MUST_NOT) {
        // Check if we're in a pure negative disjunction
        if (parent instanceof BooleanQuery) {
          BooleanQuery bq = (BooleanQuery) parent;
          long positiveCount =
              bq.clauses().stream()
                  .filter(c -> c.getOccur() != BooleanClause.Occur.MUST_NOT)
                  .count();
          if (positiveCount == 0) {
            children.add(w -> QueryTree.anyTerm("PURE NEGATIVE QUERY[" + parent + "]"));
          }
        }
        return QueryVisitor.EMPTY_VISITOR;
      }
      // It's a disjunction clause.  If the parent has MUST or FILTER clauses, we can
      // ignore it
      if (parent instanceof BooleanQuery) {
        BooleanQuery bq = (BooleanQuery) parent;
        long requiredCount =
            bq.clauses().stream()
                .filter(
                    c ->
                        c.getOccur() == BooleanClause.Occur.MUST
                            || c.getOccur() == BooleanClause.Occur.FILTER)
                .count();
        if (requiredCount > 0) {
          return QueryVisitor.EMPTY_VISITOR;
        }
      }
      Disjunction n = new Disjunction();
      children.add(n);
      return n;
    }

