  /**
   * Constructor.
   *
   * @param planetModel is the planet model.
   * @param lat is the center latitude.
   * @param lon is the center longitude.
   * @param cutoffAngle is the cutoff angle for the circle.
   */
  public GeoStandardCircle(
      final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {
    super(planetModel);
    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)
      throw new IllegalArgumentException("Latitude out of bounds");
    if (lon < -Math.PI || lon > Math.PI)
      throw new IllegalArgumentException("Longitude out of bounds");
    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)
      throw new IllegalArgumentException("Cutoff angle out of bounds");
    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)
      throw new IllegalArgumentException("Cutoff angle cannot be effectively zero");
    this.center = new GeoPoint(planetModel, lat, lon);
    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership
    // can be used to make in/out determination.
    this.cutoffAngle = cutoffAngle;
    // Compute two points on the circle, with the right angle from the center.  We'll use these
    // to obtain the perpendicular plane to the circle.
    double upperLat = lat + cutoffAngle;
    double upperLon = lon;
    if (upperLat > Math.PI * 0.5) {
      upperLon += Math.PI;
      if (upperLon > Math.PI) {
        upperLon -= 2.0 * Math.PI;
      }
      upperLat = Math.PI - upperLat;
    }
    double lowerLat = lat - cutoffAngle;
    double lowerLon = lon;
    if (lowerLat < -Math.PI * 0.5) {
      lowerLon += Math.PI;
      if (lowerLon > Math.PI) {
        lowerLon -= 2.0 * Math.PI;
      }
      lowerLat = -Math.PI - lowerLat;
    }
    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);
    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);
    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      // Circle is the whole world
      this.circlePlane = null;
      this.edgePoints = new GeoPoint[0];
    } else {
      // Construct normal plane
      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);
      // Construct a sided plane that goes through the two points and whose normal is in the
      // normalPlane.
      this.circlePlane =
          SidedPlane.constructNormalizedPerpendicularSidedPlane(
              center, normalPlane, upperPoint, lowerPoint);
      if (circlePlane == null) {
        throw new IllegalArgumentException(
            "Couldn't construct circle plane, probably too small?  Cutoff angle = "
                + cutoffAngle
                + "; upperPoint = "
                + upperPoint
                + "; lowerPoint = "
                + lowerPoint);
      }
      final GeoPoint recomputedIntersectionPoint =
          circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);
      if (recomputedIntersectionPoint == null) {
        throw new IllegalArgumentException(
            "Couldn't construct intersection point, probably circle too small?  Plane = "
                + circlePlane);
      }
      this.edgePoints = new GeoPoint[] {recomputedIntersectionPoint};
    }
  }

