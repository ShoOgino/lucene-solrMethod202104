  /**
   * Returns the number of code points in this UTF8 sequence.
   *
   * <p>This method assumes valid UTF8 input. This method <strong>does not perform</strong> full
   * UTF8 validation, it will check only the first byte of each codepoint (for multi-byte sequences
   * any bytes after the head are skipped).
   *
   * @throws IllegalArgumentException If invalid codepoint header byte occurs or the content is
   *     prematurely truncated.
   */
  public static int codePointCount(BytesRef utf8) {
    int pos = utf8.offset;
    final int limit = pos + utf8.length;
    final byte[] bytes = utf8.bytes;

    int codePointCount = 0;
    for (; pos < limit; codePointCount++) {
      int v = bytes[pos] & 0xFF;
      if (v < /* 0xxx xxxx */ 0x80) {
        pos += 1;
        continue;
      }
      if (v >= /* 110x xxxx */ 0xc0) {
        if (v < /* 111x xxxx */ 0xe0) {
          pos += 2;
          continue;
        }
        if (v < /* 1111 xxxx */ 0xf0) {
          pos += 3;
          continue;
        }
        if (v < /* 1111 1xxx */ 0xf8) {
          pos += 4;
          continue;
        }
        // fallthrough, consider 5 and 6 byte sequences invalid.
      }

      // Anything not covered above is invalid UTF8.
      throw new IllegalArgumentException();
    }

    // Check if we didn't go over the limit on the last character.
    if (pos > limit) throw new IllegalArgumentException();

    return codePointCount;
  }

