  private FST.Arc<T> doSeekCeilArrayPacked(
      final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {
    // The array is packed -- use binary search to find the target.
    int idx = Util.binarySearch(fst, arc, targetLabel);
    if (idx >= 0) {
      // Match
      fst.readArcByIndex(arc, in, idx);
      assert arc.arcIdx() == idx;
      assert arc.label() == targetLabel
          : "arc.label=" + arc.label() + " vs targetLabel=" + targetLabel + " mid=" + idx;
      output[upto] = fst.outputs.add(output[upto - 1], arc.output());
      if (targetLabel == FST.END_LABEL) {
        return null;
      }
      setCurrentLabel(arc.label());
      incr();
      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
    }
    idx = -1 - idx;
    if (idx == arc.numArcs()) {
      // Dead end
      fst.readArcByIndex(arc, in, idx - 1);
      assert arc.isLast();
      // Dead end (target is after the last arc);
      // rollback to last fork then push
      upto--;
      while (true) {
        if (upto == 0) {
          return null;
        }
        final FST.Arc<T> prevArc = getArc(upto);
        // System.out.println("  rollback upto=" + upto + " arc.label=" + prevArc.label + "
        // isLast?=" + prevArc.isLast());
        if (!prevArc.isLast()) {
          fst.readNextArc(prevArc, fstReader);
          pushFirst();
          return null;
        }
        upto--;
      }
    } else {
      // Ceiling - arc with least higher label
      fst.readArcByIndex(arc, in, idx);
      assert arc.label() > targetLabel;
      pushFirst();
      return null;
    }
  }

