  /**
   * Calendar utility method: The reverse of {@link #toString(java.util.Calendar)}. It will only set
   * the fields found, leaving the remainder in an un-set state. A leading '-' or '+' is optional
   * (positive assumed), and a trailing 'Z' is also optional.
   *
   * @param str not null and not empty
   * @return not null
   */
  public Calendar parseCalendar(String str) throws ParseException {
    // example: +2014-10-23T21:22:33.159Z
    if (str == null || str.isEmpty()) throw new IllegalArgumentException("str is null or blank");
    Calendar cal = newCal();
    if (str.equals("*")) return cal;
    int offset = 0; // a pointer
    int parsedVal = 0;
    try {
      // year & era:
      int lastOffset = str.charAt(str.length() - 1) == 'Z' ? str.length() - 1 : str.length();
      int hyphenIdx = str.indexOf('-', 1); // look past possible leading hyphen
      if (hyphenIdx < 0) hyphenIdx = lastOffset;
      int year = Integer.parseInt(str.substring(offset, hyphenIdx));
      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);
      cal.set(Calendar.YEAR, year <= 0 ? -1 * year + 1 : year);
      offset = hyphenIdx + 1;
      if (lastOffset < offset) return cal;

      // NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.
      // The str.substring()'s hopefully get optimized to be stack-allocated.

      // month:
      parsedVal = parseAndCheck(str, offset, 1, 12);
      cal.set(Calendar.MONTH, parsedVal - 1); // starts at 0
      offset += 3;
      if (lastOffset < offset) return cal;
      // day:
      checkDelimeter(str, offset - 1, '-');

      parsedVal = parseAndCheck(str, offset, 1, 31);
      cal.set(Calendar.DAY_OF_MONTH, parsedVal);
      offset += 3;
      if (lastOffset < offset) return cal;
      checkDelimeter(str, offset - 1, 'T');
      // hour:

      parsedVal = parseAndCheck(str, offset, 0, 24);
      cal.set(Calendar.HOUR_OF_DAY, parsedVal);
      offset += 3;
      if (lastOffset < offset) return cal;
      checkDelimeter(str, offset - 1, ':');
      // minute:

      parsedVal = parseAndCheck(str, offset, 0, 59);
      cal.set(Calendar.MINUTE, parsedVal);
      offset += 3;
      if (lastOffset < offset) return cal;
      checkDelimeter(str, offset - 1, ':');
      // second:

      parsedVal = parseAndCheck(str, offset, 0, 59);
      cal.set(Calendar.SECOND, parsedVal);
      offset += 3;
      if (lastOffset < offset) return cal;
      checkDelimeter(str, offset - 1, '.');
      // ms:

      int maxOffset = lastOffset - offset; // assume remaining is all digits to compute milliseconds
      // we truncate off > millisecond precision (3 digits only)
      int millis =
          (int)
              (Integer.parseInt(str.substring(offset, offset + maxOffset))
                  / Math.pow(10, maxOffset - 3));
      cal.set(Calendar.MILLISECOND, millis);
      return cal;
    } catch (Exception e) {
      ParseException pe = new ParseException("Improperly formatted datetime: " + str, offset);
      pe.initCause(e);
      throw pe;
    }
  }

