  public void testMaxConnections() {
    // verify that maxConnections is observed, and that the retained arcs point to the best-scoring neighbors
    HnswGraph graph = new HnswGraph(1, VectorValues.SearchStrategy.DOT_PRODUCT_HNSW);
    graph.connectNodes(0, 1, 0);
    assertArrayEquals(new int[]{1}, graph.getNeighborNodes(0));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(1));
    graph.connectNodes(0, 2, 0.4f);
    assertArrayEquals(new int[]{2}, graph.getNeighborNodes(0));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(1));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(2));
    graph.connectNodes(2, 3, 0);
    assertArrayEquals(new int[]{2}, graph.getNeighborNodes(0));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(1));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(2));
    assertArrayEquals(new int[]{2}, graph.getNeighborNodes(3));

    graph = new HnswGraph(1, VectorValues.SearchStrategy.EUCLIDEAN_HNSW);
    graph.connectNodes(0, 1, 1);
    assertArrayEquals(new int[]{1}, graph.getNeighborNodes(0));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(1));
    graph.connectNodes(0, 2, 2);
    assertArrayEquals(new int[]{1}, graph.getNeighborNodes(0));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(1));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(2));
    graph.connectNodes(2, 3, 1);
    assertArrayEquals(new int[]{1}, graph.getNeighborNodes(0));
    assertArrayEquals(new int[]{0}, graph.getNeighborNodes(1));
    assertArrayEquals(new int[]{3}, graph.getNeighborNodes(2));
    assertArrayEquals(new int[]{2}, graph.getNeighborNodes(3));
  }

