  private void testParentFilterJSON() throws Exception {

    String[] tests = new String[] {
        "/response/docs/[0]/id=='1'",
        "/response/docs/[0]/_childDocuments_/[0]/id=='2'",
        "/response/docs/[0]/_childDocuments_/[0]/cat=='childDocument'",
        "/response/docs/[0]/_childDocuments_/[0]/title=='" + titleVals[0] + "'",
        "/response/docs/[1]/id=='4'",
        "/response/docs/[1]/_childDocuments_/[0]/id=='5'",
        "/response/docs/[1]/_childDocuments_/[0]/cat=='childDocument'",
        "/response/docs/[1]/_childDocuments_/[0]/title=='" + titleVals[1] + "'"
    };


    assertJQ(req("q", "*:*", 
                 "sort", "id asc",
                 "fq", "subject:\"parentDocument\" ",
                 "fl", "*,[child childFilter='cat:childDocument' parentFilter=\"subject:parentDocument\"]"), 
             tests);

    assertJQ(req("q", "*:*", 
                 "sort", "id asc",
                 "fq", "subject:\"parentDocument\" ",
                 "fl", "id, cat, title, [child childFilter='cat:childDocument' parentFilter=\"subject:parentDocument\"]"),
             tests);

    // shows if parentFilter matches all docs, then there are effectively no child docs
    assertJQ(req("q", "*:*",
        "sort", "id asc",
        "fq", "subject:\"parentDocument\" ",
        "fl", "id,[child childFilter='cat:childDocument' parentFilter=\"*:*\"]"),
        "/response==" +
            "{'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'}]}");

  }

