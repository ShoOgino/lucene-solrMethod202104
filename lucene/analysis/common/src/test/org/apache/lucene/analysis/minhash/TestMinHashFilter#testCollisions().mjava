  public void testCollisions() {
    HashSet<LongPair> collisionDetection = new HashSet<LongPair>();
    HashSet<LongPair> unadded = new HashSet<LongPair>();
    FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<LongPair>(500);
    int numElements = TEST_NIGHTLY ? 1000000 : 10000;
    for (int i = 0; i < numElements; i++) {
      LongPair hash = new LongPair();
      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);
      collisionDetection.add(hash);
      LongPair peek = null;
      if (minSet.size() > 0) {
        peek = minSet.last();
      }

      if (!minSet.add(hash)) {
        unadded.add(hash);
      } else {
        if (peek != null) {
          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {
            unadded.add(peek);
          }
        }
      }
    }
    assertEquals(numElements, collisionDetection.size());
    assertEquals(500, minSet.size());
    assertEquals(numElements - 500, unadded.size());

    LongPair last = null;
    LongPair current = null;
    while ((current = minSet.pollLast()) != null) {
      if (last != null) {
        assertTrue(isLessThan(current, last));
      }
      last = current;
    }
  }

