    public Option[] getOptions() {
      return new Option[] {
          Option.builder("R")
              .desc("Asserts that we are NOT the root user.")
              .longOpt("not-root")
              .build(),
          Option.builder("r")
              .desc("Asserts that we are the root user.")
              .longOpt("root")
              .build(),
          Option.builder("S")
              .desc("Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms.")
              .longOpt("not-started")
              .hasArg(true)
              .argName("url")
              .build(),
          Option.builder("s")
              .desc("Asserts that Solr is running on a certain URL. Default timeout is 1000ms.")
              .longOpt("started")
              .hasArg(true)
              .argName("url")
              .build(),
          Option.builder("u")
              .desc("Asserts that we run as same user that owns <directory>.")
              .longOpt("same-user")
              .hasArg(true)
              .argName("directory")
              .build(),
          Option.builder("x")
              .desc("Asserts that directory <directory> exists.")
              .longOpt("exists")
              .hasArg(true)
              .argName("directory")
              .build(),
          Option.builder("X")
              .desc("Asserts that directory <directory> does NOT exist.")
              .longOpt("not-exists")
              .hasArg(true)
              .argName("directory")
              .build(),
          Option.builder("c")
              .desc("Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.")
              .longOpt("cloud")
              .hasArg(true)
              .argName("url")
              .build(),
          Option.builder("C")
              .desc("Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.")
              .longOpt("not-cloud")
              .hasArg(true)
              .argName("url")
              .build(),
          Option.builder("m")
              .desc("Exception message to be used in place of the default error message.")
              .longOpt("message")
              .hasArg(true)
              .argName("message")
              .build(),
          Option.builder("t")
              .desc("Timeout in ms for commands supporting a timeout.")
              .longOpt("timeout")
              .hasArg(true)
              .type(Long.class)
              .argName("ms")
              .build(),
          Option.builder("e")
              .desc("Return an exit code instead of printing error message on assert fail.")
              .longOpt("exitcode")
              .build()
      };
    }

