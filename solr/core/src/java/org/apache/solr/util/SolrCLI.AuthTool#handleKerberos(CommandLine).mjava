    private int handleKerberos(CommandLine cli) throws Exception {
      String cmd = cli.getArgs()[0];
      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue("updateIncludeFileOnly", "false"));
      String securityJson = "{" +
          "\n  \"authentication\":{" +
          "\n   \"class\":\"solr.KerberosPlugin\"" +
          "\n  }" +
          "\n}";


      switch (cmd) {
        case "enable":
          String zkHost = null;
          boolean zkInaccessible = false;

          if (!updateIncludeFileOnly) {
            try {
              zkHost = getZkHost(cli);
            } catch (Exception ex) {
              CLIO.out("Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\n"
                  + securityJson + "\n");
              zkInaccessible = true;
            }
            if (zkHost == null) {
              if (zkInaccessible == false) {
                CLIO.out("Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\n"
                    + securityJson + "\n");
                zkInaccessible = true;
              }
            }

            // check if security is already enabled or not
            if (!zkInaccessible) {
              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {
                if (zkClient.exists("/security.json", true)) {
                  byte oldSecurityBytes[] = zkClient.getData("/security.json", null, null, true);
                  if (!"{}".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {
                    CLIO.out("Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \n"
                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));
                    exit(1);
                  }
                }
              } catch (Exception ex) {
                if (zkInaccessible == false) {
                  CLIO.out("Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\n"
                      + securityJson + "\n");
                  zkInaccessible = true;
                }
              }
            }
          }

          if (!updateIncludeFileOnly) {
            if (!zkInaccessible) {
              echoIfVerbose("Uploading following security.json: " + securityJson, cli);
              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {
                zkClient.setData("/security.json", securityJson.getBytes(StandardCharsets.UTF_8), true);
              } catch (Exception ex) {
                if (zkInaccessible == false) {
                  CLIO.out("Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\n"
                      + securityJson);
                  zkInaccessible = true;
                }
              }
            }
          }

          String config = StrUtils.join(Arrays.asList(cli.getOptionValues("config")), ' ');
          // config is base64 encoded (to get around parsing problems), decode it
          config = config.replaceAll(" ", "");
          config = new String(Base64.getDecoder()
              .decode(config.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
          config = config.replaceAll("\n", "").replaceAll("\r", "");

          String solrIncludeFilename = cli.getOptionValue("solrIncludeFile");
          File includeFile = new File(solrIncludeFilename);
          if (includeFile.exists() == false || includeFile.canWrite() == false) {
            CLIO.out("Solr include file " + solrIncludeFilename + " doesn't exist or is not writeable.");
            printAuthEnablingInstructions(config);
            System.exit(0);
          }

          // update the solr.in.sh file to contain the necessary authentication lines
          updateIncludeFileEnableAuth(includeFile, null, config, cli);
          echo("Successfully enabled Kerberos authentication; please restart any running Solr nodes.");
          return 0;

        case "disable":
          if (!updateIncludeFileOnly) {
            zkHost = getZkHost(cli);
            if (zkHost == null) {
              stdout.print("ZK Host not found. Solr should be running in cloud mode.");
              exit(1);
            }

            echoIfVerbose("Uploading following security.json: {}", cli);

            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {
              zkClient.setData("/security.json", "{}".getBytes(StandardCharsets.UTF_8), true);
            }
          }

          solrIncludeFilename = cli.getOptionValue("solrIncludeFile");
          includeFile = new File(solrIncludeFilename);
          if (!includeFile.exists() || !includeFile.canWrite()) {
            CLIO.out("Solr include file " + solrIncludeFilename + " doesn't exist or is not writeable.");
            CLIO.out("Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\n");
            System.exit(0);
          }

          // update the solr.in.sh file to comment out the necessary authentication lines
          updateIncludeFileDisableAuth(includeFile, cli);
          return 0;

        default:
          CLIO.out("Valid auth commands are: enable, disable.");
          exit(1);
      }

      CLIO.out("Options not understood.");
      new HelpFormatter().printHelp("bin/solr auth <enable|disable> [OPTIONS]", getToolOptions(this));
      return 1;
    }

