  /**
   * Retrieve the current plugin configurations.
   * @param zkClientSupplier supplier of {@link SolrZkClient}
   * @return current plugin configurations, where keys are plugin names and values
   * are {@link PluginMeta} plugin metadata.
   * @throws IOException on IO errors
   */
  @SuppressWarnings("unchecked")
  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {
    SolrZkClient zkClient = zkClientSupplier.get();
    try {
      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));
      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, o -> new LinkedHashMap<>());
    } catch (KeeperException.NoNodeException e) {
      return new LinkedHashMap<>();
    } catch (KeeperException | InterruptedException e) {
      throw new IOException("Error reading cluster property", SolrZkClient.checkInterrupted(e));
    }
  }

