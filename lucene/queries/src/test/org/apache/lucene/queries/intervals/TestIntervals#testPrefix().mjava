  public void testPrefix() throws IOException {
    IntervalsSource source = Intervals.prefix(new BytesRef("p"));
    checkIntervals(
        source,
        "field1",
        5,
        new int[][] {
          {},
          {0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27},
          {0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10},
          {7, 7},
          {0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10},
          {0, 0}
        });
    MatchesIterator mi = getMatches(source, 1, "field1");
    assertNotNull(mi);
    assertMatch(mi, 0, 0, 0, 5);
    assertMatch(mi, 1, 1, 6, 14);

    IntervalsSource noSuch = Intervals.prefix(new BytesRef("qqq"));
    checkIntervals(noSuch, "field1", 0, new int[][] {});

    IntervalsSource s = Intervals.prefix(new BytesRef("p"), 1);
    IllegalStateException e =
        expectThrows(
            IllegalStateException.class,
            () -> {
              for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {
                s.intervals("field1", ctx);
              }
            });
    assertEquals("Automaton [p*] expanded to too many terms (limit 1)", e.getMessage());

    checkVisits(Intervals.prefix(new BytesRef("p")), 1);
  }

