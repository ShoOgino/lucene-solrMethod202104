    /** traverse the tree to find next key */
    private int run() {
      if (cur == -1) {
        return -1;
      }

      boolean leaf = false;
      while (true) {
        // first go down on low branch until leaf or compressed branch
        while (cur != 0) {
          if (sc[cur] == 0xFFFF) {
            leaf = true;
            break;
          }
          ns.push(new Item((char) cur, '\u0000'));
          if (sc[cur] == 0) {
            leaf = true;
            break;
          }
          cur = lo[cur];
        }
        if (leaf) {
          break;
        }
        // nothing found, go up one node and try again
        cur = up();
        if (cur == -1) {
          return -1;
        }
      }
      // The current node should be a data node and
      // the key should be in the key stack (at least partially)
      StringBuilder buf = new StringBuilder(ks.toString());
      if (sc[cur] == 0xFFFF) {
        int p = lo[cur];
        while (kv.get(p) != 0) {
          buf.append(kv.get(p++));
        }
      }
      curkey = buf.toString();
      return 0;
    }

