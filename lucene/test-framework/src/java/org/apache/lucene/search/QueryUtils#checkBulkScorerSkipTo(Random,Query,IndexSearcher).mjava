  /** Check that the scorer and bulk scorer advance consistently. */
  public static void checkBulkScorerSkipTo(Random r, Query query, IndexSearcher searcher)
      throws IOException {
    query = searcher.rewrite(query);
    Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE, 1);
    for (LeafReaderContext context : searcher.getIndexReader().leaves()) {
      final Scorer scorer = weight.scorer(context);
      final BulkScorer bulkScorer = weight.bulkScorer(context);
      if (scorer == null && bulkScorer == null) {
        continue;
      } else if (bulkScorer == null) {
        // ensure scorer is exhausted (it just didnt return null)
        assert scorer.iterator().nextDoc() == DocIdSetIterator.NO_MORE_DOCS;
        continue;
      }
      DocIdSetIterator iterator = scorer.iterator();
      int upTo = 0;
      while (true) {
        final int min = upTo + r.nextInt(5);
        final int max = min + 1 + r.nextInt(r.nextBoolean() ? 10 : 5000);
        if (scorer.docID() < min) {
          iterator.advance(min);
        }
        final int next =
            bulkScorer.score(
                new LeafCollector() {
                  Scorable scorer2;

                  @Override
                  public void setScorer(Scorable scorer) throws IOException {
                    this.scorer2 = scorer;
                  }

                  @Override
                  public void collect(int doc) throws IOException {
                    assert doc >= min;
                    assert doc < max;
                    assertEquals(scorer.docID(), doc);
                    assertEquals(scorer.score(), scorer2.score(), 0.01f);
                    iterator.nextDoc();
                  }
                },
                null,
                min,
                max);
        assert max <= next;
        assert next <= scorer.docID();
        upTo = max;

        if (scorer.docID() == DocIdSetIterator.NO_MORE_DOCS) {
          bulkScorer.score(
              new LeafCollector() {
                @Override
                public void setScorer(Scorable scorer) throws IOException {}

                @Override
                public void collect(int doc) throws IOException {
                  // no more matches
                  assert false;
                }
              },
              null,
              upTo,
              DocIdSetIterator.NO_MORE_DOCS);
          break;
        }
      }
    }
  }

