  // Sort pending tokens, and set position increment values.
  private void fixupPendingList() {
    // Sort for removing same tokens.
    // USER token should be ahead from normal one.
    Collections.sort(
        pending,
        new Comparator<Token>() {
          @Override
          public int compare(Token a, Token b) {
            int aOff = a.getOffset();
            int bOff = b.getOffset();
            if (aOff != bOff) {
              return aOff - bOff;
            }
            int aLen = a.getLength();
            int bLen = b.getLength();
            if (aLen != bLen) {
              return aLen - bLen;
            }
            // order of Type is KNOWN, UNKNOWN, USER,
            // so we use reversed comparison here.
            return b.getType().ordinal() - a.getType().ordinal();
          }
        });

    // Remove same token.
    for (int i = 1; i < pending.size(); ++i) {
      Token a = pending.get(i - 1);
      Token b = pending.get(i);
      if (a.getOffset() == b.getOffset() && a.getLength() == b.getLength()) {
        pending.remove(i);
        // It is important to decrement "i" here, because a next may be removed.
        --i;
      }
    }

    // offset=>position map
    HashMap<Integer, Integer> map = new HashMap<>();
    for (Token t : pending) {
      map.put(t.getOffset(), 0);
      map.put(t.getOffset() + t.getLength(), 0);
    }

    // Get uniqe and sorted list of all edge position of tokens.
    Integer[] offsets = map.keySet().toArray(new Integer[0]);
    Arrays.sort(offsets);

    // setup all value of map.  It specify N-th position from begin.
    for (int i = 0; i < offsets.length; ++i) {
      map.put(offsets[i], i);
    }

    // We got all position length now.
    for (Token t : pending) {
      t.setPositionLength(map.get(t.getOffset() + t.getLength()) - map.get(t.getOffset()));
    }

    // Make PENDING to be reversed order to fit its usage.
    // If you would like to speedup, you can try reversed order sort
    // at first of this function.
    Collections.reverse(pending);
  }

