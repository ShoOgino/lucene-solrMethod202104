  public void testDynamicExtendedVariableExample() throws Exception {
    Expression popularity =
        JavascriptCompiler.compile("doc['popularity'].value + magicarray[0] + fourtytwo");

    // The following is an example of how to write bindings which parse the variable name into
    // pieces.
    // Note, however, that this requires a lot of error checking.  Each "error case" below should be
    // filled in with proper error messages for a real use case.
    Bindings bindings =
        new Bindings() {
          @Override
          public DoubleValuesSource getDoubleValuesSource(String name) {
            VariableContext[] var = VariableContext.parse(name);
            assert var[0].type == MEMBER;
            String base = var[0].text;
            if (base.equals("doc")) {
              if (var.length > 1 && var[1].type == STR_INDEX) {
                String field = var[1].text;
                if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals("value")) {
                  return DoubleValuesSource.fromIntField(field);
                } else {
                  fail("member: " + var[2].text); // error case, non/missing "value" member access
                }
              } else {
                fail(); // error case, doc should be a str indexed array
              }
            } else if (base.equals("magicarray")) {
              if (var.length > 1 && var[1].type == INT_INDEX) {
                return DoubleValuesSource.constant(2048);
              } else {
                fail(); // error case, magic array isn't an array
              }
            } else if (base.equals("fourtytwo")) {
              return DoubleValuesSource.constant(42);
            } else {
              fail(); // error case (variable doesn't exist)
            }
            throw new IllegalArgumentException("Illegal reference '" + name + "'");
          }
        };
    Sort sort = new Sort(popularity.getSortField(bindings, false));
    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);

    FieldDoc d = (FieldDoc) td.scoreDocs[0];
    assertEquals(2092D, (Double) d.fields[0], 1E-4);

    d = (FieldDoc) td.scoreDocs[1];
    assertEquals(2095D, (Double) d.fields[0], 1E-4);

    d = (FieldDoc) td.scoreDocs[2];
    assertEquals(2110D, (Double) d.fields[0], 1E-4);
  }

