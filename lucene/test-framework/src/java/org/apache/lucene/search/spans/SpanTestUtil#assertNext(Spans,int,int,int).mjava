  /**
   * Assert the next iteration from {@code spans} is a match from {@code start} to {@code end} in
   * {@code doc}.
   */
  public static void assertNext(Spans spans, int doc, int start, int end) throws IOException {
    if (spans.docID() >= doc) {
      assertEquals("docId", doc, spans.docID());
    } else { // nextDoc needed before testing start/end
      if (spans.docID() >= 0) {
        assertEquals(
            "nextStartPosition of previous doc",
            Spans.NO_MORE_POSITIONS,
            spans.nextStartPosition());
        assertEquals("endPosition of previous doc", Spans.NO_MORE_POSITIONS, spans.endPosition());
      }
      assertEquals("nextDoc", doc, spans.nextDoc());
      if (doc != Spans.NO_MORE_DOCS) {
        assertEquals("first startPosition", -1, spans.startPosition());
        assertEquals("first endPosition", -1, spans.endPosition());
      }
    }
    if (doc != Spans.NO_MORE_DOCS) {
      assertEquals("nextStartPosition", start, spans.nextStartPosition());
      assertEquals("startPosition", start, spans.startPosition());
      assertEquals("endPosition", end, spans.endPosition());
    }
  }

