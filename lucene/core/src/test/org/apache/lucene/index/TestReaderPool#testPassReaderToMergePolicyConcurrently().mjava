  public void testPassReaderToMergePolicyConcurrently() throws Exception {
    Directory directory = newDirectory();
    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);
    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);
    SegmentInfos segmentInfos = reader.segmentInfos.clone();
    ReaderPool pool =
        new ReaderPool(
            directory,
            directory,
            segmentInfos,
            fieldNumbers,
            () -> 0L,
            new NullInfoStream(),
            null,
            null);
    if (random().nextBoolean()) {
      pool.enableReaderPooling();
    }
    AtomicBoolean isDone = new AtomicBoolean();
    CountDownLatch latch = new CountDownLatch(1);
    Thread refresher =
        new Thread(
            () -> {
              try {
                latch.countDown();
                while (isDone.get() == false) {
                  for (SegmentCommitInfo commitInfo : segmentInfos) {
                    ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);
                    SegmentReader segmentReader = readersAndUpdates.getReader(IOContext.READ);
                    readersAndUpdates.release(segmentReader);
                    pool.release(readersAndUpdates, random().nextBoolean());
                  }
                }
              } catch (Exception ex) {
                throw new AssertionError(ex);
              }
            });
    refresher.start();
    MergePolicy mergePolicy =
        new FilterMergePolicy(newMergePolicy()) {
          @Override
          public boolean keepFullyDeletedSegment(IOSupplier<CodecReader> readerIOSupplier)
              throws IOException {
            CodecReader reader = readerIOSupplier.get();
            assert reader.maxDoc() > 0; // just try to access the reader
            return true;
          }
        };
    latch.await();
    for (int i = 0; i < reader.maxDoc(); i++) {
      for (SegmentCommitInfo commitInfo : segmentInfos) {
        ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);
        SegmentReader sr = readersAndUpdates.getReadOnlyClone(IOContext.READ);
        PostingsEnum postings = sr.postings(new Term("id", "" + i));
        sr.decRef();
        if (postings != null) {
          for (int docId = postings.nextDoc();
              docId != DocIdSetIterator.NO_MORE_DOCS;
              docId = postings.nextDoc()) {
            readersAndUpdates.delete(docId);
            assertTrue(readersAndUpdates.keepFullyDeletedSegment(mergePolicy));
          }
        }
        assertTrue(readersAndUpdates.keepFullyDeletedSegment(mergePolicy));
        pool.release(readersAndUpdates, random().nextBoolean());
      }
    }
    isDone.set(true);
    refresher.join();
    IOUtils.close(pool, reader, directory);
  }

