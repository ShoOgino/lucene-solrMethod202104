  @Override
  protected Similarity getSimilarity(Random random) {
    // term frequency normalization parameter k1
    final float k1;
    switch (random.nextInt(4)) {
      case 0:
        // minimum value
        k1 = 0;
        break;
      case 1:
        // tiny value
        k1 = Float.MIN_VALUE;
        break;
      case 2:
        // maximum value
        // upper bounds on individual term's score is 43.262806 * (k1 + 1) * boost
        // we just limit the test to "reasonable" k1 values but don't enforce this anywhere.
        k1 = Integer.MAX_VALUE;
        break;
      default:
        // random value
        k1 = Integer.MAX_VALUE * random.nextFloat();
        break;
    }

    // length normalization parameter b [0 .. 1]
    final float b;
    switch (random.nextInt(4)) {
      case 0:
        // minimum value
        b = 0;
        break;
      case 1:
        // tiny value
        b = Float.MIN_VALUE;
        break;
      case 2:
        // maximum value
        b = 1;
        break;
      default:
        // random value
        b = random.nextFloat();
        break;
    }
    return new BM25Similarity(k1, b);
  }

