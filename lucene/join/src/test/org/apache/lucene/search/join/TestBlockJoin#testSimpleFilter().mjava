  public void testSimpleFilter() throws Exception {

    final Directory dir = newDirectory();
    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);

    final List<Document> docs = new ArrayList<>();
    docs.add(makeJob("java", 2007));
    docs.add(makeJob("python", 2010));
    Collections.shuffle(docs, random());
    docs.add(makeResume("Lisa", "United Kingdom"));

    final List<Document> docs2 = new ArrayList<>();
    docs2.add(makeJob("ruby", 2005));
    docs2.add(makeJob("java", 2006));
    Collections.shuffle(docs2, random());
    docs2.add(makeResume("Frank", "United States"));

    addSkillless(w);
    boolean turn = random().nextBoolean();
    w.addDocuments(turn ? docs : docs2);

    addSkillless(w);

    w.addDocuments(!turn ? docs : docs2);

    addSkillless(w);

    IndexReader r = w.getReader();
    w.close();
    IndexSearcher s = newSearcher(r, false);

    // Create a filter that defines "parent" documents in the index - in this case resumes
    BitSetProducer parentsFilter =
        new QueryBitSetProducer(new TermQuery(new Term("docType", "resume")));
    CheckJoinIndex.check(r, parentsFilter);

    // Define child document criteria (finds an example of relevant work experience)
    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();
    childQuery.add(new BooleanClause(new TermQuery(new Term("skill", "java")), Occur.MUST));
    childQuery.add(new BooleanClause(IntPoint.newRangeQuery("year", 2006, 2011), Occur.MUST));

    // Define parent document criteria (find a resident in the UK)
    Query parentQuery = new TermQuery(new Term("country", "United Kingdom"));

    // Wrap the child document query to 'join' any matches
    // up to corresponding parent:
    ToParentBlockJoinQuery childJoinQuery =
        new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);

    assertEquals("no filter - both passed", 2, s.count(childJoinQuery));

    Query query =
        new BooleanQuery.Builder()
            .add(childJoinQuery, Occur.MUST)
            .add(new TermQuery(new Term("docType", "resume")), Occur.FILTER)
            .build();
    assertEquals("dummy filter passes everyone ", 2, s.count(query));
    query =
        new BooleanQuery.Builder()
            .add(childJoinQuery, Occur.MUST)
            .add(new TermQuery(new Term("docType", "resume")), Occur.FILTER)
            .build();
    assertEquals("dummy filter passes everyone ", 2, s.count(query));

    // not found test
    query =
        new BooleanQuery.Builder()
            .add(childJoinQuery, Occur.MUST)
            .add(new TermQuery(new Term("country", "Oz")), Occur.FILTER)
            .build();
    assertEquals("noone live there", 0, s.count(query));

    // apply the UK filter by the searcher
    query =
        new BooleanQuery.Builder()
            .add(childJoinQuery, Occur.MUST)
            .add(parentQuery, Occur.FILTER)
            .build();
    TopDocs ukOnly = s.search(query, 1);
    assertEquals("has filter - single passed", 1, ukOnly.totalHits.value);
    assertEquals("Lisa", r.document(ukOnly.scoreDocs[0].doc).get("name"));

    query =
        new BooleanQuery.Builder()
            .add(childJoinQuery, Occur.MUST)
            .add(new TermQuery(new Term("country", "United States")), Occur.FILTER)
            .build();
    // looking for US candidates
    TopDocs usThen = s.search(query, 1);
    assertEquals("has filter - single passed", 1, usThen.totalHits.value);
    assertEquals("Frank", r.document(usThen.scoreDocs[0].doc).get("name"));

    TermQuery us = new TermQuery(new Term("country", "United States"));
    assertEquals(
        "@ US we have java and ruby", 2, s.count(new ToChildBlockJoinQuery(us, parentsFilter)));

    query =
        new BooleanQuery.Builder()
            .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)
            .add(skill("java"), Occur.FILTER)
            .build();
    assertEquals("java skills in US", 1, s.count(query));

    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();
    rubyPython.add(new TermQuery(new Term("skill", "ruby")), Occur.SHOULD);
    rubyPython.add(new TermQuery(new Term("skill", "python")), Occur.SHOULD);
    query =
        new BooleanQuery.Builder()
            .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)
            .add(rubyPython.build(), Occur.FILTER)
            .build();
    assertEquals("ruby skills in US", 1, s.count(query));

    r.close();
    dir.close();
  }

