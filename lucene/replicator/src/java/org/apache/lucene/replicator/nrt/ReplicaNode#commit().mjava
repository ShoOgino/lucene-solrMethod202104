  @Override
  public void commit() throws IOException {

    synchronized (commitLock) {
      SegmentInfos infos;
      Collection<String> indexFiles;

      synchronized (this) {
        infos = ((SegmentInfosSearcherManager) mgr).getCurrentInfos();
        indexFiles = infos.files(false);
        deleter.incRef(indexFiles);
      }

      message(
          "top: commit primaryGen="
              + lastPrimaryGen
              + " infos="
              + infos.toString()
              + " files="
              + indexFiles);

      // fsync all index files we are now referencing
      dir.sync(indexFiles);

      Map<String, String> commitData = new HashMap<>();
      commitData.put(PRIMARY_GEN_KEY, Long.toString(lastPrimaryGen));
      commitData.put(VERSION_KEY, Long.toString(getCurrentSearchingVersion()));
      infos.setUserData(commitData, false);

      // write and fsync a new segments_N
      infos.commit(dir);

      // Notify current infos (which may have changed while we were doing dir.sync above) what
      // generation we are up to; this way future
      // commits are guaranteed to go to the next (unwritten) generations:
      if (mgr != null) {
        ((SegmentInfosSearcherManager) mgr).getCurrentInfos().updateGeneration(infos);
      }
      String segmentsFileName = infos.getSegmentsFileName();
      message(
          "top: commit wrote segments file "
              + segmentsFileName
              + " version="
              + infos.getVersion()
              + " sis="
              + infos.toString()
              + " commitData="
              + commitData);
      deleter.incRef(Collections.singletonList(segmentsFileName));
      message("top: commit decRef lastCommitFiles=" + lastCommitFiles);
      deleter.decRef(lastCommitFiles);
      lastCommitFiles.clear();
      lastCommitFiles.addAll(indexFiles);
      lastCommitFiles.add(segmentsFileName);
      message("top: commit version=" + infos.getVersion() + " files now " + lastCommitFiles);
    }
  }

