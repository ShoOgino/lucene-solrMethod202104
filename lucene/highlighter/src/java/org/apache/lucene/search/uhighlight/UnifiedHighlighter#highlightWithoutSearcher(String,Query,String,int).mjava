  /**
   * Highlights text passed as a parameter. This requires the {@link IndexSearcher} provided to this
   * highlighter is null. This use-case is more rare. Naturally, the mode of operation will be
   * {@link OffsetSource#ANALYSIS}. The result of this method is whatever the {@link
   * PassageFormatter} returns. For the {@link DefaultPassageFormatter} and assuming {@code content}
   * has non-zero length, the result will be a non-null string -- so it's safe to call {@link
   * Object#toString()} on it in that case.
   *
   * @param field field name to highlight (as found in the query).
   * @param query query to highlight.
   * @param content text to highlight.
   * @param maxPassages The maximum number of top-N ranked passages used to form the highlighted
   *     snippets.
   * @return result of the {@link PassageFormatter} -- probably a String. Might be null.
   * @throws IOException if an I/O error occurred during processing
   */
  // TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked
  // multiple times?
  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)
      throws IOException {
    if (this.searcher != null) {
      throw new IllegalStateException(
          "highlightWithoutSearcher should only be called on a "
              + getClass().getSimpleName()
              + " without an IndexSearcher.");
    }
    Objects.requireNonNull(content, "content is required");
    Set<Term> queryTerms = extractTerms(query);
    return getFieldHighlighter(field, query, queryTerms, maxPassages)
        .highlightFieldForDoc(null, -1, content);
  }

