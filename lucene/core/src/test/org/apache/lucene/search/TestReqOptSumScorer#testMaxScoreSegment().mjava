  public void testMaxScoreSegment() throws IOException {
    Directory dir = newDirectory();
    IndexWriter w =
        new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));
    for (String[] values :
        Arrays.asList(
            new String[] {"A"}, // 0
            new String[] {"A"}, // 1
            new String[] {}, // 2
            new String[] {"A", "B"}, // 3
            new String[] {"A"}, // 4
            new String[] {"B"}, // 5
            new String[] {"A", "B"}, // 6
            new String[] {"B"} // 7
            )) {
      Document doc = new Document();
      for (String value : values) {
        doc.add(new StringField("foo", value, Store.NO));
      }
      w.addDocument(doc);
    }
    w.forceMerge(1);
    w.close();

    IndexReader reader = DirectoryReader.open(dir);
    IndexSearcher searcher = newSearcher(reader);
    final Query reqQ = new ConstantScoreQuery(new TermQuery(new Term("foo", "A")));
    final Query optQ = new ConstantScoreQuery(new TermQuery(new Term("foo", "B")));
    Scorer scorer = reqOptScorer(searcher, reqQ, optQ, false);
    assertEquals(0, scorer.iterator().nextDoc());
    assertEquals(1, scorer.score(), 0);
    assertEquals(1, scorer.iterator().nextDoc());
    assertEquals(1, scorer.score(), 0);
    assertEquals(3, scorer.iterator().nextDoc());
    assertEquals(2, scorer.score(), 0);
    assertEquals(4, scorer.iterator().nextDoc());
    assertEquals(1, scorer.score(), 0);
    assertEquals(6, scorer.iterator().nextDoc());
    assertEquals(2, scorer.score(), 0);
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    scorer = reqOptScorer(searcher, reqQ, optQ, false);
    scorer.setMinCompetitiveScore(Math.nextDown(1f));
    assertEquals(0, scorer.iterator().nextDoc());
    assertEquals(1, scorer.score(), 0);
    assertEquals(1, scorer.iterator().nextDoc());
    assertEquals(1, scorer.score(), 0);
    assertEquals(3, scorer.iterator().nextDoc());
    assertEquals(2, scorer.score(), 0);
    assertEquals(4, scorer.iterator().nextDoc());
    assertEquals(1, scorer.score(), 0);
    assertEquals(6, scorer.iterator().nextDoc());
    assertEquals(2, scorer.score(), 0);
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    scorer = reqOptScorer(searcher, reqQ, optQ, false);
    scorer.setMinCompetitiveScore(Math.nextUp(1f));
    assertEquals(3, scorer.iterator().nextDoc());
    assertEquals(2, scorer.score(), 0);
    assertEquals(6, scorer.iterator().nextDoc());
    assertEquals(2, scorer.score(), 0);
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    scorer = reqOptScorer(searcher, reqQ, optQ, true);
    scorer.setMinCompetitiveScore(Math.nextUp(2f));
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    reader.close();
    dir.close();
  }

