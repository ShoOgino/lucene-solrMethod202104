  @Test
  // 12-Jun-2018 @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 04-May-2018
  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 2-Aug-2018
  public void testSimpleSliceLeaderElection() throws Exception {
    String collection = "collection1";
    createCollection(collection);

    cluster.waitForActiveCollection(collection, 10, TimeUnit.SECONDS, 2, 6);
    List<JettySolrRunner> stoppedRunners = new ArrayList<>();
    for (int i = 0; i < 4; i++) {
      // who is the leader?
      String leader = getLeader(collection);
      JettySolrRunner jetty = getRunner(leader);
      assertNotNull(jetty);
      assertEquals("shard1", jetty.getCoreContainer().getCores().iterator().next()
              .getCoreDescriptor().getCloudDescriptor().getShardId());
      jetty.stop();
      stoppedRunners.add(jetty);
    }

    for (JettySolrRunner runner : stoppedRunners) {
      runner.start();
    }
    waitForState("Expected to see nodes come back " + collection, collection,
        (n, c) -> n.size() == 6);
    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());

    // testLeaderElectionAfterClientTimeout
    collection = "collection2";
    createCollection(collection);

    // TODO: work out the best timing here...
    System.setProperty("zkClientTimeout", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));
    // timeout the leader
    String leader = getLeader(collection);
    JettySolrRunner jetty = getRunner(leader);
    ZkController zkController = jetty.getCoreContainer().getZkController();

    zkController.getZkClient().getSolrZooKeeper().closeCnxn();
    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());

    for (int i = 0; i < 60; i++) { // wait till leader is changed
      if (jetty != getRunner(getLeader(collection))) {
        break;
      }
      Thread.sleep(100);
    }

    // make sure we have waited long enough for the first leader to have come back
    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);

    // kill everyone but the first leader that should have reconnected by now
    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {
      if (jetty != jetty2) {
        jetty2.stop();
      }
    }

    for (int i = 0; i < 320; i++) { // wait till leader is changed
      try {
        if (jetty == getRunner(getLeader(collection))) {
          break;
        }
        Thread.sleep(100);
      } catch (Exception e) {
        continue;
      }
    }

    assertEquals(jetty, getRunner(getLeader(collection)));
  }

