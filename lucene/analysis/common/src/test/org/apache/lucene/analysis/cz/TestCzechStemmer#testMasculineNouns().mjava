  /** Test showing how masculine noun forms conflate */
  public void testMasculineNouns() throws IOException {
    CzechAnalyzer cz = new CzechAnalyzer();

    /* animate ending with a hard consonant */
    assertAnalyzesTo(cz, "pán", new String[] {"pán"});
    assertAnalyzesTo(cz, "páni", new String[] {"pán"});
    assertAnalyzesTo(cz, "pánové", new String[] {"pán"});
    assertAnalyzesTo(cz, "pána", new String[] {"pán"});
    assertAnalyzesTo(cz, "pánů", new String[] {"pán"});
    assertAnalyzesTo(cz, "pánovi", new String[] {"pán"});
    assertAnalyzesTo(cz, "pánům", new String[] {"pán"});
    assertAnalyzesTo(cz, "pány", new String[] {"pán"});
    assertAnalyzesTo(cz, "páne", new String[] {"pán"});
    assertAnalyzesTo(cz, "pánech", new String[] {"pán"});
    assertAnalyzesTo(cz, "pánem", new String[] {"pán"});

    /* inanimate ending with hard consonant */
    assertAnalyzesTo(cz, "hrad", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hradu", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hrade", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hradem", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hrady", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hradech", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hradům", new String[] {"hrad"});
    assertAnalyzesTo(cz, "hradů", new String[] {"hrad"});

    /* animate ending with a soft consonant */
    assertAnalyzesTo(cz, "muž", new String[] {"muh"});
    assertAnalyzesTo(cz, "muži", new String[] {"muh"});
    assertAnalyzesTo(cz, "muže", new String[] {"muh"});
    assertAnalyzesTo(cz, "mužů", new String[] {"muh"});
    assertAnalyzesTo(cz, "mužům", new String[] {"muh"});
    assertAnalyzesTo(cz, "mužích", new String[] {"muh"});
    assertAnalyzesTo(cz, "mužem", new String[] {"muh"});

    /* inanimate ending with a soft consonant */
    assertAnalyzesTo(cz, "stroj", new String[] {"stroj"});
    assertAnalyzesTo(cz, "stroje", new String[] {"stroj"});
    assertAnalyzesTo(cz, "strojů", new String[] {"stroj"});
    assertAnalyzesTo(cz, "stroji", new String[] {"stroj"});
    assertAnalyzesTo(cz, "strojům", new String[] {"stroj"});
    assertAnalyzesTo(cz, "strojích", new String[] {"stroj"});
    assertAnalyzesTo(cz, "strojem", new String[] {"stroj"});

    /* ending with a */
    assertAnalyzesTo(cz, "předseda", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedové", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedy", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedů", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedovi", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedům", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedu", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedo", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedech", new String[] {"předsd"});
    assertAnalyzesTo(cz, "předsedou", new String[] {"předsd"});

    /* ending with e */
    assertAnalyzesTo(cz, "soudce", new String[] {"soudk"});
    assertAnalyzesTo(cz, "soudci", new String[] {"soudk"});
    assertAnalyzesTo(cz, "soudců", new String[] {"soudk"});
    assertAnalyzesTo(cz, "soudcům", new String[] {"soudk"});
    assertAnalyzesTo(cz, "soudcích", new String[] {"soudk"});
    assertAnalyzesTo(cz, "soudcem", new String[] {"soudk"});

    cz.close();
  }

