  public void testOverDecRefDuringReopen() throws Exception {
    MockDirectoryWrapper dir = newMockDirectory();

    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
    iwc.setCodec(TestUtil.getDefaultCodec());
    IndexWriter w = new IndexWriter(dir, iwc);
    Document doc = new Document();
    doc.add(newStringField("id", "id", Field.Store.NO));
    w.addDocument(doc);
    doc = new Document();
    doc.add(newStringField("id", "id2", Field.Store.NO));
    w.addDocument(doc);
    w.commit();

    // Open reader w/ one segment w/ 2 docs:
    DirectoryReader r = DirectoryReader.open(dir);

    // Delete 1 doc from the segment:
    // System.out.println("TEST: now delete");
    w.deleteDocuments(new Term("id", "id"));
    // System.out.println("TEST: now commit");
    w.commit();

    // Fail when reopen tries to open the live docs file:
    dir.failOn(
        new MockDirectoryWrapper.Failure() {

          boolean failed;

          @Override
          public void eval(MockDirectoryWrapper dir) throws IOException {
            if (failed) {
              return;
            }
            // System.out.println("failOn: ");
            // new Throwable().printStackTrace(System.out);
            if (callStackContainsAnyOf("readLiveDocs")) {
              if (VERBOSE) {
                System.out.println("TEST: now fail; exc:");
                new Throwable().printStackTrace(System.out);
              }
              failed = true;
              throw new FakeIOException();
            }
          }
        });

    // Now reopen:
    // System.out.println("TEST: now reopen");
    expectThrows(
        FakeIOException.class,
        () -> {
          DirectoryReader.openIfChanged(r);
        });

    IndexSearcher s = newSearcher(r);
    assertEquals(1, s.count(new TermQuery(new Term("id", "id"))));

    r.close();
    w.close();
    dir.close();
  }

