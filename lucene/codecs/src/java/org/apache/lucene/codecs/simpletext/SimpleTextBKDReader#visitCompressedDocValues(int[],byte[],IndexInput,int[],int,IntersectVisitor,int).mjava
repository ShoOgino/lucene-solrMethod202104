  private void visitCompressedDocValues(
      int[] commonPrefixLengths,
      byte[] scratchPackedValue,
      IndexInput in,
      int[] docIDs,
      int count,
      IntersectVisitor visitor,
      int compressedDim)
      throws IOException {
    // the byte at `compressedByteOffset` is compressed using run-length compression,
    // other suffix bytes are stored verbatim
    final int compressedByteOffset =
        compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];
    commonPrefixLengths[compressedDim]++;
    int i;
    for (i = 0; i < count; ) {
      scratchPackedValue[compressedByteOffset] = in.readByte();
      final int runLen = Byte.toUnsignedInt(in.readByte());
      for (int j = 0; j < runLen; ++j) {
        for (int dim = 0; dim < numDims; dim++) {
          int prefix = commonPrefixLengths[dim];
          in.readBytes(scratchPackedValue, dim * bytesPerDim + prefix, bytesPerDim - prefix);
        }
        visitor.visit(docIDs[i + j], scratchPackedValue);
      }
      i += runLen;
    }
    if (i != count) {
      throw new CorruptIndexException(
          "Sub blocks do not add up to the expected count: " + count + " != " + i, in);
    }
  }

