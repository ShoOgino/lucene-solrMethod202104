  @Override
  public Query makeQuery(SpatialArgs args) {
    final SpatialOperation op = args.getOperation();
    if (op != SpatialOperation.Intersects) throw new UnsupportedSpatialOperation(op);

    Shape shape = args.getShape();
    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));

    // --get a List of BytesRef for each term we want (no parents, no leaf bytes))
    final int GUESS_NUM_TERMS;
    if (shape instanceof Point) {
      GUESS_NUM_TERMS = detailLevel; // perfect guess
    } else {
      GUESS_NUM_TERMS = 4096; // should this be a method on SpatialPrefixTree?
    }

    BytesRefBuilder masterBytes = new BytesRefBuilder(); // shared byte array for all terms
    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);

    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);
    while (cells.hasNext()) {
      Cell cell = cells.next();
      if (!cell.isLeaf()) continue;
      BytesRef term = cell.getTokenBytesNoLeaf(null); // null because we want a new BytesRef
      // We copy out the bytes because it may be re-used across the iteration. This also gives us
      // the opportunity
      // to use one contiguous block of memory for the bytes of all terms we need.
      masterBytes.grow(masterBytes.length() + term.length);
      masterBytes.append(term);
      term.bytes = null; // don't need; will reset later
      term.offset = masterBytes.length() - term.length;
      terms.add(term);
    }
    // doing this now because if we did earlier, it's possible the bytes needed to grow()
    for (BytesRef byteRef : terms) {
      byteRef.bytes = masterBytes.bytes();
    }
    // unfortunately TermsQuery will needlessly sort & dedupe
    // TODO an automatonQuery might be faster?
    return new TermInSetQuery(getFieldName(), terms);
  }

