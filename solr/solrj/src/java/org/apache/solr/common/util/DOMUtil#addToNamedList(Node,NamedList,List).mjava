  /**
   * Examines a Node from the DOM representation of a NamedList and adds the
   * contents of that node to both the specified NamedList and List passed
   * as arguments.
   *
   * @param nd The Node whose type will be used to determine how to parse the
   *           text content.  If there is a 'name' attribute it will be used
   *           when adding to the NamedList
   * @param nlst A NamedList to add the item to with name if application.
   *             If this param is null it will be ignored.
   * @param arr A List to add the item to.
   *             If this param is null it will be ignored.
   */
  @SuppressWarnings("unchecked")
  public static void addToNamedList(Node nd,
                                    @SuppressWarnings({"rawtypes"})NamedList nlst,
                                    @SuppressWarnings({"rawtypes"})List arr) {
    // Nodes often include whitespace, etc... so just return if this
    // is not an Element.
    if (nd.getNodeType() != Node.ELEMENT_NODE) return;

    final String type = nd.getNodeName();

    final String name = getAttr(nd, NAME);

    Object val=null;

    if ("lst".equals(type)) {
      val = childNodesToNamedList(nd);
    } else if ("arr".equals(type)) {
      val = childNodesToList(nd);
    } else {
      final String textValue = getText(nd);
      val = parseVal(type, name, textValue);
    }

    if (nlst != null) nlst.add(name,val);
    if (arr != null) arr.add(val);
  }

