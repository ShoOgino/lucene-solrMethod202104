  public void testRandom() throws IOException {
    int size = atLeast(100);
    int dim = atLeast(10);
    int topK = 5;
    RandomVectorValues vectors = new RandomVectorValues(size, dim, random());
    HnswGraphBuilder builder = new HnswGraphBuilder(vectors, 10, 30, random().nextLong());
    HnswGraph hnsw = builder.build(vectors);
    int totalMatches = 0;
    for (int i = 0; i < 100; i++) {
      float[] query = randomVector(random(), dim);
      NeighborQueue actual = HnswGraph.search(query, topK, 100, vectors, hnsw, random());
      NeighborQueue expected = new NeighborQueue(topK, vectors.searchStrategy.reversed);
      for (int j = 0; j < size; j++) {
        float[] v = vectors.vectorValue(j);
        if (v != null) {
          expected.insertWithOverflow(j, vectors.searchStrategy.compare(query, vectors.vectorValue(j)));
        }
      }
      assertEquals(topK, actual.size());
      totalMatches += computeOverlap(actual.nodes(), expected.nodes());
    }
    double overlap = totalMatches / (double) (100 * topK) ;
    System.out.println("overlap=" + overlap + " totalMatches=" + totalMatches);
    assertTrue("overlap=" + overlap, overlap > 0.9);
  }

