  public void testManyReopensAndFields() throws Exception {
    Directory dir = newDirectory();
    final Random random = random();
    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));
    LogMergePolicy lmp = newLogMergePolicy();
    lmp.setMergeFactor(3); // merge often
    conf.setMergePolicy(lmp);
    IndexWriter writer = new IndexWriter(dir, conf);

    final boolean isNRT = random.nextBoolean();
    if (VERBOSE) {
      System.out.println("TEST: isNRT=" + isNRT);
    }
    DirectoryReader reader;
    if (isNRT) {
      reader = DirectoryReader.open(writer);
    } else {
      writer.commit();
      reader = DirectoryReader.open(dir);
    }

    final int numFields = random.nextInt(4) + 3; // 3-7
    final long[] fieldValues = new long[numFields];
    for (int i = 0; i < fieldValues.length; i++) {
      fieldValues[i] = 1;
    }

    int numRounds = atLeast(15);
    int docID = 0;
    for (int i = 0; i < numRounds; i++) {
      int numDocs = atLeast(5);
      if (VERBOSE) {
        System.out.println("TEST: round=" + i + ", numDocs=" + numDocs);
      }
      for (int j = 0; j < numDocs; j++) {
        Document doc = new Document();
        doc.add(new StringField("id", "doc-" + docID, Store.YES));
        doc.add(new StringField("key", "all", Store.NO)); // update key
        // add all fields with their current value
        for (int f = 0; f < fieldValues.length; f++) {
          doc.add(new NumericDocValuesField("f" + f, fieldValues[f]));
        }
        writer.addDocument(doc);
        if (VERBOSE) {
          System.out.println("TEST add doc id=" + docID);
        }
        ++docID;
      }

      int fieldIdx = random.nextInt(fieldValues.length);

      String updateField = "f" + fieldIdx;
      if (VERBOSE) {
        System.out.println(
            "TEST: update field="
                + updateField
                + " for all docs to value="
                + (fieldValues[fieldIdx] + 1));
      }
      writer.updateNumericDocValue(new Term("key", "all"), updateField, ++fieldValues[fieldIdx]);

      if (random.nextDouble() < 0.2) {
        int deleteDoc =
            random.nextInt(numDocs); // might also delete an already deleted document, ok!
        if (VERBOSE) {
          System.out.println("TEST: delete doc id=" + deleteDoc);
        }
        writer.deleteDocuments(new Term("id", "doc-" + deleteDoc));
      }

      // verify reader
      if (isNRT == false) {
        if (VERBOSE) {
          System.out.println("TEST: now commit");
        }
        writer.commit();
      }

      DirectoryReader newReader = DirectoryReader.openIfChanged(reader);
      assertNotNull(newReader);
      reader.close();
      reader = newReader;
      if (VERBOSE) {
        System.out.println("TEST: got reader maxDoc=" + reader.maxDoc() + " " + reader);
      }
      assertTrue(reader.numDocs() > 0); // we delete at most one document per round
      for (LeafReaderContext context : reader.leaves()) {
        LeafReader r = context.reader();
        Bits liveDocs = r.getLiveDocs();
        for (int field = 0; field < fieldValues.length; field++) {
          String f = "f" + field;
          NumericDocValues ndv = r.getNumericDocValues(f);
          assertNotNull(ndv);
          int maxDoc = r.maxDoc();
          for (int doc = 0; doc < maxDoc; doc++) {
            if (liveDocs == null || liveDocs.get(doc)) {
              assertEquals("advanced to wrong doc in seg=" + r, doc, ndv.advance(doc));
              assertEquals(
                  "invalid value for docID="
                      + doc
                      + " id="
                      + r.document(doc).get("id")
                      + ", field="
                      + f
                      + ", reader="
                      + r
                      + " doc="
                      + r.document(doc),
                  fieldValues[field],
                  ndv.longValue());
            }
          }
        }
      }
    }

    writer.close();
    IOUtils.close(reader, dir);
  }

