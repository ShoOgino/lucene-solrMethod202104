  /**
   * Removes an existing element currently stored in the PriorityQueue. Cost is linear with the size
   * of the queue. (A specialization of PriorityQueue which tracks element positions would provide a
   * constant remove time but the trade-off would be extra cost to all additions/insertions)
   */
  public final boolean remove(T element) {
    for (int i = 1; i <= size; i++) {
      if (heap[i] == element) {
        heap[i] = heap[size];
        heap[size] = null; // permit GC of objects
        size--;
        if (i <= size) {
          if (!upHeap(i)) {
            downHeap(i);
          }
        }
        return true;
      }
    }
    return false;
  }

