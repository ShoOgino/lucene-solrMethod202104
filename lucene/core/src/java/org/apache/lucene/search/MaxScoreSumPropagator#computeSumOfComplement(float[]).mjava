  /**
   * Return an array which, at index i, stores the sum of all entries of {@code v} except the one at
   * index i.
   */
  private static double[] computeSumOfComplement(float[] v) {
    // We do not use subtraction on purpose because it would defeat the
    // upperbound formula that we use for sums.
    // Naive approach would be O(n^2), but we can do O(n) by computing the
    // sum for i<j and i>j and then sum them.
    double[] sum1 = new double[v.length];
    for (int i = 1; i < sum1.length; ++i) {
      sum1[i] = sum1[i - 1] + v[i - 1];
    }

    double[] sum2 = new double[v.length];
    for (int i = sum2.length - 2; i >= 0; --i) {
      sum2[i] = sum2[i + 1] + v[i + 1];
    }

    double[] result = new double[v.length];
    for (int i = 0; i < result.length; ++i) {
      result[i] = sum1[i] + sum2[i];
    }
    return result;
  }

