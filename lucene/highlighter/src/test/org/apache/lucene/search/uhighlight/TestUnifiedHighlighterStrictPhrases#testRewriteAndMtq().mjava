  /**
   * Test it does *not* highlight the same term's not next to the span-near. "charlie" in this case.
   * This particular example exercises "Rewrite" plus "MTQ" in the same query.
   */
  public void testRewriteAndMtq() throws IOException {
    indexWriter.addDocument(newDoc("alpha bravo charlie - charlie bravo alpha"));
    initReaderSearcherHighlighter();

    SpanNearQuery snq =
        new SpanNearQuery(
            new SpanQuery[] {
              new SpanTermQuery(new Term("body", "bravo")),
              new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term("body", "ch")))
            }, // REWRITES
            0,
            true);

    BooleanQuery query =
        new BooleanQuery.Builder()
            .add(snq, BooleanClause.Occur.MUST)
            .add(new PrefixQuery(new Term("body", "al")), BooleanClause.Occur.MUST) // MTQ
            .add(newPhraseQuery("body", "alpha bravo"), BooleanClause.Occur.MUST)
            // add queries for other fields; we shouldn't highlight these because of that.
            .add(newPhraseQuery("title", "bravo alpha"), BooleanClause.Occur.SHOULD)
            .build();

    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    String[] snippets = highlighter.highlight("body", query, topDocs);

    if (highlighter.getFlags("body").contains(HighlightFlag.WEIGHT_MATCHES)) {
      assertArrayEquals(
          new String[] {"<b>alpha bravo</b> <b>charlie</b> - charlie bravo <b>alpha</b>"},
          snippets);
    } else {
      assertArrayEquals(
          new String[] {"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo <b>alpha</b>"},
          snippets);
    }

    // do again, this time with MTQ disabled.  We should only find "alpha bravo".
    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
    highlighter.setHandleMultiTermQuery(false); // disable but leave phrase processing enabled

    topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    snippets = highlighter.highlight("body", query, topDocs);

    assertArrayEquals(
        new String[] {"<b>alpha</b> <b>bravo</b> charlie - charlie bravo alpha"}, snippets);
  }

