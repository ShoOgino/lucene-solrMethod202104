  /**
   * Creates a new WordDelimiterGraphFilter
   *
   * @param in TokenStream to be filtered
   * @param adjustInternalOffsets if the offsets of partial terms should be adjusted
   * @param charTypeTable table containing character types
   * @param configurationFlags Flags configuring the filter
   * @param protWords If not null is the set of tokens to protect from being delimited
   */
  public WordDelimiterGraphFilter(
      TokenStream in,
      boolean adjustInternalOffsets,
      byte[] charTypeTable,
      int configurationFlags,
      CharArraySet protWords) {
    super(in);
    if ((configurationFlags
            & ~(GENERATE_WORD_PARTS
                | GENERATE_NUMBER_PARTS
                | CATENATE_WORDS
                | CATENATE_NUMBERS
                | CATENATE_ALL
                | PRESERVE_ORIGINAL
                | SPLIT_ON_CASE_CHANGE
                | SPLIT_ON_NUMERICS
                | STEM_ENGLISH_POSSESSIVE
                | IGNORE_KEYWORDS))
        != 0) {
      throw new IllegalArgumentException("flags contains unrecognized flag: " + configurationFlags);
    }
    this.flags = configurationFlags;
    this.protWords = protWords;
    this.iterator =
        new WordDelimiterIterator(
            charTypeTable,
            has(SPLIT_ON_CASE_CHANGE),
            has(SPLIT_ON_NUMERICS),
            has(STEM_ENGLISH_POSSESSIVE));
    this.adjustInternalOffsets = adjustInternalOffsets;
  }

