  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, PointsWriter writer)
      throws IOException {
    PointValues points =
        new MutablePointValues() {
          final int[] ords = new int[numPoints];

          {
            for (int i = 0; i < numPoints; ++i) {
              ords[i] = i;
            }
          }

          @Override
          public void intersect(IntersectVisitor visitor) throws IOException {
            final BytesRef scratch = new BytesRef();
            final byte[] packedValue = new byte[packedBytesLength];
            for (int i = 0; i < numPoints; i++) {
              getValue(i, scratch);
              assert scratch.length == packedValue.length;
              System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);
              visitor.visit(getDocID(i), packedValue);
            }
          }

          @Override
          public long estimatePointCount(IntersectVisitor visitor) {
            throw new UnsupportedOperationException();
          }

          @Override
          public byte[] getMinPackedValue() {
            throw new UnsupportedOperationException();
          }

          @Override
          public byte[] getMaxPackedValue() {
            throw new UnsupportedOperationException();
          }

          @Override
          public int getNumDimensions() {
            throw new UnsupportedOperationException();
          }

          @Override
          public int getNumIndexDimensions() {
            throw new UnsupportedOperationException();
          }

          @Override
          public int getBytesPerDimension() {
            throw new UnsupportedOperationException();
          }

          @Override
          public long size() {
            return numPoints;
          }

          @Override
          public int getDocCount() {
            return numDocs;
          }

          @Override
          public void swap(int i, int j) {
            int tmp = ords[i];
            ords[i] = ords[j];
            ords[j] = tmp;
          }

          @Override
          public int getDocID(int i) {
            return docIDs[ords[i]];
          }

          @Override
          public void getValue(int i, BytesRef packedValue) {
            final long offset = (long) packedBytesLength * ords[i];
            packedValue.length = packedBytesLength;
            bytes.setRawBytesRef(packedValue, offset);
          }

          @Override
          public byte getByteAt(int i, int k) {
            final long offset = (long) packedBytesLength * ords[i] + k;
            return bytes.readByte(offset);
          }
        };

    final PointValues values;
    if (sortMap == null) {
      values = points;
    } else {
      values = new MutableSortingPointValues((MutablePointValues) points, sortMap);
    }
    PointsReader reader =
        new PointsReader() {
          @Override
          public PointValues getValues(String fieldName) {
            if (fieldName.equals(fieldInfo.name) == false) {
              throw new IllegalArgumentException("fieldName must be the same");
            }
            return values;
          }

          @Override
          public void checkIntegrity() {
            throw new UnsupportedOperationException();
          }

          @Override
          public long ramBytesUsed() {
            return 0L;
          }

          @Override
          public void close() {}
        };
    writer.writeField(fieldInfo, reader);
  }

