  public static IndexReader wrapReader(IndexReader r) throws IOException {
    Random random = random();

    for (int i = 0, c = random.nextInt(6) + 1; i < c; i++) {
      switch (random.nextInt(5)) {
        case 0:
          // will create no FC insanity in atomic case, as ParallelLeafReader has own cache key:
          if (VERBOSE) {
            System.out.println(
                "NOTE: LuceneTestCase.wrapReader: wrapping previous reader="
                    + r
                    + " with ParallelLeaf/CompositeReader");
          }
          r =
              (r instanceof LeafReader)
                  ? new ParallelLeafReader((LeafReader) r)
                  : new ParallelCompositeReader((CompositeReader) r);
          break;
        case 1:
          if (r instanceof LeafReader) {
            final LeafReader ar = (LeafReader) r;
            final List<String> allFields = new ArrayList<>();
            for (FieldInfo fi : ar.getFieldInfos()) {
              allFields.add(fi.name);
            }
            Collections.shuffle(allFields, random);
            final int end = allFields.isEmpty() ? 0 : random.nextInt(allFields.size());
            final Set<String> fields = new HashSet<>(allFields.subList(0, end));
            // will create no FC insanity as ParallelLeafReader has own cache key:
            if (VERBOSE) {
              System.out.println(
                  "NOTE: LuceneTestCase.wrapReader: wrapping previous reader="
                      + r
                      + " with ParallelLeafReader");
            }
            r =
                new ParallelLeafReader(
                    new FieldFilterLeafReader(ar, fields, false),
                    new FieldFilterLeafReader(ar, fields, true));
          }
          break;
        case 2:
          // HÃ¤ckidy-Hick-Hack: a standard Reader will cause FC insanity, so we use
          // QueryUtils' reader with a fake cache key, so insanity checker cannot walk
          // along our reader:
          if (VERBOSE) {
            System.out.println(
                "NOTE: LuceneTestCase.wrapReader: wrapping previous reader="
                    + r
                    + " with AssertingLeaf/DirectoryReader");
          }
          if (r instanceof LeafReader) {
            r = new AssertingLeafReader((LeafReader) r);
          } else if (r instanceof DirectoryReader) {
            r = new AssertingDirectoryReader((DirectoryReader) r);
          }
          break;
        case 3:
          if (VERBOSE) {
            System.out.println(
                "NOTE: LuceneTestCase.wrapReader: wrapping previous reader="
                    + r
                    + " with MismatchedLeaf/DirectoryReader");
          }
          if (r instanceof LeafReader) {
            r = new MismatchedLeafReader((LeafReader) r, random);
          } else if (r instanceof DirectoryReader) {
            r = new MismatchedDirectoryReader((DirectoryReader) r, random);
          }
          break;
        case 4:
          if (VERBOSE) {
            System.out.println(
                "NOTE: LuceneTestCase.wrapReader: wrapping previous reader="
                    + r
                    + " with MergingCodecReader");
          }
          if (r instanceof CodecReader) {
            r = new MergingCodecReader((CodecReader) r);
          } else if (r instanceof DirectoryReader) {
            boolean allLeavesAreCodecReaders = true;
            for (LeafReaderContext ctx : r.leaves()) {
              if (ctx.reader() instanceof CodecReader == false) {
                allLeavesAreCodecReaders = false;
                break;
              }
            }
            if (allLeavesAreCodecReaders) {
              r = new MergingDirectoryReaderWrapper((DirectoryReader) r);
            }
          }
          break;
        default:
          fail("should not get here");
      }
    }

    if (VERBOSE) {
      System.out.println("wrapReader wrapped: " + r);
    }

    return r;
  }

