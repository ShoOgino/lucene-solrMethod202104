  // Tests that terms collected out of order due to being present in multiple Spans are handled
  // correctly
  // See LUCENE-8365
  public void testReverseOrderSpanCollection() throws IOException {
    // Processing order may depend on various optimizations or other weird factor.
    indexWriter.addDocument(newDoc("alpha bravo - alpha charlie"));
    indexWriter.addDocument(newDoc("alpha charlie - alpha bravo"));
    initReaderSearcherHighlighter();

    SpanNearQuery query =
        new SpanNearQuery(
            new SpanQuery[] {
              new SpanNearQuery(
                  new SpanQuery[] {
                    new SpanTermQuery(new Term("body", "alpha")),
                    new SpanTermQuery(new Term("body", "bravo"))
                  },
                  0,
                  true),
              new SpanNearQuery(
                  new SpanQuery[] {
                    new SpanTermQuery(new Term("body", "alpha")),
                    new SpanTermQuery(new Term("body", "charlie"))
                  },
                  0,
                  true)
            },
            10,
            false);

    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    String[] snippets = highlighter.highlight("body", query, topDocs);

    assertArrayEquals(
        new String[] {
          "<b>alpha</b> <b>bravo</b> - <b>alpha</b> <b>charlie</b>",
          "<b>alpha</b> <b>charlie</b> - <b>alpha</b> <b>bravo</b>",
        },
        snippets);
  }

