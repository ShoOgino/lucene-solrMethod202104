  // scan neighbors looking for diversity violations
  private int findNonDiverse(NeighborArray neighbors, RandomAccessVectorValues vectorValues)
      throws IOException {
    for (int i = neighbors.size() - 1; i >= 0; i--) {
      // check each neighbor against its better-scoring neighbors. If it fails diversity check with
      // them, drop it
      int nbrNode = neighbors.node[i];
      bound.set(neighbors.score[i]);
      float[] nbrVector = vectorValues.vectorValue(nbrNode);
      for (int j = maxConn; j > i; j--) {
        float diversityCheck =
            searchStrategy.compare(nbrVector, vectorValues.vectorValue(neighbors.node[j]));
        if (bound.check(diversityCheck) == false) {
          // node j is too similar to node i given its score relative to the base node
          // replace it with the new node, which is at [maxConn]
          return i;
        }
      }
    }
    return -1;
  }

