  public void testIntermediateClose() throws IOException, InterruptedException {
    Directory dir = newDirectory();
    // Test can deadlock if we use SMS:
    IndexWriter writer =
        new IndexWriter(
            dir,
            newIndexWriterConfig(new MockAnalyzer(random()))
                .setMergeScheduler(new ConcurrentMergeScheduler()));
    writer.addDocument(new Document());
    writer.commit();
    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);
    final CountDownLatch awaitClose = new CountDownLatch(1);
    final AtomicBoolean triedReopen = new AtomicBoolean(false);
    final ExecutorService es =
        random().nextBoolean()
            ? null
            : Executors.newCachedThreadPool(new NamedThreadFactory("testIntermediateClose"));
    final SearcherFactory factory =
        new SearcherFactory() {
          @Override
          public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {
            try {
              if (triedReopen.get()) {
                awaitEnterWarm.countDown();
                awaitClose.await();
              }
            } catch (InterruptedException e) {
              //
            }
            return new IndexSearcher(r, es);
          }
        };
    final SearcherManager searcherManager =
        random().nextBoolean()
            ? new SearcherManager(dir, factory)
            : new SearcherManager(writer, random().nextBoolean(), false, factory);
    if (VERBOSE) {
      System.out.println("sm created");
    }
    IndexSearcher searcher = searcherManager.acquire();
    try {
      assertEquals(1, searcher.getIndexReader().numDocs());
    } finally {
      searcherManager.release(searcher);
    }
    writer.addDocument(new Document());
    writer.commit();
    final AtomicBoolean success = new AtomicBoolean(false);
    final Throwable[] exc = new Throwable[1];
    Thread thread =
        new Thread(
            new Runnable() {
              @Override
              public void run() {
                try {
                  triedReopen.set(true);
                  if (VERBOSE) {
                    System.out.println("NOW call maybeRefresh");
                  }
                  searcherManager.maybeRefresh();
                  success.set(true);
                } catch (AlreadyClosedException e) {
                  // expected
                } catch (Throwable e) {
                  if (VERBOSE) {
                    System.out.println("FAIL: unexpected exc");
                    e.printStackTrace(System.out);
                  }
                  exc[0] = e;
                  // use success as the barrier here to make sure we see the write
                  success.set(false);
                }
              }
            });
    thread.start();
    if (VERBOSE) {
      System.out.println("THREAD started");
    }
    awaitEnterWarm.await();
    if (VERBOSE) {
      System.out.println("NOW call close");
    }
    searcherManager.close();
    awaitClose.countDown();
    thread.join();
    expectThrows(
        AlreadyClosedException.class,
        () -> {
          searcherManager.acquire();
        });
    assertFalse(success.get());
    assertTrue(triedReopen.get());
    assertNull("" + exc[0], exc[0]);
    writer.close();
    dir.close();
    if (es != null) {
      es.shutdown();
      es.awaitTermination(1, TimeUnit.SECONDS);
    }
  }

