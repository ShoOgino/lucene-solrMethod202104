  // very slow, and test sources are not here, so no clue how to fix
  @Test
  public void testGeoPolygonRect() {
    new AbstractRectIntersectionTestHelper(ctx) {

      @Override
      protected Shape generateRandomShape(Point nearP) {
        final Point centerPoint = randomPoint();
        final int maxDistance = random().nextInt(maxRadius - 20) + 20;
        final Circle pointZone = ctx.getShapeFactory().circle(centerPoint, maxDistance);
        final int vertexCount = random().nextInt(3) + 3;
        while (true) {
          ShapeFactory.PolygonBuilder builder = ctx.getShapeFactory().polygon();
          for (int i = 0; i < vertexCount; i++) {
            final Point point = randomPointIn(pointZone);
            builder.pointXY(point.getX(), point.getY());
          }
          try {
            return builder.build();
          } catch (IllegalArgumentException e) {
            // This is what happens when we create a shape that is invalid.  Although it is
            // conceivable that there are cases where
            // the exception is thrown incorrectly, we aren't going to be able to do that in this
            // random test.
            continue;
          }
        }
      }

      @Override
      protected Point randomPointInEmptyShape(Shape shape) {
        throw new IllegalStateException("unexpected; need to finish test code");
      }

      @Override
      protected int getWithinMinimum(int laps) {
        // Long/thin so lets just find 1.
        return 1;
      }
    }.testRelateWithRectangle();
  }

