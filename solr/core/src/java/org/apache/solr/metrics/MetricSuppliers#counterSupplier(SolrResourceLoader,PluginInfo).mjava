  /**
   * Create a {@link Counter} supplier.
   * @param loader resource loader
   * @param info plugin configuration, or null for default
   * @return configured supplier instance, or default instance if configuration was invalid
   */
  @SuppressWarnings({"unchecked"})
  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {
    if (info == null || info.className == null || info.className.trim().isEmpty()) {
      return new DefaultCounterSupplier();
    }
    if (MetricsConfig.NOOP_IMPL_CLASS.equals(info.className)) {
      return NoOpCounterSupplier.INSTANCE;
    }
    MetricRegistry.MetricSupplier<Counter> supplier;
    if (loader == null) {
      supplier = new DefaultCounterSupplier();
    } else {
      try {
        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);
      } catch (Exception e) {
        log.warn("Error creating custom Counter supplier (will use default): {}", info, e);
        supplier = new DefaultCounterSupplier();
      }
    }
    if (supplier instanceof PluginInfoInitialized) {
      ((PluginInfoInitialized)supplier).init(info);
    } else {
      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);
    }
    return supplier;
  }

