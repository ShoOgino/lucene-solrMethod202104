  /**
   * Like {@link Operations#run} except the incoming automaton is allowed to be non-deterministic.
   */
  private static boolean accepts(Automaton a, IntsRef path) {
    Set<Integer> states = new HashSet<>();
    states.add(0);
    Transition t = new Transition();
    for (int i = 0; i < path.length; i++) {
      int digit = path.ints[path.offset + i];
      Set<Integer> nextStates = new HashSet<>();
      for (int state : states) {
        int count = a.initTransition(state, t);
        for (int j = 0; j < count; j++) {
          a.getNextTransition(t);
          if (digit >= t.min && digit <= t.max) {
            nextStates.add(t.dest);
          }
        }
      }
      states = nextStates;
      if (states.isEmpty()) {
        return false;
      }
    }

    for (int state : states) {
      if (a.isAccept(state)) {
        return true;
      }
    }

    return false;
  }

