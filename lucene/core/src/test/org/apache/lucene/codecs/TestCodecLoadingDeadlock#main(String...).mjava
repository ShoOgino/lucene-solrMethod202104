  // This method is called in a spawned process.
  public static void main(final String... args) throws Exception {
    final String codecName = args[0];
    final String pfName = args[1];
    final String dvfName = args[2];

    final int numThreads = 14; // two times the modulo in switch statement below
    final CopyOnWriteArrayList<Thread> allThreads = new CopyOnWriteArrayList<>();
    final ExecutorService pool =
        Executors.newFixedThreadPool(
            numThreads,
            new NamedThreadFactory("deadlockchecker") {
              @Override
              public Thread newThread(Runnable r) {
                Thread t = super.newThread(r);
                allThreads.add(t);
                return t;
              }
            });

    final CyclicBarrier barrier = new CyclicBarrier(numThreads);
    IntStream.range(0, numThreads)
        .forEach(
            taskNo ->
                pool.execute(
                    () -> {
                      try {
                        // Await a common barrier point for all threads and then
                        // run racy code. This is intentional.
                        barrier.await();
                        switch (taskNo % 7) {
                          case 0:
                            Codec.getDefault();
                            break;
                          case 1:
                            Codec.forName(codecName);
                            break;
                          case 2:
                            PostingsFormat.forName(pfName);
                            break;
                          case 3:
                            DocValuesFormat.forName(dvfName);
                            break;
                          case 4:
                            Codec.availableCodecs();
                            break;
                          case 5:
                            PostingsFormat.availablePostingsFormats();
                            break;
                          case 6:
                            DocValuesFormat.availableDocValuesFormats();
                            break;
                          default:
                            throw new AssertionError();
                        }
                      } catch (Throwable t) {
                        synchronized (args) {
                          System.err.println(
                              Thread.currentThread().getName()
                                  + " failed to lookup codec service:");
                          t.printStackTrace(System.err);
                        }
                        Runtime.getRuntime().halt(1); // signal failure to caller
                      }
                    }));

    pool.shutdown();

    if (!pool.awaitTermination(MAX_TIME_SECONDS, TimeUnit.SECONDS)) {
      // Try to collect stacks so that we can better diagnose the failure.
      System.err.println(
          "Pool didn't return after "
              + MAX_TIME_SECONDS
              + " seconds, classloader deadlock? Dumping stack traces.");

      for (Thread t : allThreads) {
        System.err.println(
            "# Thread: "
                + t
                + ", "
                + "state: "
                + t.getState()
                + ", "
                + "stack:\n\t"
                + Arrays.stream(t.getStackTrace())
                    .map(Object::toString)
                    .collect(Collectors.joining("\t"))
                + "\n");
      }
      Runtime.getRuntime().halt(1); // signal failure to caller
    }
  }

