  public void testPostFilterIntrospection() throws Exception {
    final List<String> fieldValueSelectors = Arrays.asList("sort='bar_i asc'",
                                                           "min=bar_i",
                                                           "max=bar_i",
                                                           "min='sum(bar_i, 42)'",
                                                           "max='sum(bar_i, 42)'");
    for (SolrParams p : Arrays.asList(params(),
                                      // QEC boosting shouldn't impact what impl we get in any situation
                                      params("qt", "/elevate", "elevateIds", "42"))) {
                                             
      try (SolrQueryRequest req = req()) {
        // non-block based collapse sitautions, regardless of nullPolicy...
        for (String np : Arrays.asList("", " nullPolicy=ignore", " nullPolicy=expand", " nullPolicy=collapse",
                                       // when policy is 'collapse' hint should be ignored...
                                       " nullPolicy=collapse hint=block")) {
          assertThat(parseAndBuildCollector("{!collapse field=foo_s1"+np+"}", req), 
                     instanceOf(CollapsingQParserPlugin.OrdScoreCollector.class));
          assertThat(parseAndBuildCollector("{!collapse field=foo_i"+np+"}", req), 
                     instanceOf(CollapsingQParserPlugin.IntScoreCollector.class));
          for (String selector : fieldValueSelectors) {
            assertThat(parseAndBuildCollector("{!collapse field=foo_s1 " + selector + np + "}", req), 
                       instanceOf(CollapsingQParserPlugin.OrdFieldValueCollector.class));
          }
          for (String selector : fieldValueSelectors) {
            assertThat(parseAndBuildCollector("{!collapse field=foo_i " + selector + np + "}", req), 
                       instanceOf(CollapsingQParserPlugin.IntFieldValueCollector.class));
          }
          
          // anything with cscore() is (currently) off limits regardless of null policy or hint...
          for (String selector : Arrays.asList(" min=sum(42,cscore())",
                                               " max=cscore()")) {
            for (String hint : Arrays.asList("", " hint=block")) {
              assertThat(parseAndBuildCollector("{!collapse field=_root_" + selector + np + hint + "}", req), 
                         instanceOf(CollapsingQParserPlugin.OrdFieldValueCollector.class));
              assertThat(parseAndBuildCollector("{!collapse field=foo_s1" + selector + np + hint + "}", req), 
                         instanceOf(CollapsingQParserPlugin.OrdFieldValueCollector.class));
              assertThat(parseAndBuildCollector("{!collapse field=foo_i" + selector + np + hint + "}", req), 
                         instanceOf(CollapsingQParserPlugin.IntFieldValueCollector.class));
            }
          }
        }
        
        // block based collectors as long as nullPolicy isn't collapse...
        for (String np : Arrays.asList("", " nullPolicy=ignore", " nullPolicy=expand")) {
          assertThat(parseAndBuildCollector("{!collapse field=_root_"+np+"}", req),             // implicit block collection on _root_
                     instanceOf(CollapsingQParserPlugin.BlockOrdScoreCollector.class));
          assertThat(parseAndBuildCollector("{!collapse field=_root_ hint=top_fc"+np+"}", req), // top_fc shouldn't stop implicit block collection
                     instanceOf(CollapsingQParserPlugin.BlockOrdScoreCollector.class));
          assertThat(parseAndBuildCollector("{!collapse field=foo_s1 hint=block"+np+"}", req),
                     instanceOf(CollapsingQParserPlugin.BlockOrdScoreCollector.class));
          assertThat(parseAndBuildCollector("{!collapse field=foo_i hint=block"+np+"}", req),
                     instanceOf(CollapsingQParserPlugin.BlockIntScoreCollector.class));
          for (String selector : fieldValueSelectors) {
            assertThat(parseAndBuildCollector("{!collapse field=foo_s1 hint=block " + selector + np + "}", req), 
                       instanceOf(CollapsingQParserPlugin.BlockOrdSortSpecCollector.class));
          }
          for (String selector : fieldValueSelectors) {
            assertThat(parseAndBuildCollector("{!collapse field=foo_i hint=block " + selector + np + "}", req), 
                       instanceOf(CollapsingQParserPlugin.BlockIntSortSpecCollector.class));
          }
        }
      
      }
    }
    
  }

