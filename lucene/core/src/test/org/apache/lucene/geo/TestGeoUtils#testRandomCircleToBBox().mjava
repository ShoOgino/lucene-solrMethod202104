  // We rely heavily on GeoUtils.circleToBBox so we test it here:
  public void testRandomCircleToBBox() throws Exception {
    int iters = atLeast(100);
    for (int iter = 0; iter < iters; iter++) {

      double centerLat = GeoTestUtil.nextLatitude();
      double centerLon = GeoTestUtil.nextLongitude();

      final double radiusMeters;
      if (random().nextBoolean()) {
        // Approx 4 degrees lon at the equator:
        radiusMeters = random().nextDouble() * 444000;
      } else {
        radiusMeters = random().nextDouble() * 50000000;
      }

      // TODO: randomly quantize radius too, to provoke exact math errors?

      Rectangle bbox = Rectangle.fromPointDistance(centerLat, centerLon, radiusMeters);

      int numPointsToTry = 1000;
      for (int i = 0; i < numPointsToTry; i++) {

        double point[] = GeoTestUtil.nextPointNear(bbox);
        double lat = point[0];
        double lon = point[1];

        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);

        // Haversin says it's within the circle:
        boolean haversinSays = distanceMeters <= radiusMeters;

        // BBox says its within the box:
        boolean bboxSays;
        if (bbox.crossesDateline()) {
          if (lat >= bbox.minLat && lat <= bbox.maxLat) {
            bboxSays = lon <= bbox.maxLon || lon >= bbox.minLon;
          } else {
            bboxSays = false;
          }
        } else {
          bboxSays =
              lat >= bbox.minLat && lat <= bbox.maxLat && lon >= bbox.minLon && lon <= bbox.maxLon;
        }

        if (haversinSays) {
          if (bboxSays == false) {
            System.out.println(
                "centerLat="
                    + centerLat
                    + " centerLon="
                    + centerLon
                    + " radiusMeters="
                    + radiusMeters);
            System.out.println(
                "  bbox: lat="
                    + bbox.minLat
                    + " to "
                    + bbox.maxLat
                    + " lon="
                    + bbox.minLon
                    + " to "
                    + bbox.maxLon);
            System.out.println("  point: lat=" + lat + " lon=" + lon);
            System.out.println("  haversin: " + distanceMeters);
            fail(
                "point was within the distance according to haversin, but the bbox doesn't contain it");
          }
        } else {
          // it's fine if haversin said it was outside the radius and bbox said it was inside the
          // box
        }
      }
    }
  }

