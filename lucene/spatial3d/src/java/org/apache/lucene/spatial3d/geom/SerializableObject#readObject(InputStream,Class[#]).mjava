  /**
   * Instantiate a serializable object from a stream without a planet model.
   *
   * @param inputStream is the input stream.
   * @param clazz is the class to instantiate.
   */
  static SerializableObject readObject(final InputStream inputStream, final Class<?> clazz)
      throws IOException {
    try {
      // Look for the right constructor
      final Constructor<?> c = clazz.getDeclaredConstructor(InputStream.class);
      // Invoke it
      final Object object = c.newInstance(inputStream);
      // check whether caste will work
      if (!(object instanceof SerializableObject)) {
        throw new IOException(
            "Object " + clazz.getName() + " does not implement SerializableObject");
      }
      return (SerializableObject) object;
    } catch (InstantiationException e) {
      throw new IOException(
          "Instantiation exception for class " + clazz.getName() + ": " + e.getMessage(), e);
    } catch (IllegalAccessException e) {
      throw new IOException(
          "Illegal access creating class " + clazz.getName() + ": " + e.getMessage(), e);
    } catch (NoSuchMethodException e) {
      throw new IOException(
          "No such method exception for class " + clazz.getName() + ": " + e.getMessage(), e);
    } catch (InvocationTargetException e) {
      throw new IOException(
          "Exception instantiating class " + clazz.getName() + ": " + e.getMessage(), e);
    }
  }

