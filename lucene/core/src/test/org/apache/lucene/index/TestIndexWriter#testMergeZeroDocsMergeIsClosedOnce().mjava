  public void testMergeZeroDocsMergeIsClosedOnce() throws IOException {
    LogDocMergePolicy keepAllSegments =
        new LogDocMergePolicy() {
          @Override
          public boolean keepFullyDeletedSegment(IOSupplier<CodecReader> readerIOSupplier) {
            return true;
          }
        };
    try (Directory dir = newDirectory()) {
      try (IndexWriter writer =
          new IndexWriter(
              dir,
              new IndexWriterConfig()
                  .setMergePolicy(
                      new OneMergeWrappingMergePolicy(
                          keepAllSegments,
                          merge -> {
                            SetOnce<Boolean> onlyFinishOnce = new SetOnce<>();
                            return new MergePolicy.OneMerge(merge.segments) {
                              @Override
                              public void mergeFinished(boolean success, boolean segmentDropped)
                                  throws IOException {
                                super.mergeFinished(success, segmentDropped);
                                onlyFinishOnce.set(true);
                              }
                            };
                          })))) {
        Document doc = new Document();
        doc.add(new StringField("id", "1", Field.Store.NO));
        writer.addDocument(doc);
        writer.flush();
        writer.addDocument(doc);
        writer.flush();
        writer.deleteDocuments(new Term("id", "1"));
        writer.flush();
        assertEquals(2, writer.getSegmentCount());
        assertEquals(0, writer.getDocStats().numDocs);
        assertEquals(2, writer.getDocStats().maxDoc);
        writer.forceMerge(1);
      }
    }
  }

