  public void testIteratorRandom() {
    LongHeap.Order order;
    if (random().nextBoolean()) {
      order = MIN;
    } else {
      order = MAX;
    }
    final int maxSize = TestUtil.nextInt(random(), 1, 20);
    LongHeap queue = LongHeap.create(order, maxSize);
    final int iters = atLeast(100);
    final List<Long> expected = new ArrayList<>();
    for (int iter = 0; iter < iters; ++iter) {
      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {
        final long value = random().nextInt(10);
        queue.push(value);
        expected.add(value);
      } else {
        expected.remove(Long.valueOf(queue.pop()));
      }
      List<Long> actual = new ArrayList<>();
      LongHeap.LongIterator it = queue.iterator();
      while (it.hasNext()) {
        actual.add(it.next());
      }
      CollectionUtil.introSort(expected);
      CollectionUtil.introSort(actual);
      assertEquals(expected, actual);
    }
  }

