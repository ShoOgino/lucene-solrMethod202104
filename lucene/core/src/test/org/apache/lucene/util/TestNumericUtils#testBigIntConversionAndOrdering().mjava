  /**
   * generate a series of encoded BigIntegers, each numerical one bigger than the one before. check
   * for correct ordering of the encoded bytes and that values round-trip.
   */
  public void testBigIntConversionAndOrdering() throws Exception {
    // we need at least 3 bytes of storage.
    int size = TestUtil.nextInt(random(), 3, 16);
    BytesRef previous = null;
    BytesRef current = new BytesRef(new byte[size]);
    for (long value = -100000L; value < 100000L; value++) {
      NumericUtils.bigIntToSortableBytes(
          BigInteger.valueOf(value), size, current.bytes, current.offset);
      if (previous == null) {
        previous = new BytesRef(new byte[size]);
      } else {
        // test if smaller
        assertTrue("current bigger than previous: ", previous.compareTo(current) < 0);
      }
      // test is back and forward conversion works
      assertEquals(
          "forward and back conversion should generate same BigInteger",
          BigInteger.valueOf(value),
          NumericUtils.sortableBytesToBigInt(current.bytes, current.offset, current.length));
      // next step
      System.arraycopy(
          current.bytes, current.offset, previous.bytes, previous.offset, current.length);
    }
  }

