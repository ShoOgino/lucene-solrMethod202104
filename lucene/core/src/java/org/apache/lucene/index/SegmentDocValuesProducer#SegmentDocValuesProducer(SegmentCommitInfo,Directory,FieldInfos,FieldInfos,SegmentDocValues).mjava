  /**
   * Creates a new producer that handles updated docvalues fields
   *
   * @param si commit point
   * @param dir directory
   * @param coreInfos fieldinfos for the segment
   * @param allInfos all fieldinfos including updated ones
   * @param segDocValues producer map
   */
  SegmentDocValuesProducer(
      SegmentCommitInfo si,
      Directory dir,
      FieldInfos coreInfos,
      FieldInfos allInfos,
      SegmentDocValues segDocValues)
      throws IOException {
    try {
      DocValuesProducer baseProducer = null;
      for (FieldInfo fi : allInfos) {
        if (fi.getDocValuesType() == DocValuesType.NONE) {
          continue;
        }
        long docValuesGen = fi.getDocValuesGen();
        if (docValuesGen == -1) {
          if (baseProducer == null) {
            // the base producer gets the original fieldinfos it wrote
            baseProducer = segDocValues.getDocValuesProducer(docValuesGen, si, dir, coreInfos);
            dvGens.add(docValuesGen);
            dvProducers.add(baseProducer);
          }
          dvProducersByField.put(fi.name, baseProducer);
        } else {
          assert !dvGens.contains(docValuesGen);
          // otherwise, producer sees only the one fieldinfo it wrote
          final DocValuesProducer dvp =
              segDocValues.getDocValuesProducer(
                  docValuesGen, si, dir, new FieldInfos(new FieldInfo[] {fi}));
          dvGens.add(docValuesGen);
          dvProducers.add(dvp);
          dvProducersByField.put(fi.name, dvp);
        }
      }
    } catch (Throwable t) {
      try {
        segDocValues.decRef(dvGens);
      } catch (Throwable t1) {
        t.addSuppressed(t1);
      }
      throw t;
    }
  }

