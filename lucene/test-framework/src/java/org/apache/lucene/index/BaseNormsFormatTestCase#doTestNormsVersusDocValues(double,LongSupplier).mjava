  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {
    int numDocs = atLeast(500);
    final FixedBitSet docsWithField = new FixedBitSet(numDocs);
    final int numDocsWithField = Math.max(1, (int) (density * numDocs));
    if (numDocsWithField == numDocs) {
      docsWithField.set(0, numDocs);
    } else {
      int i = 0;
      while (i < numDocsWithField) {
        int doc = random().nextInt(numDocs);
        if (docsWithField.get(doc) == false) {
          docsWithField.set(doc);
          ++i;
        }
      }
    }
    long norms[] = new long[numDocsWithField];
    for (int i = 0; i < numDocsWithField; i++) {
      norms[i] = longs.getAsLong();
    }

    Directory dir = applyCreatedVersionMajor(newDirectory());
    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
    IndexWriterConfig conf = newIndexWriterConfig(analyzer);
    CannedNormSimilarity sim = new CannedNormSimilarity(norms);
    conf.setSimilarity(sim);
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);
    Document doc = new Document();
    Field idField = new StringField("id", "", Field.Store.NO);
    Field indexedField = new TextField("indexed", "", Field.Store.NO);
    Field dvField = new NumericDocValuesField("dv", 0);
    doc.add(idField);
    doc.add(indexedField);
    doc.add(dvField);

    for (int i = 0, j = 0; i < numDocs; i++) {
      idField.setStringValue(Integer.toString(i));
      if (docsWithField.get(i) == false) {
        Document doc2 = new Document();
        doc2.add(idField);
        writer.addDocument(doc2);
      } else {
        long value = norms[j++];
        dvField.setLongValue(value);
        // only empty fields may have 0 as a norm
        indexedField.setStringValue(value == 0 ? "" : "a");
        writer.addDocument(doc);
      }
      if (random().nextInt(31) == 0) {
        writer.commit();
      }
    }

    // delete some docs
    int numDeletions = random().nextInt(numDocs / 20);
    for (int i = 0; i < numDeletions; i++) {
      int id = random().nextInt(numDocs);
      writer.deleteDocuments(new Term("id", Integer.toString(id)));
    }

    writer.commit();

    // compare
    DirectoryReader ir = maybeWrapWithMergingReader(DirectoryReader.open(dir));
    checkNormsVsDocValues(ir);
    ir.close();

    writer.forceMerge(1);

    // compare again
    ir = maybeWrapWithMergingReader(DirectoryReader.open(dir));
    checkNormsVsDocValues(ir);

    writer.close();
    ir.close();
    dir.close();
  }

