    /**
     * Constructor.
     *
     * @param pointList is the list of points.
     * @param internalEdges is the list of edges that are internal (includes return edge)
     * @param startPlaneStartIndex is the index of the startPlane's starting point
     * @param startPlaneEndIndex is the index of the startPlane's ending point
     * @param startPlane is the starting plane
     */
    public EdgeBuffer(
        final List<GeoPoint> pointList,
        final BitSet internalEdges,
        final int startPlaneStartIndex,
        final int startPlaneEndIndex,
        final SidedPlane startPlane) {
      /*
      System.out.println("Start plane index: "+startPlaneStartIndex+" End plane index: "+startPlaneEndIndex+" Initial points:");
      for (final GeoPoint p : pointList) {
        System.out.println(" "+p);
      }
      */

      final Edge startEdge =
          new Edge(
              pointList.get(startPlaneStartIndex),
              pointList.get(startPlaneEndIndex),
              startPlane,
              internalEdges.get(startPlaneStartIndex));
      // Fill in the EdgeBuffer by walking around creating more stuff
      Edge currentEdge = startEdge;
      int startIndex = startPlaneStartIndex;
      int endIndex = startPlaneEndIndex;
      while (true) {
        /*
        System.out.println("For plane "+currentEdge.plane+", the following points are in/out:");
        for (final GeoPoint p: pointList) {
          System.out.println(" "+p+" is: "+(currentEdge.plane.isWithin(p)?"in":"out"));
        }
        */

        // Check termination condition
        if (currentEdge.endPoint == startEdge.startPoint) {
          // We finish here.  Link the current edge to the start edge, and exit
          previousEdges.put(startEdge, currentEdge);
          nextEdges.put(currentEdge, startEdge);
          edges.add(startEdge);
          break;
        }

        // Compute the next edge
        startIndex = endIndex;
        endIndex++;
        if (endIndex >= pointList.size()) {
          endIndex -= pointList.size();
        }
        // Get the next point
        final GeoPoint newPoint = pointList.get(endIndex);
        // Build the new edge
        // We need to know the sidedness of the new plane.  The point we're going to be presenting
        // to it has a certain relationship with the sided plane we already have for the current
        // edge.  If the current edge is colinear with the new edge, then we want to maintain the
        // same relationship.  If the new edge is not colinear, then we can use the new point's
        // relationship with the current edge as our guide.

        final boolean isNewPointWithin = currentEdge.plane.isWithin(newPoint);
        final GeoPoint pointToPresent = currentEdge.startPoint;

        final SidedPlane newPlane =
            new SidedPlane(pointToPresent, isNewPointWithin, pointList.get(startIndex), newPoint);
        final Edge newEdge =
            new Edge(
                pointList.get(startIndex),
                pointList.get(endIndex),
                newPlane,
                internalEdges.get(startIndex));

        // Link it in
        previousEdges.put(newEdge, currentEdge);
        nextEdges.put(currentEdge, newEdge);
        edges.add(newEdge);
        currentEdge = newEdge;
      }

      oneEdge = startEdge;

      // Verify the structure.
      // verify();
    }

