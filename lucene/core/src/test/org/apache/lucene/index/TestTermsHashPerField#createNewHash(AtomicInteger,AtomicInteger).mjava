  private static TermsHashPerField createNewHash(AtomicInteger newCalled, AtomicInteger addCalled) {
    IntBlockPool intBlockPool = new IntBlockPool();
    ByteBlockPool byteBlockPool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());
    ByteBlockPool termBlockPool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());

    TermsHashPerField hash =
        new TermsHashPerField(
            1,
            intBlockPool,
            byteBlockPool,
            termBlockPool,
            Counter.newCounter(),
            null,
            "testfield",
            IndexOptions.DOCS_AND_FREQS) {

          private FreqProxTermsWriterPerField.FreqProxPostingsArray freqProxPostingsArray;

          @Override
          void newTerm(int termID, int docID) {
            newCalled.incrementAndGet();
            FreqProxTermsWriterPerField.FreqProxPostingsArray postings = freqProxPostingsArray;
            postings.lastDocIDs[termID] = docID;
            postings.lastDocCodes[termID] = docID << 1;
            postings.termFreqs[termID] = 1;
          }

          @Override
          void addTerm(int termID, int docID) {
            addCalled.incrementAndGet();
            FreqProxTermsWriterPerField.FreqProxPostingsArray postings = freqProxPostingsArray;
            if (docID != postings.lastDocIDs[termID]) {
              if (1 == postings.termFreqs[termID]) {
                writeVInt(0, postings.lastDocCodes[termID] | 1);
              } else {
                writeVInt(0, postings.lastDocCodes[termID]);
                writeVInt(0, postings.termFreqs[termID]);
              }
              postings.termFreqs[termID] = 1;
              postings.lastDocCodes[termID] = (docID - postings.lastDocIDs[termID]) << 1;
              postings.lastDocIDs[termID] = docID;
            } else {
              postings.termFreqs[termID] = Math.addExact(postings.termFreqs[termID], 1);
            }
          }

          @Override
          void newPostingsArray() {
            freqProxPostingsArray =
                (FreqProxTermsWriterPerField.FreqProxPostingsArray) postingsArray;
          }

          @Override
          ParallelPostingsArray createPostingsArray(int size) {
            return new FreqProxTermsWriterPerField.FreqProxPostingsArray(size, true, false, false);
          }
        };
    return hash;
  }

