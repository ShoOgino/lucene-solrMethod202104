  private synchronized void _transferAndCancel(CopyJob prevJob) throws IOException {

    // Caller must already be sync'd on prevJob:
    assert Thread.holdsLock(prevJob);

    if (prevJob.exc != null) {
      // Already cancelled
      dest.message("xfer: prevJob was already cancelled; skip transfer");
      return;
    }

    // Cancel the previous job
    prevJob.exc = new Throwable();

    // Carry over already copied files that we also want to copy
    Iterator<Map.Entry<String, FileMetaData>> it = toCopy.iterator();
    long bytesAlreadyCopied = 0;

    // Iterate over all files we think we need to copy:
    while (it.hasNext()) {
      Map.Entry<String, FileMetaData> ent = it.next();
      String fileName = ent.getKey();
      String prevTmpFileName = prevJob.copiedFiles.get(fileName);
      if (prevTmpFileName != null) {
        // This fileName is common to both jobs, and the old job already finished copying it (to a
        // temp file), so we keep it:
        long fileLength = ent.getValue().length;
        bytesAlreadyCopied += fileLength;
        dest.message(
            "xfer: carry over already-copied file "
                + fileName
                + " ("
                + prevTmpFileName
                + ", "
                + fileLength
                + " bytes)");
        copiedFiles.put(fileName, prevTmpFileName);

        // So we don't try to delete it, below:
        prevJob.copiedFiles.remove(fileName);

        // So it's not in our copy list anymore:
        it.remove();
      } else if (prevJob.current != null && prevJob.current.name.equals(fileName)) {
        // This fileName is common to both jobs, and it's the file that the previous job was in the
        // process of copying.  In this case
        // we continue copying it from the prevoius job.  This is important for cases where we are
        // copying over a large file
        // because otherwise we could keep failing the NRT copy and restarting this file from the
        // beginning and never catch up:
        dest.message(
            "xfer: carry over in-progress file "
                + fileName
                + " ("
                + prevJob.current.tmpName
                + ") bytesCopied="
                + prevJob.current.getBytesCopied()
                + " of "
                + prevJob.current.bytesToCopy);
        bytesAlreadyCopied += prevJob.current.getBytesCopied();

        assert current == null;

        // must set current first, before writing/read to c.in/out in case that hits an exception,
        // so that we then close the temp
        // IndexOutput when cancelling ourselves:
        current = newCopyOneFile(prevJob.current);

        // Tell our new (primary) connection we'd like to copy this file first, but resuming from
        // how many bytes we already copied last time:
        // We do this even if bytesToCopy == bytesCopied, because we still need to readLong() the
        // checksum from the primary connection:
        assert prevJob.current.getBytesCopied() <= prevJob.current.bytesToCopy;

        prevJob.current = null;

        totBytes += current.metaData.length;

        // So it's not in our copy list anymore:
        it.remove();
      } else {
        dest.message("xfer: file " + fileName + " will be fully copied");
      }
    }
    dest.message("xfer: " + bytesAlreadyCopied + " bytes already copied of " + totBytes);

    // Delete all temp files the old job wrote but we don't need:
    dest.message("xfer: now delete old temp files: " + prevJob.copiedFiles.values());
    IOUtils.deleteFilesIgnoringExceptions(dest.dir, prevJob.copiedFiles.values());

    if (prevJob.current != null) {
      IOUtils.closeWhileHandlingException(prevJob.current);
      if (Node.VERBOSE_FILES) {
        dest.message("remove partial file " + prevJob.current.tmpName);
      }
      dest.deleter.deleteNewFile(prevJob.current.tmpName);
      prevJob.current = null;
    }
  }

