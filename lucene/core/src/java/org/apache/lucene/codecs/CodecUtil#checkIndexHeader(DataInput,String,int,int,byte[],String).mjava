  /**
   * Reads and validates a header previously written with {@link #writeIndexHeader(DataOutput,
   * String, int, byte[], String)}.
   *
   * <p>When reading a file, supply the expected <code>codec</code>, expected version range (<code>
   * minVersion to maxVersion</code>), and object ID and suffix.
   *
   * @param in Input stream, positioned at the point where the header was previously written.
   *     Typically this is located at the beginning of the file.
   * @param codec The expected codec name.
   * @param minVersion The minimum supported expected version number.
   * @param maxVersion The maximum supported expected version number.
   * @param expectedID The expected object identifier for this file.
   * @param expectedSuffix The expected auxiliary suffix for this file.
   * @return The actual version found, when a valid header is found that matches <code>codec</code>,
   *     with an actual version where {@code minVersion <= actual <= maxVersion}, and matching
   *     <code>expectedID</code> and <code>expectedSuffix</code> Otherwise an exception is thrown.
   * @throws CorruptIndexException If the first four bytes are not {@link #CODEC_MAGIC}, or if the
   *     actual codec found is not <code>codec</code>, or if the <code>expectedID</code> or <code>
   *     expectedSuffix</code> do not match.
   * @throws IndexFormatTooOldException If the actual version is less than <code>minVersion</code>.
   * @throws IndexFormatTooNewException If the actual version is greater than <code>maxVersion
   *     </code>.
   * @throws IOException If there is an I/O error reading from the underlying medium.
   * @see #writeIndexHeader(DataOutput, String, int, byte[],String)
   */
  public static int checkIndexHeader(
      DataInput in,
      String codec,
      int minVersion,
      int maxVersion,
      byte[] expectedID,
      String expectedSuffix)
      throws IOException {
    int version = checkHeader(in, codec, minVersion, maxVersion);
    checkIndexHeaderID(in, expectedID);
    checkIndexHeaderSuffix(in, expectedSuffix);
    return version;
  }

