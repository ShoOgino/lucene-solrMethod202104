    public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({"rawtypes"}) NamedList results) throws Exception {

      final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);
      //the rest of the processing is based on writing cluster state properties
      //remove the property here to avoid any errors down the pipeline due to this property appearing
      String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);

      if (configName != null) {
        CollectionHandlingUtils.validateConfigOrThrowSolrException(ccc.getSolrCloudManager(), configName);

        CollectionHandlingUtils.createConfNode(ccc.getSolrCloudManager().getDistribStateManager(), configName, collectionName);
        new ReloadCollectionCmd(ccc).call(clusterState, new ZkNodeProps(NAME, collectionName), results);
      }

      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {
        // Apply the state update right away. The wait will still be useful for the change to be visible in the local cluster state (watchers have fired).
        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionModifyCollection, message,
            ccc.getSolrCloudManager(), ccc.getZkStateReader());
      } else {
        ccc.offerStateUpdate(Utils.toJSON(message));
      }

      try {
        ccc.getZkStateReader().waitForState(collectionName, 30, TimeUnit.SECONDS, c -> {
          if (c == null) return false;

          for (Map.Entry<String, Object> updateEntry : message.getProperties().entrySet()) {
            String updateKey = updateEntry.getKey();

            if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)
                && !updateKey.equals(Overseer.QUEUE_OPERATION)
                && updateEntry.getValue() != null // handled below in a separate conditional
                && !updateEntry.getValue().equals(c.get(updateKey))) {
              return false;
            }
            if (updateEntry.getValue() == null && c.containsKey(updateKey)) {
              return false;
            }
          }

          return true;
        });
      } catch (TimeoutException | InterruptedException e) {
        SolrZkClient.checkInterrupted(e);
        log.debug("modifyCollection(ClusterState={}, ZkNodeProps={}, NamedList={})", clusterState, message, results, e);
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Failed to modify collection", e);
      }

      // if switching to/from read-only mode reload the collection
      if (message.keySet().contains(ZkStateReader.READ_ONLY)) {
        new ReloadCollectionCmd(ccc).call(clusterState, new ZkNodeProps(NAME, collectionName), results);
      }
    }

