  /**
   * We'll make two queries, one with- and another one without summary
   * and assert that documents are shorter when highlighter is in use.
   */
  @Test
  public void testClusteringOnHighlights() throws Exception {
    String query = "+snippet:mine +" + QUERY_TESTSET_SAMPLE_DOCUMENTS;

    Consumer<ModifiableSolrParams> common = params -> {
      params.add(EngineParameters.PARAM_FIELDS, "title, snippet");
      params.add(EngineParameters.PARAM_CONTEXT_SIZE, Integer.toString(80));
      params.add(EngineParameters.PARAM_CONTEXT_COUNT, Integer.toString(1));
    };

    List<Cluster<SolrDocument>> highlighted = clusters("echo", query,
        common.andThen(params -> {
          params.add(EngineParameters.PARAM_PREFER_QUERY_CONTEXT, "true");
        }));

    List<Cluster<SolrDocument>> full = clusters("echo", query,
        common.andThen(params -> {
          params.add(EngineParameters.PARAM_PREFER_QUERY_CONTEXT, "false");
        }));

    // Echo clustering algorithm just returns document fields as cluster labels
    // so highlighted snippets should never be longer than full field content.
    Assert.assertEquals(highlighted.size(), full.size());
    for (int i = 0; i < highlighted.size(); i++) {
      List<String> labels1 = highlighted.get(i).getLabels();
      List<String> labels2 = full.get(i).getLabels();
      assertEquals(labels1.size(), labels2.size());
      for (int j = 0; j < labels1.size(); j++) {
        MatcherAssert.assertThat("Summary shorter than original document?",
            labels1.get(j).length(),
            Matchers.lessThanOrEqualTo(labels2.get(j).length()));
      }
    }
  }

