    @SuppressWarnings("unchecked")
    private IndexableField toIndexableField(NewField nf) throws Exception {
      final Constructor<? extends IndexableField> constr;
      if (nf.getType().equals(TextField.class) || nf.getType().equals(StringField.class)) {
        Field.Store store = nf.isStored() ? Field.Store.YES : Field.Store.NO;
        constr = nf.getType().getConstructor(String.class, String.class, Field.Store.class);
        return constr.newInstance(nf.getName(), nf.getValue(), store);
      } else if (nf.getType().equals(IntPoint.class)) {
        constr = nf.getType().getConstructor(String.class, int[].class);
        int[] values = NumericUtils.convertToIntArray(nf.getValue(), false);
        return constr.newInstance(nf.getName(), values);
      } else if (nf.getType().equals(LongPoint.class)) {
        constr = nf.getType().getConstructor(String.class, long[].class);
        long[] values = NumericUtils.convertToLongArray(nf.getValue(), false);
        return constr.newInstance(nf.getName(), values);
      } else if (nf.getType().equals(FloatPoint.class)) {
        constr = nf.getType().getConstructor(String.class, float[].class);
        float[] values = NumericUtils.convertToFloatArray(nf.getValue(), false);
        return constr.newInstance(nf.getName(), values);
      } else if (nf.getType().equals(DoublePoint.class)) {
        constr = nf.getType().getConstructor(String.class, double[].class);
        double[] values = NumericUtils.convertToDoubleArray(nf.getValue(), false);
        return constr.newInstance(nf.getName(), values);
      } else if (nf.getType().equals(SortedDocValuesField.class)
          || nf.getType().equals(SortedSetDocValuesField.class)) {
        constr = nf.getType().getConstructor(String.class, BytesRef.class);
        return constr.newInstance(nf.getName(), new BytesRef(nf.getValue()));
      } else if (nf.getType().equals(NumericDocValuesField.class)
          || nf.getType().equals(SortedNumericDocValuesField.class)) {
        constr = nf.getType().getConstructor(String.class, long.class);
        long value = NumericUtils.tryConvertToLongValue(nf.getValue());
        return constr.newInstance(nf.getName(), value);
      } else if (nf.getType().equals(StoredField.class)) {
        constr = nf.getType().getConstructor(String.class, String.class);
        return constr.newInstance(nf.getName(), nf.getValue());
      } else if (nf.getType().equals(Field.class)) {
        constr = nf.getType().getConstructor(String.class, String.class, IndexableFieldType.class);
        return constr.newInstance(nf.getName(), nf.getValue(), nf.getFieldType());
      } else {
        // TODO: unknown field
        return new StringField(nf.getName(), nf.getValue(), Field.Store.YES);
      }
    }

