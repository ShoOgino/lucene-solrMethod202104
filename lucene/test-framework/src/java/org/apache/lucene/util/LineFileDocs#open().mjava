  private synchronized void open() throws IOException {
    InputStream is = getClass().getResourceAsStream(path);

    // true if the InputStream is not already randomly seek'd after the if/else block below:
    boolean needSkip;

    long size = 0L, seekTo = 0L;
    if (is == null) {
      // if it's not in classpath, we load it as absolute filesystem path (e.g. Jenkins' home dir)
      Path file = Paths.get(path);
      size = Files.size(file);
      if (path.endsWith(".gz")) {
        // if it is a gzip file, we need to use InputStream and seek to one of the pre-computed skip
        // points:
        is = Files.newInputStream(file);
        needSkip = true;
      } else {
        // file is not compressed: optimized seek using SeekableByteChannel
        seekTo = randomSeekPos(random, size);
        final SeekableByteChannel channel = Files.newByteChannel(file);
        if (LuceneTestCase.VERBOSE) {
          System.out.println("TEST: LineFileDocs: file seek to fp=" + seekTo + " on open");
        }
        channel.position(seekTo);
        is = Channels.newInputStream(channel);

        // read until newline char, otherwise we may hit "java.nio.charset.MalformedInputException:
        // Input length = 1"
        // exception in readline() below, because we seeked part way through a multi-byte (in UTF-8)
        // encoded
        // unicode character:
        if (seekTo > 0L) {
          int b;
          do {
            b = is.read();
          } while (b >= 0 && b != 13 && b != 10);
        }

        needSkip = false;
      }
    } else {
      // if the file comes from Classpath:
      size = is.available();
      needSkip = true;
    }

    if (needSkip) {

      // LUCENE-9191: use the optimized (pre-computed, using
      // dev-tools/scripts/create_line_file_docs.py)
      // seek file, so we can seek in a gzip'd file

      int index = path.lastIndexOf('.');
      if (index == -1) {
        throw new IllegalArgumentException(
            "could not determine extension for path \"" + path + "\"");
      }

      // e.g. foo.txt --> foo.seek, foo.txt.gz --> foo.txt.seek
      String seekFilePath = path.substring(0, index) + ".seek";
      InputStream seekIS = getClass().getResourceAsStream(seekFilePath);
      if (seekIS == null) {
        seekIS = Files.newInputStream(Paths.get(seekFilePath));
      }

      try (BufferedReader reader =
          new BufferedReader(new InputStreamReader(seekIS, StandardCharsets.UTF_8))) {
        List<Long> skipPoints = new ArrayList<>();

        // explicitly insert implicit 0 as the first skip point:
        skipPoints.add(0L);

        while (true) {
          String line = reader.readLine();
          if (line == null) {
            break;
          }
          skipPoints.add(Long.parseLong(line.trim()));
        }

        seekTo = skipPoints.get(random.nextInt(skipPoints.size()));

        // dev-tools/scripts/create_line_file_docs.py ensures this is a "safe" skip point, and we
        // can begin gunziping from here:
        is.skip(seekTo);
        is = new GZIPInputStream(is);

        if (LuceneTestCase.VERBOSE) {
          System.out.println("TEST: LineFileDocs: stream skip to fp=" + seekTo + " on open");
        }
      }
    }

    CharsetDecoder decoder =
        StandardCharsets.UTF_8
            .newDecoder()
            .onMalformedInput(CodingErrorAction.REPORT)
            .onUnmappableCharacter(CodingErrorAction.REPORT);
    reader = new BufferedReader(new InputStreamReader(is, decoder), BUFFER_SIZE);
  }

