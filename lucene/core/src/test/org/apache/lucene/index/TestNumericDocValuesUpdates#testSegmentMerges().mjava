  public void testSegmentMerges() throws Exception {
    Directory dir = newDirectory();
    Random random = random();
    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));
    IndexWriter writer = new IndexWriter(dir, conf);

    int docid = 0;
    int numRounds = atLeast(10);
    if (VERBOSE) {
      System.out.println("TEST: " + numRounds + " rounds");
    }
    for (int rnd = 0; rnd < numRounds; rnd++) {
      if (VERBOSE) {
        System.out.println("\nTEST: round=" + rnd);
      }
      Document doc = new Document();
      doc.add(new StringField("key", "doc", Store.NO));
      doc.add(new NumericDocValuesField("ndv", -1));
      int numDocs = atLeast(30);
      if (VERBOSE) {
        System.out.println("TEST: " + numDocs + " docs");
      }
      for (int i = 0; i < numDocs; i++) {
        doc.removeField("id");
        doc.add(new StringField("id", Integer.toString(docid), Store.YES));
        if (VERBOSE) {
          System.out.println("TEST: add doc id=" + docid);
        }
        writer.addDocument(doc);
        docid++;
      }

      long value = rnd + 1;
      if (VERBOSE) {
        System.out.println("TEST: update all ndv values to " + value);
      }
      writer.updateNumericDocValue(new Term("key", "doc"), "ndv", value);

      if (random.nextDouble() < 0.2) { // randomly delete one doc
        int delID = random.nextInt(docid);
        if (VERBOSE) {
          System.out.println("TEST: delete random doc id=" + delID);
        }
        writer.deleteDocuments(new Term("id", Integer.toString(delID)));
      }

      // randomly commit or reopen-IW (or nothing), before forceMerge
      if (random.nextDouble() < 0.4) {
        if (VERBOSE) {
          System.out.println("\nTEST: commit writer");
        }
        writer.commit();
      } else if (random.nextDouble() < 0.1) {
        if (VERBOSE) {
          System.out.println("\nTEST: close writer");
        }
        writer.close();
        conf = newIndexWriterConfig(new MockAnalyzer(random));
        writer = new IndexWriter(dir, conf);
      }

      // add another document with the current value, to be sure forceMerge has
      // something to merge (for instance, it could be that CMS finished merging
      // all segments down to 1 before the delete was applied, so when
      // forceMerge is called, the index will be with one segment and deletes
      // and some MPs might now merge it, thereby invalidating test's
      // assumption that the reader has no deletes).
      doc = new Document();
      doc.add(new StringField("id", Integer.toString(docid), Store.YES));
      doc.add(new StringField("key", "doc", Store.NO));
      doc.add(new NumericDocValuesField("ndv", value));
      if (VERBOSE) {
        System.out.println("\nTEST: add one more doc id=" + docid);
      }
      writer.addDocument(doc);
      docid++;

      if (VERBOSE) {
        System.out.println("\nTEST: force merge");
      }
      writer.forceMerge(1, true);

      final DirectoryReader reader;
      if (random.nextBoolean()) {
        if (VERBOSE) {
          System.out.println("\nTEST: commit and open non-NRT reader");
        }
        writer.commit();
        reader = DirectoryReader.open(dir);
      } else {
        if (VERBOSE) {
          System.out.println("\nTEST: open NRT reader");
        }
        reader = DirectoryReader.open(writer);
      }
      if (VERBOSE) {
        System.out.println("TEST: got reader=" + reader);
      }

      assertEquals(1, reader.leaves().size());
      final LeafReader r = reader.leaves().get(0).reader();
      assertNull("index should have no deletes after forceMerge", r.getLiveDocs());
      NumericDocValues ndv = r.getNumericDocValues("ndv");
      assertNotNull(ndv);
      if (VERBOSE) {
        System.out.println("TEST: maxDoc=" + r.maxDoc());
      }
      for (int i = 0; i < r.maxDoc(); i++) {
        Document rdoc = r.document(i);
        assertEquals(i, ndv.nextDoc());
        assertEquals("docid=" + i + " has wrong ndv value; doc=" + rdoc, value, ndv.longValue());
      }
      reader.close();
    }

    writer.close();
    dir.close();
  }

