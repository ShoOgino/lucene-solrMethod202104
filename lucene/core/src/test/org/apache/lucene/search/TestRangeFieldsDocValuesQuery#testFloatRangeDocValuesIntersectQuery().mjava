  public void testFloatRangeDocValuesIntersectQuery() throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);
    final int iters = atLeast(10);
    float[] min = {3.7f, 11.0f, 33.4f};
    float[] max = {8.3f, 21.6f, 59.8f};
    for (int i = 0; i < iters; ++i) {
      Document doc = new Document();
      doc.add(new FloatRangeDocValuesField("dv", min, max));
      iw.addDocument(doc);
    }

    float[] nonMatchingMin = {11.4f, 29.7f, 102.4f};
    float[] nonMatchingMax = {17.6f, 37.2f, 160.2f};
    Document doc = new Document();
    doc.add(new FloatRangeDocValuesField("dv", nonMatchingMin, nonMatchingMax));
    iw.addDocument(doc);

    iw.commit();

    final IndexReader reader = iw.getReader();
    final IndexSearcher searcher = newSearcher(reader);
    iw.close();

    final float[] lowRange = {1.2f, 8.3f, 21.4f};
    final float[] highRange = {6.0f, 17.6f, 47.1f};

    Query query = FloatRangeDocValuesField.newSlowIntersectsQuery("dv", lowRange, highRange);

    assertEquals(searcher.count(query), iters);

    final float[] lowRange2 = {6.1f, 17.0f, 31.3f};
    final float[] highRange2 = {14.2f, 23.4f, 61.1f};

    query = FloatRangeDocValuesField.newSlowIntersectsQuery("dv", lowRange2, highRange2);

    assertEquals(searcher.count(query), iters);

    reader.close();
    dir.close();
  }

