  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource
  @SuppressWarnings("unchecked")
  private TopGroupsCollector<?> createSecondPassCollector(
      FirstPassGroupingCollector<?> firstPassGroupingCollector,
      String groupField,
      Collection<SearchGroup<BytesRef>> searchGroups,
      Sort groupSort,
      Sort sortWithinGroup,
      int maxDocsPerGroup,
      boolean getMaxScores)
      throws IOException {
    if (firstPassGroupingCollector
        .getGroupSelector()
        .getClass()
        .isAssignableFrom(TermGroupSelector.class)) {
      GroupSelector<BytesRef> selector =
          (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();
      return new TopGroupsCollector<>(
          selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getMaxScores);
    } else {
      ValueSource vs = new BytesRefFieldSource(groupField);
      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());
      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {
        SearchGroup<MutableValue> sg = new SearchGroup<>();
        MutableValueStr groupValue = new MutableValueStr();
        if (mergedTopGroup.groupValue != null) {
          groupValue.value.copyBytes(mergedTopGroup.groupValue);
        } else {
          groupValue.exists = false;
        }
        sg.groupValue = groupValue;
        sg.sortValues = mergedTopGroup.sortValues;
        mvalSearchGroups.add(sg);
      }
      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());
      return new TopGroupsCollector<>(
          selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getMaxScores);
    }
  }

