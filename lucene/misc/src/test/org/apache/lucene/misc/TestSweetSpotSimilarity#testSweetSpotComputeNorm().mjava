  // TODO: rewrite this test to not make thosuands of indexes.
  @Nightly
  public void testSweetSpotComputeNorm() throws IOException {

    final SweetSpotSimilarity ss = new SweetSpotSimilarity();
    ss.setLengthNormFactors(1, 1, 0.5f, true);

    Similarity d = new ClassicSimilarity();
    Similarity s = ss;

    // base case, should degrade
    for (int i = 1; i < 1000; i++) {
      assertEquals(
          "base case: i=" + i, computeNorm(d, "bogus", i), computeNorm(s, "bogus", i), 0.0f);
    }

    // make a sweet spot

    ss.setLengthNormFactors(3, 10, 0.5f, true);

    for (int i = 3; i <= 10; i++) {
      assertEquals("3,10: spot i=" + i, 1.0f, computeNorm(ss, "bogus", i), 0.0f);
    }

    for (int i = 10; i < 1000; i++) {
      final float normD = computeNorm(d, "bogus", i - 9);
      final float normS = computeNorm(s, "bogus", i);
      assertEquals("3,10: 10<x : i=" + i, normD, normS, 0.01f);
    }

    // separate sweet spot for certain fields

    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();
    ssBar.setLengthNormFactors(8, 13, 0.5f, false);
    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();
    ssYak.setLengthNormFactors(6, 9, 0.5f, false);
    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();
    ssA.setLengthNormFactors(5, 8, 0.5f, false);
    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();
    ssB.setLengthNormFactors(5, 8, 0.1f, false);

    Similarity sp =
        new PerFieldSimilarityWrapper() {
          @Override
          public Similarity get(String field) {
            if (field.equals("bar")) return ssBar;
            else if (field.equals("yak")) return ssYak;
            else if (field.equals("a")) return ssA;
            else if (field.equals("b")) return ssB;
            else return ss;
          }
        };

    for (int i = 3; i <= 10; i++) {
      assertEquals("f: 3,10: spot i=" + i, 1.0f, computeNorm(sp, "foo", i), 0.0f);
    }

    for (int i = 10; i < 1000; i++) {
      final float normD = computeNorm(d, "foo", i - 9);
      final float normS = computeNorm(sp, "foo", i);
      assertEquals("f: 3,10: 10<x : i=" + i, normD, normS, 0.01f);
    }

    for (int i = 8; i <= 13; i++) {
      assertEquals("f: 8,13: spot i=" + i, 1.0f, computeNorm(sp, "bar", i), 0.01f);
    }

    for (int i = 6; i <= 9; i++) {
      assertEquals("f: 6,9: spot i=" + i, 1.0f, computeNorm(sp, "yak", i), 0.01f);
    }

    for (int i = 13; i < 1000; i++) {
      final float normD = computeNorm(d, "bar", i - 12);
      final float normS = computeNorm(sp, "bar", i);
      assertEquals("f: 8,13: 13<x : i=" + i, normD, normS, 0.01f);
    }

    for (int i = 9; i < 1000; i++) {
      final float normD = computeNorm(d, "yak", i - 8);
      final float normS = computeNorm(sp, "yak", i);
      assertEquals("f: 6,9: 9<x : i=" + i, normD, normS, 0.01f);
    }

    // steepness

    for (int i = 9; i < 1000; i++) {
      final float normSS = computeNorm(sp, "a", i);
      final float normS = computeNorm(sp, "b", i);
      assertTrue("s: i=" + i + " : a=" + normSS + " < b=" + normS, normSS < normS);
    }
  }

