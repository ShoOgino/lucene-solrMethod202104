  /**
   * Sole constructor
   *
   * @param planetModel is the planet model.
   * @param minX is the minimum X value.
   * @param maxX is the maximum X value.
   * @param minY is the minimum Y value.
   * @param maxY is the maximum Y value.
   * @param Z is the Z value.
   */
  public XYdZSolid(
      final PlanetModel planetModel,
      final double minX,
      final double maxX,
      final double minY,
      final double maxY,
      final double Z) {
    super(planetModel);
    // Argument checking
    if (maxX - minX < Vector.MINIMUM_RESOLUTION)
      throw new IllegalArgumentException("X values in wrong order or identical");
    if (maxY - minY < Vector.MINIMUM_RESOLUTION)
      throw new IllegalArgumentException("Y values in wrong order or identical");

    this.minX = minX;
    this.maxX = maxX;
    this.minY = minY;
    this.maxY = maxY;
    this.Z = Z;

    final double worldMinZ = planetModel.getMinimumZValue();
    final double worldMaxZ = planetModel.getMaximumZValue();

    // Construct the planes
    minXPlane = new SidedPlane(maxX, 0.0, 0.0, xUnitVector, -minX);
    maxXPlane = new SidedPlane(minX, 0.0, 0.0, xUnitVector, -maxX);
    minYPlane = new SidedPlane(0.0, maxY, 0.0, yUnitVector, -minY);
    maxYPlane = new SidedPlane(0.0, minY, 0.0, yUnitVector, -maxY);
    zPlane = new Plane(zUnitVector, -Z);

    // We need at least one point on the planet surface for each manifestation of the shape.
    // There can be up to 2 (on opposite sides of the world).  But we have to go through
    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.
    // Typically, this requires 4 square root operations.
    final GeoPoint[] minXZ =
        minXPlane.findIntersections(planetModel, zPlane, maxXPlane, minYPlane, maxYPlane);
    final GeoPoint[] maxXZ =
        maxXPlane.findIntersections(planetModel, zPlane, minXPlane, minYPlane, maxYPlane);
    final GeoPoint[] minYZ =
        minYPlane.findIntersections(planetModel, zPlane, maxYPlane, minXPlane, maxXPlane);
    final GeoPoint[] maxYZ =
        maxYPlane.findIntersections(planetModel, zPlane, minYPlane, minXPlane, maxXPlane);

    notableZPoints = glueTogether(minXZ, maxXZ, minYZ, maxYZ);

    // Now, compute the edge points.
    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already,
    // so we'll start there.  We know that at most there will be two disconnected shapes on the
    // planet surface. But there's also a case where exactly one plane slices through the world,
    // and none of the bounding plane intersections do.  Thus, if we don't find any of the edge
    // intersection cases, we have to look for that last case.

    // If we still haven't encountered anything, we need to look at single-plane/world
    // intersections.
    // We detect these by looking at the world model and noting its x, y, and z bounds.
    // The cases we are looking for are when the four corner points for any given
    // plane are all outside of the world, AND that plane intersects the world.
    // There are four corner points all told; we must evaluate these WRT the planet surface.
    final boolean minXminYZ = planetModel.pointOutside(minX, minY, Z);
    final boolean minXmaxYZ = planetModel.pointOutside(minX, maxY, Z);
    final boolean maxXminYZ = planetModel.pointOutside(maxX, minY, Z);
    final boolean maxXmaxYZ = planetModel.pointOutside(maxX, maxY, Z);

    final GeoPoint[] zEdges;
    if (Z - worldMinZ >= -Vector.MINIMUM_RESOLUTION
        && Z - worldMaxZ <= Vector.MINIMUM_RESOLUTION
        && minX < 0.0
        && maxX > 0.0
        && minY < 0.0
        && maxY > 0.0
        && minXminYZ
        && minXmaxYZ
        && maxXminYZ
        && maxXmaxYZ) {
      // Find any point on the minZ plane that intersects the world
      // First construct a perpendicular plane that will allow us to find a sample point.
      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)
      // Then use it to compute a sample point.
      final GeoPoint intPoint = zPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane);
      if (intPoint != null) {
        zEdges = new GeoPoint[] {intPoint};
      } else {
        zEdges = EMPTY_POINTS;
      }
    } else {
      zEdges = EMPTY_POINTS;
    }

    this.edgePoints = glueTogether(minXZ, maxXZ, minYZ, maxYZ, zEdges);
  }

