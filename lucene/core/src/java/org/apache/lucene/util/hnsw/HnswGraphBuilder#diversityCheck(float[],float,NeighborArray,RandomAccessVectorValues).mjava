  /**
   * @param candidate the vector of a new candidate neighbor of a node n
   * @param score the score of the new candidate and node n, to be compared with scores of the
   *     candidate and n's neighbors
   * @param neighbors the neighbors selected so far
   * @param vectorValues source of values used for making comparisons between candidate and existing
   *     neighbors
   * @return whether the candidate is diverse given the existing neighbors
   */
  private boolean diversityCheck(
      float[] candidate,
      float score,
      NeighborArray neighbors,
      RandomAccessVectorValues vectorValues)
      throws IOException {
    bound.set(score);
    for (int i = 0; i < neighbors.size(); i++) {
      float diversityCheck =
          searchStrategy.compare(candidate, vectorValues.vectorValue(neighbors.node[i]));
      if (bound.check(diversityCheck) == false) {
        return false;
      }
    }
    return true;
  }

