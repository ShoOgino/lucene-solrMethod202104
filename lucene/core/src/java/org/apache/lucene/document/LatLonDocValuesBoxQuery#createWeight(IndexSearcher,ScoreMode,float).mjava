  @Override
  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)
      throws IOException {
    return new ConstantScoreWeight(this, boost) {
      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);
        if (values == null) {
          return null;
        }

        final TwoPhaseIterator iterator =
            new TwoPhaseIterator(values) {
              @Override
              public boolean matches() throws IOException {
                for (int i = 0, count = values.docValueCount(); i < count; ++i) {
                  final long value = values.nextValue();
                  final int lat = (int) (value >>> 32);
                  if (lat < minLatitude || lat > maxLatitude) {
                    // not within latitude range
                    continue;
                  }

                  final int lon = (int) (value & 0xFFFFFFFF);
                  if (crossesDateline) {
                    if (lon > maxLongitude && lon < minLongitude) {
                      // not within longitude range
                      continue;
                    }
                  } else {
                    if (lon < minLongitude || lon > maxLongitude) {
                      // not within longitude range
                      continue;
                    }
                  }

                  return true;
                }
                return false;
              }

              @Override
              public float matchCost() {
                return 5; // 5 comparisons
              }
            };
        return new ConstantScoreScorer(this, boost, scoreMode, iterator);
      }

      @Override
      public boolean isCacheable(LeafReaderContext ctx) {
        return DocValues.isCacheable(ctx, field);
      }
    };
  }

