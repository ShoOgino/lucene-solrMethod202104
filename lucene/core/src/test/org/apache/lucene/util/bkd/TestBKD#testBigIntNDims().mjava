  // Tests on N-dimensional points where each dimension is a BigInteger
  public void testBigIntNDims() throws Exception {

    int numDocs = atLeast(1000);
    try (Directory dir = getDirectory(numDocs)) {
      int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);
      int numDims = TestUtil.nextInt(random(), 1, 5);
      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 100);
      float maxMB = (float) 3.0 + (3 * random().nextFloat());
      BKDWriter w =
          new BKDWriter(
              numDocs,
              dir,
              "tmp",
              new BKDConfig(numDims, numDims, numBytesPerDim, maxPointsInLeafNode),
              maxMB,
              numDocs);
      BigInteger[][] docs = new BigInteger[numDocs][];

      byte[] scratch = new byte[numBytesPerDim * numDims];
      for (int docID = 0; docID < numDocs; docID++) {
        BigInteger[] values = new BigInteger[numDims];
        if (VERBOSE) {
          System.out.println("  docID=" + docID);
        }
        for (int dim = 0; dim < numDims; dim++) {
          values[dim] = randomBigInt(numBytesPerDim);
          NumericUtils.bigIntToSortableBytes(
              values[dim], numBytesPerDim, scratch, dim * numBytesPerDim);
          if (VERBOSE) {
            System.out.println("    " + dim + " -> " + values[dim]);
          }
        }
        docs[docID] = values;
        w.add(scratch, docID);
      }

      long indexFP;
      try (IndexOutput out = dir.createOutput("bkd", IOContext.DEFAULT)) {
        Runnable finalizer = w.finish(out, out, out);
        indexFP = out.getFilePointer();
        finalizer.run();
      }

      try (IndexInput in = dir.openInput("bkd", IOContext.DEFAULT)) {
        in.seek(indexFP);
        BKDReader r = new BKDReader(in, in, in);

        int iters = atLeast(100);
        for (int iter = 0; iter < iters; iter++) {
          if (VERBOSE) {
            System.out.println("\nTEST: iter=" + iter);
          }

          // Random N dims rect query:
          BigInteger[] queryMin = new BigInteger[numDims];
          BigInteger[] queryMax = new BigInteger[numDims];
          for (int dim = 0; dim < numDims; dim++) {
            queryMin[dim] = randomBigInt(numBytesPerDim);
            queryMax[dim] = randomBigInt(numBytesPerDim);
            if (queryMin[dim].compareTo(queryMax[dim]) > 0) {
              BigInteger x = queryMin[dim];
              queryMin[dim] = queryMax[dim];
              queryMax[dim] = x;
            }
          }

          final BitSet hits = new BitSet();
          r.intersect(
              new IntersectVisitor() {
                @Override
                public void visit(int docID) {
                  hits.set(docID);
                  // System.out.println("visit docID=" + docID);
                }

                @Override
                public void visit(int docID, byte[] packedValue) {
                  // System.out.println("visit check docID=" + docID);
                  for (int dim = 0; dim < numDims; dim++) {
                    BigInteger x =
                        NumericUtils.sortableBytesToBigInt(
                            packedValue, dim * numBytesPerDim, numBytesPerDim);
                    if (x.compareTo(queryMin[dim]) < 0 || x.compareTo(queryMax[dim]) > 0) {
                      // System.out.println("  no");
                      return;
                    }
                  }

                  // System.out.println("  yes");
                  hits.set(docID);
                }

                @Override
                public Relation compare(byte[] minPacked, byte[] maxPacked) {
                  boolean crosses = false;
                  for (int dim = 0; dim < numDims; dim++) {
                    BigInteger min =
                        NumericUtils.sortableBytesToBigInt(
                            minPacked, dim * numBytesPerDim, numBytesPerDim);
                    BigInteger max =
                        NumericUtils.sortableBytesToBigInt(
                            maxPacked, dim * numBytesPerDim, numBytesPerDim);
                    assert max.compareTo(min) >= 0;

                    if (max.compareTo(queryMin[dim]) < 0 || min.compareTo(queryMax[dim]) > 0) {
                      return Relation.CELL_OUTSIDE_QUERY;
                    } else if (min.compareTo(queryMin[dim]) < 0
                        || max.compareTo(queryMax[dim]) > 0) {
                      crosses = true;
                    }
                  }

                  if (crosses) {
                    return Relation.CELL_CROSSES_QUERY;
                  } else {
                    return Relation.CELL_INSIDE_QUERY;
                  }
                }
              });

          for (int docID = 0; docID < numDocs; docID++) {
            BigInteger[] docValues = docs[docID];
            boolean expected = true;
            for (int dim = 0; dim < numDims; dim++) {
              BigInteger x = docValues[dim];
              if (x.compareTo(queryMin[dim]) < 0 || x.compareTo(queryMax[dim]) > 0) {
                expected = false;
                break;
              }
            }
            boolean actual = hits.get(docID);
            assertEquals("docID=" + docID, expected, actual);
          }
        }
      }
    }
  }

