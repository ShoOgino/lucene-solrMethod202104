  /**
   * Writes a codec header, which records both a string to identify the file and a version number.
   * This header can be parsed and validated with {@link #checkHeader(DataInput, String, int, int)
   * checkHeader()}.
   *
   * <p>CodecHeader --&gt; Magic,CodecName,Version
   *
   * <ul>
   *   <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This identifies the start of the header.
   *       It is always {@value #CODEC_MAGIC}.
   *   <li>CodecName --&gt; {@link DataOutput#writeString String}. This is a string to identify this
   *       file.
   *   <li>Version --&gt; {@link DataOutput#writeInt Uint32}. Records the version of the file.
   * </ul>
   *
   * <p>Note that the length of a codec header depends only upon the name of the codec, so this
   * length can be computed at any time with {@link #headerLength(String)}.
   *
   * @param out Output stream
   * @param codec String to identify this file. It should be simple ASCII, less than 128 characters
   *     in length.
   * @param version Version number
   * @throws IOException If there is an I/O error writing to the underlying medium.
   * @throws IllegalArgumentException If the codec name is not simple ASCII, or is more than 127
   *     characters in length
   */
  public static void writeHeader(DataOutput out, String codec, int version) throws IOException {
    BytesRef bytes = new BytesRef(codec);
    if (bytes.length != codec.length() || bytes.length >= 128) {
      throw new IllegalArgumentException(
          "codec must be simple ASCII, less than 128 characters in length [got " + codec + "]");
    }
    out.writeInt(CODEC_MAGIC);
    out.writeString(codec);
    out.writeInt(version);
  }

