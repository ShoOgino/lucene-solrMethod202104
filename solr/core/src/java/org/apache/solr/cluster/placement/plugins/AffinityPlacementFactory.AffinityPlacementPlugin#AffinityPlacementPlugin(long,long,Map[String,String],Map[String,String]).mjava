    /**
     * The factory has decoded the configuration for the plugin instance and passes it the parameters it needs.
     */
    private AffinityPlacementPlugin(long minimalFreeDiskGB, long prioritizedFreeDiskGB,
                                    Map<String, String> withCollections,
                                    Map<String, String> collectionNodeTypes) {
      this.minimalFreeDiskGB = minimalFreeDiskGB;
      this.prioritizedFreeDiskGB = prioritizedFreeDiskGB;
      Objects.requireNonNull(withCollections, "withCollections must not be null");
      Objects.requireNonNull(collectionNodeTypes, "collectionNodeTypes must not be null");
      this.withCollections = withCollections;
      if (withCollections.isEmpty()) {
        colocatedWith = Map.of();
      } else {
        colocatedWith = new HashMap<>();
        withCollections.forEach((primary, secondary) ->
            colocatedWith.computeIfAbsent(secondary, s -> new HashSet<>())
                .add(primary));
      }

      if (collectionNodeTypes.isEmpty()) {
        nodeTypes = Map.of();
      } else {
        nodeTypes = new HashMap<>();
        collectionNodeTypes.forEach((coll, typesString) -> {
          List<String> types = StrUtils.splitSmart(typesString, ',', true);
          if (!types.isEmpty()) {
            nodeTypes.put(coll, new HashSet<>(types));
          }
        });
      }

      // We make things reproducible in tests by using test seed if any
      String seed = System.getProperty("tests.seed");
      if (seed != null) {
        replicaPlacementRandom.setSeed(seed.hashCode());
      }
    }

