  private void start(int start, int end, UTF8Sequence startUTF8, int upto, boolean doAll) {
    if (upto == startUTF8.len - 1) {
      // Done recursing
      utf8.addTransition(
          start,
          end,
          startUTF8.byteAt(upto),
          startUTF8.byteAt(upto) | MASKS[startUTF8.numBits(upto) - 1]); // type=start
      // start.addTransition(new Transition(startUTF8.byteAt(upto), startUTF8.byteAt(upto) |
      // MASKS[startUTF8.numBits(upto)-1], end));  // type=start
    } else {
      int n = utf8.createState();
      utf8.addTransition(start, n, startUTF8.byteAt(upto));
      // start.addTransition(new Transition(startUTF8.byteAt(upto), n));  // type=start
      start(n, end, startUTF8, 1 + upto, true);
      int endCode = startUTF8.byteAt(upto) | MASKS[startUTF8.numBits(upto) - 1];
      if (doAll && startUTF8.byteAt(upto) != endCode) {
        all(start, end, startUTF8.byteAt(upto) + 1, endCode, startUTF8.len - upto - 1);
      }
    }
  }

