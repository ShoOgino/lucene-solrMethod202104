  /**
   * Collects the {@link TermState} and {@link TermStatistics} for a multi-term
   * with expansion.
   *
   * @param remainingMultiTerms the number of remaining multi-terms to process,
   *                            including the current one, excluding the multi-terms already processed.
   * @param termsData           receives the collected data.
   */
  protected int collectMultiTermData(
      MultiTerm multiTerm,
      IndexSearcher searcher,
      List<LeafReaderContext> segments,
      int remainingMultiTerms, // Unused here but leveraged by extending classes.
      int maxExpansionsForTerm,
      TermsData termsData) throws IOException {
    TermData termData = termsData.getOrCreateTermData(multiTerm.termPosition);
    Map<BytesRef, TermStats> termStatsMap = createTermStatsMap(multiTerm);
    int numExpansions = 0;
    Iterator<LeafReaderContext> segmentIterator = segments.iterator();
    MutableValueBool shouldStopSegmentIteration = new MutableValueBool();

    while (segmentIterator.hasNext() && !shouldStopSegmentIteration.value) {
      LeafReaderContext leafReaderContext = segmentIterator.next();
      int remainingExpansions = maxExpansionsForTerm - numExpansions;
      assert remainingExpansions >= 0;
      List<TermBytesTermState> termStates = collectMultiTermDataForSegment(
          multiTerm, leafReaderContext, remainingExpansions, shouldStopSegmentIteration, termStatsMap);

      if (!termStates.isEmpty()) {
        assert termStates.size() <= remainingExpansions;
        numExpansions += termStates.size();
        assert numExpansions <= maxExpansionsForTerm;
        termData.setTermStatesForSegment(leafReaderContext, termStates);

      } else if (shouldOptimizeSegments()) {
        // Remove this segment from the list because the phrase cannot match on it.
        segmentIterator.remove();
        assert TestCounters.get().incSegmentSkipCount();
      }
    }

    // Collect the term stats across all segments.
    collectMultiTermStats(searcher, termStatsMap, termsData, termData);
    return numExpansions;
  }

