  /**
   * Calendar utility method consistent with {@link java.time.format.DateTimeFormatter#ISO_INSTANT}
   * except has no trailing 'Z', and will be truncated to the units given according to {@link
   * Calendar#isSet(int)}. A fully cleared calendar will yield the string "*". The isSet() state of
   * the Calendar is re-instated when done.
   */
  public String toString(Calendar cal) {
    final int calPrecField = getCalPrecisionField(cal); // must call first; getters set all fields
    if (calPrecField == -1) return "*";
    try {
      StringBuilder builder = new StringBuilder("yyyy-MM-dd'T'HH:mm:ss.SSS".length()); // typical
      int year = cal.get(Calendar.YEAR); // within the era (thus always positve).  >= 1.
      if (cal.get(Calendar.ERA) == 0) { // BC
        year -= 1; // 1BC should be "0000", so shift by one
        if (year > 0) {
          builder.append('-');
        }
      } else if (year > 9999) {
        builder.append('+');
      }
      appendPadded(builder, year, (short) 4);
      if (calPrecField >= Calendar.MONTH) {
        builder.append('-');
        appendPadded(builder, cal.get(Calendar.MONTH) + 1, (short) 2); // +1 since first is 0
      }
      if (calPrecField >= Calendar.DAY_OF_MONTH) {
        builder.append('-');
        appendPadded(builder, cal.get(Calendar.DAY_OF_MONTH), (short) 2);
      }
      if (calPrecField >= Calendar.HOUR_OF_DAY) {
        builder.append('T');
        appendPadded(builder, cal.get(Calendar.HOUR_OF_DAY), (short) 2);
      }
      if (calPrecField >= Calendar.MINUTE) {
        builder.append(':');
        appendPadded(builder, cal.get(Calendar.MINUTE), (short) 2);
      }
      if (calPrecField >= Calendar.SECOND) {
        builder.append(':');
        appendPadded(builder, cal.get(Calendar.SECOND), (short) 2);
      }
      if (calPrecField >= Calendar.MILLISECOND
          && cal.get(Calendar.MILLISECOND) > 0) { // only if non-zero
        builder.append('.');
        appendPadded(builder, cal.get(Calendar.MILLISECOND), (short) 3);
      }

      return builder.toString();
    } finally {
      clearFieldsAfter(cal, calPrecField); // restore precision state modified by get()
    }
  }

