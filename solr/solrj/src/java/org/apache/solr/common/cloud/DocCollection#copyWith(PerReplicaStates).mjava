  /**Update our state with a state of a {@link Replica}
   * Used to create a new Collection State when only a replica is updated
   */
  public DocCollection copyWith( PerReplicaStates newPerReplicaStates) {
    if (log.isDebugEnabled()) {
      log.debug("collection :{} going to be updated :  per-replica state :{} -> {}",
              name,
              getChildNodesVersion(), newPerReplicaStates.cversion);
    }
    if(getChildNodesVersion() == newPerReplicaStates.cversion) return this;
    Set<String> modifiedReplicas = PerReplicaStates.findModifiedReplicas(newPerReplicaStates, this.perReplicaStates);
    if(modifiedReplicas.isEmpty()) return this; //nothing is modified
    Map<String, Slice> modifiedShards = new HashMap<>(getSlicesMap());
    for (String s : modifiedReplicas) {
      Replica replica = getReplica(s);
      if(replica != null) {
        Replica newReplica = replica.copyWith(newPerReplicaStates.get(s));
        Slice shard = modifiedShards.get(replica.shard);
        modifiedShards.put(replica.shard, shard.copyWith(newReplica));
      }
    }
    DocCollection result = new DocCollection(getName(), modifiedShards, propMap, router, znodeVersion);
    result.perReplicaStates = newPerReplicaStates;
    return result;

  }

