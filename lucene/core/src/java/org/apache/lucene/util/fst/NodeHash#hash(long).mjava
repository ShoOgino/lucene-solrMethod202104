  // hash code for a frozen node
  private long hash(long node) throws IOException {
    final int PRIME = 31;
    // System.out.println("hash frozen node=" + node);
    long h = 0;
    fst.readFirstRealTargetArc(node, scratchArc, in);
    while (true) {
      // System.out.println("  label=" + scratchArc.label + " target=" + scratchArc.target + " h=" +
      // h + " output=" + fst.outputs.outputToString(scratchArc.output) + " next?=" +
      // scratchArc.flag(4) + " final?=" + scratchArc.isFinal() + " pos=" + in.getPosition());
      h = PRIME * h + scratchArc.label();
      h = PRIME * h + (int) (scratchArc.target() ^ (scratchArc.target() >> 32));
      h = PRIME * h + scratchArc.output().hashCode();
      h = PRIME * h + scratchArc.nextFinalOutput().hashCode();
      if (scratchArc.isFinal()) {
        h += 17;
      }
      if (scratchArc.isLast()) {
        break;
      }
      fst.readNextRealArc(scratchArc, in);
    }
    // System.out.println("  ret " + (h&Integer.MAX_VALUE));
    return h & Long.MAX_VALUE;
  }

