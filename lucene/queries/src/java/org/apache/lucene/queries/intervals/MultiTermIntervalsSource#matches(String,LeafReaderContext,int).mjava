  @Override
  public IntervalMatchesIterator matches(String field, LeafReaderContext ctx, int doc)
      throws IOException {
    Terms terms = ctx.reader().terms(field);
    if (terms == null) {
      return null;
    }
    List<MatchesIterator> subMatches = new ArrayList<>();
    TermsEnum te = automaton.getTermsEnum(terms);
    BytesRef term;
    int count = 0;
    while ((term = te.next()) != null) {
      MatchesIterator mi = TermIntervalsSource.matches(te, doc, field);
      if (mi != null) {
        subMatches.add(mi);
        if (count++ > maxExpansions) {
          throw new IllegalStateException(
              "Automaton " + term + " expanded to too many terms (limit " + maxExpansions + ")");
        }
      }
    }
    MatchesIterator mi = MatchesUtils.disjunction(subMatches);
    if (mi == null) {
      return null;
    }
    return new IntervalMatchesIterator() {
      @Override
      public int gaps() {
        return 0;
      }

      @Override
      public int width() {
        return 1;
      }

      @Override
      public boolean next() throws IOException {
        return mi.next();
      }

      @Override
      public int startPosition() {
        return mi.startPosition();
      }

      @Override
      public int endPosition() {
        return mi.endPosition();
      }

      @Override
      public int startOffset() throws IOException {
        return mi.startOffset();
      }

      @Override
      public int endOffset() throws IOException {
        return mi.endOffset();
      }

      @Override
      public MatchesIterator getSubMatches() throws IOException {
        return mi.getSubMatches();
      }

      @Override
      public Query getQuery() {
        return mi.getQuery();
      }
    };
  }

