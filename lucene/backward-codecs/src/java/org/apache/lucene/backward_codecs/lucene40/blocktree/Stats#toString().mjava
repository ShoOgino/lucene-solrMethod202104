  @Override
  public String toString() {
    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
    PrintStream out;
    try {
      out = new PrintStream(bos, false, IOUtils.UTF_8);
    } catch (UnsupportedEncodingException bogus) {
      throw new RuntimeException(bogus);
    }

    out.println("  index FST:");
    out.println("    " + indexNumBytes + " bytes");
    out.println("  terms:");
    out.println("    " + totalTermCount + " terms");
    out.println(
        "    "
            + totalTermBytes
            + " bytes"
            + (totalTermCount != 0
                ? " ("
                    + String.format(Locale.ROOT, "%.1f", ((double) totalTermBytes) / totalTermCount)
                    + " bytes/term)"
                : ""));
    out.println("  blocks:");
    out.println("    " + totalBlockCount + " blocks");
    out.println("    " + termsOnlyBlockCount + " terms-only blocks");
    out.println("    " + subBlocksOnlyBlockCount + " sub-block-only blocks");
    out.println("    " + mixedBlockCount + " mixed blocks");
    out.println("    " + floorBlockCount + " floor blocks");
    out.println("    " + (totalBlockCount - floorSubBlockCount) + " non-floor blocks");
    out.println("    " + floorSubBlockCount + " floor sub-blocks");
    out.println(
        "    "
            + totalUncompressedBlockSuffixBytes
            + " term suffix bytes before compression"
            + (totalBlockCount != 0
                ? " ("
                    + String.format(
                        Locale.ROOT, "%.1f", ((double) totalBlockSuffixBytes) / totalBlockCount)
                    + " suffix-bytes/block)"
                : ""));
    StringBuilder compressionCounts = new StringBuilder();
    for (int code = 0; code < compressionAlgorithms.length; ++code) {
      if (compressionAlgorithms[code] == 0) {
        continue;
      }
      if (compressionCounts.length() > 0) {
        compressionCounts.append(", ");
      }
      compressionCounts.append(CompressionAlgorithm.byCode(code));
      compressionCounts.append(": ");
      compressionCounts.append(compressionAlgorithms[code]);
    }
    out.println(
        "    "
            + totalBlockSuffixBytes
            + " compressed term suffix bytes"
            + (totalBlockCount != 0
                ? " ("
                    + String.format(
                        Locale.ROOT,
                        "%.2f",
                        ((double) totalBlockSuffixBytes) / totalUncompressedBlockSuffixBytes)
                    + " compression ratio - compression count by algorithm: "
                    + compressionCounts
                : "")
            + ")");
    out.println(
        "    "
            + totalBlockStatsBytes
            + " term stats bytes "
            + (totalBlockCount != 0
                ? " ("
                    + String.format(
                        Locale.ROOT, "%.1f", ((double) totalBlockStatsBytes) / totalBlockCount)
                    + " stats-bytes/block)"
                : ""));
    out.println(
        "    "
            + totalBlockOtherBytes
            + " other bytes"
            + (totalBlockCount != 0
                ? " ("
                    + String.format(
                        Locale.ROOT, "%.1f", ((double) totalBlockOtherBytes) / totalBlockCount)
                    + " other-bytes/block)"
                : ""));
    if (totalBlockCount != 0) {
      out.println("    by prefix length:");
      int total = 0;
      for (int prefix = 0; prefix < blockCountByPrefixLen.length; prefix++) {
        final int blockCount = blockCountByPrefixLen[prefix];
        total += blockCount;
        if (blockCount != 0) {
          out.println("      " + String.format(Locale.ROOT, "%2d", prefix) + ": " + blockCount);
        }
      }
      assert totalBlockCount == total;
    }

    try {
      return bos.toString(IOUtils.UTF_8);
    } catch (UnsupportedEncodingException bogus) {
      throw new RuntimeException(bogus);
    }
  }

