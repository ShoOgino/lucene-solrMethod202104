  public void testWildcard() throws IOException {
    IntervalsSource source = Intervals.wildcard(new BytesRef("?ot"));
    checkIntervals(
        source,
        "field1",
        4,
        new int[][] {
          {},
          {2, 2, 10, 10, 17, 17, 27, 27},
          {5, 5, 10, 10, 21, 21},
          {3, 3},
          {2, 2, 10, 10, 17, 17},
          {}
        });
    MatchesIterator mi = getMatches(source, 4, "field1");
    assertNotNull(mi);
    assertMatch(mi, 2, 2, 15, 18);
    assertMatch(mi, 10, 10, 63, 66);
    assertMatch(mi, 17, 17, 97, 100);

    IllegalStateException e =
        expectThrows(
            IllegalStateException.class,
            () -> {
              IntervalsSource s = Intervals.wildcard(new BytesRef("?ot"), 1);
              for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {
                s.intervals("field1", ctx);
              }
            });
    assertEquals("Automaton [?ot] expanded to too many terms (limit 1)", e.getMessage());

    checkVisits(Intervals.wildcard(new BytesRef("p??")), 1);
  }

