  /**
   * Returns the doc values for the specified field in the specified document. Empty Optional
   * instance is returned if no doc values is available for the field.
   *
   * @param docid - document id
   * @param field - field name
   * @return doc values, if exists, or empty
   * @throws IOException - if there is a low level IO error.
   */
  Optional<DocValues> getDocValues(int docid, String field) throws IOException {
    DocValuesType dvType = IndexUtils.getFieldInfo(reader, field).getDocValuesType();

    switch (dvType) {
      case BINARY:
        return createBinaryDocValues(docid, field, DocValuesType.BINARY);
      case NUMERIC:
        return createNumericDocValues(docid, field, DocValuesType.NUMERIC);
      case SORTED_NUMERIC:
        return createSortedNumericDocValues(docid, field, DocValuesType.SORTED_NUMERIC);
      case SORTED:
        return createSortedDocValues(docid, field, DocValuesType.SORTED);
      case SORTED_SET:
        return createSortedSetDocValues(docid, field, DocValuesType.SORTED_SET);
      default:
        return Optional.empty();
    }
  }

