  public void testRandom() throws IOException {
    Directory dir = newDirectory();
    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
    int numDocs = atLeast(50);
    for (int i = 0; i < numDocs; ++i) {
      Document doc = new Document();
      if (random().nextBoolean()) {
        doc.add(new StringField("field", "A", Store.NO));
      }
      if (random().nextBoolean()) {
        doc.add(new StringField("field", "B", Store.NO));
      }
      if (random().nextDouble() > 0.9) {
        doc.add(new StringField("field", "C", Store.NO));
      }
      if (random().nextDouble() > 0.1) {
        doc.add(new StringField("field", "D", Store.NO));
      }
      doc.add(new NumericDocValuesField("min_match", random().nextInt(6)));
      w.addDocument(doc);
    }

    IndexReader r = DirectoryReader.open(w);
    IndexSearcher searcher = new IndexSearcher(r);
    w.close();

    int iters = atLeast(10);
    for (int iter = 0; iter < iters; ++iter) {
      List<Query> queries = new ArrayList<>();
      if (random().nextBoolean()) {
        queries.add(new TermQuery(new Term("field", "A")));
      }
      if (random().nextBoolean()) {
        queries.add(new TermQuery(new Term("field", "B")));
      }
      if (random().nextBoolean()) {
        queries.add(new TermQuery(new Term("field", "C")));
      }
      if (random().nextBoolean()) {
        queries.add(new TermQuery(new Term("field", "D")));
      }
      if (random().nextBoolean()) {
        queries.add(new TermQuery(new Term("field", "E")));
      }

      Query q = new CoveringQuery(queries, LongValuesSource.fromLongField("min_match"));
      QueryUtils.check(random(), q, searcher);

      for (int i = 1; i < 4; ++i) {
        BooleanQuery.Builder builder = new BooleanQuery.Builder()
            .setMinimumNumberShouldMatch(i);
        for (Query query : queries) {
          builder.add(query, Occur.SHOULD);
        }
        Query q1 = builder.build();
        Query q2 = new CoveringQuery(queries, LongValuesSource.constant(i));
        assertEquals(
            searcher.count(q1),
            searcher.count(q2));
      }

      Query filtered = new BooleanQuery.Builder()
          .add(q, Occur.MUST)
          .add(new TermQuery(new Term("field", "A")), Occur.MUST)
          .build();
      QueryUtils.check(random(), filtered, searcher);
    }
    
    r.close();
    dir.close();
  }

