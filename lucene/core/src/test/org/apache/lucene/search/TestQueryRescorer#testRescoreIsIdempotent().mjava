  public void testRescoreIsIdempotent() throws Exception {
    Directory dir = newDirectory();
    int numDocs = 100;
    String fieldName = "field";
    IndexReader reader = publishDocs(numDocs, fieldName, dir);

    // Construct a query that will get numDocs hits.
    String wordOne = dictionary.get(0);
    TermQuery termQuery = new TermQuery(new Term(fieldName, wordOne));
    IndexSearcher searcher = getSearcher(reader);
    searcher.setSimilarity(new BM25Similarity());
    TopDocs hits1 = searcher.search(termQuery, numDocs);
    TopDocs hits2 = searcher.search(termQuery, numDocs);

    // Next, use a more specific phrase query that will return different scores
    // from the above term query
    String wordTwo = RandomPicks.randomFrom(random(), dictionary);
    PhraseQuery phraseQuery = new PhraseQuery(1, fieldName, wordOne, wordTwo);

    // rescore, requesting the same hits as topN
    int topN = numDocs;
    TopDocs firstRescoreHits = QueryRescorer.rescore(searcher, hits1, phraseQuery, 2.0, topN);

    // now rescore again, where topN is less than numDocs
    topN = random().nextInt(numDocs - 1);
    ScoreDoc[] secondRescoreHits =
        QueryRescorer.rescore(searcher, hits2, phraseQuery, 2.0, topN).scoreDocs;
    ScoreDoc[] expectedTopNScoreDocs =
        ArrayUtil.copyOfSubArray(firstRescoreHits.scoreDocs, 0, topN);
    CheckHits.checkEqual(phraseQuery, expectedTopNScoreDocs, secondRescoreHits);

    reader.close();
    dir.close();
  }

