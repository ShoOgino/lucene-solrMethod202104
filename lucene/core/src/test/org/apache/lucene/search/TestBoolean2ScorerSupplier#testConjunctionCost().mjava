  public void testConjunctionCost() {
    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);
    for (Occur occur : Occur.values()) {
      subs.put(occur, new ArrayList<>());
    }

    subs.get(RandomPicks.randomFrom(random(), Arrays.asList(Occur.FILTER, Occur.MUST)))
        .add(new FakeScorerSupplier(42));
    assertEquals(
        42,
        new Boolean2ScorerSupplier(
                null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 0)
            .cost());

    subs.get(RandomPicks.randomFrom(random(), Arrays.asList(Occur.FILTER, Occur.MUST)))
        .add(new FakeScorerSupplier(12));
    assertEquals(
        12,
        new Boolean2ScorerSupplier(
                null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 0)
            .cost());

    subs.get(RandomPicks.randomFrom(random(), Arrays.asList(Occur.FILTER, Occur.MUST)))
        .add(new FakeScorerSupplier(20));
    assertEquals(
        12,
        new Boolean2ScorerSupplier(
                null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 0)
            .cost());
  }

