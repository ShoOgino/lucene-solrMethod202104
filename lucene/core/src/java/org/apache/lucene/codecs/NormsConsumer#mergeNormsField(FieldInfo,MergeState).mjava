  /**
   * Merges the norms from <code>toMerge</code>.
   *
   * <p>The default implementation calls {@link #addNormsField}, passing an Iterable that merges and
   * filters deleted documents on the fly.
   */
  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState)
      throws IOException {

    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?
    addNormsField(
        mergeFieldInfo,
        new NormsProducer() {
          @Override
          public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {
            if (fieldInfo != mergeFieldInfo) {
              throw new IllegalArgumentException("wrong fieldInfo");
            }

            List<NumericDocValuesSub> subs = new ArrayList<>();
            assert mergeState.docMaps.length == mergeState.docValuesProducers.length;
            for (int i = 0; i < mergeState.docValuesProducers.length; i++) {
              NumericDocValues norms = null;
              NormsProducer normsProducer = mergeState.normsProducers[i];
              if (normsProducer != null) {
                FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
                if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {
                  norms = normsProducer.getNorms(readerFieldInfo);
                }
              }

              if (norms != null) {
                subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));
              }
            }

            final DocIDMerger<NumericDocValuesSub> docIDMerger =
                DocIDMerger.of(subs, mergeState.needsIndexSort);

            return new NumericDocValues() {
              private int docID = -1;
              private NumericDocValuesSub current;

              @Override
              public int docID() {
                return docID;
              }

              @Override
              public int nextDoc() throws IOException {
                current = docIDMerger.next();
                if (current == null) {
                  docID = NO_MORE_DOCS;
                } else {
                  docID = current.mappedDocID;
                }
                return docID;
              }

              @Override
              public int advance(int target) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public boolean advanceExact(int target) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public long cost() {
                return 0;
              }

              @Override
              public long longValue() throws IOException {
                return current.values.longValue();
              }
            };
          }

          @Override
          public void checkIntegrity() {}

          @Override
          public void close() {}

          @Override
          public long ramBytesUsed() {
            return 0;
          }
        });
  }

