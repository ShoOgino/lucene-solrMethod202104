  private void cleanup(String collection, String targetCollection, String chkCollection,
                       String daemonUrl, String daemonName, boolean createdTarget) throws Exception {
    log.info("## Cleaning up after abort or error");
    // 1. kill the daemon
    // 2. cleanup target / chk collections IFF the source collection still exists and is not empty
    // 3. cleanup collection state

    if (daemonUrl != null) {
      killDaemon(daemonName, daemonUrl);
    }
    ClusterState clusterState = ocmh.cloudManager.getClusterStateProvider().getClusterState();
    NamedList<Object> cmdResults = new NamedList<>();
    if (createdTarget && !collection.equals(targetCollection) && clusterState.hasCollection(targetCollection)) {
      log.debug(" -- removing {}", targetCollection);
      ZkNodeProps cmd = new ZkNodeProps(
          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),
          CommonParams.NAME, targetCollection,
          FOLLOW_ALIASES, "false",
          CoreAdminParams.DELETE_METRICS_HISTORY, "true"
      );
      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cmd, cmdResults);
      ocmh.checkResults("CLEANUP: deleting target collection " + targetCollection, cmdResults, false);

    }
    // remove chk collection
    if (clusterState.hasCollection(chkCollection)) {
      log.debug(" -- removing {}", chkCollection);
      ZkNodeProps cmd = new ZkNodeProps(
          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),
          CommonParams.NAME, chkCollection,
          FOLLOW_ALIASES, "false",
          CoreAdminParams.DELETE_METRICS_HISTORY, "true"
      );
      cmdResults = new NamedList<>();
      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cmd, cmdResults);
      ocmh.checkResults("CLEANUP: deleting checkpoint collection " + chkCollection, cmdResults, false);
    }
    log.debug(" -- turning readOnly mode off for {}", collection);
    ZkNodeProps props = new ZkNodeProps(
        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.MODIFYCOLLECTION.toLower(),
        ZkStateReader.COLLECTION_PROP, collection,
        ZkStateReader.READ_ONLY, null);
    if (ocmh.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {
      ocmh.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionModifyCollection, props,
          ocmh.cloudManager, ocmh.zkStateReader);
    } else {
      ocmh.overseer.offerStateUpdate(Utils.toJSON(props));
    }
    removeReindexingState(collection);
  }

