  /**
   * Factory method for generating a query (similar to {@link #getWildcardQuery}). Called when
   * parser parses an input term token that uses prefix notation; that is, contains a single '*'
   * wildcard character as its last character. Since this is a special case of generic wildcard
   * term, and such a query can be optimized easily, this usually results in a different query
   * object.
   *
   * <p>Depending on settings, a prefix term may be lower-cased automatically. It will not go
   * through the default Analyzer, however, since normal Analyzers are unlikely to work properly
   * with wildcard templates.
   *
   * <p>Can be overridden by extending classes, to provide custom handling for wild card queries,
   * which may be necessary due to missing analyzer calls.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token to use for building term for the query (<b>without</b> trailing '*'
   *     character!)
   * @return Resulting {@link org.apache.lucene.search.Query} built for the term
   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to
   *     disallow
   */
  protected Query getPrefixQuery(String field, String termStr) throws ParseException {
    if (!allowLeadingWildcard && termStr.startsWith("*"))
      throw new ParseException("'*' not allowed as first character in PrefixQuery");
    BytesRef term = getAnalyzer().normalize(field, termStr);
    Term t = new Term(field, term);
    return newPrefixQuery(t);
  }

