  private void rangeStats(Range range, int slot, boolean hasSubFacets) throws IOException {
    final Query rangeQ;
    {
      final Query rangeQuery = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);
      if (fcontext.cache) {
        rangeQ = rangeQuery;
      } else if (rangeQuery instanceof ExtendedQuery) {
        ((ExtendedQuery) rangeQuery).setCache(false);
        rangeQ = rangeQuery;
      } else {
        final WrappedQuery wrappedQuery = new WrappedQuery(rangeQuery);
        wrappedQuery.setCache(false);
        rangeQ = wrappedQuery;
      }
    }
    // TODO: specialize count only
    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);
    if (hasSubFacets) {
      filters[slot] = rangeQ;
      intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?
    }
    long num = collect(intersection, slot, slotNum -> { return new SlotAcc.SlotContext(rangeQ); });
    countAcc.incrementCount(slot, num); // TODO: roll this into collect()
  }

