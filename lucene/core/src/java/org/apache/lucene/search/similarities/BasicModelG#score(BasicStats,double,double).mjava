  @Override
  public final double score(BasicStats stats, double tfn, double aeTimes1pTfn) {
    // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)
    double F = stats.getTotalTermFreq() + 1;
    double N = stats.getNumberOfDocuments();
    double lambda = F / (N + F);
    // -log(1 / (lambda + 1)) -> log(lambda + 1)
    double A = log2(lambda + 1);
    double B = log2((1 + lambda) / lambda);

    // basic model G should return (A + B * tfn)
    // which we rewrite to B * (1 + tfn) - (B - A)
    // so that it can be combined with the after effect while still guaranteeing
    // that the result is non-decreasing with tfn since B >= A

    return (B - (B - A) / (1 + tfn)) * aeTimes1pTfn;
  }

