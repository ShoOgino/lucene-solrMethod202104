  // used by TestUtil.checkReader to check some things really unrelated to the index,
  // just looking for bugs in indexreader implementations.
  private static void checkReaderSanity(LeafReader reader) throws IOException {
    for (FieldInfo info : reader.getFieldInfos()) {

      // reader shouldn't return normValues if the field does not have them
      if (!info.hasNorms()) {
        if (reader.getNormValues(info.name) != null) {
          throw new RuntimeException("field: " + info.name + " should omit norms but has them!");
        }
      }

      // reader shouldn't return docValues if the field does not have them
      // reader shouldn't return multiple docvalues types for the same field.
      switch (info.getDocValuesType()) {
        case NONE:
          if (reader.getBinaryDocValues(info.name) != null
              || reader.getNumericDocValues(info.name) != null
              || reader.getSortedDocValues(info.name) != null
              || reader.getSortedSetDocValues(info.name) != null) {
            throw new RuntimeException(
                "field: " + info.name + " has docvalues but should omit them!");
          }
          break;
        case SORTED:
          if (reader.getBinaryDocValues(info.name) != null
              || reader.getNumericDocValues(info.name) != null
              || reader.getSortedNumericDocValues(info.name) != null
              || reader.getSortedSetDocValues(info.name) != null) {
            throw new RuntimeException(info.name + " returns multiple docvalues types!");
          }
          break;
        case SORTED_NUMERIC:
          if (reader.getBinaryDocValues(info.name) != null
              || reader.getNumericDocValues(info.name) != null
              || reader.getSortedSetDocValues(info.name) != null
              || reader.getSortedDocValues(info.name) != null) {
            throw new RuntimeException(info.name + " returns multiple docvalues types!");
          }
          break;
        case SORTED_SET:
          if (reader.getBinaryDocValues(info.name) != null
              || reader.getNumericDocValues(info.name) != null
              || reader.getSortedNumericDocValues(info.name) != null
              || reader.getSortedDocValues(info.name) != null) {
            throw new RuntimeException(info.name + " returns multiple docvalues types!");
          }
          break;
        case BINARY:
          if (reader.getNumericDocValues(info.name) != null
              || reader.getSortedDocValues(info.name) != null
              || reader.getSortedNumericDocValues(info.name) != null
              || reader.getSortedSetDocValues(info.name) != null) {
            throw new RuntimeException(info.name + " returns multiple docvalues types!");
          }
          break;
        case NUMERIC:
          if (reader.getBinaryDocValues(info.name) != null
              || reader.getSortedDocValues(info.name) != null
              || reader.getSortedNumericDocValues(info.name) != null
              || reader.getSortedSetDocValues(info.name) != null) {
            throw new RuntimeException(info.name + " returns multiple docvalues types!");
          }
          break;
        default:
          throw new AssertionError();
      }
    }
  }

