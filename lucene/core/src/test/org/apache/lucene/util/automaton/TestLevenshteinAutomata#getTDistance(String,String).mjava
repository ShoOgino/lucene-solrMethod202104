  private int getTDistance(String target, String other) {
    char[] sa;
    int n;
    int d[][]; // cost array

    sa = target.toCharArray();
    n = sa.length;
    final int m = other.length();
    d = new int[n + 1][m + 1];

    if (n == 0 || m == 0) {
      if (n == m) {
        return 0;
      } else {
        return Math.max(n, m);
      }
    }

    // indexes into strings s and t
    int i; // iterates through s
    int j; // iterates through t

    char t_j; // jth character of t

    int cost; // cost

    for (i = 0; i <= n; i++) {
      d[i][0] = i;
    }

    for (j = 0; j <= m; j++) {
      d[0][j] = j;
    }

    for (j = 1; j <= m; j++) {
      t_j = other.charAt(j - 1);

      for (i = 1; i <= n; i++) {
        cost = sa[i - 1] == t_j ? 0 : 1;
        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost
        d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1), d[i - 1][j - 1] + cost);
        // transposition
        if (i > 1
            && j > 1
            && target.charAt(i - 1) == other.charAt(j - 2)
            && target.charAt(i - 2) == other.charAt(j - 1)) {
          d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
        }
      }
    }

    // our last action in the above loop was to switch d and p, so p now
    // actually has the most recent cost counts
    return Math.abs(d[n][m]);
  }

