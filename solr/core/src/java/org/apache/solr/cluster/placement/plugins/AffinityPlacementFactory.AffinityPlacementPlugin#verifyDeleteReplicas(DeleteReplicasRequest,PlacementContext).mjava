    private void verifyDeleteReplicas(DeleteReplicasRequest deleteReplicasRequest, PlacementContext placementContext) throws PlacementModificationException, InterruptedException {
      Cluster cluster = placementContext.getCluster();
      SolrCollection secondaryCollection = deleteReplicasRequest.getCollection();
      Set<String> colocatedCollections = colocatedWith.get(secondaryCollection.getName());
      if (colocatedCollections == null) {
        return;
      }
      Map<Node, Map<String, AtomicInteger>> secondaryNodeShardReplicas = new HashMap<>();
      secondaryCollection.shards().forEach(shard ->
          shard.replicas().forEach(replica -> {
            secondaryNodeShardReplicas.computeIfAbsent(replica.getNode(), n -> new HashMap<>())
                .computeIfAbsent(replica.getShard().getShardName(), s -> new AtomicInteger())
                .incrementAndGet();
          }));

      // find the colocated-with collections
      Map<Node, Set<String>> colocatingNodes = new HashMap<>();
      try {
        for (String colocatedCollection : colocatedCollections) {
          SolrCollection coll = cluster.getCollection(colocatedCollection);
          coll.shards().forEach(shard ->
              shard.replicas().forEach(replica -> {
                colocatingNodes.computeIfAbsent(replica.getNode(), n -> new HashSet<>())
                    .add(coll.getName());
              }));
        }
      } catch (IOException ioe) {
        throw new PlacementModificationException("failed to retrieve colocated collection information", ioe);
      }
      PlacementModificationException exception = null;
      for (Replica replica : deleteReplicasRequest.getReplicas()) {
        if (!colocatingNodes.containsKey(replica.getNode())) {
          continue;
        }
        // check that there will be at least one replica remaining
        AtomicInteger secondaryCount = secondaryNodeShardReplicas
            .getOrDefault(replica.getNode(), Map.of())
            .getOrDefault(replica.getShard().getShardName(), new AtomicInteger());
        if (secondaryCount.get() > 1) {
          // we can delete it - record the deletion
          secondaryCount.decrementAndGet();
          continue;
        }
        // fail - this replica cannot be removed
        if (exception == null) {
          exception = new PlacementModificationException("delete replica(s) rejected");
        }
        exception.addRejectedModification(replica.toString(), "co-located with replicas of " + colocatingNodes.get(replica.getNode()));
      }
      if (exception != null) {
        throw exception;
      }
    }

