  @SuppressWarnings({"rawtypes"})
  private void testExistsBehavior(Class<? extends DirectoryFactory> clazz) throws Exception {
    final String path = createTempDir().toString() + "/" + clazz + "_somedir";
    DirectoryFactory dirFac = null;
    try {
      dirFac = clazz.getConstructor().newInstance();
      dirFac.initCoreContainer(null); // greybox testing directly against path
      dirFac.init(new NamedList());

      assertFalse(path + " should not exist yet", dirFac.exists(path));
      Directory dir = dirFac.get(path, DirectoryFactory.DirContext.DEFAULT,
                                 DirectoryFactory.LOCK_TYPE_SINGLE);
      try {
        assertFalse(path + " should still not exist", dirFac.exists(path));
        try (IndexOutput file = dir.createOutput("test_file", IOContext.DEFAULT)) {
          file.writeInt(42);

          // TODO: even StandardDirectoryFactory & NRTCachingDirectoryFactory can't agree on this...
          // ... should we consider this explicitly undefined?
          // ... or should *all* Caching DirFactories consult the cache as well as the disk itself?
          // assertFalse(path + " should still not exist until file is closed", dirFac.exists(path));
          
        } // implicitly close file...
        
        // TODO: even StandardDirectoryFactory & NRTCachingDirectoryFactory can't agree on this...
        // ... should we consider this explicitly undefined?
        // ... or should *all* Caching DirFactories consult the cache as well as the disk itself?
        // assertTrue(path + " should exist once file is closed", dirFac.exists(path));
        
        dir.sync(Collections.singleton("test_file"));
        assertTrue(path + " should exist once file is synced", dirFac.exists(path));

        
      } finally {
        dirFac.release(dir);
      }
      assertTrue(path + " should still exist even after being released", dirFac.exists(path));
      
    } catch (AssertionError ae) {
      throw new AssertionError(clazz + ": " + ae.getMessage());
    } finally {
      if (null != dirFac) {
        dirFac.close();
      }
    }
  }

