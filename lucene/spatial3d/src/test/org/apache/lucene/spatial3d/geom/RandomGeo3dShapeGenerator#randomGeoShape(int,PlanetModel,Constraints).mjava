  /**
   * Method that returns a random generated GeoShape under given constraints. Returns NULL if it
   * cannot build the GeoShape under the given constraints.
   *
   * @param shapeType The polygon code.
   * @param planetModel The planet model.
   * @param constraints The given constraints.
   * @return The random generated GeoShape.
   */
  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints) {
    switch (shapeType) {
      case CONVEX_POLYGON:
        {
          return convexPolygon(planetModel, constraints);
        }
      case CONVEX_POLYGON_WITH_HOLES:
        {
          return convexPolygonWithHoles(planetModel, constraints);
        }
      case CONCAVE_POLYGON:
        {
          return concavePolygon(planetModel, constraints);
        }
      case CONCAVE_POLYGON_WITH_HOLES:
        {
          return concavePolygonWithHoles(planetModel, constraints);
        }
      case COMPLEX_POLYGON:
        {
          return complexPolygon(planetModel, constraints);
        }
      case CIRCLE:
        {
          return circle(planetModel, constraints);
        }
      case RECTANGLE:
        {
          return rectangle(planetModel, constraints);
        }
      case PATH:
        {
          return path(planetModel, constraints);
        }
      case COLLECTION:
        {
          return collection(planetModel, constraints);
        }
      case POINT:
        {
          return point(planetModel, constraints);
        }
      case LINE:
        {
          return line(planetModel, constraints);
        }
      case CONVEX_SIMPLE_POLYGON:
        {
          return simpleConvexPolygon(planetModel, constraints);
        }
      case CONCAVE_SIMPLE_POLYGON:
        {
          return concaveSimplePolygon(planetModel, constraints);
        }
      case EXACT_CIRCLE:
        {
          return exactCircle(planetModel, constraints);
        }
      default:
        throw new IllegalStateException("Unexpected shape type");
    }
  }

