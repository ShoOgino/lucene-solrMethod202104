  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    if (!"true".equals(System.getProperty("configset.upload.enabled", "true"))) {
      throw new SolrException(ErrorCode.BAD_REQUEST,
          "Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.");
    }

    String configSetName = req.getParams().get(NAME);
    if (StringUtils.isBlank(configSetName)) {
      throw new SolrException(ErrorCode.BAD_REQUEST,
          "The configuration name should be provided in the \"name\" parameter");
    }

    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();
    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + "/" + configSetName;

    boolean overwritesExisting = zkClient.exists(configPathInZk, true);

    boolean requestIsTrusted = isTrusted(req, coreContainer.getAuthenticationPlugin());

    // Get upload parameters
    String singleFilePath = req.getParams().get(ConfigSetParams.FILE_PATH, "");
    boolean allowOverwrite = req.getParams().getBool(ConfigSetParams.OVERWRITE, false);
    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);

    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();

    if (!contentStreamsIterator.hasNext()) {
      throw new SolrException(ErrorCode.BAD_REQUEST,
              "No stream found for the config data to be uploaded");
    }

    InputStream inputStream = contentStreamsIterator.next().getStream();

    // Only Upload a single file
    if (!singleFilePath.isEmpty()) {
      String fixedSingleFilePath = singleFilePath;
      if (fixedSingleFilePath.charAt(0) == '/') {
        fixedSingleFilePath = fixedSingleFilePath.substring(1);
      }
      if (fixedSingleFilePath.isEmpty()) {
        throw new SolrException(ErrorCode.BAD_REQUEST, "The filePath provided for upload, '" + singleFilePath + "', is not valid.");
      } else if (cleanup) {
        // Cleanup is not allowed while using singleFilePath upload
        throw new SolrException(ErrorCode.BAD_REQUEST, "ConfigSet uploads do not allow cleanup=true when filePath is used.");
      } else {
        try {
          // Create a node for the configuration in zookeeper
          // For creating the baseZnode, the cleanup parameter is only allowed to be true when singleFilePath is not passed.
          createBaseZnode(zkClient, overwritesExisting, requestIsTrusted, configPathInZk);
          String filePathInZk = configPathInZk + "/" + fixedSingleFilePath;
          zkClient.makePath(filePathInZk, IOUtils.toByteArray(inputStream), CreateMode.PERSISTENT, null, !allowOverwrite, true);
        } catch(KeeperException.NodeExistsException nodeExistsException) {
          throw new SolrException(ErrorCode.BAD_REQUEST,
                  "The path " + singleFilePath + " for configSet " + configSetName + " already exists. In order to overwrite, provide overwrite=true.");
        }
      }
      return;
    }

    if (overwritesExisting && !allowOverwrite) {
      throw new SolrException(ErrorCode.BAD_REQUEST,
              "The configuration " + configSetName + " already exists in zookeeper");
    }

    Set<String> filesToDelete;
    if (overwritesExisting && cleanup) {
      filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);
    } else {
      filesToDelete = Collections.emptySet();
    }

    // Create a node for the configuration in zookeeper
    // For creating the baseZnode, the cleanup parameter is only allowed to be true when singleFilePath is not passed.
    createBaseZnode(zkClient, overwritesExisting, requestIsTrusted, configPathInZk);

    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);
    ZipEntry zipEntry = null;
    while ((zipEntry = zis.getNextEntry()) != null) {
      String filePathInZk = configPathInZk + "/" + zipEntry.getName();
      if (filePathInZk.endsWith("/")) {
        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));
      } else {
        filesToDelete.remove(filePathInZk);
      }
      if (zipEntry.isDirectory()) {
        zkClient.makePath(filePathInZk, false,  true);
      } else {
        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,
            IOUtils.toByteArray(zis));
      }
    }
    zis.close();
    deleteUnusedFiles(zkClient, filesToDelete);

    // If the request is doing a full trusted overwrite of an untrusted configSet (overwrite=true, cleanup=true), then trust the configSet.
    if (cleanup && requestIsTrusted && overwritesExisting && !isCurrentlyTrusted(zkClient, configPathInZk)) {
      byte[] baseZnodeData =  ("{\"trusted\": true}").getBytes(StandardCharsets.UTF_8);
      zkClient.setData(configPathInZk, baseZnodeData, true);
    }
  }

