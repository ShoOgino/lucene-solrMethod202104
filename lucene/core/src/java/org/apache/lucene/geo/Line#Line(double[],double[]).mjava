  /** Creates a new Line from the supplied latitude/longitude array. */
  public Line(double[] lats, double[] lons) {
    if (lats == null) {
      throw new IllegalArgumentException("lats must not be null");
    }
    if (lons == null) {
      throw new IllegalArgumentException("lons must not be null");
    }
    if (lats.length != lons.length) {
      throw new IllegalArgumentException("lats and lons must be equal length");
    }
    if (lats.length < 2) {
      throw new IllegalArgumentException("at least 2 line points required");
    }

    // compute bounding box
    double minLat = lats[0];
    double minLon = lons[0];
    double maxLat = lats[0];
    double maxLon = lons[0];
    for (int i = 0; i < lats.length; ++i) {
      GeoUtils.checkLatitude(lats[i]);
      GeoUtils.checkLongitude(lons[i]);
      minLat = Math.min(lats[i], minLat);
      minLon = Math.min(lons[i], minLon);
      maxLat = Math.max(lats[i], maxLat);
      maxLon = Math.max(lons[i], maxLon);
    }

    this.lats = lats.clone();
    this.lons = lons.clone();
    this.minLat = minLat;
    this.maxLat = maxLat;
    this.minLon = minLon;
    this.maxLon = maxLon;
  }

