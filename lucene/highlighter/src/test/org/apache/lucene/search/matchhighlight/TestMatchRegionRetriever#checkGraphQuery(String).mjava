  private void checkGraphQuery(String field) throws IOException {
    new IndexBuilder(this::toField)
        .doc(field, "foo bar baz")
        .doc(field, "bar foo baz")
        .doc(field, "bar baz foo")
        .doc(field, "bar bar bar irrelevant")
        .build(
            analyzer,
            reader -> {
              assertThat(
                  highlights(reader, new TermQuery(new Term(field, "syn1"))),
                  containsInAnyOrder(fmt("0: (%s: '>foo bar< baz')", field)));

              // [syn2 syn3] = baz
              // so both these queries highlight baz.
              assertThat(
                  highlights(reader, new TermQuery(new Term(field, "syn3"))),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo bar >baz<')", field),
                      fmt("1: (%s: 'bar foo >baz<')", field),
                      fmt("2: (%s: 'bar >baz< foo')", field)));
              assertThat(
                  highlights(reader, stdQueryParser.apply(field + ":\"syn2 syn3\"", field)),
                  containsInAnyOrder(
                      fmt("0: (%s: 'foo bar >baz<')", field),
                      fmt("1: (%s: 'bar foo >baz<')", field),
                      fmt("2: (%s: 'bar >baz< foo')", field)));
              assertThat(
                  highlights(reader, stdQueryParser.apply(field + ":\"foo syn2 syn3\"", field)),
                  containsInAnyOrder(fmt("1: (%s: 'bar >foo baz<')", field)));
            });
  }

