  /**
   * Returns a mapping from the old document ID to its new location in the sorted index.
   * Implementations can use the auxiliary {@link #sort(int, IndexSorter.DocComparator)} to compute
   * the old-to-new permutation given a list of documents and their corresponding values.
   *
   * <p>A return value of <code>null</code> is allowed and means that <code>reader</code> is already
   * sorted.
   *
   * <p><b>NOTE:</b> deleted documents are expected to appear in the mapping as well, they will
   * however be marked as deleted in the sorted view.
   */
  DocMap sort(LeafReader reader) throws IOException {
    SortField[] fields = sort.getSort();
    final IndexSorter.DocComparator[] comparators = new IndexSorter.DocComparator[fields.length];

    for (int i = 0; i < fields.length; i++) {
      IndexSorter sorter = fields[i].getIndexSorter();
      if (sorter == null) {
        throw new IllegalArgumentException(
            "Cannot use sortfield + " + fields[i] + " to sort indexes");
      }
      comparators[i] = sorter.getDocComparator(reader, reader.maxDoc());
    }
    return sort(reader.maxDoc(), comparators);
  }

