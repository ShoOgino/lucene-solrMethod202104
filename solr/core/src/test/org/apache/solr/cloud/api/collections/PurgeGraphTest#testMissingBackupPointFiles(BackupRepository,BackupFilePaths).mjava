    private void testMissingBackupPointFiles(BackupRepository repository, BackupFilePaths paths) throws IOException {
        PurgeGraph purgeGraph = new PurgeGraph();
        buildCompleteGraph(repository, paths, purgeGraph);
        when(repository.listAllOrEmpty(same(paths.getShardBackupMetadataDir()))).thenAnswer((Answer<String[]>)
                invocationOnMock -> Arrays.copyOfRange(shardBackupIds, 1, shardBackupIds.length)
        );
        purgeGraph.findDeletableNodes(repository, paths);

        assertEquals(1, purgeGraph.backupIdDeletes.size());
        assertEquals("b1", purgeGraph.backupIdDeletes.get(0));
        assertEquals(1, purgeGraph.shardBackupMetadataDeletes.size());
        assertEquals("b1_s2", purgeGraph.shardBackupMetadataDeletes.get(0));
        assertTrue(purgeGraph.indexFileDeletes.contains("s1_100"));
        assertFalse(purgeGraph.indexFileDeletes.contains("s1_101"));

        purgeGraph = new PurgeGraph();
        buildCompleteGraph(repository, paths, purgeGraph);
        when(repository.listAllOrEmpty(same(paths.getShardBackupMetadataDir()))).thenAnswer((Answer<String[]>)
                invocationOnMock -> new String[]{"b1_s1", "b2_s1", "b3_s1", "b3_s2", "b3_s3"}
        );
        purgeGraph.findDeletableNodes(repository, paths);

        assertEquals(2, purgeGraph.backupIdDeletes.size());
        assertTrue(purgeGraph.backupIdDeletes.containsAll(Arrays.asList("b1", "b2")));
        assertEquals(2, purgeGraph.shardBackupMetadataDeletes.size());
        assertTrue(purgeGraph.shardBackupMetadataDeletes.containsAll(Arrays.asList("b2_s1", "b1_s1")));
        assertTrue(purgeGraph.indexFileDeletes.containsAll(Arrays.asList("s1_100", "s1_101")));
        assertFalse(purgeGraph.indexFileDeletes.contains("s1_102"));
    }

