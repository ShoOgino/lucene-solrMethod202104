  /**
   * Looks for the next transition that matches the provided label, assuming determinism.
   *
   * @param state The source state.
   * @param fromTransitionIndex The transition index to start the lookup from (inclusive); negative
   *     interpreted as 0.
   * @param label The codepoint to look up.
   * @param transition The output transition to update with the matching transition; or null for no
   *     update.
   * @return The destination state; or -1 if no matching outgoing transition.
   */
  private int next(int state, int fromTransitionIndex, int label, Transition transition) {
    assert state >= 0;
    assert label >= 0;
    int stateIndex = 2 * state;
    int firstTransitionIndex = states[stateIndex];
    int numTransitions = states[stateIndex + 1];

    // Since transitions are sorted,
    // binary search the transition for which label is within [minLabel, maxLabel].
    int low = Math.max(fromTransitionIndex, 0);
    int high = numTransitions - 1;
    while (low <= high) {
      int mid = (low + high) >>> 1;
      int transitionIndex = firstTransitionIndex + 3 * mid;
      int minLabel = transitions[transitionIndex + 1];
      if (minLabel > label) {
        high = mid - 1;
      } else {
        int maxLabel = transitions[transitionIndex + 2];
        if (maxLabel < label) {
          low = mid + 1;
        } else {
          int destState = transitions[transitionIndex];
          if (transition != null) {
            transition.dest = destState;
            transition.min = minLabel;
            transition.max = maxLabel;
            transition.transitionUpto = mid;
          }
          return destState;
        }
      }
    }
    int destState = -1;
    if (transition != null) {
      transition.dest = destState;
      transition.transitionUpto = low;
    }
    return destState;
  }

