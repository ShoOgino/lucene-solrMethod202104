  /*
   * Save the set of terms in the queries to termSetMap.
   *
   * ex1) q=name:john
   *      - fieldMatch==true
   *          termSetMap=Map<"name",Set<"john">>
   *      - fieldMatch==false
   *          termSetMap=Map<null,Set<"john">>
   *
   * ex2) q=name:john title:manager
   *      - fieldMatch==true
   *          termSetMap=Map<"name",Set<"john">,
   *                         "title",Set<"manager">>
   *      - fieldMatch==false
   *          termSetMap=Map<null,Set<"john","manager">>
   *
   * ex3) q=name:"john lennon"
   *      - fieldMatch==true
   *          termSetMap=Map<"name",Set<"john","lennon">>
   *      - fieldMatch==false
   *          termSetMap=Map<null,Set<"john","lennon">>
   */
  void saveTerms(Collection<Query> flatQueries, IndexReader reader) throws IOException {
    for (Query query : flatQueries) {
      while (query instanceof BoostQuery) {
        query = ((BoostQuery) query).getQuery();
      }
      Set<String> termSet = getTermSet(query);
      if (query instanceof TermQuery) termSet.add(((TermQuery) query).getTerm().text());
      else if (query instanceof PhraseQuery) {
        for (Term term : ((PhraseQuery) query).getTerms()) termSet.add(term.text());
      } else if (query instanceof MultiTermQuery && reader != null) {
        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);
        for (BooleanClause clause : mtqTerms) {
          termSet.add(((TermQuery) clause.getQuery()).getTerm().text());
        }
      } else
        throw new RuntimeException("query \"" + query.toString() + "\" must be flatten first.");
    }
  }

