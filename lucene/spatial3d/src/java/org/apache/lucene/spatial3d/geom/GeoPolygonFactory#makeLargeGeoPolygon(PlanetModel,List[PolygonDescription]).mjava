  /**
   * Create a large GeoPolygon. This is one which has more than 100 sides and/or may have resolution
   * problems with very closely spaced points, which often occurs when the polygon was constructed
   * to approximate curves. No tiling is done, and intersections and membership are optimized for
   * having large numbers of sides.
   *
   * <p>This method does very little checking for legality. It expects the incoming shapes to not
   * intersect each other. The shapes can be disjoint or nested. If the shapes listed are nested,
   * then we are describing holes. There is no limit to the depth of holes. However, if a shape is
   * nested within another it must be explicitly described as being a child of the other shape.
   *
   * <p>Membership in any given shape is described by the clockwise/counterclockwise direction of
   * the points. The clockwise direction indicates that a point inside is "in-set", while a
   * counter-clockwise direction implies that a point inside is "out-of-set".
   *
   * @param planetModel is the planet model.
   * @param shapesList is the list of polygons we should be making.
   * @return the GeoPolygon, or null if it cannot be constructed.
   */
  public static GeoPolygon makeLargeGeoPolygon(
      final PlanetModel planetModel, final List<PolygonDescription> shapesList) {

    // We're going to be building a single-level list of shapes in the end, with a single point that
    // we know to be inside/outside, which is not on an edge.

    final List<List<GeoPoint>> pointsList = new ArrayList<>();

    BestShape testPointShape = null;
    for (final PolygonDescription shape : shapesList) {
      // Convert this shape and its holes to a general list of shapes.  We also need to identify
      // exactly one legal, non-degenerate shape with no children that we can use to find a test
      // point.  We also optimize to choose as small as possible a polygon for determining the
      // in-set-ness of the test point.
      testPointShape = convertPolygon(pointsList, shape, testPointShape, true);
    }

    // If there's no polygon we can use to determine a test point, we throw up.
    if (testPointShape == null) {
      throw new IllegalArgumentException(
          "couldn't find a non-degenerate polygon for in-set determination");
    }

    final GeoPoint centerOfMass = getCenterOfMass(planetModel, testPointShape.points);
    final GeoComplexPolygon comRval =
        testPointShape.createGeoComplexPolygon(planetModel, pointsList, centerOfMass);
    if (comRval != null) {
      return comRval;
    }

    // Center of mass didn't work.
    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence
    // of points to use for poles.
    final Random generator = new Random(1234);
    for (int counter = 0; counter < 1000000; counter++) {
      // Pick the next random pole
      final GeoPoint pole = pickPole(generator, planetModel, testPointShape.points);
      final GeoComplexPolygon rval =
          testPointShape.createGeoComplexPolygon(planetModel, pointsList, pole);
      if (rval != null) {
        return rval;
      }
      // If pole choice was illegal, try another one
    }
    throw new IllegalArgumentException(
        "cannot find a point that is inside the polygon " + testPointShape);
  }

