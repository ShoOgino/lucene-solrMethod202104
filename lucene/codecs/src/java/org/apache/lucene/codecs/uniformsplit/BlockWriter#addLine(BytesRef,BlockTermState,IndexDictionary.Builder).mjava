  /**
   * Adds a new {@link BlockLine} term for the current field.
   *
   * <p>This method determines whether the new term is part of the current block, or if it is part
   * of the next block. In the latter case, a new block is started (including one or more of the
   * lastly added lines), the current block is written to the block file, and the current block key
   * is added to the {@link IndexDictionary.Builder}.
   *
   * @param term The block line term. The {@link BytesRef} instance is used directly, the caller is
   *     responsible to make a deep copy if needed. This is required because we keep a list of block
   *     lines until we decide to write the current block, and each line must have a different term
   *     instance.
   * @param blockTermState Block line details.
   * @param dictionaryBuilder to which the block keys are added.
   */
  protected void addLine(
      BytesRef term, BlockTermState blockTermState, IndexDictionary.Builder dictionaryBuilder)
      throws IOException {
    assert term != null;
    assert blockTermState != null;
    int mdpLength = TermBytes.computeMdpLength(lastTerm, term);
    blockLines.add(new BlockLine(new TermBytes(mdpLength, term), blockTermState));
    lastTerm = term;
    if (blockLines.size() >= targetNumBlockLines + deltaNumLines) {
      splitAndWriteBlock(dictionaryBuilder);
    }
  }

