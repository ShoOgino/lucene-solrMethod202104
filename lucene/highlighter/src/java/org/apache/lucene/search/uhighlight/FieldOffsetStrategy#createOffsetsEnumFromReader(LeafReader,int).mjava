  protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc)
      throws IOException {
    final Terms termsIndex = leafReader.terms(getField());
    if (termsIndex == null) {
      return OffsetsEnum.EMPTY;
    }

    final List<OffsetsEnum> offsetsEnums = new ArrayList<>();

    // Handle Weight.matches approach
    if (components.getHighlightFlags().contains(UnifiedHighlighter.HighlightFlag.WEIGHT_MATCHES)) {

      createOffsetsEnumsWeightMatcher(leafReader, doc, offsetsEnums);

    } else { // classic approach

      // Handle position insensitive terms (a subset of this.terms field):
      final BytesRef[] insensitiveTerms;
      final PhraseHelper phraseHelper = components.getPhraseHelper();
      final BytesRef[] terms = components.getTerms();
      if (phraseHelper.hasPositionSensitivity()) {
        insensitiveTerms = phraseHelper.getAllPositionInsensitiveTerms();
        assert insensitiveTerms.length <= terms.length
            : "insensitive terms should be smaller set of all terms";
      } else {
        insensitiveTerms = terms;
      }
      if (insensitiveTerms.length > 0) {
        createOffsetsEnumsForTerms(insensitiveTerms, termsIndex, doc, offsetsEnums);
      }

      // Handle spans
      if (phraseHelper.hasPositionSensitivity()) {
        phraseHelper.createOffsetsEnumsForSpans(leafReader, doc, offsetsEnums);
      }

      // Handle automata
      if (components.getAutomata().length > 0) {
        createOffsetsEnumsForAutomata(termsIndex, doc, offsetsEnums);
      }
    }

    switch (offsetsEnums.size()) {
      case 0:
        return OffsetsEnum.EMPTY;
      case 1:
        return offsetsEnums.get(0);
      default:
        return new OffsetsEnum.MultiOffsetsEnum(offsetsEnums);
    }
  }

