  /**
   * Creates a new instance of DisjunctionMaxScorer
   *
   * @param weight The Weight to be used.
   * @param tieBreakerMultiplier Multiplier applied to non-maximum-scoring subqueries for a document
   *     as they are summed into the result.
   * @param subScorers The sub scorers this Scorer should iterate on
   */
  DisjunctionMaxScorer(
      Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, ScoreMode scoreMode)
      throws IOException {
    super(weight, subScorers, scoreMode);
    this.subScorers = subScorers;
    this.tieBreakerMultiplier = tieBreakerMultiplier;
    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {
      throw new IllegalArgumentException("tieBreakerMultiplier must be in [0, 1]");
    }
    if (scoreMode == ScoreMode.TOP_SCORES) {
      this.disjunctionBlockPropagator = new DisjunctionScoreBlockBoundaryPropagator(subScorers);
    } else {
      this.disjunctionBlockPropagator = null;
    }
  }

