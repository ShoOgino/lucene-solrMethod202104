  private double[] orderTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {
    // quantize original and order it to reflect encoding
    int orientation = GeoUtils.orient(aX, aY, bX, bY, cX, cY);

    if (orientation == -1) {
      // we need to change the orientation if CW for triangles
      return new double[] {
        decodeX(cX), decodeY(cY), decodeX(bX), decodeY(bY), decodeX(aX), decodeY(aY)
      };
    } else if (aX == bX && aY == bY) {
      if (aX != cX || aY != cY) { // not a point
        if (aX < cX) {
          return new double[] {
            decodeX(aX), decodeY(aY), decodeX(cX), decodeY(cY), decodeX(aX), decodeY(aY)
          };
        } else {
          return new double[] {
            decodeX(cX), decodeY(cY), decodeX(aX), decodeY(aY), decodeX(cX), decodeY(cY)
          };
        }
      }
    } else if ((aX == cX && aY == cY) || (bX == cX && bY == cY)) {
      if (aX < bX) {
        return new double[] {
          decodeX(aX), decodeY(aY), decodeX(bX), decodeY(bY), decodeX(aX), decodeY(aY)
        };
      } else {
        return new double[] {
          decodeX(bX), decodeY(bY), decodeX(aX), decodeY(aY), decodeX(bX), decodeY(bY)
        };
      }
    }
    return new double[] {
      decodeX(aX), decodeY(aY), decodeX(bX), decodeY(bY), decodeX(cX), decodeY(cY)
    };
  }

