  /**
   * Constructor based on a {@link TwoPhaseIterator}. In that case the {@link Scorer} will support
   * two-phase iteration.
   *
   * @param weight the parent weight
   * @param score the score to return on each document
   * @param scoreMode the score mode
   * @param twoPhaseIterator the iterator that defines matching documents
   */
  public ConstantScoreScorer(
      Weight weight, float score, ScoreMode scoreMode, TwoPhaseIterator twoPhaseIterator) {
    super(weight);
    this.score = score;
    this.scoreMode = scoreMode;
    if (scoreMode == ScoreMode.TOP_SCORES) {
      this.approximation = new DocIdSetIteratorWrapper(twoPhaseIterator.approximation());
      this.twoPhaseIterator =
          new TwoPhaseIterator(this.approximation) {
            @Override
            public boolean matches() throws IOException {
              return twoPhaseIterator.matches();
            }

            @Override
            public float matchCost() {
              return twoPhaseIterator.matchCost();
            }
          };
    } else {
      this.approximation = twoPhaseIterator.approximation();
      this.twoPhaseIterator = twoPhaseIterator;
    }
    this.disi = TwoPhaseIterator.asDocIdSetIterator(this.twoPhaseIterator);
  }

