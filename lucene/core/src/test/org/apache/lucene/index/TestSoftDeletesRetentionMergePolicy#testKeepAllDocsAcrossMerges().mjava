  public void testKeepAllDocsAcrossMerges() throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();
    indexWriterConfig.setMergePolicy(
        new SoftDeletesRetentionMergePolicy(
            "soft_delete", () -> new MatchAllDocsQuery(), new LogDocMergePolicy()));
    indexWriterConfig.setSoftDeletesField("soft_delete");
    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);

    Document doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    writer.commit();
    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));

    writer.commit();
    doc = new Document();
    doc.add(new StringField("id", "1", Field.Store.YES));
    doc.add(new NumericDocValuesField("soft_delete", 1)); // already deleted
    writer.softUpdateDocument(
        new Term("id", "1"), doc, new NumericDocValuesField("soft_delete", 1));
    writer.commit();
    DirectoryReader reader = writer.getReader();
    assertEquals(0, reader.numDocs());
    assertEquals(3, reader.maxDoc());
    assertEquals(0, writer.getDocStats().numDocs);
    assertEquals(3, writer.getDocStats().maxDoc);
    assertEquals(3, reader.leaves().size());
    reader.close();
    writer.forceMerge(1);
    reader = writer.getReader();
    assertEquals(0, reader.numDocs());
    assertEquals(3, reader.maxDoc());
    assertEquals(0, writer.getDocStats().numDocs);
    assertEquals(3, writer.getDocStats().maxDoc);
    assertEquals(1, reader.leaves().size());
    IOUtils.close(reader, writer, dir);
  }

