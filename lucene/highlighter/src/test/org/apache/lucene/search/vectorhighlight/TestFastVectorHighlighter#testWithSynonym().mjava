  public void testWithSynonym() throws IOException {
    Directory dir = newDirectory();
    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
    FieldType type = new FieldType(TextField.TYPE_STORED);
    type.setStoreTermVectorOffsets(true);
    type.setStoreTermVectorPositions(true);
    type.setStoreTermVectors(true);
    type.freeze();

    Document doc = new Document();
    doc.add( new Field("field", "the quick brown fox", type ));
    writer.addDocument(doc);
    FastVectorHighlighter highlighter = new FastVectorHighlighter();

    IndexReader reader = DirectoryReader.open(writer);
    int docId = 0;

    // query1: simple synonym query
    SynonymQuery synQuery = new SynonymQuery.Builder("field")
        .addTerm(new Term("field", "quick"))
        .addTerm(new Term("field", "fast"))
        .build();
    FieldQuery fieldQuery  = highlighter.getFieldQuery(synQuery, reader);
    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, "field", 54, 1);
    assertEquals("the <b>quick</b> brown fox", bestFragments[0]);

    // query2: boolean query with synonym query
    BooleanQuery.Builder bq =
        new BooleanQuery.Builder()
            .add(new BooleanClause(synQuery, Occur.MUST))
            .add(new BooleanClause(new TermQuery(new Term("field", "fox")), Occur.MUST));
    fieldQuery  = highlighter.getFieldQuery(bq.build(), reader);
    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, "field", 54, 1);
    assertEquals("the <b>quick</b> brown <b>fox</b>", bestFragments[0]);

    reader.close();
    writer.close();
    dir.close();
  }

