  public void testEquality() {
    SpanQuery sq1 = new SpanTermQuery(new Term("field", "one"));
    SpanQuery sq2 = new SpanTermQuery(new Term("field", "two"));
    BytesRef payload1 = new BytesRef("pay1");
    BytesRef payload2 = new BytesRef("pay2");
    SpanQuery query1 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));
    SpanQuery query2 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload1));
    SpanQuery query3 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload2));
    SpanQuery query4 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload2));
    SpanQuery query5 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));

    assertEquals(query1, query5);
    assertFalse(query1.equals(query2));
    assertFalse(query1.equals(query3));
    assertFalse(query1.equals(query4));
    assertFalse(query2.equals(query3));
    assertFalse(query2.equals(query4));
    assertFalse(query3.equals(query4));

    // Create an integer and a float encoded payload
    Integer i = 451;
    BytesRef intPayload = new BytesRef(ByteBuffer.allocate(4).putInt(i).array());
    Float e = 2.71828f;
    BytesRef floatPayload = new BytesRef(ByteBuffer.allocate(4).putFloat(e).array());
    SpanQuery floatLTQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(floatPayload), PayloadType.FLOAT, MatchOperation.LT);
    SpanQuery floatLTEQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(floatPayload), PayloadType.FLOAT, MatchOperation.LTE);
    SpanQuery floatGTQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(floatPayload), PayloadType.FLOAT, MatchOperation.GT);
    SpanQuery floatGTEQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(floatPayload), PayloadType.FLOAT, MatchOperation.GTE);

    SpanQuery intLTQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.INT, MatchOperation.LT);
    SpanQuery intLTEQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.INT, MatchOperation.LTE);
    SpanQuery intGTQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.INT, MatchOperation.GT);
    SpanQuery intGTEQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.INT, MatchOperation.GT);

    // string inequality checks
    SpanQuery stringLTQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.STRING, MatchOperation.LT);
    SpanQuery stringLTEQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.STRING, MatchOperation.LTE);
    SpanQuery stringGTQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.STRING, MatchOperation.GT);
    SpanQuery stringGTEQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.STRING, MatchOperation.GT);
    SpanQuery stringEQQuery =
        new SpanPayloadCheckQuery(
            sq1, Collections.singletonList(intPayload), PayloadType.STRING, MatchOperation.EQ);

    SpanQuery stringDefaultQuery =
        new SpanPayloadCheckQuery(sq1, Collections.singletonList(intPayload));

    assertTrue(stringDefaultQuery.equals(stringEQQuery));
    assertFalse(stringDefaultQuery.equals(stringGTQuery));
    assertFalse(stringDefaultQuery.equals(stringGTEQuery));
    assertFalse(stringDefaultQuery.equals(stringLTQuery));
    assertFalse(stringDefaultQuery.equals(stringLTEQuery));

    assertFalse(floatLTQuery.equals(floatLTEQuery));
    assertFalse(floatLTQuery.equals(floatGTQuery));
    assertFalse(floatLTQuery.equals(floatGTEQuery));
    assertFalse(floatLTQuery.equals(intLTQuery));
    assertFalse(floatLTQuery.equals(intLTEQuery));
    assertFalse(floatLTQuery.equals(intGTQuery));
    assertFalse(floatLTQuery.equals(intGTEQuery));
  }

