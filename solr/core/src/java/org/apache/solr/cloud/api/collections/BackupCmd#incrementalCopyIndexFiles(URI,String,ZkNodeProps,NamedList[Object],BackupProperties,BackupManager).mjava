  private void incrementalCopyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request,
                                         NamedList<Object> results, BackupProperties backupProperties,
                                         BackupManager backupManager) throws IOException {
    String backupName = request.getStr(NAME);
    String asyncId = request.getStr(ASYNC);
    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);
    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();

    log.info("Starting backup of collection={} with backupName={} at location={}", collectionName, backupName,
            backupPath);

    Optional<BackupProperties> previousProps = backupManager.tryReadBackupProperties();
    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);

    Collection<Slice> slices = ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices();
    for (Slice slice : slices) {
      // Note - Actually this can return a null value when there is no leader for this shard.
      Replica replica = slice.getLeader();
      if (replica == null) {
        throw new SolrException(ErrorCode.SERVER_ERROR, "No 'leader' replica available for shard " + slice.getName() + " of collection " + collectionName);
      }
      String coreName = replica.getStr(CORE_NAME_PROP);

      ModifiableSolrParams params = coreBackupParams(backupPath, repoName, slice, coreName, true /* incremental backup */);
      params.set(CoreAdminParams.BACKUP_INCREMENTAL, true);
      previousProps.flatMap(bp -> bp.getShardBackupIdFor(slice.getName()))
              .ifPresent(prevBackupPoint -> params.set(CoreAdminParams.PREV_SHARD_BACKUP_ID, prevBackupPoint.getIdAsString()));

      ShardBackupId shardBackupId = backupProperties.putAndGetShardBackupIdFor(slice.getName(),
              backupManager.getBackupId().getId());
      params.set(CoreAdminParams.SHARD_BACKUP_ID, shardBackupId.getIdAsString());

      shardRequestTracker.sendShardRequest(replica.getNodeName(), params, shardHandler);
      log.debug("Sent backup request to core={} for backupName={}", coreName, backupName);
    }
    log.debug("Sent backup requests to all shard leaders for backupName={}", backupName);

    String msgOnError = "Could not backup all shards";
    shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);
    if (results.get("failure") != null) {
      throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError);
    }

    //Aggregating result from different shards
    @SuppressWarnings({"rawtypes"})
    NamedList aggRsp = aggregateResults(results, collectionName, backupManager, backupProperties, slices);
    results.add("response", aggRsp);
  }

