  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    if (!enable) {
      rsp.add("error", "metrics history collection is disabled");
      return;
    }
    String actionStr = req.getParams().get(CommonParams.ACTION);
    if (actionStr == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'action' is a required param");
    }
    Cmd cmd = Cmd.get(actionStr);
    if (cmd == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "unknown 'action' param '" + actionStr + "', supported actions: " + Cmd.actions);
    }
    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();
    rsp.add("metrics", res);
    switch (cmd) {
      case LIST:
        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);
        List<Pair<String, Long>> lst = factory.list(rows);
        lst.forEach(p -> {
          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();
          // RrdDb always uses seconds - convert here for compatibility
          data.add("lastModified", TimeUnit.SECONDS.convert(p.second(), TimeUnit.MILLISECONDS));
          data.add("node", nodeName);
          res.add(p.first(), data);
        });
        break;
      case GET:
        String name = req.getParams().get(CommonParams.NAME);
        if (name == null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'name' is a required param");
        }
        String[] dsNames = req.getParams().getParams("ds");
        String formatStr = req.getParams().get("format", Format.LIST.toString());
        Format format = Format.get(formatStr);
        if (format == null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "unknown 'format' param '" + formatStr + "', supported formats: " + Format.formats);
        }
        if (factory.exists(name)) {
          // get a throwaway copy (safe to close and discard)
          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);
          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();
          data.add("data", getDbData(db, dsNames, format, req.getParams()));
          data.add("lastModified", db.getLastUpdateTime());
          data.add("node", nodeName);
          res.add(name, data);
          db.close();
        }
        break;
      case STATUS:
        name = req.getParams().get(CommonParams.NAME);
        if (name == null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'name' is a required param");
        }
        if (factory.exists(name)) {
          // get a throwaway copy (safe to close and discard)
          RrdDb db = RrdDb.getBuilder().setBackendFactory(factory).setReadOnly(true).setPath(new URI(URI_PREFIX + name)).build();
          SimpleOrderedMap<Object> status = new SimpleOrderedMap<>();
          status.add("status", getDbStatus(db));
          status.add("node", nodeName);
          res.add(name, status);
          db.close();
        }
        break;
      case DELETE:
        name = req.getParams().get(CommonParams.NAME);
        if (name == null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'name' is a required param");
        }
        if (name.equalsIgnoreCase("all") || name.equals("*")) {
          factory.removeAll();
        } else {
          factory.remove(name);
        }
        rsp.add("success", "ok");
        break;
    }
    // when using in-memory DBs non-overseer node has no access to overseer DBs - in this case
    // forward the request to Overseer leader if available
    if (!factory.isPersistent()) {
      String leader = getOverseerLeader();
      if (leader != null && !amIOverseerLeader(leader)) {
        // get & merge remote response
        NamedList<Object> remoteRes = handleRemoteRequest(leader, req);
        mergeRemoteRes(rsp, remoteRes);
      }
    }
    SimpleOrderedMap<Object> apiState = new SimpleOrderedMap<>();
    apiState.add("enableReplicas", enableReplicas);
    apiState.add("enableNodes", enableNodes);
    apiState.add("mode", enable ? (factory.isPersistent() ? "index" : "memory") : "inactive");
    if (!factory.isPersistent()) {
      apiState.add("message", "WARNING: metrics history is not being persisted. Create .system collection to start persisting history.");
    }
    rsp.add("state", apiState);
    rsp.getResponseHeader().add("zkConnected", cloudManager != null);
  }

