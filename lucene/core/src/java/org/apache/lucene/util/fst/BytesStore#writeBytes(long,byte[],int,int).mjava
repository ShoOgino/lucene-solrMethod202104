  /**
   * Absolute writeBytes without changing the current position. Note: this cannot "grow" the bytes,
   * so you must only call it on already written parts.
   */
  void writeBytes(long dest, byte[] b, int offset, int len) {
    // System.out.println("  BS.writeBytes dest=" + dest + " offset=" + offset + " len=" + len);
    assert dest + len <= getPosition() : "dest=" + dest + " pos=" + getPosition() + " len=" + len;

    // Note: weird: must go "backwards" because copyBytes
    // calls us with overlapping src/dest.  If we
    // go forwards then we overwrite bytes before we can
    // copy them:

    /*
    int blockIndex = dest >> blockBits;
    int upto = dest & blockMask;
    byte[] block = blocks.get(blockIndex);
    while (len > 0) {
      int chunk = blockSize - upto;
      System.out.println("    cycle chunk=" + chunk + " len=" + len);
      if (len <= chunk) {
        System.arraycopy(b, offset, block, upto, len);
        break;
      } else {
        System.arraycopy(b, offset, block, upto, chunk);
        offset += chunk;
        len -= chunk;
        blockIndex++;
        block = blocks.get(blockIndex);
        upto = 0;
      }
    }
    */

    final long end = dest + len;
    int blockIndex = (int) (end >> blockBits);
    int downTo = (int) (end & blockMask);
    if (downTo == 0) {
      blockIndex--;
      downTo = blockSize;
    }
    byte[] block = blocks.get(blockIndex);

    while (len > 0) {
      // System.out.println("    cycle downTo=" + downTo + " len=" + len);
      if (len <= downTo) {
        // System.out.println("      final: offset=" + offset + " len=" + len + " dest=" +
        // (downTo-len));
        System.arraycopy(b, offset, block, downTo - len, len);
        break;
      } else {
        len -= downTo;
        // System.out.println("      partial: offset=" + (offset + len) + " len=" + downTo + "
        // dest=0");
        System.arraycopy(b, offset + len, block, 0, downTo);
        blockIndex--;
        block = blocks.get(blockIndex);
        downTo = blockSize;
      }
    }
  }

