  public void testMutliValuedFieldWithNonDefaultGaps() throws IOException {

    Analyzer analyzer =
        new Analyzer() {
          @Override
          public int getPositionIncrementGap(String fieldName) {
            return 1000;
          }

          @Override
          public int getOffsetGap(String fieldName) {
            return 2000;
          }

          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            return new TokenStreamComponents(new WhitespaceTokenizer());
          }
        };

    MonitorQuery mq =
        new MonitorQuery(
            "query", MonitorTestBase.parse(MonitorTestBase.FIELD + ":\"hello world\"~5"));

    try (Monitor monitor = new Monitor(analyzer)) {
      monitor.register(mq);

      Document doc1 = new Document();
      doc1.add(newTextField(FIELD, "hello world", Field.Store.NO));
      doc1.add(newTextField(FIELD, "goodbye", Field.Store.NO));

      MatchingQueries<QueryMatch> matches = monitor.match(doc1, QueryMatch.SIMPLE_MATCHER);
      assertNotNull(matches.getMatches());
      assertEquals(1, matches.getMatchCount());
      assertNotNull(matches.matches("query"));

      Document doc2 = new Document();
      doc2.add(newTextField(FIELD, "hello", Field.Store.NO));
      doc2.add(newTextField(FIELD, "world", Field.Store.NO));
      matches = monitor.match(doc2, QueryMatch.SIMPLE_MATCHER);
      assertEquals(0, matches.getMatchCount());
    }
  }

