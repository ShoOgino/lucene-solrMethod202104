  private static Point[] createRandomPoints(
      BKDConfig config, int maxDoc, int[] commonPrefixLengths) {
    assertTrue(commonPrefixLengths.length == config.numDims);
    final int numPoints = TestUtil.nextInt(random(), 1, 100000);
    Point[] points = new Point[numPoints];
    if (random().nextInt(5) != 0) {
      for (int i = 0; i < numPoints; ++i) {
        byte[] value = new byte[config.packedBytesLength];
        random().nextBytes(value);
        points[i] = new Point(value, random().nextInt(maxDoc));
      }
      for (int i = 0; i < config.numDims; ++i) {
        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, config.bytesPerDim);
      }
      BytesRef firstValue = points[0].packedValue;
      for (int i = 1; i < points.length; ++i) {
        for (int dim = 0; dim < config.numDims; ++dim) {
          int offset = dim * config.bytesPerDim;
          BytesRef packedValue = points[i].packedValue;
          System.arraycopy(
              firstValue.bytes,
              firstValue.offset + offset,
              packedValue.bytes,
              packedValue.offset + offset,
              commonPrefixLengths[dim]);
        }
      }
    } else {
      // index dim are equal, data dims different
      int numDataDims = config.numDims - config.numIndexDims;
      byte[] indexDims = new byte[config.packedIndexBytesLength];
      random().nextBytes(indexDims);
      byte[] dataDims = new byte[numDataDims * config.bytesPerDim];
      for (int i = 0; i < numPoints; ++i) {
        byte[] value = new byte[config.packedBytesLength];
        System.arraycopy(indexDims, 0, value, 0, config.packedIndexBytesLength);
        random().nextBytes(dataDims);
        System.arraycopy(
            dataDims, 0, value, config.packedIndexBytesLength, numDataDims * config.bytesPerDim);
        points[i] = new Point(value, random().nextInt(maxDoc));
      }
      for (int i = 0; i < config.numIndexDims; ++i) {
        commonPrefixLengths[i] = config.bytesPerDim;
      }
      for (int i = config.numIndexDims; i < config.numDims; ++i) {
        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, config.bytesPerDim);
      }
      BytesRef firstValue = points[0].packedValue;
      for (int i = 1; i < points.length; ++i) {
        for (int dim = config.numIndexDims; dim < config.numDims; ++dim) {
          int offset = dim * config.bytesPerDim;
          BytesRef packedValue = points[i].packedValue;
          System.arraycopy(
              firstValue.bytes,
              firstValue.offset + offset,
              packedValue.bytes,
              packedValue.offset + offset,
              commonPrefixLengths[dim]);
        }
      }
    }
    return points;
  }

