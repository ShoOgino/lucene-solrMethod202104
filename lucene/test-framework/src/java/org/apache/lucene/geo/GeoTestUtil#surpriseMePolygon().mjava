  private static Polygon surpriseMePolygon() {
    // repeat until we get a poly that doesn't cross dateline:
    newPoly:
    while (true) {
      // System.out.println("\nPOLY ITER");
      double centerLat = nextLatitude();
      double centerLon = nextLongitude();
      double radius = 0.1 + 20 * random().nextDouble();
      double radiusDelta = random().nextDouble();

      ArrayList<Double> lats = new ArrayList<>();
      ArrayList<Double> lons = new ArrayList<>();
      double angle = 0.0;
      while (true) {
        angle += random().nextDouble() * 40.0;
        // System.out.println("  angle " + angle);
        if (angle > 360) {
          break;
        }
        double len = radius * (1.0 - radiusDelta + radiusDelta * random().nextDouble());
        // System.out.println("    len=" + len);
        double lat = centerLat + len * Math.cos(Math.toRadians(angle));
        double lon = centerLon + len * Math.sin(Math.toRadians(angle));
        if (lon <= GeoUtils.MIN_LON_INCL || lon >= GeoUtils.MAX_LON_INCL || lat > 90 || lat < -90) {
          // cannot cross dateline or pole: try again!
          continue newPoly;
        }
        lats.add(lat);
        lons.add(lon);

        // System.out.println("    lat=" + lats.get(lats.size()-1) + " lon=" +
        // lons.get(lons.size()-1));
      }

      // close it
      lats.add(lats.get(0));
      lons.add(lons.get(0));

      double[] latsArray = new double[lats.size()];
      double[] lonsArray = new double[lons.size()];
      for (int i = 0; i < lats.size(); i++) {
        latsArray[i] = lats.get(i);
        lonsArray[i] = lons.get(i);
      }
      return new Polygon(latsArray, lonsArray);
    }
  }

