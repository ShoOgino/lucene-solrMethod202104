  /**
   * Compute a DFA that accepts all strings within an edit distance of <code>n</code>, matching the
   * specified exact prefix.
   *
   * <p>All automata have the following properties:
   *
   * <ul>
   *   <li>They are deterministic (DFA).
   *   <li>There are no transitions to dead states.
   *   <li>They are not minimal (some transitions could be combined).
   * </ul>
   */
  public Automaton toAutomaton(int n, String prefix) {
    assert prefix != null;
    if (n == 0) {
      return Automata.makeString(prefix + UnicodeUtil.newString(word, 0, word.length));
    }

    if (n >= descriptions.length) return null;

    final int range = 2 * n + 1;
    ParametricDescription description = descriptions[n];
    // the number of states is based on the length of the word and n
    final int numStates = description.size();
    final int numTransitions = numStates * Math.min(1 + 2 * n, alphabet.length);
    final int prefixStates = prefix != null ? prefix.codePointCount(0, prefix.length()) : 0;

    final Automaton a = new Automaton(numStates + prefixStates, numTransitions);
    int lastState;
    if (prefix != null) {
      // Insert prefix
      lastState = a.createState();
      for (int i = 0, cp = 0; i < prefix.length(); i += Character.charCount(cp)) {
        int state = a.createState();
        cp = prefix.codePointAt(i);
        a.addTransition(lastState, state, cp, cp);
        lastState = state;
      }
    } else {
      lastState = a.createState();
    }

    int stateOffset = lastState;
    a.setAccept(lastState, description.isAccept(0));

    // create all states, and mark as accept states if appropriate
    for (int i = 1; i < numStates; i++) {
      int state = a.createState();
      a.setAccept(state, description.isAccept(i));
    }

    // TODO: this creates bogus states/transitions (states are final, have self loops, and can't be
    // reached from an init state)

    // create transitions from state to state
    for (int k = 0; k < numStates; k++) {
      final int xpos = description.getPosition(k);
      if (xpos < 0) continue;
      final int end = xpos + Math.min(word.length - xpos, range);

      for (int x = 0; x < alphabet.length; x++) {
        final int ch = alphabet[x];
        // get the characteristic vector at this position wrt ch
        final int cvec = getVector(ch, xpos, end);
        int dest = description.transition(k, xpos, cvec);
        if (dest >= 0) {
          a.addTransition(stateOffset + k, stateOffset + dest, ch);
        }
      }
      // add transitions for all other chars in unicode
      // by definition, their characteristic vectors are always 0,
      // because they do not exist in the input string.
      int dest = description.transition(k, xpos, 0); // by definition
      if (dest >= 0) {
        for (int r = 0; r < numRanges; r++) {
          a.addTransition(stateOffset + k, stateOffset + dest, rangeLower[r], rangeUpper[r]);
        }
      }
    }

    a.finishState();
    assert a.isDeterministic();
    return a;
  }

