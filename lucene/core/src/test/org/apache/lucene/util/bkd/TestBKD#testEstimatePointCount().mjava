  public void testEstimatePointCount() throws IOException {
    Directory dir = newDirectory();
    final int numValues = atLeast(10000); // make sure to have multiple leaves
    final int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);
    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);
    final byte[] pointValue = new byte[numBytesPerDim];
    final byte[] uniquePointValue = new byte[numBytesPerDim];
    random().nextBytes(uniquePointValue);

    BKDWriter w =
        new BKDWriter(
            numValues,
            dir,
            "_temp",
            new BKDConfig(1, 1, numBytesPerDim, maxPointsInLeafNode),
            BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP,
            numValues);
    for (int i = 0; i < numValues; ++i) {
      if (i == numValues / 2) {
        w.add(uniquePointValue, i);
      } else {
        do {
          random().nextBytes(pointValue);
        } while (Arrays.equals(pointValue, uniquePointValue));
        w.add(pointValue, i);
      }
    }
    final long indexFP;
    try (IndexOutput out = dir.createOutput("bkd", IOContext.DEFAULT)) {
      Runnable finalizer = w.finish(out, out, out);
      indexFP = out.getFilePointer();
      finalizer.run();
      w.close();
    }

    IndexInput pointsIn = dir.openInput("bkd", IOContext.DEFAULT);
    pointsIn.seek(indexFP);
    BKDReader points = new BKDReader(pointsIn, pointsIn, pointsIn);

    // If all points match, then the point count is numLeaves * maxPointsInLeafNode
    int numLeaves = numValues / maxPointsInLeafNode;
    if (numValues % maxPointsInLeafNode != 0) {
      numLeaves++;
    }
    assertEquals(
        numLeaves * maxPointsInLeafNode,
        points.estimatePointCount(
            new IntersectVisitor() {
              @Override
              public void visit(int docID, byte[] packedValue) throws IOException {}

              @Override
              public void visit(int docID) throws IOException {}

              @Override
              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
                return Relation.CELL_INSIDE_QUERY;
              }
            }));

    // Return 0 if no points match
    assertEquals(
        0,
        points.estimatePointCount(
            new IntersectVisitor() {
              @Override
              public void visit(int docID, byte[] packedValue) throws IOException {}

              @Override
              public void visit(int docID) throws IOException {}

              @Override
              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
                return Relation.CELL_OUTSIDE_QUERY;
              }
            }));

    // If only one point matches, then the point count is (actualMaxPointsInLeafNode + 1) / 2
    // in general, or maybe 2x that if the point is a split value
    final long pointCount =
        points.estimatePointCount(
            new IntersectVisitor() {
              @Override
              public void visit(int docID, byte[] packedValue) throws IOException {}

              @Override
              public void visit(int docID) throws IOException {}

              @Override
              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
                if (Arrays.compareUnsigned(
                            uniquePointValue, 0, numBytesPerDim, maxPackedValue, 0, numBytesPerDim)
                        > 0
                    || Arrays.compareUnsigned(
                            uniquePointValue, 0, numBytesPerDim, minPackedValue, 0, numBytesPerDim)
                        < 0) {
                  return Relation.CELL_OUTSIDE_QUERY;
                }
                return Relation.CELL_CROSSES_QUERY;
              }
            });
    assertTrue(
        "" + pointCount,
        pointCount == (maxPointsInLeafNode + 1) / 2
            || // common case
            pointCount == 2 * ((maxPointsInLeafNode + 1) / 2)); // if the point is a split value

    pointsIn.close();
    dir.close();
  }

