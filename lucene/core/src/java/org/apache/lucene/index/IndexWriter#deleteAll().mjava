  /**
   * Delete all documents in the index.
   *
   * <p>This method will drop all buffered documents and will remove all segments from the index.
   * This change will not be visible until a {@link #commit()} has been called. This method can be
   * rolled back using {@link #rollback()}.
   *
   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ). Yet,
   * this method also has different semantics compared to {@link #deleteDocuments(Query...)} since
   * internal data-structures are cleared as well as all segment information is forcefully dropped
   * anti-viral semantics like omitting norms are reset or doc value types are cleared. Essentially
   * a call to {@link #deleteAll()} is equivalent to creating a new {@link IndexWriter} with {@link
   * OpenMode#CREATE} which a delete query only marks documents as deleted.
   *
   * <p>NOTE: this method will forcefully abort all merges in progress. If other threads are running
   * {@link #forceMerge}, {@link #addIndexes(CodecReader[])} or {@link #forceMergeDeletes} methods,
   * they may receive {@link MergePolicy.MergeAbortedException}s.
   *
   * @return The <a href="#sequence_number">sequence number</a> for this operation
   */
  @SuppressWarnings("try")
  public long deleteAll() throws IOException {
    ensureOpen();
    // Remove any buffered docs
    boolean success = false;
    /* hold the full flush lock to prevent concurrency commits / NRT reopens to
     * get in our way and do unnecessary work. -- if we don't lock this here we might
     * get in trouble if */
    /*
     * We first abort and trash everything we have in-memory
     * and keep the thread-states locked, the lockAndAbortAll operation
     * also guarantees "point in time semantics" ie. the checkpoint that we need in terms
     * of logical happens-before relationship in the DW. So we do
     * abort all in memory structures
     * We also drop global field numbering before during abort to make
     * sure it's just like a fresh index.
     */
    try {
      synchronized (fullFlushLock) {
        try (Closeable finalizer = docWriter.lockAndAbortAll()) {
          processEvents(false);
          synchronized (this) {
            try {
              // Abort any running merges
              try {
                abortMerges();
                assert merges.areEnabled() == false
                    : "merges should be disabled - who enabled them?";
                assert mergingSegments.isEmpty()
                    : "found merging segments but merges are disabled: " + mergingSegments;
              } finally {
                // abortMerges disables all merges and we need to re-enable them here to make sure
                // IW can function properly. An exception in abortMerges() might be fatal for IW but
                // just to be sure
                // lets re-enable merges anyway.
                merges.enable();
              }
              adjustPendingNumDocs(-segmentInfos.totalMaxDoc());
              // Remove all segments
              segmentInfos.clear();
              // Ask deleter to locate unreferenced files & remove them:
              deleter.checkpoint(segmentInfos, false);

              /* don't refresh the deleter here since there might
               * be concurrent indexing requests coming in opening
               * files on the directory after we called DW#abort()
               * if we do so these indexing requests might hit FNF exceptions.
               * We will remove the files incrementally as we go...
               */
              // Don't bother saving any changes in our segmentInfos
              readerPool.dropAll();
              // Mark that the index has changed
              changeCount.incrementAndGet();
              segmentInfos.changed();
              globalFieldNumberMap.clear();
              success = true;
              long seqNo = docWriter.getNextSequenceNumber();
              return seqNo;
            } finally {
              if (success == false) {

                if (infoStream.isEnabled("IW")) {
                  infoStream.message("IW", "hit exception during deleteAll");
                }
              }
            }
          }
        }
      }
    } catch (VirtualMachineError tragedy) {
      tragicEvent(tragedy, "deleteAll");
      throw tragedy;
    }
  }

