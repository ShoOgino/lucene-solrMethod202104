  public void testPartOfSpeechsWithCompound() throws IOException {
    assertAnalyzesTo(
        analyzer,
        "가락지나물은 한국, 중국, 일본",
        new String[] {"가락지나물", "은", "한국", "중국", "일본"},
        new int[] {0, 5, 7, 11, 15},
        new int[] {5, 6, 9, 13, 17},
        new int[] {1, 1, 1, 1, 1});

    assertPartsOfSpeech(
        analyzer,
        "가락지나물은 한국, 중국, 일본",
        new POS.Type[] {
          POS.Type.COMPOUND,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME
        },
        new POS.Tag[] {POS.Tag.NNG, POS.Tag.J, POS.Tag.NNP, POS.Tag.NNP, POS.Tag.NNP},
        new POS.Tag[] {POS.Tag.NNG, POS.Tag.J, POS.Tag.NNP, POS.Tag.NNP, POS.Tag.NNP});

    assertAnalyzesTo(
        analyzerDecompound,
        "가락지나물은 한국, 중국, 일본",
        new String[] {"가락지", "나물", "은", "한국", "중국", "일본"},
        new int[] {0, 3, 5, 7, 11, 15},
        new int[] {3, 5, 6, 9, 13, 17},
        new int[] {1, 1, 1, 1, 1, 1});

    assertAnalyzesTo(
        analyzerDecompoundKeep,
        "가락지나물은 한국, 중국, 일본",
        new String[] {"가락지나물", "가락지", "나물", "은", "한국", "중국", "일본"},
        new int[] {0, 0, 3, 5, 7, 11, 15},
        new int[] {5, 3, 5, 6, 9, 13, 17},
        null,
        new int[] {1, 0, 1, 1, 1, 1, 1},
        new int[] {2, 1, 1, 1, 1, 1, 1});

    assertPartsOfSpeech(
        analyzerDecompound,
        "가락지나물은 한국, 중국, 일본",
        new POS.Type[] {
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME
        },
        new POS.Tag[] {POS.Tag.NNG, POS.Tag.NNG, POS.Tag.J, POS.Tag.NNP, POS.Tag.NNP, POS.Tag.NNP},
        new POS.Tag[] {POS.Tag.NNG, POS.Tag.NNG, POS.Tag.J, POS.Tag.NNP, POS.Tag.NNP, POS.Tag.NNP});

    assertPartsOfSpeech(
        analyzerDecompoundKeep,
        "가락지나물은 한국, 중국, 일본",
        new POS.Type[] {
          POS.Type.COMPOUND,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME,
          POS.Type.MORPHEME
        },
        new POS.Tag[] {
          POS.Tag.NNG, POS.Tag.NNG, POS.Tag.NNG, POS.Tag.J, POS.Tag.NNP, POS.Tag.NNP, POS.Tag.NNP
        },
        new POS.Tag[] {
          POS.Tag.NNG, POS.Tag.NNG, POS.Tag.NNG, POS.Tag.J, POS.Tag.NNP, POS.Tag.NNP, POS.Tag.NNP
        });
  }

