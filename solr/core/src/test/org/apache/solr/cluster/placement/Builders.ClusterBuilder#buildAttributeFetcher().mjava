    public AttributeFetcher buildAttributeFetcher() {
      Map<String, Map<Node, String>> sysprops = new HashMap<>();
      Map<NodeMetric<?>, Map<Node, Object>> metrics = new HashMap<>();
      Map<String, CollectionMetrics> collectionMetrics = new HashMap<>();

      // TODO And a few more missing and will be added...

      // Slight redoing of work twice (building Node instances) but let's favor readability over tricks (I could think
      // of many) to reuse the nodes computed in build() or build the AttributeFetcher at the same time.
      for (NodeBuilder nodeBuilder : nodeBuilders) {
        Node node = nodeBuilder.build();

        if (nodeBuilder.getCoreCount() != null) {
          metrics.computeIfAbsent(NodeMetricImpl.NUM_CORES, n -> new HashMap<>())
              .put(node, nodeBuilder.getCoreCount());
        }
        if (nodeBuilder.getFreeDiskGB() != null) {
          metrics.computeIfAbsent(NodeMetricImpl.FREE_DISK_GB, n -> new HashMap<>())
              .put(node, nodeBuilder.getFreeDiskGB());
        }
        if (nodeBuilder.getTotalDiskGB() != null) {
          metrics.computeIfAbsent(NodeMetricImpl.TOTAL_DISK_GB, n -> new HashMap<>())
              .put(node, nodeBuilder.getTotalDiskGB());
        }
        if (nodeBuilder.getSysprops() != null) {
          nodeBuilder.getSysprops().forEach((name, value) -> {
            sysprops.computeIfAbsent(name, n -> new HashMap<>())
                .put(node, value);
          });
        }
        if (nodeBuilder.getMetrics() != null) {
          nodeBuilder.getMetrics().forEach((name, value) -> {
            metrics.computeIfAbsent(name, n -> new HashMap<>())
                .put(node, value);
          });
        }
      }

      if (!collectionBuilders.isEmpty()) {
        Map<Node, Object> nodeToCoreCount = metrics.computeIfAbsent(NodeMetricImpl.NUM_CORES, n -> new HashMap<>());
        collectionBuilders.forEach(builder -> {
          collectionMetrics.put(builder.collectionName, builder.collectionMetricsBuilder.build());
          SolrCollection collection = builder.build();
          collection.iterator().forEachRemaining(shard ->
              shard.iterator().forEachRemaining(replica -> {
                nodeToCoreCount.compute(replica.getNode(), (node, count) ->
                    (count == null) ? 1 : ((Number) count).intValue() + 1);
              }));
        });
      }

      AttributeValues attributeValues = new AttributeValuesImpl(sysprops, metrics, collectionMetrics);
      return new AttributeFetcherForTest(attributeValues);
    }

