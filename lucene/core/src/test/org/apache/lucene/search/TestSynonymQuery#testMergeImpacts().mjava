  public void testMergeImpacts() throws IOException {
    DummyImpactsEnum impacts1 = new DummyImpactsEnum();
    impacts1.reset(
        42,
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, 12), new Impact(8, 13)},
          new Impact[] {new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)}
        },
        new int[] {110, 945});
    DummyImpactsEnum impacts2 = new DummyImpactsEnum();
    impacts2.reset(
        45,
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(6, 13)},
          new Impact[] {new Impact(3, 9), new Impact(5, 11), new Impact(7, 13)}
        },
        new int[] {90, 1000});

    ImpactsSource mergedImpacts =
        SynonymQuery.mergeImpacts(new ImpactsEnum[] {impacts1, impacts2}, new float[] {1f, 1f});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(5, 10), new Impact(7, 12), new Impact(14, 13)},
          new Impact[] {new Impact(Integer.MAX_VALUE, 1)}
        },
        new int[] {90, 1000},
        mergedImpacts.getImpacts());

    ImpactsSource mergedBoostedImpacts =
        SynonymQuery.mergeImpacts(new ImpactsEnum[] {impacts1, impacts2}, new float[] {0.3f, 0.9f});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(4, 12), new Impact(9, 13)},
          new Impact[] {new Impact(Integer.MAX_VALUE, 1)}
        },
        new int[] {90, 1000},
        mergedBoostedImpacts.getImpacts());

    // docID is > the first doIdUpTo of impacts1
    impacts2.reset(
        112,
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(6, 13)},
          new Impact[] {new Impact(3, 9), new Impact(5, 11), new Impact(7, 13)}
        },
        new int[] {150, 1000});
    assertEquals(
        new Impact[][] {
          new Impact[] {
            new Impact(3, 10), new Impact(5, 12), new Impact(8, 13)
          }, // same as impacts1
          new Impact[] {
            new Impact(3, 9), new Impact(10, 11), new Impact(15, 13), new Impact(19, 14)
          }
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    assertEquals(
        new Impact[][] {
          new Impact[] {
            new Impact(1, 10), new Impact(2, 12), new Impact(3, 13)
          }, // same as impacts1*boost
          new Impact[] {new Impact(3, 9), new Impact(7, 11), new Impact(10, 13), new Impact(11, 14)}
        },
        new int[] {110, 945},
        mergedBoostedImpacts.getImpacts());
  }

