  @Test
  public void testBasicUsage() throws IOException {
    new IndexBuilder(this::toField)
        .doc(FLD_TEXT1, "foo bar baz")
        .doc(FLD_TEXT1, "bar foo baz")
        .doc(
            fields -> {
              fields.add(FLD_TEXT1, "Very long content but not matching anything.");
              fields.add(FLD_TEXT2, "no foo but bar");
            })
        .build(
            analyzer,
            reader -> {
              Query query =
                  new BooleanQuery.Builder()
                      .add(new TermQuery(new Term(FLD_TEXT1, "foo")), BooleanClause.Occur.SHOULD)
                      .add(new TermQuery(new Term(FLD_TEXT2, "bar")), BooleanClause.Occur.SHOULD)
                      .build();

              // In the most basic scenario, we run a search against a query, retrieve
              // top docs...
              IndexSearcher searcher = new IndexSearcher(reader);
              Sort sortOrder = Sort.INDEXORDER; // So that results are consistently ordered.
              TopDocs topDocs = searcher.search(query, 10, sortOrder);

              // ...and would want a fixed set of fields from those documents, some of them
              // possibly highlighted if they matched the query.
              //
              // This configures the highlighter so that the FLD_ID field is always returned
              // verbatim,
              // and FLD_TEXT1 is returned *only if it contained a query match*.
              MatchHighlighter highlighter =
                  new MatchHighlighter(searcher, analyzer)
                      .appendFieldHighlighter(FieldValueHighlighters.verbatimValue(FLD_ID))
                      .appendFieldHighlighter(
                          FieldValueHighlighters.highlighted(
                              80 * 3, 1, new PassageFormatter("...", ">", "<"), FLD_TEXT1::equals))
                      .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());

              // Note document field highlights are a stream over documents in topDocs. In the
              // remaining code we will just
              // collect them on the fly into a preformatted string.
              Stream<MatchHighlighter.DocHighlights> highlights =
                  highlighter.highlight(topDocs, query);
              assertHighlights(
                  toDocList(highlights),
                  " 0. id: 0",
                  "    text1: >foo< bar baz",
                  " 1. id: 1",
                  "    text1: bar >foo< baz",
                  " 2. id: 2");

              // In a more realistic use case, you'd want to show the value of a given field
              // *regardless* of whether it
              // contained a highlight or not -- it is odd that document "id: 2" above doesn't have
              // the 'text1' field
              // shown because that field wasn't part of the query match.
              //
              // Let's say the field is also potentially long; if it contains a match,
              // we would want to display the contextual snippet surrounding that match. If it does
              // not contain any
              // matches, we would want to display its content up to a given number of characters
              // (lead lines).
              //
              // Let's do this by adding an appropriate field highlighter on FLD_TEXT1.
              highlighter =
                  new MatchHighlighter(searcher, analyzer)
                      .appendFieldHighlighter(FieldValueHighlighters.verbatimValue(FLD_ID))
                      .appendFieldHighlighter(
                          FieldValueHighlighters.highlighted(
                              80 * 3, 1, new PassageFormatter("...", ">", "<"), FLD_TEXT1::equals))
                      .appendFieldHighlighter(
                          FieldValueHighlighters.maxLeadingCharacters(10, "...", Set.of(FLD_TEXT1)))
                      .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());

              assertHighlights(
                  toDocList(highlighter.highlight(topDocs, query)),
                  " 0. id: 0",
                  "    text1: >foo< bar baz",
                  " 1. id: 1",
                  "    text1: bar >foo< baz",
                  " 2. id: 2",
                  "    text1: Very long...");

              // Field highlighters can apply to multiple fields and be chained for convenience.
              // For example, this defines a combined highlighter over both FLD_TEXT1 and FLD_TEXT2.
              Set<String> fields = Set.of(FLD_TEXT1, FLD_TEXT2);
              MatchHighlighter.FieldValueHighlighter highlightedOrAbbreviated =
                  FieldValueHighlighters.highlighted(
                          80 * 3, 1, new PassageFormatter("...", ">", "<"), fields::contains)
                      .or(FieldValueHighlighters.maxLeadingCharacters(10, "...", fields));

              highlighter =
                  new MatchHighlighter(searcher, analyzer)
                      .appendFieldHighlighter(FieldValueHighlighters.verbatimValue(FLD_ID))
                      .appendFieldHighlighter(highlightedOrAbbreviated)
                      .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());

              assertHighlights(
                  toDocList(highlighter.highlight(topDocs, query)),
                  " 0. id: 0",
                  "    text1: >foo< bar baz",
                  " 1. id: 1",
                  "    text1: bar >foo< baz",
                  " 2. id: 2",
                  "    text1: Very long...",
                  "    text2: no foo but >bar<");
            });
  }

