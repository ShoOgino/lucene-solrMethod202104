  /**
   * Creates a boolean query from a graph token stream. The articulation points of the graph are
   * visited in order and the queries created at each point are merged in the returned boolean
   * query.
   */
  protected Query analyzeGraphBoolean(
      String field, TokenStream source, BooleanClause.Occur operator) throws IOException {
    source.reset();
    GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(source);
    BooleanQuery.Builder builder = new BooleanQuery.Builder();
    int[] articulationPoints = graph.articulationPoints();
    int lastState = 0;
    for (int i = 0; i <= articulationPoints.length; i++) {
      int start = lastState;
      int end = -1;
      if (i < articulationPoints.length) {
        end = articulationPoints[i];
      }
      lastState = end;
      final Query positionalQuery;
      if (graph.hasSidePath(start)) {
        final Iterator<TokenStream> sidePathsIterator = graph.getFiniteStrings(start, end);
        Iterator<Query> queries =
            new Iterator<Query>() {
              @Override
              public boolean hasNext() {
                return sidePathsIterator.hasNext();
              }

              @Override
              public Query next() {
                TokenStream sidePath = sidePathsIterator.next();
                return createFieldQuery(
                    sidePath,
                    BooleanClause.Occur.MUST,
                    field,
                    getAutoGenerateMultiTermSynonymsPhraseQuery(),
                    0);
              }
            };
        positionalQuery = newGraphSynonymQuery(queries);
      } else {
        List<AttributeSource> attributes = graph.getTerms(start);
        TermAndBoost[] terms =
            attributes.stream()
                .map(
                    s -> {
                      TermToBytesRefAttribute t = s.addAttribute(TermToBytesRefAttribute.class);
                      BoostAttribute b = s.addAttribute(BoostAttribute.class);
                      return new TermAndBoost(new Term(field, t.getBytesRef()), b.getBoost());
                    })
                .toArray(TermAndBoost[]::new);
        assert terms.length > 0;
        if (terms.length == 1) {
          positionalQuery = newTermQuery(terms[0].term, terms[0].boost);
        } else {
          positionalQuery = newSynonymQuery(terms);
        }
      }
      if (positionalQuery != null) {
        builder.add(positionalQuery, operator);
      }
    }
    return builder.build();
  }

