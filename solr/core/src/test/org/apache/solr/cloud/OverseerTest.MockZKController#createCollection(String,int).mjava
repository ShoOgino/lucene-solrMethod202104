    /**
     * Create a collection.
     * Note there's a similar but slightly different {@link OverseerTest#createCollection(String, int)}.
     */
    public void createCollection(String collection, int numShards) throws Exception {
      // Create collection znode before having ClusterStateUpdater create state.json below it or it will fail.
      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection, true);

      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),
          "name", collection,
          ZkStateReader.REPLICATION_FACTOR, "1",
          ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),
          "createNodeSet", "");
      final Overseer overseer = MiniSolrCloudCluster.getOpenOverseer(overseers);
      // This being an Overseer test, we force it to use the Overseer based cluster state update. Look for "new Overseer" calls in this class.
      assertFalse(overseer.getDistributedClusterStateUpdater().isDistributedStateUpdate());
      ZkDistributedQueue q = overseer.getStateUpdateQueue();
      q.offer(Utils.toJSON(m));
    }

