    /**
     * Writes all the {@link BlockTermState} of the provided {@link STBlockLine} to the given
     * output.
     */
    public void writeLineTermStates(
        DataOutput termStatesOutput, STBlockLine line, DeltaBaseTermStateSerializer encoder)
        throws IOException {

      FieldMetadataTermState fieldMetadataTermState;
      int size = line.termStates.size();
      assert size > 0 : "not valid block line with :" + size + " lines.";
      if (size == 1) {
        // When there is only 1 field, write its id as negative, followed by the field TermState.
        int fieldID = line.termStates.get(0).fieldMetadata.getFieldInfo().number;
        termStatesOutput.writeZInt(-fieldID);
        fieldMetadataTermState = line.termStates.get(0);
        encoder.writeTermState(
            termStatesOutput,
            fieldMetadataTermState.fieldMetadata.getFieldInfo(),
            fieldMetadataTermState.state);
        return;
      }

      termStatesOutput.writeZInt(size);
      // First iteration writes the fields ids.
      for (int i = 0; i < size; i++) {
        fieldMetadataTermState = line.termStates.get(i);
        termStatesOutput.writeVInt(fieldMetadataTermState.fieldMetadata.getFieldInfo().number);
      }
      // Second iteration writes the corresponding field TermStates.
      for (int i = 0; i < size; i++) {
        fieldMetadataTermState = line.termStates.get(i);
        encoder.writeTermState(
            termStatesOutput,
            fieldMetadataTermState.fieldMetadata.getFieldInfo(),
            fieldMetadataTermState.state);
      }
    }

