  private List<LookupResult> slowFuzzyMatch(
      int prefixLen, int maxEdits, boolean allowTransposition, List<Input> answers, String frag) {
    final List<LookupResult> results = new ArrayList<>();
    final int fragLen = frag.length();
    for (Input tf : answers) {
      // System.out.println("  check s=" + tf.term.utf8ToString());
      boolean prefixMatches = true;
      for (int i = 0; i < prefixLen; i++) {
        if (i == fragLen) {
          // Prefix still matches:
          break;
        }
        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {
          prefixMatches = false;
          break;
        }
      }
      // System.out.println("    prefixMatches=" + prefixMatches);

      if (prefixMatches) {
        final int len = tf.term.length;
        if (len >= fragLen - maxEdits) {
          // OK it's possible:
          // System.out.println("    possible");
          int d;
          final String s = tf.term.utf8ToString();
          if (fragLen == prefixLen) {
            d = 0;
          } else if (false && len < fragLen) {
            d = getDistance(frag, s, allowTransposition);
          } else {
            // System.out.println("    try loop");
            d = maxEdits + 1;
            // for(int ed=-maxEdits;ed<=maxEdits;ed++) {
            for (int ed = -maxEdits; ed <= maxEdits; ed++) {
              if (s.length() < fragLen - ed) {
                continue;
              }
              String check = s.substring(0, fragLen - ed);
              d = getDistance(frag, check, allowTransposition);
              // System.out.println("    sub check s=" + check + " d=" + d);
              if (d <= maxEdits) {
                break;
              }
            }
          }
          if (d <= maxEdits) {
            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));
          }
        }
      }

      Collections.sort(results, new CompareByCostThenAlpha());
    }

    return results;
  }

