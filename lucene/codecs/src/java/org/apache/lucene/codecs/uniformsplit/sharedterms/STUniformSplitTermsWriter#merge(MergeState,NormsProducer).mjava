  @Override
  public void merge(MergeState mergeState, NormsProducer normsProducer) throws IOException {
    if (mergeState.needsIndexSort) {
      // This custom merging does not support sorted index.
      // Fall back to the default merge, which is inefficient for this postings format.
      super.merge(mergeState, normsProducer);
      return;
    }
    FieldsProducer[] fieldsProducers = mergeState.fieldsProducers;
    List<TermIterator<SegmentTerms>> segmentTermsList = new ArrayList<>(fieldsProducers.length);
    for (int segmentIndex = 0; segmentIndex < fieldsProducers.length; segmentIndex++) {
      FieldsProducer fieldsProducer = fieldsProducers[segmentIndex];
      // Iterate the FieldInfo provided by mergeState.fieldInfos because they may be
      // filtered by PerFieldMergeState.
      for (FieldInfo fieldInfo : mergeState.fieldInfos[segmentIndex]) {
        // Iterate all fields only the get the *first* Terms instanceof STUniformSplitTerms.
        // See the break below.
        Terms terms = fieldsProducer.terms(fieldInfo.name);
        if (terms != null) {
          if (!(terms instanceof STUniformSplitTerms)) {
            // Terms is not directly an instance of STUniformSplitTerms, it is wrapped/filtered.
            // Fall back to the default merge, which is inefficient for this postings format.
            super.merge(mergeState, normsProducer);
            return;
          }
          STUniformSplitTerms sharedTerms = (STUniformSplitTerms) terms;
          segmentTermsList.add(
              new SegmentTerms(
                  segmentIndex,
                  sharedTerms.createMergingBlockReader(),
                  mergeState.docMaps[segmentIndex]));
          // We have the STUniformSplitTerms for the segment. Break the field
          // loop to iterate the next segment.
          break;
        }
      }
    }
    writeSegment(
        (blockWriter, dictionaryBuilder) ->
            mergeSegments(
                mergeState, normsProducer, segmentTermsList, blockWriter, dictionaryBuilder));
  }

