  @SuppressWarnings({"unchecked","rawtypes"})
  private <T extends Comparable<Object>, R extends Comparable<Object>> DistinctValuesCollector<T, R> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,
                                                                                         String countField) throws IOException {
    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0);
    GroupSelector<T> selector = firstPassGroupingCollector.getGroupSelector();
    if (ValueSourceGroupSelector.class.isAssignableFrom(selector.getClass())) {
      GroupSelector gs = new ValueSourceGroupSelector(new BytesRefFieldSource(countField), new HashMap<>());
      return new DistinctValuesCollector<>(selector, searchGroups, gs);
    } else {
      GroupSelector ts = new TermGroupSelector(countField);
      return new DistinctValuesCollector<>(selector, searchGroups, ts);
    }
  }

