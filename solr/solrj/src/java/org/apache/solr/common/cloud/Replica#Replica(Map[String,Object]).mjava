  /**
   * This constructor uses a map with one key (coreNode name) and a value that
   * is a map containing all replica properties.
   * @param nestedMap nested map containing replica properties
   */
  @SuppressWarnings("unchecked")
  public Replica(Map<String, Object> nestedMap) {
    this.name = nestedMap.keySet().iterator().next();
    Map<String, Object> details = (Map<String, Object>) nestedMap.get(name);
    Objects.requireNonNull(details);
    details = Utils.getDeepCopy(details, 4);
    this.collection = String.valueOf(details.get("collection"));
    this.shard = String.valueOf(details.get("shard"));
    this.core = String.valueOf(details.get("core"));
    this.node = String.valueOf(details.get("node_name"));

    this.propMap.putAll(details);
    readPrs();
    type = Replica.Type.valueOf(String.valueOf(propMap.getOrDefault(ZkStateReader.REPLICA_TYPE, "NRT")));
    if(state == null) state = State.getState(String.valueOf(propMap.getOrDefault(ZkStateReader.STATE_PROP, "active")));
    validate();
    propMap.put(BASE_URL_PROP, UrlScheme.INSTANCE.getBaseUrlForNodeName(this.node));
  }

