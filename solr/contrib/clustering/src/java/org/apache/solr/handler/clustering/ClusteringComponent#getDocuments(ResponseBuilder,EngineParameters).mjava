  /**
   * Prepares input documents for clustering.
   */
  private List<InputDocument> getDocuments(ResponseBuilder responseBuilder,
                                           EngineParameters requestParameters) throws IOException {

    SolrQueryRequest solrRequest = responseBuilder.req;
    Query query = responseBuilder.getQuery();
    SolrIndexSearcher indexSearcher = responseBuilder.req.getSearcher();
    SolrCore core = solrRequest.getCore();
    String[] fieldsToCluster = requestParameters.fields().toArray(String[]::new);
    IndexSchema schema = indexSearcher.getSchema();

    boolean preferQueryContext = requestParameters.preferQueryContext();
    SolrQueryRequest req = null;
    SolrHighlighter highlighter = null;
    if (preferQueryContext) {
      highlighter = ((HighlightComponent) core.getSearchComponents().get(HighlightComponent.COMPONENT_NAME)).getHighlighter();
      if (highlighter != null) {
        Map<String, Object> args = new HashMap<>();
        args.put(HighlightParams.FIELDS, fieldsToCluster);
        args.put(HighlightParams.HIGHLIGHT, "true");
        // We don't want any highlight marks.
        args.put(HighlightParams.SIMPLE_PRE, "");
        args.put(HighlightParams.SIMPLE_POST, "");
        args.put(HighlightParams.FRAGSIZE, requestParameters.contextSize());
        args.put(HighlightParams.SNIPPETS, requestParameters.contextCount());
        req = new LocalSolrQueryRequest(core, query.toString(), "", 0, 1, args) {
          @Override
          public SolrIndexSearcher getSearcher() {
            return indexSearcher;
          }
        };
      } else {
        log.warn("No highlighter configured, cannot produce summary");
        preferQueryContext = false;
      }
    }

    Map<String, Function<IndexableField, String>> fieldsToLoad = new LinkedHashMap<>();
    for (String fld : requestParameters.getFieldsToLoad()) {
      FieldType type = schema.getField(fld).getType();
      fieldsToLoad.put(fld, (fieldValue) -> type.toObject(fieldValue).toString());
    }

    Function<Map<String, String>, String> docLanguage;
    String languageField = requestParameters.languageField();
    if (languageField != null) {
      docLanguage = (doc) -> doc.getOrDefault(languageField, requestParameters.language());
    } else {
      docLanguage = (doc) -> requestParameters.language();
    }

    List<InputDocument> result = new ArrayList<>();
    DocIterator it = responseBuilder.getResults().docList.iterator();
    while (it.hasNext()) {
      int docId = it.nextDoc();

      Map<String, String> docFieldValues = new LinkedHashMap<>();
      for (IndexableField indexableField : indexSearcher.doc(docId, fieldsToLoad.keySet())) {
        String fieldName = indexableField.name();
        Function<IndexableField, String> toString = fieldsToLoad.get(fieldName);
        if (toString != null) {
          String value = toString.apply(indexableField);
          docFieldValues.compute(fieldName, (k, v) -> {
            if (v == null) {
              return value;
            } else {
              return v + " . " + value;
            }
          });
        }
      }

      InputDocument inputDocument = new InputDocument(
          docFieldValues.get(requestParameters.docIdField()),
          docLanguage.apply(docFieldValues));
      result.add(inputDocument);

      Function<String, String> snippetProvider = (field) -> null;
      if (preferQueryContext) {
        DocList docAsList = new DocSlice(0, 1,
            new int[]{docId},
            new float[]{1.0f},
            1,
            1.0f,
            TotalHits.Relation.EQUAL_TO);

        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, query, req, fieldsToCluster);
        if (highlights != null && highlights.size() == 1) {
          @SuppressWarnings("unchecked")
          NamedList<String[]> tmp = (NamedList<String[]>) highlights.getVal(0);
          snippetProvider = (field) -> {
            String[] values = tmp.get(field);
            if (values == null) {
              return null;
            } else {
              return String.join(" . ", Arrays.asList(values));
            }
          };
        }
      }

      Function<String, String> fullValueProvider = docFieldValues::get;

      for (String field : fieldsToCluster) {
        String values = snippetProvider.apply(field);
        if (values == null) {
          values = fullValueProvider.apply(field);
        }
        if (values != null) {
          inputDocument.addClusteredField(field, values);
        }
      }
    }

    return result;
  }

