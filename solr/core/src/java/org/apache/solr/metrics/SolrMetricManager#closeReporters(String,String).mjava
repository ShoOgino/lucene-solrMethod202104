  /**
   * Close and unregister all {@link SolrMetricReporter}-s for a registry.
   *
   * @param registry registry name
   * @param tag      optional tag for the reporter, to distinguish reporters logically created for different parent
   *                 component instances.
   * @return names of closed reporters
   */
  public Set<String> closeReporters(String registry, String tag) {
    // make sure we use a name with prefix
    registry = enforcePrefix(registry);
    try {
      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {
        log.warn("Could not obtain lock to modify reporters registry: {}", registry);
        return Collections.emptySet();
      }
    } catch (InterruptedException e) {
      log.warn("Interrupted while trying to obtain lock to modify reporters registry: {}", registry);
      return Collections.emptySet();
    }
    try {
      log.info("Closing metric reporters for registry={} tag={}", registry, tag);
      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);
      if (perRegistry != null) {
        Set<String> names = new HashSet<>(perRegistry.keySet());
        Set<String> removed = new HashSet<>();
        names.forEach(name -> {
          if (tag != null && !tag.isEmpty() && !name.endsWith("@" + tag)) {
            return;
          }
          SolrMetricReporter reporter = perRegistry.remove(name);
          try {
            reporter.close();
          } catch (IOException ioe) {
            log.warn("Exception closing reporter {}", reporter, ioe);
          }
          removed.add(name);
        });
        if (removed.size() == names.size()) {
          reporters.remove(registry);
        }
        return removed;
      } else {
        return Collections.emptySet();
      }
    } finally {
      reportersLock.unlock();
      if (log.isDebugEnabled()) {
        log.debug("Finished closing registry={}, tag={}", registry, tag);
      }
    }
  }

