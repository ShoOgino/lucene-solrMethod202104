  /**
   * Method for query time joining for numeric fields. It supports multi- and single- values longs,
   * ints, floats and longs. All considerations from {@link JoinUtil#createJoinQuery(String,
   * boolean, String, Query, IndexSearcher, ScoreMode)} are applicable here too, though memory
   * consumption might be higher.
   *
   * <p>
   *
   * @param fromField The from field to join from
   * @param multipleValuesPerDocument Whether the from field has multiple terms per document when
   *     true fromField might be {@link DocValuesType#SORTED_NUMERIC}, otherwise fromField should be
   *     {@link DocValuesType#NUMERIC}
   * @param toField The to field to join to, should be {@link IntPoint}, {@link LongPoint}, {@link
   *     FloatPoint} or {@link DoublePoint}.
   * @param numericType either {@link java.lang.Integer}, {@link java.lang.Long}, {@link
   *     java.lang.Float} or {@link java.lang.Double} it should correspond to toField types
   * @param fromQuery The query to match documents on the from side
   * @param fromSearcher The searcher that executed the specified fromQuery
   * @param scoreMode Instructs how scores from the fromQuery are mapped to the returned query
   * @return a {@link Query} instance that can be used to join documents based on the terms in the
   *     from and to field
   * @throws IOException If I/O related errors occur
   */
  public static Query createJoinQuery(
      String fromField,
      boolean multipleValuesPerDocument,
      String toField,
      Class<? extends Number> numericType,
      Query fromQuery,
      IndexSearcher fromSearcher,
      ScoreMode scoreMode)
      throws IOException {
    TreeSet<Long> joinValues = new TreeSet<>();
    Map<Long, Float> aggregatedScores = new HashMap<>();
    Map<Long, Integer> occurrences = new HashMap<>();
    boolean needsScore = scoreMode != ScoreMode.None;
    BiConsumer<Long, Float> scoreAggregator;
    if (scoreMode == ScoreMode.Max) {
      scoreAggregator =
          (key, score) -> {
            Float currentValue = aggregatedScores.putIfAbsent(key, score);
            if (currentValue != null) {
              aggregatedScores.put(key, Math.max(currentValue, score));
            }
          };
    } else if (scoreMode == ScoreMode.Min) {
      scoreAggregator =
          (key, score) -> {
            Float currentValue = aggregatedScores.putIfAbsent(key, score);
            if (currentValue != null) {
              aggregatedScores.put(key, Math.min(currentValue, score));
            }
          };
    } else if (scoreMode == ScoreMode.Total) {
      scoreAggregator =
          (key, score) -> {
            Float currentValue = aggregatedScores.putIfAbsent(key, score);
            if (currentValue != null) {
              aggregatedScores.put(key, currentValue + score);
            }
          };
    } else if (scoreMode == ScoreMode.Avg) {
      scoreAggregator =
          (key, score) -> {
            Float currentSore = aggregatedScores.putIfAbsent(key, score);
            if (currentSore != null) {
              aggregatedScores.put(key, currentSore + score);
            }
            Integer currentOccurrence = occurrences.putIfAbsent(key, 1);
            if (currentOccurrence != null) {
              occurrences.put(key, ++currentOccurrence);
            }
          };
    } else {
      scoreAggregator =
          (key, score) -> {
            throw new UnsupportedOperationException();
          };
    }

    LongFunction<Float> joinScorer;
    if (scoreMode == ScoreMode.Avg) {
      joinScorer =
          (joinValue) -> {
            Float aggregatedScore = aggregatedScores.get(joinValue);
            Integer occurrence = occurrences.get(joinValue);
            return aggregatedScore / occurrence;
          };
    } else {
      joinScorer = aggregatedScores::get;
    }

    Collector collector;
    if (multipleValuesPerDocument) {
      collector =
          new SimpleCollector() {

            SortedNumericDocValues sortedNumericDocValues;
            Scorable scorer;

            @Override
            public void collect(int doc) throws IOException {
              if (sortedNumericDocValues.advanceExact(doc)) {
                for (int i = 0, count = sortedNumericDocValues.docValueCount(); i < count; i++) {
                  long value = sortedNumericDocValues.nextValue();
                  joinValues.add(value);
                  if (needsScore) {
                    scoreAggregator.accept(value, scorer.score());
                  }
                }
              }
            }

            @Override
            protected void doSetNextReader(LeafReaderContext context) throws IOException {
              sortedNumericDocValues = DocValues.getSortedNumeric(context.reader(), fromField);
            }

            @Override
            public void setScorer(Scorable scorer) throws IOException {
              this.scorer = scorer;
            }

            @Override
            public org.apache.lucene.search.ScoreMode scoreMode() {
              return needsScore
                  ? org.apache.lucene.search.ScoreMode.COMPLETE
                  : org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES;
            }
          };
    } else {
      collector =
          new SimpleCollector() {

            NumericDocValues numericDocValues;
            Scorable scorer;
            private int lastDocID = -1;

            private boolean docsInOrder(int docID) {
              if (docID < lastDocID) {
                throw new AssertionError(
                    "docs out of order: lastDocID=" + lastDocID + " vs docID=" + docID);
              }
              lastDocID = docID;
              return true;
            }

            @Override
            public void collect(int doc) throws IOException {
              assert docsInOrder(doc);
              long value = 0;
              if (numericDocValues.advanceExact(doc)) {
                value = numericDocValues.longValue();
              }
              joinValues.add(value);
              if (needsScore) {
                scoreAggregator.accept(value, scorer.score());
              }
            }

            @Override
            protected void doSetNextReader(LeafReaderContext context) throws IOException {
              numericDocValues = DocValues.getNumeric(context.reader(), fromField);
              lastDocID = -1;
            }

            @Override
            public void setScorer(Scorable scorer) throws IOException {
              this.scorer = scorer;
            }

            @Override
            public org.apache.lucene.search.ScoreMode scoreMode() {
              return needsScore
                  ? org.apache.lucene.search.ScoreMode.COMPLETE
                  : org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES;
            }
          };
    }
    fromSearcher.search(fromQuery, collector);

    Iterator<Long> iterator = joinValues.iterator();

    final int bytesPerDim;
    final BytesRef encoded = new BytesRef();
    final PointInSetIncludingScoreQuery.Stream stream;
    if (Integer.class.equals(numericType)) {
      bytesPerDim = Integer.BYTES;
      stream =
          new PointInSetIncludingScoreQuery.Stream() {
            @Override
            public BytesRef next() {
              if (iterator.hasNext()) {
                long value = iterator.next();
                IntPoint.encodeDimension((int) value, encoded.bytes, 0);
                if (needsScore) {
                  score = joinScorer.apply(value);
                }
                return encoded;
              } else {
                return null;
              }
            }
          };
    } else if (Long.class.equals(numericType)) {
      bytesPerDim = Long.BYTES;
      stream =
          new PointInSetIncludingScoreQuery.Stream() {
            @Override
            public BytesRef next() {
              if (iterator.hasNext()) {
                long value = iterator.next();
                LongPoint.encodeDimension(value, encoded.bytes, 0);
                if (needsScore) {
                  score = joinScorer.apply(value);
                }
                return encoded;
              } else {
                return null;
              }
            }
          };
    } else if (Float.class.equals(numericType)) {
      bytesPerDim = Float.BYTES;
      stream =
          new PointInSetIncludingScoreQuery.Stream() {
            @Override
            public BytesRef next() {
              if (iterator.hasNext()) {
                long value = iterator.next();
                FloatPoint.encodeDimension(Float.intBitsToFloat((int) value), encoded.bytes, 0);
                if (needsScore) {
                  score = joinScorer.apply(value);
                }
                return encoded;
              } else {
                return null;
              }
            }
          };
    } else if (Double.class.equals(numericType)) {
      bytesPerDim = Double.BYTES;
      stream =
          new PointInSetIncludingScoreQuery.Stream() {
            @Override
            public BytesRef next() {
              if (iterator.hasNext()) {
                long value = iterator.next();
                DoublePoint.encodeDimension(Double.longBitsToDouble(value), encoded.bytes, 0);
                if (needsScore) {
                  score = joinScorer.apply(value);
                }
                return encoded;
              } else {
                return null;
              }
            }
          };
    } else {
      throw new IllegalArgumentException(
          "unsupported numeric type, only Integer, Long, Float and Double are supported");
    }

    encoded.bytes = new byte[bytesPerDim];
    encoded.length = bytesPerDim;

    if (needsScore) {
      return new PointInSetIncludingScoreQuery(
          scoreMode, fromQuery, multipleValuesPerDocument, toField, bytesPerDim, stream) {

        @Override
        protected String toString(byte[] value) {
          return toString.apply(value, numericType);
        }
      };
    } else {
      return new PointInSetQuery(toField, 1, bytesPerDim, stream) {
        @Override
        protected String toString(byte[] value) {
          return PointInSetIncludingScoreQuery.toString.apply(value, numericType);
        }
      };
    }
  }

