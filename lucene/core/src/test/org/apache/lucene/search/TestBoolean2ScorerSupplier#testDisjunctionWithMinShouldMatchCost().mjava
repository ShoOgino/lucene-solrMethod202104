  public void testDisjunctionWithMinShouldMatchCost() throws IOException {
    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);
    for (Occur occur : Occur.values()) {
      subs.put(occur, new ArrayList<>());
    }

    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));
    ScorerSupplier s =
        new Boolean2ScorerSupplier(
            new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);
    assertEquals(42 + 12, s.cost());
    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());

    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));
    s =
        new Boolean2ScorerSupplier(
            new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);
    assertEquals(42 + 12 + 20, s.cost());
    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());
    s =
        new Boolean2ScorerSupplier(
            new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);
    assertEquals(12 + 20, s.cost());
    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());

    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));
    s =
        new Boolean2ScorerSupplier(
            new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);
    assertEquals(42 + 12 + 20 + 30, s.cost());
    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());
    s =
        new Boolean2ScorerSupplier(
            new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);
    assertEquals(12 + 20 + 30, s.cost());
    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());
    s =
        new Boolean2ScorerSupplier(
            new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 3);
    assertEquals(12 + 20, s.cost());
    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());
  }

