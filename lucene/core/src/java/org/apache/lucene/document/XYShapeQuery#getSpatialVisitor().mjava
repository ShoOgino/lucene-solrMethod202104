  @Override
  protected SpatialVisitor getSpatialVisitor() {
    return new SpatialVisitor() {
      @Override
      protected Relation relate(byte[] minTriangle, byte[] maxTriangle) {

        double minY = XYEncodingUtils.decode(NumericUtils.sortableBytesToInt(minTriangle, 0));
        double minX =
            XYEncodingUtils.decode(NumericUtils.sortableBytesToInt(minTriangle, ShapeField.BYTES));
        double maxY =
            XYEncodingUtils.decode(
                NumericUtils.sortableBytesToInt(maxTriangle, 2 * ShapeField.BYTES));
        double maxX =
            XYEncodingUtils.decode(
                NumericUtils.sortableBytesToInt(maxTriangle, 3 * ShapeField.BYTES));

        // check internal node against query
        return component2D.relate(minX, maxX, minY, maxY);
      }

      @Override
      protected Predicate<byte[]> intersects() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                double y = decode(scratchTriangle.aY);
                double x = decode(scratchTriangle.aX);
                return component2D.contains(x, y);
              }
            case LINE:
              {
                double aY = decode(scratchTriangle.aY);
                double aX = decode(scratchTriangle.aX);
                double bY = decode(scratchTriangle.bY);
                double bX = decode(scratchTriangle.bX);
                return component2D.intersectsLine(aX, aY, bX, bY);
              }
            case TRIANGLE:
              {
                double aY = decode(scratchTriangle.aY);
                double aX = decode(scratchTriangle.aX);
                double bY = decode(scratchTriangle.bY);
                double bX = decode(scratchTriangle.bX);
                double cY = decode(scratchTriangle.cY);
                double cX = decode(scratchTriangle.cX);
                return component2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }

      @Override
      protected Predicate<byte[]> within() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                double y = decode(scratchTriangle.aY);
                double x = decode(scratchTriangle.aX);
                return component2D.contains(x, y);
              }
            case LINE:
              {
                double aY = decode(scratchTriangle.aY);
                double aX = decode(scratchTriangle.aX);
                double bY = decode(scratchTriangle.bY);
                double bX = decode(scratchTriangle.bX);
                return component2D.containsLine(aX, aY, bX, bY);
              }
            case TRIANGLE:
              {
                double aY = decode(scratchTriangle.aY);
                double aX = decode(scratchTriangle.aX);
                double bY = decode(scratchTriangle.bY);
                double bX = decode(scratchTriangle.bX);
                double cY = decode(scratchTriangle.cY);
                double cX = decode(scratchTriangle.cX);
                return component2D.containsTriangle(aX, aY, bX, bY, cX, cY);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }

      @Override
      protected Function<byte[], Component2D.WithinRelation> contains() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                double y = decode(scratchTriangle.aY);
                double x = decode(scratchTriangle.aX);
                return component2D.withinPoint(x, y);
              }
            case LINE:
              {
                double aY = decode(scratchTriangle.aY);
                double aX = decode(scratchTriangle.aX);
                double bY = decode(scratchTriangle.bY);
                double bX = decode(scratchTriangle.bX);
                return component2D.withinLine(aX, aY, scratchTriangle.ab, bX, bY);
              }
            case TRIANGLE:
              {
                double aY = decode(scratchTriangle.aY);
                double aX = decode(scratchTriangle.aX);
                double bY = decode(scratchTriangle.bY);
                double bX = decode(scratchTriangle.bX);
                double cY = decode(scratchTriangle.cY);
                double cX = decode(scratchTriangle.cX);
                return component2D.withinTriangle(
                    aX,
                    aY,
                    scratchTriangle.ab,
                    bX,
                    bY,
                    scratchTriangle.bc,
                    cX,
                    cY,
                    scratchTriangle.ca);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }
    };
  }

