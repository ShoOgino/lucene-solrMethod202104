  private static List<NamedList<Object>> clustersToNamedList(List<InputDocument> documents,
                                                             List<Cluster<InputDocument>> clusters,
                                                             EngineParameters params) {
    List<NamedList<Object>> result = new ArrayList<>();
    clustersToNamedListRecursive(clusters, result, params);

    if (params.includeOtherTopics()) {
      LinkedHashSet<InputDocument> clustered = new LinkedHashSet<>();
      clusters.forEach(cluster -> collectUniqueDocuments(cluster, clustered));
      List<InputDocument> unclustered = documents.stream()
          .filter(doc -> !clustered.contains(doc))
          .collect(Collectors.toList());

      if (!unclustered.isEmpty()) {
        NamedList<Object> cluster = new SimpleOrderedMap<>();
        result.add(cluster);
        cluster.add(ClusteringResponse.IS_OTHER_TOPICS, true);
        cluster.add(ClusteringResponse.LABELS_NODE, Collections.singletonList("Other topics"));
        cluster.add(ClusteringResponse.SCORE_NODE, 0d);
        cluster.add(ClusteringResponse.DOCS_NODE, unclustered.stream().map(InputDocument::getId)
            .collect(Collectors.toList()));
      }
    }

    return result;
  }

