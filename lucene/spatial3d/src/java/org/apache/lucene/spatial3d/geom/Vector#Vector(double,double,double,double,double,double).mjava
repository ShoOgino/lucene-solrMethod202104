  /**
   * Construct a vector that is perpendicular to two other (non-zero) vectors. If the vectors are
   * parallel, IllegalArgumentException will be thrown. Produces a normalized final vector.
   *
   * @param AX is the X value of the first
   * @param AY is the Y value of the first
   * @param AZ is the Z value of the first
   * @param BX is the X value of the second
   * @param BY is the Y value of the second
   * @param BZ is the Z value of the second
   */
  public Vector(
      final double AX,
      final double AY,
      final double AZ,
      final double BX,
      final double BY,
      final double BZ) {
    // We're really looking at two vectors and computing a perpendicular one from that.
    // We can think of this as having three points -- the origin, and two points that aren't the
    // origin. Normally, we can compute the perpendicular vector this way:
    // x = u2v3 - u3v2
    // y = u3v1 - u1v3
    // z = u1v2 - u2v1
    // Sometimes that produces a plane that does not contain the original three points, however, due
    // to numerical precision issues.  Then we continue making the answer more precise using the
    // Gram-Schmidt process: https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process

    // Compute the naive perpendicular
    final double thisX = AY * BZ - AZ * BY;
    final double thisY = AZ * BX - AX * BZ;
    final double thisZ = AX * BY - AY * BX;

    final double magnitude = magnitude(thisX, thisY, thisZ);
    if (magnitude == 0.0) {
      throw new IllegalArgumentException("Degenerate/parallel vector constructed");
    }
    final double inverseMagnitude = 1.0 / magnitude;

    double normalizeX = thisX * inverseMagnitude;
    double normalizeY = thisY * inverseMagnitude;
    double normalizeZ = thisZ * inverseMagnitude;
    // For a plane to work, the dot product between the normal vector
    // and the points needs to be less than the minimum resolution.
    // This is sometimes not true for points that are very close. Therefore
    // we need to adjust
    int i = 0;
    while (true) {
      final double currentDotProdA = AX * normalizeX + AY * normalizeY + AZ * normalizeZ;
      final double currentDotProdB = BX * normalizeX + BY * normalizeY + BZ * normalizeZ;
      if (Math.abs(currentDotProdA) < MINIMUM_GRAM_SCHMIDT_ENVELOPE
          && Math.abs(currentDotProdB) < MINIMUM_GRAM_SCHMIDT_ENVELOPE) {
        break;
      }
      // Converge on the one that has largest dot product
      final double currentVectorX;
      final double currentVectorY;
      final double currentVectorZ;
      final double currentDotProd;
      if (Math.abs(currentDotProdA) > Math.abs(currentDotProdB)) {
        currentVectorX = AX;
        currentVectorY = AY;
        currentVectorZ = AZ;
        currentDotProd = currentDotProdA;
      } else {
        currentVectorX = BX;
        currentVectorY = BY;
        currentVectorZ = BZ;
        currentDotProd = currentDotProdB;
      }

      // Adjust
      normalizeX = normalizeX - currentDotProd * currentVectorX;
      normalizeY = normalizeY - currentDotProd * currentVectorY;
      normalizeZ = normalizeZ - currentDotProd * currentVectorZ;
      // Normalize
      final double correctedMagnitude = magnitude(normalizeX, normalizeY, normalizeZ);
      final double inverseCorrectedMagnitude = 1.0 / correctedMagnitude;
      normalizeX = normalizeX * inverseCorrectedMagnitude;
      normalizeY = normalizeY * inverseCorrectedMagnitude;
      normalizeZ = normalizeZ * inverseCorrectedMagnitude;
      // This is probably not needed as the method seems to converge
      // quite quickly. But it is safer to have a way out.
      if (i++ > 10) {
        throw new IllegalArgumentException(
            "Plane could not be constructed! Could not find a normal vector.");
      }
    }
    this.x = normalizeX;
    this.y = normalizeY;
    this.z = normalizeZ;
  }

