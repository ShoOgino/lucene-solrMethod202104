  /**
   * Replays ops between start and end location against the provided writer. Can run concurrently
   * with ongoing operations.
   */
  public void replay(NodeProcess primary, long start, long end) throws IOException {
    try (Connection c = new Connection(primary.tcpPort)) {
      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);
      byte[] intBuffer = new byte[4];
      ByteBuffer intByteBuffer = ByteBuffer.wrap(intBuffer);
      ByteArrayDataInput in = new ByteArrayDataInput();

      long pos = start;
      while (pos < end) {
        intByteBuffer.position(0);
        intByteBuffer.limit(4);
        readBytesFromChannel(pos, intByteBuffer);
        pos += 4;
        int len =
            ((intBuffer[0] & 0xff) << 24)
                | (intBuffer[1] & 0xff) << 16
                | (intBuffer[2] & 0xff) << 8
                | (intBuffer[3] & 0xff);

        byte[] bytes = new byte[len];
        readBytesFromChannel(pos, ByteBuffer.wrap(bytes));
        pos += len;

        in.reset(bytes);

        byte op = in.readByte();
        // System.out.println("xlog: replay op=" + op);
        switch (op) {
          case 0:
            // We replay add as update:
            replayAddDocument(c, primary, in);
            break;

          case 1:
            // We replay add as update:
            replayAddDocument(c, primary, in);
            break;

          case 2:
            replayDeleteDocuments(c, primary, in);
            break;

          default:
            throw new CorruptIndexException("invalid operation " + op, in);
        }
      }
      assert pos == end;
      // System.out.println("xlog: done replay");
      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING_DONE);
      c.flush();
      // System.out.println("xlog: done flush");
      c.in.readByte();
      // System.out.println("xlog: done readByte");
    }
  }

