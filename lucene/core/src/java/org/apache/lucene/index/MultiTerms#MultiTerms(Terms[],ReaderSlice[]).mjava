  /**
   * Sole constructor. Use {@link #getTerms(IndexReader, String)} instead if possible.
   *
   * @param subs The {@link Terms} instances of all sub-readers.
   * @param subSlices A parallel array (matching {@code subs}) describing the sub-reader slices.
   * @lucene.internal
   */
  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices)
      throws IOException { // TODO make private?
    this.subs = subs;
    this.subSlices = subSlices;

    assert subs.length > 0 : "inefficient: don't use MultiTerms over one sub";
    boolean _hasFreqs = true;
    boolean _hasOffsets = true;
    boolean _hasPositions = true;
    boolean _hasPayloads = false;
    for (int i = 0; i < subs.length; i++) {
      _hasFreqs &= subs[i].hasFreqs();
      _hasOffsets &= subs[i].hasOffsets();
      _hasPositions &= subs[i].hasPositions();
      _hasPayloads |= subs[i].hasPayloads();
    }

    hasFreqs = _hasFreqs;
    hasOffsets = _hasOffsets;
    hasPositions = _hasPositions;
    hasPayloads =
        hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.
  }

