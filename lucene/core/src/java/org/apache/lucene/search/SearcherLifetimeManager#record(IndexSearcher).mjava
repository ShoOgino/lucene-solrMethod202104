  /**
   * Records that you are now using this IndexSearcher. Always call this when you've obtained a
   * possibly new {@link IndexSearcher}, for example from {@link SearcherManager}. It's fine if you
   * already passed the same searcher to this method before.
   *
   * <p>This returns the long token that you can later pass to {@link #acquire} to retrieve the same
   * IndexSearcher. You should record this long token in the search results sent to your user, such
   * that if the user performs a follow-on action (clicks next page, drills down, etc.) the token is
   * returned.
   */
  public long record(IndexSearcher searcher) throws IOException {
    ensureOpen();
    // TODO: we don't have to use IR.getVersion to track;
    // could be risky (if it's buggy); we could get better
    // bug isolation if we assign our own private ID:
    final long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();
    SearcherTracker tracker = searchers.get(version);
    if (tracker == null) {
      // System.out.println("RECORD version=" + version + " ms=" + System.currentTimeMillis());
      tracker = new SearcherTracker(searcher);
      if (searchers.putIfAbsent(version, tracker) != null) {
        // Another thread beat us -- must decRef to undo
        // incRef done by SearcherTracker ctor:
        tracker.close();
      }
    } else if (tracker.searcher != searcher) {
      throw new IllegalArgumentException(
          "the provided searcher has the same underlying reader version yet the searcher instance differs from before (new="
              + searcher
              + " vs old="
              + tracker.searcher);
    }

    return version;
  }

