  /**
   * Returns a TermsEnum that iterates over all terms and documents that are accepted by the
   * provided {@link CompiledAutomaton}. If the <code>startTerm</code> is provided then the returned
   * enum will only return terms {@code > startTerm}, but you still must call next() first to get to
   * the first term. Note that the provided <code>startTerm</code> must be accepted by the
   * automaton.
   *
   * <p>This is an expert low-level API and will only work for {@code NORMAL} compiled automata. To
   * handle any compiled automata you should instead use {@link CompiledAutomaton#getTermsEnum}
   * instead.
   *
   * <p><b>NOTE</b>: the returned TermsEnum cannot seek.
   */
  public TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm)
      throws IOException {

    // TODO: could we factor out a common interface b/w
    // CompiledAutomaton and FST?  Then we could pass FST there too,
    // and likely speed up resolving terms to deleted docs ... but
    // AutomatonTermsEnum makes this tricky because of its on-the-fly cycle
    // detection

    // TODO: eventually we could support seekCeil/Exact on
    // the returned enum, instead of only being able to seek
    // at the start

    TermsEnum termsEnum = iterator();

    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {
      throw new IllegalArgumentException("please use CompiledAutomaton.getTermsEnum instead");
    }

    if (startTerm == null) {
      return new AutomatonTermsEnum(termsEnum, compiled);
    } else {
      return new AutomatonTermsEnum(termsEnum, compiled) {
        @Override
        protected BytesRef nextSeekTerm(BytesRef term) throws IOException {
          if (term == null) {
            term = startTerm;
          }
          return super.nextSeekTerm(term);
        }
      };
    }
  }

