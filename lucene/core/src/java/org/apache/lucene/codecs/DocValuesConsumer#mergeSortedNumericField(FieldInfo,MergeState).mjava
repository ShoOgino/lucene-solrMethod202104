  /**
   * Merges the sorted docvalues from <code>toMerge</code>.
   *
   * <p>The default implementation calls {@link #addSortedNumericField}, passing iterables that
   * filter deleted documents.
   */
  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState)
      throws IOException {

    addSortedNumericField(
        mergeFieldInfo,
        new EmptyDocValuesProducer() {
          @Override
          public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {
            if (fieldInfo != mergeFieldInfo) {
              throw new IllegalArgumentException("wrong FieldInfo");
            }

            // We must make new iterators + DocIDMerger for each iterator:
            List<SortedNumericDocValuesSub> subs = new ArrayList<>();
            long cost = 0;
            for (int i = 0; i < mergeState.docValuesProducers.length; i++) {
              DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];
              SortedNumericDocValues values = null;
              if (docValuesProducer != null) {
                FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
                if (readerFieldInfo != null
                    && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {
                  values = docValuesProducer.getSortedNumeric(readerFieldInfo);
                }
              }
              if (values == null) {
                values = DocValues.emptySortedNumeric();
              }
              cost += values.cost();
              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));
            }

            final long finalCost = cost;

            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger =
                DocIDMerger.of(subs, mergeState.needsIndexSort);

            return new SortedNumericDocValues() {

              private int docID = -1;
              private SortedNumericDocValuesSub currentSub;

              @Override
              public int docID() {
                return docID;
              }

              @Override
              public int nextDoc() throws IOException {
                currentSub = docIDMerger.next();
                if (currentSub == null) {
                  docID = NO_MORE_DOCS;
                } else {
                  docID = currentSub.mappedDocID;
                }

                return docID;
              }

              @Override
              public int advance(int target) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public boolean advanceExact(int target) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public int docValueCount() {
                return currentSub.values.docValueCount();
              }

              @Override
              public long cost() {
                return finalCost;
              }

              @Override
              public long nextValue() throws IOException {
                return currentSub.values.nextValue();
              }
            };
          }
        });
  }

