  /** Seeks to smallest term that's &gt;= target. */
  protected void doSeekCeil() throws IOException {

    // System.out.println("    advance len=" + target.length + " curlen=" + current.length);

    // TODO: possibly caller could/should provide common
    // prefix length?  ie this work may be redundant if
    // caller is in fact intersecting against its own
    // automaton

    // System.out.println("FE.seekCeil upto=" + upto);

    // Save time by starting at the end of the shared prefix
    // b/w our current term & the target:
    rewindPrefix();
    // System.out.println("  after rewind upto=" + upto);

    FST.Arc<T> arc = getArc(upto);
    // System.out.println("  init targetLabel=" + targetLabel);

    // Now scan forward, matching the new suffix of the target
    while (arc != null) {
      int targetLabel = getTargetLabel();
      // System.out.println("  cycle upto=" + upto + " arc.label=" + arc.label + " (" + (char)
      // arc.label + ") vs targetLabel=" + targetLabel);
      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {
        // Arcs are in an array
        final FST.BytesReader in = fst.getBytesReader();
        if (arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {
          arc = doSeekCeilArrayDirectAddressing(arc, targetLabel, in);
        } else {
          assert arc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH;
          arc = doSeekCeilArrayPacked(arc, targetLabel, in);
        }
      } else {
        arc = doSeekCeilList(arc, targetLabel);
      }
    }
  }

