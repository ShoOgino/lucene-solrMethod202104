  @Override
  public Matches matches(LeafReaderContext context, int doc) throws IOException {
    return MatchesUtils.forField(
        field,
        () -> {
          PhraseMatcher matcher = getPhraseMatcher(context, stats, true);
          if (matcher == null || matcher.approximation().advance(doc) != doc) {
            return null;
          }
          matcher.reset();
          if (matcher.nextMatch() == false) {
            return null;
          }
          return new MatchesIterator() {
            boolean started = false;

            @Override
            public boolean next() throws IOException {
              if (started == false) {
                return started = true;
              }
              return matcher.nextMatch();
            }

            @Override
            public int startPosition() {
              return matcher.startPosition();
            }

            @Override
            public int endPosition() {
              return matcher.endPosition();
            }

            @Override
            public int startOffset() throws IOException {
              return matcher.startOffset();
            }

            @Override
            public int endOffset() throws IOException {
              return matcher.endOffset();
            }

            @Override
            public MatchesIterator getSubMatches() throws IOException {
              return null; // phrases are treated as leaves
            }

            @Override
            public Query getQuery() {
              return PhraseWeight.this.getQuery();
            }
          };
        });
  }

