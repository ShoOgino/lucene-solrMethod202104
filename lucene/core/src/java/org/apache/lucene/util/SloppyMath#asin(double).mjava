  /**
   * Returns the arc sine of a value.
   *
   * <p>The returned angle is in the range <i>-pi</i>/2 through <i>pi</i>/2. Error is around 1E-7.
   *
   * <p>Special cases:
   *
   * <ul>
   *   <li>If the argument is {@code NaN} or its absolute value is greater than 1, then the result
   *       is {@code NaN}.
   * </ul>
   *
   * @param a the value whose arc sine is to be returned.
   * @return arc sine of the argument
   * @see Math#asin(double)
   */
  // because asin(-x) = -asin(x), asin(x) only needs to be computed on [0,1].
  // ---> we only have to compute asin(x) on [0,1].
  // For values not close to +-1, we use look-up tables;
  // for values near +-1, we use code derived from fdlibm.
  public static double asin(double a) {
    boolean negateResult;
    if (a < 0.0) {
      a = -a;
      negateResult = true;
    } else {
      negateResult = false;
    }
    if (a <= ASIN_MAX_VALUE_FOR_TABS) {
      int index = (int) (a * ASIN_INDEXER + 0.5);
      double delta = a - index * ASIN_DELTA;
      double result =
          asinTab[index]
              + delta
                  * (asinDer1DivF1Tab[index]
                      + delta
                          * (asinDer2DivF2Tab[index]
                              + delta
                                  * (asinDer3DivF3Tab[index] + delta * asinDer4DivF4Tab[index])));
      return negateResult ? -result : result;
    } else { // value > ASIN_MAX_VALUE_FOR_TABS, or value is NaN
      // This part is derived from fdlibm.
      if (a < 1.0) {
        double t = (1.0 - a) * 0.5;
        double p =
            t
                * (ASIN_PS0
                    + t
                        * (ASIN_PS1
                            + t * (ASIN_PS2 + t * (ASIN_PS3 + t * (ASIN_PS4 + t * ASIN_PS5)))));
        double q = 1.0 + t * (ASIN_QS1 + t * (ASIN_QS2 + t * (ASIN_QS3 + t * ASIN_QS4)));
        double s = Math.sqrt(t);
        double z = s + s * (p / q);
        double result = ASIN_PIO2_HI - ((z + z) - ASIN_PIO2_LO);
        return negateResult ? -result : result;
      } else { // value >= 1.0, or value is NaN
        if (a == 1.0) {
          return negateResult ? -Math.PI / 2 : Math.PI / 2;
        } else {
          return Double.NaN;
        }
      }
    }
  }

