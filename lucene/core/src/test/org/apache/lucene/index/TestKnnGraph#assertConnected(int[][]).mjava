  private void assertConnected(int[][] graph) {
    // every node in the graph is reachable from every other node
    Set<Integer> visited = new HashSet<>();
    List<Integer> queue = new LinkedList<>();
    int count = 0;
    for (int[] entry : graph) {
      if (entry != null) {
        if (queue.isEmpty()) {
          queue.add(entry[0]); // start from any node
          // System.out.println("start at " + entry[0]);
        }
        ++count;
      }
    }
    while (queue.isEmpty() == false) {
      int i = queue.remove(0);
      assertNotNull("expected neighbors of " + i, graph[i]);
      visited.add(i);
      for (int j : graph[i]) {
        if (visited.contains(j) == false) {
          // System.out.println("  ... " + j);
          queue.add(j);
        }
      }
    }
    for (int i = 0; i < count; i++) {
      assertTrue("Attempted to walk entire graph but never visited " + i, visited.contains(i));
    }
    // we visited each node exactly once
    assertEquals(
        "Attempted to walk entire graph but only visited " + visited.size(), count, visited.size());
  }

