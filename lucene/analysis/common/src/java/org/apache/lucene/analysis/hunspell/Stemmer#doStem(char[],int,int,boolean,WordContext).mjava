  List<CharsRef> doStem(
      char[] word, int offset, int length, boolean caseVariant, WordContext context) {
    List<CharsRef> stems = new ArrayList<>();
    IntsRef forms = dictionary.lookupWord(word, offset, length);
    if (forms != null) {
      for (int i = 0; i < forms.length; i += formStep) {
        char[] wordFlags = dictionary.decodeFlags(forms.ints[forms.offset + i], scratch);
        if (!acceptCase(caseVariant, wordFlags)) {
          continue;
        }
        // we can't add this form, it's a pseudostem requiring an affix
        if (Dictionary.hasFlag(wordFlags, dictionary.needaffix)) {
          continue;
        }
        // we can't add this form, it only belongs inside a compound word
        if (!context.isCompound() && Dictionary.hasFlag(wordFlags, dictionary.onlyincompound)) {
          continue;
        }
        if (context.isCompound()
            && !Dictionary.hasFlag(wordFlags, context.requiredFlag(dictionary))) {
          continue;
        }
        stems.add(newStem(word, offset, length, forms, i));
      }
    }
    try {
      stems.addAll(
          stem(
              word,
              offset,
              length,
              context,
              -1,
              Dictionary.FLAG_UNSET,
              -1,
              0,
              true,
              true,
              false,
              false,
              caseVariant));
    } catch (IOException bogus) {
      throw new RuntimeException(bogus);
    }
    return stems;
  }

