  public void testFloatToByte() {
    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f)); // verify the old bug (see LUCENE-2937)
    assertEquals(1, orig_floatToByte(5.8123817E-10f)); // verify it's fixed in this test code
    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f)); // verify it's fixed

    // test some constants
    assertEquals(0, SmallFloat.floatToByte315(0));
    assertEquals(
        1, SmallFloat.floatToByte315(Float.MIN_VALUE)); // underflow rounds up to smallest positive
    assertEquals(
        255,
        SmallFloat.floatToByte315(Float.MAX_VALUE)
            & 0xff); // overflow rounds down to largest positive
    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);

    // all negatives map to 0
    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));
    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));
    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));

    // up iterations for more exhaustive test after changing something
    int num = atLeast(100000);
    for (int i = 0; i < num; i++) {
      float f = Float.intBitsToFloat(random().nextInt());
      if (Float.isNaN(f)) continue; // skip NaN
      byte b1 = orig_floatToByte(f);
      byte b2 = SmallFloat.floatToByte(f, 3, 15);
      byte b3 = SmallFloat.floatToByte315(f);
      assertEquals(b1, b2);
      assertEquals(b2, b3);
    }
  }

