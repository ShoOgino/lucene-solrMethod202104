    @Override
    public Partition call() throws IOException {
      long totalCount = 0;
      for (Future<Partition> segment : segmentsToMerge) {
        totalCount += getPartition(segment).count;
      }

      PriorityQueue<FileAndTop> queue =
          new PriorityQueue<FileAndTop>(segmentsToMerge.size()) {
            @Override
            protected boolean lessThan(FileAndTop a, FileAndTop b) {
              return comparator.compare(a.current, b.current) < 0;
            }
          };

      ByteSequencesReader[] streams = new ByteSequencesReader[segmentsToMerge.size()];

      String newSegmentName = null;

      long startMS = System.currentTimeMillis();
      try (ByteSequencesWriter writer =
          getWriter(
              dir.createTempOutput(tempFileNamePrefix, "sort", IOContext.DEFAULT), totalCount)) {

        newSegmentName = writer.out.getName();

        // Open streams and read the top for each file
        for (int i = 0; i < segmentsToMerge.size(); i++) {
          Partition segment = getPartition(segmentsToMerge.get(i));
          streams[i] =
              getReader(
                  dir.openChecksumInput(segment.fileName, IOContext.READONCE), segment.fileName);

          BytesRef item = null;
          try {
            item = streams[i].next();
          } catch (Throwable t) {
            verifyChecksum(t, streams[i]);
          }
          assert item != null;
          queue.insertWithOverflow(new FileAndTop(i, item));
        }

        // Unix utility sort() uses ordered array of files to pick the next line from, updating
        // it as it reads new lines. The PQ used here is a more elegant solution and has
        // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway
        // so it shouldn't make much of a difference (didn't check).
        FileAndTop top;
        while ((top = queue.top()) != null) {
          writer.write(top.current);
          try {
            top.current = streams[top.fd].next();
          } catch (Throwable t) {
            verifyChecksum(t, streams[top.fd]);
          }

          if (top.current != null) {
            queue.updateTop();
          } else {
            queue.pop();
          }
        }

        CodecUtil.writeFooter(writer.out);

        for (ByteSequencesReader reader : streams) {
          CodecUtil.checkFooter(reader.in);
        }

        sortInfo.mergeTimeMS.addAndGet(System.currentTimeMillis() - startMS);
      } finally {
        IOUtils.close(streams);
      }
      List<String> toDelete = new ArrayList<>();
      for (Future<Partition> segment : segmentsToMerge) {
        toDelete.add(getPartition(segment).fileName);
      }
      IOUtils.deleteFiles(dir, toDelete);

      return new Partition(newSegmentName, totalCount);
    }

