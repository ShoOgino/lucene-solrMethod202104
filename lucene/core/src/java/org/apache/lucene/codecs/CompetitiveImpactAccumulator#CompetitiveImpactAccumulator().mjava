  /** Sole constructor. */
  public CompetitiveImpactAccumulator() {
    maxFreqs = new int[256];
    Comparator<Impact> comparator =
        new Comparator<Impact>() {
          @Override
          public int compare(Impact o1, Impact o2) {
            // greater freqs compare greater
            int cmp = Integer.compare(o1.freq, o2.freq);
            if (cmp == 0) {
              // greater norms compare lower
              cmp = Long.compareUnsigned(o2.norm, o1.norm);
            }
            return cmp;
          }
        };
    otherFreqNormPairs = new TreeSet<>(comparator);
  }

