  public void testSkipCachingForRangeQuery() throws IOException {
    Directory dir = newDirectory();
    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
    Document doc1 = new Document();
    doc1.add(new StringField("name", "tom", Store.YES));
    doc1.add(new LongPoint("age", 15));
    doc1.add(new SortedNumericDocValuesField("age", 15));
    Document doc2 = new Document();
    doc2.add(new StringField("name", "alice", Store.YES));
    doc2.add(new LongPoint("age", 20));
    doc2.add(new SortedNumericDocValuesField("age", 20));
    w.addDocuments(Arrays.asList(doc1, doc2));
    final IndexReader reader = w.getReader();
    final IndexSearcher searcher = newSearcher(reader);
    searcher.setQueryCachingPolicy(ALWAYS_CACHE);
    w.close();

    // lead cost is 1, cost of subQuery1 is 1, cost of subQuery2 is 2
    BooleanQuery.Builder bq = new BooleanQuery.Builder();
    TermQuery subQuery1 = new TermQuery(new Term("name", "tom"));
    IndexOrDocValuesQuery subQuery2 =
        new IndexOrDocValuesQuery(
            LongPoint.newRangeQuery("age", 10, 30),
            SortedNumericDocValuesField.newSlowRangeQuery("age", 10, 30));
    BooleanQuery query = bq.add(subQuery1, Occur.FILTER).add(subQuery2, Occur.FILTER).build();
    Set<Query> cacheSet = new HashSet<>();

    // only term query is cached
    final LRUQueryCache partCache = new LRUQueryCache(1000000, 10000000, context -> true, 1);
    searcher.setQueryCache(partCache);
    searcher.search(query, 1);
    cacheSet.add(subQuery1);
    assertEquals(cacheSet, new HashSet<>(partCache.cachedQueries()));

    // both queries are cached
    final LRUQueryCache allCache =
        new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);
    searcher.setQueryCache(allCache);
    searcher.search(query, 1);
    cacheSet.add(subQuery2);
    assertEquals(cacheSet, new HashSet<>(allCache.cachedQueries()));

    reader.close();
    dir.close();
  }

