  /**
   * Tests that a query matches the an expected set of documents using a HitCollector.
   *
   * <p>Note that when using the HitCollector API, documents will be collected if they "match"
   * regardless of what their score is.
   *
   * @param query the query to test
   * @param searcher the searcher to test the query against
   * @param defaultFieldName used for displaying the query in assertion messages
   * @param results a list of documentIds that must match the query
   * @see #checkHits
   */
  public static void checkHitCollector(
      Random random, Query query, String defaultFieldName, IndexSearcher searcher, int[] results)
      throws IOException {

    QueryUtils.check(random, query, searcher);

    Set<Integer> correct = new TreeSet<>();
    for (int i = 0; i < results.length; i++) {
      correct.add(Integer.valueOf(results[i]));
    }
    final Set<Integer> actual = new TreeSet<>();
    final Collector c = new SetCollector(actual);

    searcher.search(query, c);
    assertEquals("Simple: " + query.toString(defaultFieldName), correct, actual);

    for (int i = -1; i < 2; i++) {
      actual.clear();
      IndexSearcher s = QueryUtils.wrapUnderlyingReader(random, searcher, i);
      s.search(query, c);
      assertEquals("Wrap Reader " + i + ": " + query.toString(defaultFieldName), correct, actual);
    }
  }

