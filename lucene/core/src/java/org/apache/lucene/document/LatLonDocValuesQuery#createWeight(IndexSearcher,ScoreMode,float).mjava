  @Override
  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)
      throws IOException {
    final GeoEncodingUtils.Component2DPredicate component2DPredicate =
        queryRelation == ShapeField.QueryRelation.CONTAINS
            ? null
            : GeoEncodingUtils.createComponentPredicate(component2D);
    return new ConstantScoreWeight(this, boost) {

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);
        if (values == null) {
          return null;
        }
        final TwoPhaseIterator iterator;
        switch (queryRelation) {
          case INTERSECTS:
            iterator = intersects(values, component2DPredicate);
            break;
          case WITHIN:
            iterator = within(values, component2DPredicate);
            break;
          case DISJOINT:
            iterator = disjoint(values, component2DPredicate);
            break;
          case CONTAINS:
            iterator = contains(values, geometries);
            break;
          default:
            throw new IllegalArgumentException(
                "Invalid query relationship:[" + queryRelation + "]");
        }
        return new ConstantScoreScorer(this, boost, scoreMode, iterator);
      }

      @Override
      public boolean isCacheable(LeafReaderContext ctx) {
        return DocValues.isCacheable(ctx, field);
      }
    };
  }

