    @Test
    @Slow
    @SuppressWarnings("rawtypes")
    public void testBackupIncremental() throws Exception {
        TrackingBackupRepository.clear();

        setTestSuffix("testbackupinc");
        randomizeReplicaTypes();
        CloudSolrClient solrClient = cluster.getSolrClient();

        CollectionAdminRequest
                .createCollection(getCollectionName(), "conf1", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas)
                .process(solrClient);

        indexDocs(getCollectionName(), false);

        String backupName = BACKUPNAME_PREFIX + testSuffix;
        try (BackupRepository repository = cluster.getJettySolrRunner(0).getCoreContainer()
                .newBackupRepository(BACKUP_REPO_NAME)) {
            String backupLocation = repository.getBackupLocation(getBackupLocation());
            URI fullBackupLocationURI = repository.resolve(repository.createURI(backupLocation), backupName, getCollectionName());
            BackupFilePaths backupPaths = new BackupFilePaths(repository, fullBackupLocationURI);
            IncrementalBackupVerifier verifier = new IncrementalBackupVerifier(repository, backupLocation, backupName, getCollectionName(), 3);

            backupRestoreThenCheck(solrClient, verifier);
            indexDocs(getCollectionName(), false);
            backupRestoreThenCheck(solrClient, verifier);

            // adding more commits to trigger merging segments
            for (int i = 0; i < 15; i++) {
                indexDocs(getCollectionName(), 5,false);
            }

            backupRestoreThenCheck(solrClient, verifier);
            indexDocs(getCollectionName(), false);
            backupRestoreThenCheck(solrClient, verifier);

            // test list backups
            CollectionAdminResponse resp =
                    CollectionAdminRequest.listBackup(backupName)
                            .setBackupLocation(backupLocation)
                            .setBackupRepository(BACKUP_REPO_NAME)
                            .process(cluster.getSolrClient());
            ArrayList backups = (ArrayList) resp.getResponse().get("backups");
            assertEquals(3, backups.size());

            // test delete backups
            resp = CollectionAdminRequest.deleteBackupByRecency(backupName, 4)
                    .setRepositoryName(BACKUP_REPO_NAME)
                    .setLocation(backupLocation)
                    .process(cluster.getSolrClient());
            assertEquals(null, resp.getResponse().get("deleted"));

            resp =  CollectionAdminRequest.deleteBackupByRecency(backupName, 3)
                    .setRepositoryName(BACKUP_REPO_NAME)
                    .setLocation(backupLocation)
                    .process(cluster.getSolrClient());
            assertEquals(null, resp.getResponse().get("deleted"));

            resp = CollectionAdminRequest.deleteBackupByRecency(backupName, 2)
                    .setRepositoryName(BACKUP_REPO_NAME)
                    .setLocation(backupLocation)
                    .process(cluster.getSolrClient());
            assertEquals(1, resp.getResponse()._get("deleted[0]/backupId", null));

            resp = CollectionAdminRequest.deleteBackupById(backupName, 3)
                    .setRepositoryName(BACKUP_REPO_NAME)
                    .setLocation(backupLocation)
                    .process(cluster.getSolrClient());
            assertEquals(3, resp.getResponse()._get("deleted[0]/backupId", null));


            simpleRestoreAndCheckDocCount(solrClient, backupLocation, backupName);

            // test purge backups
            // purging first since there may corrupted files were uploaded
            resp = CollectionAdminRequest.deleteBackupPurgeUnusedFiles(backupName)
                    .setRepositoryName(BACKUP_REPO_NAME)
                    .setLocation(backupLocation)
                    .process(cluster.getSolrClient());

            addDummyFileToIndex(repository, backupPaths.getIndexDir(), "dummy-files-1");
            addDummyFileToIndex(repository, backupPaths.getIndexDir(), "dummy-files-2");
            resp = CollectionAdminRequest.deleteBackupPurgeUnusedFiles(backupName)
                    .setRepositoryName(BACKUP_REPO_NAME)
                    .setLocation(backupLocation)
                    .process(cluster.getSolrClient());
            assertEquals(2, ((NamedList)resp.getResponse().get("deleted")).get("numIndexFiles"));

            new UpdateRequest()
                    .deleteByQuery("*:*")
                    .commit(cluster.getSolrClient(), getCollectionName());
            indexDocs(getCollectionName(), false);
            // corrupt index files
            corruptIndexFiles();
            try {
                log.info("Create backup after corrupt index files");
                CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(getCollectionName(), backupName)
                        .setLocation(backupLocation)
                        .setIncremental(true)
                        .setMaxNumberBackupPoints(3)
                        .setRepositoryName(BACKUP_REPO_NAME);
                if (random().nextBoolean()) {
                    RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);
                    if (state != RequestStatusState.FAILED) {
                        fail("This backup should be failed");
                    }
                } else {
                    CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());
                    fail("This backup should be failed");
                }
            } catch (Exception e) {
                // expected
                e.printStackTrace();
            }
        }
    }

