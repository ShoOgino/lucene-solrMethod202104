  /**
   * Returns the documents in the range [start .. start+howMany) that were collected by this
   * collector. Note that if {@code start >= pq.size()}, an empty TopDocs is returned, and if
   * pq.size() - start &lt; howMany, then only the available documents in [start .. pq.size()) are
   * returned.<br>
   * This method is useful to call in case pagination of search results is allowed by the search
   * application, as well as it attempts to optimize the memory used by allocating only as much as
   * requested by howMany.<br>
   * <b>NOTE:</b> you cannot call this method more than once for each search execution. If you need
   * to call it more than once, passing each time a different range, you should call {@link
   * #topDocs()} and work with the returned {@link TopDocs} object, which will contain all the
   * results this search execution collected.
   */
  public TopDocs topDocs(int start, int howMany) {

    // In case pq was populated with sentinel values, there might be less
    // results than pq.size(). Therefore return all results until either
    // pq.size() or totalHits.
    int size = topDocsSize();

    if (howMany < 0) {
      throw new IllegalArgumentException(
          "Number of hits requested must be greater than 0 but value was " + howMany);
    }

    if (start < 0) {
      throw new IllegalArgumentException(
          "Expected value of starting position is between 0 and " + size + ", got " + start);
    }

    if (start >= size || howMany == 0) {
      return newTopDocs(null, start);
    }

    // We know that start < pqsize, so just fix howMany.
    howMany = Math.min(size - start, howMany);
    ScoreDoc[] results = new ScoreDoc[howMany];

    // pq's pop() returns the 'least' element in the queue, therefore need
    // to discard the first ones, until we reach the requested range.
    // Note that this loop will usually not be executed, since the common usage
    // should be that the caller asks for the last howMany results. However it's
    // needed here for completeness.
    for (int i = pq.size() - start - howMany; i > 0; i--) {
      pq.pop();
    }

    // Get the requested results from pq.
    populateResults(results, howMany);

    return newTopDocs(results, start);
  }

