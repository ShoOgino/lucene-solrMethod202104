    @Override
    public boolean matches(final Edge edge) {
      // Early exit if the point is on the edge, in which case we accidentally discovered the
      // answer.
      if (edge.isWithin(thePointX, thePointY, thePointZ)) {
        onEdge = true;
        return false;
      }

      // All edges that touch the travel planes get assessed the same.  So, for each intersecting
      // edge on both legs:
      // (1) If the edge contains the intersection point, we analyze it on only one leg.  For the
      // other leg, we do nothing.
      // (2) We compute the crossings of the edge with ALL FOUR inner and outer bounding planes.
      // (3) We add the numbers of each kind of crossing to the total for that class of crossing
      // (innerTotal and outerTotal).
      // (4) When done all edges tallied in this way, we take min(innerTotal, outerTotal) and assume
      // that is the number of crossings.
      //
      // Q: What if we see the same edge in both traversals?
      // A: We should really evaluate it only in one.  Keep a hash of the edges we've looked at
      // already and don't process edges twice.

      // Every edge should be looked at only once.
      if (seenEdges != null && seenEdges.contains(edge)) {
        return true;
      }
      if (seenEdges == null) {
        seenEdges = new HashSet<>();
      }
      seenEdges.add(edge);

      // We've never seen this edge before.  Evaluate it in the context of inner and outer planes.
      computeInsideOutside();

      /*
      System.out.println("\nThe following edges should intersect the travel/testpoint planes:");
      Edge thisEdge = edge;
      while (true) {
        final GeoPoint[] travelCrossings = travelPlane.findIntersections(planetModel, thisEdge.plane, checkPointCutoffPlane, checkPointOtherCutoffPlane, thisEdge.startPlane, thisEdge.endPlane);
        if (travelCrossings == null || travelCrossings.length > 0) {
          System.out.println("Travel plane: "+thisEdge.startPoint+" -> "+thisEdge.endPoint);
        }
        final GeoPoint[] testPointCrossings = testPointPlane.findIntersections(planetModel, thisEdge.plane, testPointCutoffPlane, testPointOtherCutoffPlane, thisEdge.startPlane, thisEdge.endPlane);
        if (testPointCrossings == null || testPointCrossings.length > 0) {
          System.out.println("Test point plane: "+thisEdge.startPoint+" -> "+thisEdge.endPoint);
        }
        thisEdge = thisEdge.next;
        if (thisEdge == edge) {
          break;
        }
      }
      */

      // System.out.println("");
      // System.out.println("Considering edge " + (edge.startPoint) + " -> " + (edge.endPoint));

      // Some edges are going to be given to us even when there's no real intersection, so do that
      // as a sanity check, first.
      final GeoPoint[] travelCrossings =
          travelPlane.findIntersections(
              planetModel,
              edge.plane,
              checkPointCutoffPlane,
              checkPointOtherCutoffPlane,
              edge.startPlane,
              edge.endPlane);
      if (travelCrossings != null && travelCrossings.length == 0) {
        // System.out.println(" No intersections with travel plane...");
        final GeoPoint[] testPointCrossings =
            testPointPlane.findIntersections(
                planetModel,
                edge.plane,
                testPointCutoffPlane,
                testPointOtherCutoffPlane,
                edge.startPlane,
                edge.endPlane);
        if (testPointCrossings != null && testPointCrossings.length == 0) {
          // As a last resort, see if the edge endpoints are on either plane.  This is sometimes
          // necessary because the intersection computation logic might not detect near-miss
          // edges otherwise.
          // System.out.println(" No intersections with testpoint plane...");
          if (!travelPlane.evaluateIsZero(edge.startPoint)
              && !travelPlane.evaluateIsZero(edge.endPoint)
              && !testPointPlane.evaluateIsZero(edge.startPoint)
              && !testPointPlane.evaluateIsZero(edge.endPoint)) {
            return true;
          } else {
            // System.out.println(" Startpoint/travelPlane="
            // + travelPlane.evaluate(edge.startPoint)"
            // + " Startpoint/testPointPlane=" + testPointPlane.evaluate(edge.startPoint));
            // System.out.println(" Endpoint/travelPlane="
            // + travelPlane.evaluate(edge.endPoint)
            // + " Endpoint/testPointPlane=" + testPointPlane.evaluate(edge.endPoint));
          }
        } else {
          // System.out.println(" Intersection found with testPoint plane...");
        }
      } else {
        // System.out.println(" Intersection found with travel plane...");
      }

      // System.out.println(" Edge intersects travel or testPoint plane");
      /*
      System.out.println(
        " start point travel dist="+travelPlane.evaluate(edge.startPoint)+"; end point travel dist="+travelPlane.evaluate(edge.endPoint));
      System.out.println(
        " start point travel above dist="+travelAbovePlane.evaluate(edge.startPoint)+"; end point travel above dist="+travelAbovePlane.evaluate(edge.endPoint));
      System.out.println(
        " start point travel below dist="+travelBelowPlane.evaluate(edge.startPoint)+"; end point travel below dist="+travelBelowPlane.evaluate(edge.endPoint));
      System.out.println(
        " start point testpoint dist="+testPointPlane.evaluate(edge.startPoint)+"; end point testpoint dist="+testPointPlane.evaluate(edge.endPoint));
      System.out.println(
        " start point testpoint above dist="+testPointAbovePlane.evaluate(edge.startPoint)+"; end point testpoint above dist="+testPointAbovePlane.evaluate(edge.endPoint));
      System.out.println(
        " start point testpoint below dist="+testPointBelowPlane.evaluate(edge.startPoint)+"; end point testpoint below dist="+testPointBelowPlane.evaluate(edge.endPoint));
      */

      // Determine crossings of this edge against all inside/outside planes.  There's no further
      // need to look at the actual travel plane itself.
      // System.out.println(" Assessing inner crossings...");
      innerCrossingCount +=
          countCrossings(
              edge,
              travelInsidePlane,
              checkPointCutoffPlane,
              insideTravelCutoffPlane,
              testPointInsidePlane,
              testPointCutoffPlane,
              insideTestPointCutoffPlane);
      // System.out.println(" Assessing outer crossings...");
      outerCrossingCount +=
          countCrossings(
              edge,
              travelOutsidePlane,
              checkPointCutoffPlane,
              outsideTravelCutoffPlane,
              testPointOutsidePlane,
              testPointCutoffPlane,
              outsideTestPointCutoffPlane);
      /*
      final GeoPoint[] travelInnerCrossings = computeCrossings(travelInsidePlane, edge, checkPointCutoffPlane, insideTravelCutoffPlane);
      final GeoPoint[] travelOuterCrossings = computeCrossings(travelOutsidePlane, edge, checkPointCutoffPlane, outsideTravelCutoffPlane);
      final GeoPoint[] testPointInnerCrossings = computeCrossings(testPointInsidePlane, edge, testPointCutoffPlane, insideTestPointCutoffPlane);
      final GeoPoint[] testPointOuterCrossings = computeCrossings(testPointOutsidePlane, edge, testPointCutoffPlane, outsideTestPointCutoffPlane);
      */

      return true;
    }

