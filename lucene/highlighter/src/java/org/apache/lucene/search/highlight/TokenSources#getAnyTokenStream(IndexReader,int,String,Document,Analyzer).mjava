  /**
   * A convenience method that tries to first get a {@link TokenStreamFromTermVector} for the
   * specified docId, then, falls back to using the passed in {@link
   * org.apache.lucene.document.Document} to retrieve the TokenStream. This is useful when you
   * already have the document, but would prefer to use the vector first.
   *
   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try and get the vector
   *     from
   * @param docId The docId to retrieve.
   * @param field The field to retrieve on the document
   * @param document The document to fall back on
   * @param analyzer The analyzer to use for creating the TokenStream if the vector doesn't exist
   * @return The {@link org.apache.lucene.analysis.TokenStream} for the {@link
   *     org.apache.lucene.index.IndexableField} on the {@link org.apache.lucene.document.Document}
   * @throws IOException if there was an error loading
   */
  @Deprecated // maintenance reasons LUCENE-6445
  public static TokenStream getAnyTokenStream(
      IndexReader reader, int docId, String field, Document document, Analyzer analyzer)
      throws IOException {
    TokenStream ts = null;

    Fields vectors = reader.getTermVectors(docId);
    if (vectors != null) {
      Terms vector = vectors.terms(field);
      if (vector != null) {
        ts = getTokenStream(vector);
      }
    }

    // No token info stored so fall back to analyzing raw content
    if (ts == null) {
      ts = getTokenStream(document, field, analyzer);
    }
    return ts;
  }

