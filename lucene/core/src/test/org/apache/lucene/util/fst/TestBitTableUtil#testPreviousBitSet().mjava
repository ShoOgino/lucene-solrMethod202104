  public void testPreviousBitSet() throws IOException {
    int numIterations = atLeast(1000);
    for (int i = 0; i < numIterations; i++) {
      byte[] bits = buildRandomBits();
      int numBytes = bits.length - 1;
      int numBits = numBytes * Byte.SIZE;

      // Verify previousBitSet with countBitsUpTo for all bit indexes.
      for (int bitIndex = 0; bitIndex <= numBits; bitIndex++) {
        int previousIndex = BitTableUtil.previousBitSet(bitIndex, reader(bits));
        if (previousIndex == -1) {
          assertEquals(
              "No previous bit set, so expected bit count 0"
                  + " (i="
                  + i
                  + " bitIndex="
                  + bitIndex
                  + ")",
              0,
              BitTableUtil.countBitsUpTo(bitIndex, reader(bits)));
        } else {
          assertTrue(
              "Expected previous bit set at previousIndex="
                  + previousIndex
                  + " (i="
                  + i
                  + " bitIndex="
                  + bitIndex
                  + ")",
              BitTableUtil.isBitSet(previousIndex, reader(bits)));
          int bitCount = BitTableUtil.countBitsUpTo(Math.min(bitIndex + 1, numBits), reader(bits));
          int expectedPreviousBitCount =
              bitIndex < numBits && BitTableUtil.isBitSet(bitIndex, reader(bits))
                  ? bitCount - 1
                  : bitCount;
          assertEquals(
              "Previous bit set at previousIndex="
                  + previousIndex
                  + " with current bitCount="
                  + bitCount
                  + " so expected previousBitCount="
                  + expectedPreviousBitCount
                  + " (i="
                  + i
                  + " bitIndex="
                  + bitIndex
                  + ")",
              expectedPreviousBitCount,
              BitTableUtil.countBitsUpTo(previousIndex + 1, reader(bits)));
        }
      }
    }
  }

