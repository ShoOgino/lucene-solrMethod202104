  /**
   * Returns the top k results from a More Like This query based on the input document
   *
   * @param document the document to use for More Like This search
   * @return the top results for the MLT query
   * @throws IOException If there is a low-level I/O error
   */
  private TopDocs knnSearch(Document document) throws IOException {
    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();

    for (String fieldName : textFieldNames) {
      String boost = null;
      if (fieldName.contains("^")) {
        String[] field2boost = fieldName.split("\\^");
        fieldName = field2boost[0];
        boost = field2boost[1];
      }
      String[] fieldValues = document.getValues(fieldName);
      mlt.setBoost(true); // we want always to use the boost coming from TF * IDF of the term
      if (boost != null) {
        mlt.setBoostFactor(
            Float.parseFloat(
                boost)); // this is an additional multiplicative boost coming from the field boost
      }
      mlt.setAnalyzer(field2analyzer.get(fieldName));
      for (String fieldContent : fieldValues) {
        mltQuery.add(
            new BooleanClause(
                mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));
      }
      mlt.setBoostFactor(1); // restore neutral boost for next field
    }
    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, "*"));
    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));
    if (query != null) {
      mltQuery.add(query, BooleanClause.Occur.MUST);
    }
    return indexSearcher.search(mltQuery.build(), k);
  }

