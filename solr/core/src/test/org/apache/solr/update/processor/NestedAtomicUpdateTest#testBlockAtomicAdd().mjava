  @Test
  public void testBlockAtomicAdd() throws Exception {

    final SolrInputDocument sdoc2 = sdoc("id", "2", "cat_ss", "child");
    SolrInputDocument doc = sdoc("id", "1",
        "cat_ss", new String[] {"aaa", "ccc"},
        "child1", sdoc2
    );
    assertU(adoc(doc));

    BytesRef rootDocId = new BytesRef("1");
    SolrCore core = h.getCore();
    SolrInputDocument block = RealTimeGetComponent.getInputDocument(core, rootDocId, rootDocId, null, null, ROOT_WITH_CHILDREN);
    // assert block doc has child docs
    assertTrue(block.containsKey("child1"));

    assertJQ(req("q","id:1")
        ,"/response/numFound==0"
    );

    // commit the changes
    assertU(commit());

    BytesRef childDocId = new BytesRef("2");
    assertEquals(sdoc2.toString(), removeSpecialFields(
        RealTimeGetComponent.getInputDocument(core, childDocId, rootDocId, null, null, DOC)
    ).toString());

    assertJQ(req("q","id:1")
        ,"/response/numFound==1"
    );

    doc = sdoc("id", "1",
        "cat_ss", Collections.singletonMap("add", "bbb"),
        "child2", Collections.singletonMap("add", sdoc("id", "3", "cat_ss", "child")));
    addAndGetVersion(doc, params("wt", "json"));


     assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, child2, [child]")
     ,"=={\"doc\":{'id':\"1\"" +
     ", cat_ss:[\"aaa\",\"ccc\",\"bbb\"], child2:{\"id\":\"3\", \"cat_ss\": [\"child\"]}," +
     "child1:[{\"id\":\"2\",\"cat_ss\":[\"child\"]}]" +
     "       }}"
     );

    assertU(commit());

    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log
    // this requires ChildDocTransformer to get the whole block, since the document is retrieved using an index lookup
    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, child2, [child]")
        , "=={\"doc\":{'id':\"1\"" +
            ", cat_ss:[\"aaa\",\"ccc\",\"bbb\"], child2:{\"id\":\"3\", \"cat_ss\": [\"child\"]}," +
            "child1:[{\"id\":\"2\",\"cat_ss\":[\"child\"]}]" +
            "       }}"
    );

    doc = sdoc("id", "2",
        "child3", Collections.singletonMap("add", sdoc("id", "4", "cat_ss", "grandChild")));
    addAndGetVersion(doc, params("wt", "json", "_route_", "1"));

    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, child2, child3, [child]")
        ,"=={'doc':{'id':'1'" +
            ", cat_ss:[\"aaa\",\"ccc\",\"bbb\"], child1:[{\"id\":\"2\",\"cat_ss\":[\"child\"], child3:{\"id\":\"4\",\"cat_ss\":[\"grandChild\"]}}]," +
            "child2:{\"id\":\"3\", \"cat_ss\": [\"child\"]}" +
            "       }}"
    );

    assertJQ(req("qt","/get", "id","2", "fl","id, cat_ss, child, child3, [child]")
        ,"=={'doc':{\"id\":\"2\",\"cat_ss\":[\"child\"], child3:{\"id\":\"4\",\"cat_ss\":[\"grandChild\"]}}" +
            "       }}"
    );

    assertU(commit());

    //add greatGrandChild
    doc = sdoc("id", "4",
        "child4", Collections.singletonMap("add", sdoc("id", "5", "cat_ss", "greatGrandChild")));
    addAndGetVersion(doc, params("wt", "json", "_route_", "1"));

    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, child2, child3, child4, [child]")
        ,"=={'doc':{'id':'1'" +
            ", cat_ss:[\"aaa\",\"ccc\",\"bbb\"], child1:[{\"id\":\"2\",\"cat_ss\":[\"child\"], child3:{\"id\":\"4\",\"cat_ss\":[\"grandChild\"]," +
            " child4:{\"id\":\"5\",\"cat_ss\":[\"greatGrandChild\"]}}}], child2:{\"id\":\"3\", \"cat_ss\": [\"child\"]}" +
            "       }}"
    );

    assertJQ(req("qt","/get", "id","4", "fl","id, cat_ss, child4, [child]")
        ,"=={'doc':{\"id\":\"4\",\"cat_ss\":[\"grandChild\"], child4:{\"id\":\"5\",\"cat_ss\":[\"greatGrandChild\"]}}" +
            "       }}"
    );

    assertU(commit());

    //add another greatGrandChild
    doc = sdoc("id", "4",
        "child4", Collections.singletonMap("add", sdoc("id", "6", "cat_ss", "greatGrandChild")));
    addAndGetVersion(doc, params("wt", "json", "_route_", "1"));

    assertU(commit());

    assertJQ(req("qt","/get", "id","4", "fl","id, cat_ss, child4, [child]")
        ,"=={'doc':{\"id\":\"4\",\"cat_ss\":[\"grandChild\"], child4:[{\"id\":\"5\",\"cat_ss\":[\"greatGrandChild\"]}," +
            "{\"id\":\"6\", \"cat_ss\":[\"greatGrandChild\"]}]}" +
            "       }}"
    );

    //add another child field name
    doc = sdoc("id", "1",
        "child5", Collections.singletonMap("add", sdocs(sdoc("id", "7", "cat_ss", "child"),
            sdoc("id", "8", "cat_ss", "child")
        ))
    );
    addAndGetVersion(doc, params("wt", "json"));

    assertU(commit());

    doc = sdoc("id", "1",
        "new_s", Collections.singletonMap("add", "new string"));
    addAndGetVersion(doc, params("wt", "json"));

    assertU(commit());


    // ensure the whole block has been committed correctly to the index.
    assertJQ(req("q","id:1", "fl", "*, [child]"),
        "/response/numFound==1",
        "/response/docs/[0]/id=='1'",
        "/response/docs/[0]/cat_ss/[0]==\"aaa\"",
        "/response/docs/[0]/cat_ss/[1]==\"ccc\"",
        "/response/docs/[0]/cat_ss/[2]==\"bbb\"",
        "/response/docs/[0]/child1/[0]/id=='2'",
        "/response/docs/[0]/child1/[0]/cat_ss/[0]=='child'",
        "/response/docs/[0]/child1/[0]/child3/id=='4'",
        "/response/docs/[0]/child1/[0]/child3/cat_ss/[0]=='grandChild'",
        "/response/docs/[0]/child1/[0]/child3/child4/[0]/id=='5'",
        "/response/docs/[0]/child1/[0]/child3/child4/[0]/cat_ss/[0]=='greatGrandChild'",
        "/response/docs/[0]/child1/[0]/child3/child4/[1]/id=='6'",
        "/response/docs/[0]/child1/[0]/child3/child4/[1]/cat_ss/[0]=='greatGrandChild'",
        "/response/docs/[0]/child2/id=='3'",
        "/response/docs/[0]/child2/cat_ss/[0]=='child'",
        "/response/docs/[0]/child5/[0]/id=='7'",
        "/response/docs/[0]/child5/[0]/cat_ss/[0]=='child'",
        "/response/docs/[0]/child5/[1]/id=='8'",
        "/response/docs/[0]/child5/[1]/cat_ss/[0]=='child'",
        "/response/docs/[0]/new_s=='new string'"
    );
  }

