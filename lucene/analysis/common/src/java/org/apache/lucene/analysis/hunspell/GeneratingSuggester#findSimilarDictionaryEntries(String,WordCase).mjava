  private List<Weighted<Root<String>>> findSimilarDictionaryEntries(
      String word, WordCase originalCase) {
    TreeSet<Weighted<Root<String>>> roots = new TreeSet<>();
    processFST(
        dictionary.words,
        (key, forms) -> {
          if (Math.abs(key.length - word.length()) > 4) return;

          String root = toString(key);
          List<Root<String>> entries = filterSuitableEntries(root, forms);
          if (entries.isEmpty()) return;

          if (originalCase == WordCase.LOWER
              && WordCase.caseOf(root) == WordCase.TITLE
              && !dictionary.hasLanguage("de")) {
            return;
          }

          String lower = dictionary.toLowerCase(root);
          int sc =
              ngram(3, word, lower, EnumSet.of(NGramOptions.LONGER_WORSE))
                  + commonPrefix(word, root);

          entries.forEach(e -> roots.add(new Weighted<>(e, sc)));
        });
    return roots.stream().limit(MAX_ROOTS).collect(Collectors.toList());
  }

