    public CredentialsResolver() {
      String credentials = System.getProperty(PreemptiveBasicAuthClientBuilderFactory.SYS_PROP_BASIC_AUTH_CREDENTIALS);
      String configFile = System.getProperty(PreemptiveBasicAuthClientBuilderFactory.SYS_PROP_HTTP_CLIENT_CONFIG);

      if (credentials != null && configFile != null) {
        throw new IllegalArgumentException("Basic authentication credentials passed via a configuration file"
                + " as well as java system property. Please choose one mechanism!");
      }

      if (credentials != null) {
        List<String> ss = StrUtils.splitSmart(credentials, ':');
        if (ss.size() != 2 || StringUtils.isEmpty(ss.get(0)) || StringUtils.isEmpty(ss.get(1))) {
          throw new IllegalArgumentException("Invalid Authentication credentials: Please provide 'basicauth' in the 'user:password' format");
        }
        defaultParams = new MapSolrParams(Map.of(HttpClientUtil.PROP_BASIC_AUTH_USER, ss.get(0), HttpClientUtil.PROP_BASIC_AUTH_PASS, ss.get(1)));
      } else if (configFile != null) {
        Properties defaultProps = new Properties();
        try (BufferedReader reader = Files.newBufferedReader(Path.of(configFile), StandardCharsets.UTF_8)) {
          defaultProps.load(reader);
        } catch (IOException e) {
          throw new IllegalArgumentException("Unable to read credentials file at " + configFile, e);
        }
        Map<String, String> map = new HashMap<>();
        defaultProps.forEach((k, v) -> map.put((String) k, (String) v));
        defaultParams = new MapSolrParams(map);
      } else {
        defaultParams = null;
      }

    }

