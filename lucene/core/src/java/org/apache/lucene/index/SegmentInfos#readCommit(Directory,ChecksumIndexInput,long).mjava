  /** Read the commit from the provided {@link ChecksumIndexInput}. */
  public static final SegmentInfos readCommit(Directory directory, ChecksumIndexInput input, long generation) throws IOException {
    Throwable priorE = null;
    int format = -1;
    try {
      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need
      // to read the magic ourselves.
      int magic = input.readInt();
      if (magic != CodecUtil.CODEC_MAGIC) {
        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);
      }
      format = CodecUtil.checkHeaderNoMagic(input, "segments", VERSION_70, VERSION_CURRENT);
      byte id[] = new byte[StringHelper.ID_LENGTH];
      input.readBytes(id, 0, id.length);
      CodecUtil.checkIndexHeaderSuffix(input, Long.toString(generation, Character.MAX_RADIX));

      Version luceneVersion = Version.fromBits(input.readVInt(), input.readVInt(), input.readVInt());
      int indexCreatedVersion = input.readVInt();
      if (luceneVersion.major < indexCreatedVersion) {
        throw new CorruptIndexException("Creation version [" + indexCreatedVersion
            + ".x] can't be greater than the version that wrote the segment infos: [" + luceneVersion + "]" , input);
      }

      if (indexCreatedVersion < Version.LATEST.major - 1) {
        throw new IndexFormatTooOldException(input, "This index was initially created with Lucene "
            + indexCreatedVersion + ".x while the current version is " + Version.LATEST
            + " and Lucene only supports reading the current and previous major versions.");
      }

      SegmentInfos infos = new SegmentInfos(indexCreatedVersion);
      infos.id = id;
      infos.generation = generation;
      infos.lastGeneration = generation;
      infos.luceneVersion = luceneVersion;
      parseSegmentInfos(directory, input, infos, format);
      return infos;
      
    } catch (Throwable t) {
      priorE = t;
    } finally {
      if (format >= VERSION_70) { // oldest supported version
        CodecUtil.checkFooter(input, priorE);
      } else {
        throw IOUtils.rethrowAlways(priorE);
      }
    }
    throw new Error("Unreachable code");
  }

