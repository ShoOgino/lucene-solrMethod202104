  private FST.Arc<T> doSeekFloorArrayPacked(
      FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {
    // Arcs are fixed array -- use binary search to find the target.
    int idx = Util.binarySearch(fst, arc, targetLabel);

    if (idx >= 0) {
      // Match -- recurse
      // System.out.println("  match!  arcIdx=" + idx);
      fst.readArcByIndex(arc, in, idx);
      assert arc.arcIdx() == idx;
      assert arc.label() == targetLabel
          : "arc.label=" + arc.label() + " vs targetLabel=" + targetLabel + " mid=" + idx;
      output[upto] = fst.outputs.add(output[upto - 1], arc.output());
      if (targetLabel == FST.END_LABEL) {
        return null;
      }
      setCurrentLabel(arc.label());
      incr();
      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
    } else if (idx == -1) {
      // Before first arc.
      return backtrackToFloorArc(arc, targetLabel, in);
    } else {
      // There is a floor arc; idx will be (-1 - (floor + 1)).
      fst.readArcByIndex(arc, in, -2 - idx);
      assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;
      assert arc.label() < targetLabel
          : "arc.label=" + arc.label() + " vs targetLabel=" + targetLabel;
      pushLast();
      return null;
    }
  }

