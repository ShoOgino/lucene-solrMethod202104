  /**
   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The constructed automaton
   * is minimal and deterministic and has no transitions to dead states.
   *
   * @param automata a map from automaton identifiers to automata (of type <code>Automaton</code>).
   * @param maxDeterminizedStates maximum number of states in the resulting automata. If the
   *     automata would need more than this many states TooComplexToDeterminizeException is thrown.
   *     Higher number require more space but can process more complex regexes.
   * @exception IllegalArgumentException if this regular expression uses a named identifier that
   *     does not occur in the automaton map
   * @exception TooComplexToDeterminizeException if determinizing this regexp requires more than
   *     maxDeterminizedStates states
   */
  public Automaton toAutomaton(Map<String, Automaton> automata, int maxDeterminizedStates)
      throws IllegalArgumentException, TooComplexToDeterminizeException {
    return toAutomaton(automata, null, maxDeterminizedStates);
  }

