  @Test
  public void testLeaderFailsOver() throws Exception {
    CollectionAdminRequest
        .createCollection(collection, "config", 1, 2)
        .process(cluster.getSolrClient());
    cluster.waitForActiveCollection(collection, 1, 2);

    UpdateResponse updateResponse = new UpdateRequest().add("id", "1").commit(cluster.getSolrClient(), null);
    assertEquals(0, updateResponse.getStatus());

    Replica oldLeader = corruptLeader(collection);

    waitForState("Now waiting for new replica to become leader", collection, (liveNodes, collectionState) -> {
      Slice slice = collectionState.getSlice("shard1");

      if (slice.getReplicas().size() != 2) return false;
      if (slice.getLeader() == null) return false;
      if (slice.getLeader().getName().equals(oldLeader.getName())) return false;

      return true;
    });
    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);
    Slice shard = getCollectionState(collection).getSlice("shard1");
    assertNotEquals("Old leader should not be leader again", oldLeader.getNodeName(), shard.getLeader().getNodeName());
    assertEquals("Old leader should be a follower", oldLeader.getNodeName(), getNonLeader(shard).getNodeName());

    // Check that we can continue indexing after this
    updateResponse = new UpdateRequest().add("id", "2").commit(cluster.getSolrClient(), null);
    assertEquals(0, updateResponse.getStatus());
    try (SolrClient followerClient = new HttpSolrClient.Builder(oldLeader.getCoreUrl()).build()) {
      QueryResponse queryResponse = new QueryRequest(new SolrQuery("*:*")).process(followerClient);
      assertEquals(queryResponse.getResults().toString(), 2, queryResponse.getResults().getNumFound());
    }
  }

