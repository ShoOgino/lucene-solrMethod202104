  /** Build one {@link CharArrayMatcher} matching any term the query might match. */
  private static CharArrayMatcher buildCombinedAutomaton(UHComponents components) {
    // We don't know enough about the query to do this confidently
    if (components.getTerms() == null || components.getAutomata() == null) {
      return null;
    }

    List<CharArrayMatcher> allAutomata = new ArrayList<>();
    if (components.getTerms().length > 0) {
      allAutomata.add(CharArrayMatcher.fromTerms(Arrays.asList(components.getTerms())));
    }
    Collections.addAll(allAutomata, components.getAutomata());
    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {
      Collections.addAll(
          allAutomata,
          MultiTermHighlighting.extractAutomata(
              spanQuery, components.getFieldMatcher(), true)); // true==lookInSpan
    }

    if (allAutomata.size() == 1) {
      return allAutomata.get(0);
    }

    // TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so
    // that we
    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char)
    // oriented

    // Return an aggregate CharArrayMatcher of others
    return (chars, offset, length) -> {
      for (int i = 0; i < allAutomata.size(); i++) {
        // don't use foreach to avoid Iterator allocation
        if (allAutomata.get(i).match(chars, offset, length)) {
          return true;
        }
      }
      return false;
    };
  }

