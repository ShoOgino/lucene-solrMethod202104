  /**
   * Create a packed integer array with the given amount of values initialized to 0. the valueCount
   * and the bitsPerValue cannot be changed after creation. All Mutables known by this factory are
   * kept fully in RAM.
   *
   * <p>Positive values of <code>acceptableOverheadRatio</code> will trade space for speed by
   * selecting a faster but potentially less memory-efficient implementation. An <code>
   * acceptableOverheadRatio</code> of {@link PackedInts#COMPACT} will make sure that the most
   * memory-efficient implementation is selected whereas {@link PackedInts#FASTEST} will make sure
   * that the fastest implementation is selected.
   *
   * @param valueCount the number of elements
   * @param bitsPerValue the number of bits available for any given value
   * @param acceptableOverheadRatio an acceptable overhead ratio per value
   * @return a mutable packed integer array
   * @lucene.internal
   */
  public static Mutable getMutable(
      int valueCount, int bitsPerValue, float acceptableOverheadRatio) {
    final FormatAndBits formatAndBits =
        fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);
    return getMutable(valueCount, formatAndBits.bitsPerValue, formatAndBits.format);
  }

