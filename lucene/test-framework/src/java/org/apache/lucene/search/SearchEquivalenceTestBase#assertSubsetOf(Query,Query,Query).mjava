  /**
   * Asserts that the documents returned by <code>q1</code> are a subset of those returned by <code>
   * q2</code>.
   *
   * <p>Both queries will be filtered by <code>filter</code>
   */
  protected void assertSubsetOf(Query q1, Query q2, Query filter) throws Exception {
    QueryUtils.check(q1);
    QueryUtils.check(q2);

    if (filter != null) {
      q1 = new BooleanQuery.Builder().add(q1, Occur.MUST).add(filter, Occur.FILTER).build();
      q2 = new BooleanQuery.Builder().add(q2, Occur.MUST).add(filter, Occur.FILTER).build();
    }
    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false
    for (Sort sort : new Sort[] {Sort.INDEXORDER, Sort.RELEVANCE}) {
      // not efficient, but simple!
      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);
      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);
      assertTrue(
          "too many hits: " + td1.totalHits.value + " > " + td2.totalHits.value,
          td1.totalHits.value <= td2.totalHits.value);

      // fill the superset into a bitset
      BitSet bitset = new BitSet();
      for (int i = 0; i < td2.scoreDocs.length; i++) {
        bitset.set(td2.scoreDocs[i].doc);
      }

      // check in the subset, that every bit was set by the super
      for (int i = 0; i < td1.scoreDocs.length; i++) {
        assertTrue(bitset.get(td1.scoreDocs[i].doc));
      }
    }
  }

