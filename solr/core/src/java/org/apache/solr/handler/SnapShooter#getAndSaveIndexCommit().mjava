  /**
   * If {@link #commitName} is non-null, then fetches the generation from the 
   * {@link SolrSnapshotMetaDataManager} and then returns 
   * {@link IndexDeletionPolicyWrapper#getAndSaveCommitPoint}, otherwise it returns 
   * {@link IndexDeletionPolicyWrapper#getAndSaveLatestCommit}.
   * <p>
   * Either way:
   * <ul>
   *  <li>This method does error handling for all cases where the commit can't be found 
   *       and wraps them in {@link SolrException}
   *  </li>
   *  <li>If this method returns, the result will be non null, and the caller <em>MUST</em> 
   *      call {@link IndexDeletionPolicyWrapper#releaseCommitPoint} when finished
   *  </li>
   * </ul>
   */
  private IndexCommit getAndSaveIndexCommit() throws IOException {
    final IndexDeletionPolicyWrapper delPolicy = solrCore.getDeletionPolicy();
    if (null != commitName) {
      return getAndSaveNamedIndexCommit(solrCore, commitName);
    }
    // else: not a named commit...
    final IndexCommit commit = delPolicy.getAndSaveLatestCommit();
    if (null == commit) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Index does not yet have any commits for core " +
                              solrCore.getName());
    }
    if (log.isDebugEnabled()) {
      log.debug("Using latest commit: generation={}", commit.getGeneration());
    }
    return commit;
  }

