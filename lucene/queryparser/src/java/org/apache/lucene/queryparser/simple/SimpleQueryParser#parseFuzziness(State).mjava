  /**
   * Helper parsing fuzziness from parsing state
   *
   * @return slop/edit distance, 0 in the case of non-parsing slop/edit string
   */
  private int parseFuzziness(State state) {
    char slopText[] = new char[state.length];
    int slopLength = 0;

    if (state.data[state.index] == '~') {
      while (state.index < state.length) {
        state.index++;
        // it's possible that the ~ was at the end, so check after incrementing
        // to make sure we don't go out of bounds
        if (state.index < state.length) {
          if (tokenFinished(state)) {
            break;
          }
          slopText[slopLength] = state.data[state.index];
          slopLength++;
        }
      }
      int fuzziness = 0;
      try {
        String fuzzyString = new String(slopText, 0, slopLength);
        if ("".equals(fuzzyString)) {
          // Use automatic fuzziness, ~2
          fuzziness = 2;
        } else {
          fuzziness = Integer.parseInt(fuzzyString);
        }
      } catch (NumberFormatException e) {
        // swallow number format exceptions parsing fuzziness
      }
      // negative -> 0
      if (fuzziness < 0) {
        fuzziness = 0;
      }
      return fuzziness;
    }
    return 0;
  }

