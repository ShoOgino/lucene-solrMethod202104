  public void testExceptionsDuringCommit() throws Throwable {
    FailOnlyInCommit[] failures =
        new FailOnlyInCommit[] {
          // LUCENE-1214
          new FailOnlyInCommit(
              false,
              true,
              FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written
          new FailOnlyInCommit(
              true, false, FailOnlyInCommit.PREPARE_STAGE), // fail during sync metadata
          new FailOnlyInCommit(
              true, true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written
          new FailOnlyInCommit(
              false, true, FailOnlyInCommit.FINISH_STAGE) // fail while running finishCommit
        };

    for (FailOnlyInCommit failure : failures) {
      MockDirectoryWrapper dir = newMockDirectory();
      dir.setFailOnCreateOutput(false);
      int fileCount = dir.listAll().length;
      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
      Document doc = new Document();
      doc.add(newTextField("field", "a field", Field.Store.YES));
      w.addDocument(doc);
      dir.failOn(failure);
      expectThrows(
          RuntimeException.class,
          () -> {
            w.close();
          });
      assertTrue(
          "failOnCommit="
              + failure.failOnCommit
              + " failOnDeleteFile="
              + failure.failOnDeleteFile
              + " failOnSyncMetadata="
              + failure.failOnSyncMetadata
              + "",
          failure.failOnCommit && (failure.failOnDeleteFile || failure.failOnSyncMetadata));
      w.rollback();
      String files[] = dir.listAll();
      assertTrue(
          files.length == fileCount
              || (files.length == fileCount + 1
                  && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));
      dir.close();
    }
  }

