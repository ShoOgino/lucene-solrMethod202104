  /** Returns next box for testing near a Polygon */
  public static Rectangle nextBoxNear(Polygon polygon) {
    final double point1[];
    final double point2[];

    // if there are any holes, target them aggressively
    Polygon holes[] = polygon.getHoles();
    if (holes.length > 0 && random().nextInt(3) == 0) {
      return nextBoxNear(holes[random().nextInt(holes.length)]);
    }

    int surpriseMe = random().nextInt(97);
    if (surpriseMe == 0) {
      // formed from two interesting points
      point1 = nextPointNear(polygon);
      point2 = nextPointNear(polygon);
    } else {
      // formed from one interesting point: then random within delta.
      point1 = nextPointNear(polygon);
      point2 = new double[2];
      // now figure out a good delta: we use a rough heuristic, up to the length of an edge
      double polyLats[] = polygon.getPolyLats();
      double polyLons[] = polygon.getPolyLons();
      int vertex = random().nextInt(polyLats.length - 1);
      double deltaX = polyLons[vertex + 1] - polyLons[vertex];
      double deltaY = polyLats[vertex + 1] - polyLats[vertex];
      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      point2[0] = nextLatitudeNear(point1[0], edgeLength);
      point2[1] = nextLongitudeNear(point1[1], edgeLength);
    }

    // form a box from the two points
    double minLat = Math.min(point1[0], point2[0]);
    double maxLat = Math.max(point1[0], point2[0]);
    double minLon = Math.min(point1[1], point2[1]);
    double maxLon = Math.max(point1[1], point2[1]);
    return new Rectangle(minLat, maxLat, minLon, maxLon);
  }

