  public void testUnbounded() {
    int initialSize = random().nextInt(10) + 1;
    LongHeap pq = LongHeap.create(MAX, initialSize);
    int num = random().nextInt(100) + 1;
    long minValue = Long.MAX_VALUE;
    int count = 0;
    for (int i = 0; i < num; i++) {
      long value = random().nextLong();
      if (random().nextBoolean()) {
        pq.push(value);
        count++;
      } else {
        boolean full = pq.size() >= initialSize;
        if (pq.insertWithOverflow(value)) {
          if (full == false) {
            count++;
          }
        }
      }
      minValue = Math.min(minValue, value);
    }
    assertEquals(count, pq.size());
    long last = Long.MAX_VALUE;
    while (pq.size() > 0) {
      long top = pq.top();
      long next = pq.pop();
      assertEquals(top, next);
      --count;
      assertTrue(next <= last);
      last = next;
    }
    assertEquals(0, count);
    assertEquals(minValue, last);
  }

