  public void testRectBoundariesAreInclusive() throws Exception {
    XYRectangle rect = ShapeTestUtil.nextBox(random());
    Directory dir = newDirectory();
    IndexWriterConfig iwc = newIndexWriterConfig();
    // Else seeds may not reproduce:
    iwc.setMergeScheduler(new SerialMergeScheduler());
    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);
    for (int i = 0; i < 3; i++) {
      float y;
      if (i == 0) {
        y = rect.minY;
      } else if (i == 1) {
        y = (float) (((double) rect.minY + rect.maxY) / 2.0);
      } else {
        y = rect.maxY;
      }
      for (int j = 0; j < 3; j++) {
        float x;
        if (j == 0) {
          x = rect.minX;
        } else if (j == 1) {
          if (i == 1) {
            continue;
          }
          x = (float) (((double) rect.minX + rect.maxX) / 2.0);
        } else {
          x = rect.maxX;
        }

        Document doc = new Document();
        addPointToDoc(FIELD_NAME, doc, x, y);
        w.addDocument(doc);
      }
    }
    IndexReader r = w.getReader();
    IndexSearcher s = newSearcher(r, false);
    // exact edge cases
    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minX, rect.maxX, rect.minY, rect.maxY)));
    // expand 1 ulp in each direction if possible and test a slightly larger box!
    if (rect.minX != -Float.MAX_VALUE) {
      assertEquals(
          8,
          s.count(
              newRectQuery(FIELD_NAME, Math.nextDown(rect.minX), rect.maxX, rect.minY, rect.maxY)));
    }
    if (rect.maxX != Float.MAX_VALUE) {
      assertEquals(
          8,
          s.count(
              newRectQuery(FIELD_NAME, rect.minX, Math.nextUp(rect.maxX), rect.minY, rect.maxY)));
    }
    if (rect.minY != -Float.MAX_VALUE) {
      assertEquals(
          8,
          s.count(
              newRectQuery(FIELD_NAME, rect.minX, rect.maxX, Math.nextDown(rect.minY), rect.maxY)));
    }
    if (rect.maxY != Float.MAX_VALUE) {
      assertEquals(
          8,
          s.count(
              newRectQuery(FIELD_NAME, rect.minX, rect.maxX, rect.minY, Math.nextUp(rect.maxY))));
    }

    r.close();
    w.close();
    dir.close();
  }

