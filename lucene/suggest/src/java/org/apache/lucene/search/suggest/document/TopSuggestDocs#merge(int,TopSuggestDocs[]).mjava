  /**
   * Returns a new TopSuggestDocs, containing topN results across the provided TopSuggestDocs,
   * sorting by score. Each {@link TopSuggestDocs} instance must be sorted. Analogous to {@link
   * org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])} for {@link
   * TopSuggestDocs}
   *
   * <p>NOTE: assumes every <code>shardHit</code> is already sorted by score
   */
  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {
    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);
    for (TopSuggestDocs shardHit : shardHits) {
      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {
        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {
          break;
        }
      }
    }
    SuggestScoreDoc[] topNResults = priorityQueue.getResults();
    if (topNResults.length > 0) {
      return new TopSuggestDocs(
          new TotalHits(topNResults.length, TotalHits.Relation.EQUAL_TO), topNResults);
    } else {
      return TopSuggestDocs.EMPTY;
    }
  }

