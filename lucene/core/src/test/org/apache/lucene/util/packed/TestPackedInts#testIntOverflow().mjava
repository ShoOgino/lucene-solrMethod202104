  /*
   Check if the structures properly handle the case where
   index * bitsPerValue > Integer.MAX_VALUE

   NOTE: this test allocates 256 MB
  */
  @Ignore("See LUCENE-4488")
  public void testIntOverflow() {
    int INDEX = (int) Math.pow(2, 30) + 1;
    int BITS = 2;

    Packed64 p64 = null;
    try {
      p64 = new Packed64(INDEX, BITS);
    } catch (OutOfMemoryError oome) {
      // This can easily happen: we're allocating a
      // long[] that needs 256-273 MB.  Heap is 512 MB,
      // but not all of that is available for large
      // objects ... empirical testing shows we only
      // have ~ 67 MB free.
    }
    if (p64 != null) {
      p64.set(INDEX - 1, 1);
      assertEquals(
          "The value at position " + (INDEX - 1) + " should be correct for Packed64",
          1,
          p64.get(INDEX - 1));
      p64 = null;
    }

    Packed64SingleBlock p64sb = null;
    try {
      p64sb = Packed64SingleBlock.create(INDEX, BITS);
    } catch (OutOfMemoryError oome) {
      // Ignore: see comment above
    }
    if (p64sb != null) {
      p64sb.set(INDEX - 1, 1);
      assertEquals(
          "The value at position "
              + (INDEX - 1)
              + " should be correct for "
              + p64sb.getClass().getSimpleName(),
          1,
          p64sb.get(INDEX - 1));
    }
  }

