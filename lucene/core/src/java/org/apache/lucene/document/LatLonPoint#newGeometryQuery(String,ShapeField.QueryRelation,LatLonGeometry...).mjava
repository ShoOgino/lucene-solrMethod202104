  /**
   * Create a query for matching one or more geometries against the provided {@link
   * ShapeField.QueryRelation}. Line geometries are not supported for WITHIN relationship.
   *
   * @param field field name. must not be null.
   * @param queryRelation The relation the points needs to satisfy with the provided geometries,
   *     must not be null.
   * @param latLonGeometries array of LatLonGeometries. must not be null or empty.
   * @return query matching points within at least one geometry.
   * @throws IllegalArgumentException if {@code field} is null, {@code queryRelation} is null,
   *     {@code latLonGeometries} is null, empty or contain a null.
   * @see LatLonGeometry
   */
  public static Query newGeometryQuery(
      String field, ShapeField.QueryRelation queryRelation, LatLonGeometry... latLonGeometries) {
    if (queryRelation == ShapeField.QueryRelation.INTERSECTS && latLonGeometries.length == 1) {
      if (latLonGeometries[0] instanceof Rectangle) {
        final Rectangle rect = (Rectangle) latLonGeometries[0];
        return newBoxQuery(field, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);
      }
      if (latLonGeometries[0] instanceof Circle) {
        final Circle circle = (Circle) latLonGeometries[0];
        return newDistanceQuery(field, circle.getLat(), circle.getLon(), circle.getRadius());
      }
    }
    if (queryRelation == ShapeField.QueryRelation.CONTAINS) {
      return makeContainsGeometryQuery(field, latLonGeometries);
    }
    return new LatLonPointQuery(field, queryRelation, latLonGeometries);
  }

