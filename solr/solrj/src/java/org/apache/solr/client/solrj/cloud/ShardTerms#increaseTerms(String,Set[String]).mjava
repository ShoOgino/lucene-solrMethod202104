  /**
   * Return a new {@link ShardTerms} in which term of {@code leader} is higher than {@code replicasNeedingRecovery}
   * @param leader coreNodeName of leader
   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term
   * @return null if term of {@code leader} is already higher than {@code replicasNeedingRecovery}
   */
  public ShardTerms increaseTerms(String leader, Set<String> replicasNeedingRecovery) {
    if (!values.containsKey(leader)) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Can not find leader's term " + leader);
    }

    boolean saveChanges = false;
    boolean foundReplicasInLowerTerms = false;

    HashMap<String, Long> newValues = new HashMap<>(values);
    long leaderTerm = newValues.get(leader);
    for (Map.Entry<String, Long> entry : newValues.entrySet()) {
      String key = entry.getKey();
      if (replicasNeedingRecovery.contains(key)) foundReplicasInLowerTerms = true;
      if (Objects.equals(entry.getValue(), leaderTerm)) {
        if(skipIncreaseTermOf(key, replicasNeedingRecovery)) {
          saveChanges = true; // if we don't skip anybody, then there's no reason to increment
        } else {
          entry.setValue(leaderTerm + 1);
        }
      }
    }

    // We should skip the optimization if there are no replicasNeedingRecovery present in local terms,
    // this may indicate that the current value is stale
    if (!saveChanges && foundReplicasInLowerTerms) return null;
    return new ShardTerms(newValues, version);
  }

