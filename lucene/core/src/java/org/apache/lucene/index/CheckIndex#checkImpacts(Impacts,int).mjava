  static void checkImpacts(Impacts impacts, int lastTarget) {
    final int numLevels = impacts.numLevels();
    if (numLevels < 1) {
      throw new RuntimeException("The number of levels must be >= 1, got " + numLevels);
    }

    int docIdUpTo0 = impacts.getDocIdUpTo(0);
    if (docIdUpTo0 < lastTarget) {
      throw new RuntimeException(
          "getDocIdUpTo returned "
              + docIdUpTo0
              + " on level 0, which is less than the target "
              + lastTarget);
    }

    for (int level = 1; level < numLevels; ++level) {
      int docIdUpTo = impacts.getDocIdUpTo(level);
      int previousDocIdUpTo = impacts.getDocIdUpTo(level - 1);
      if (docIdUpTo < previousDocIdUpTo) {
        throw new RuntimeException(
            "Decreasing return for getDocIdUpTo: level "
                + (level - 1)
                + " returned "
                + previousDocIdUpTo
                + " but level "
                + level
                + " returned "
                + docIdUpTo
                + " for target "
                + lastTarget);
      }
    }

    for (int level = 0; level < numLevels; ++level) {
      List<Impact> perLevelImpacts = impacts.getImpacts(level);
      if (perLevelImpacts.isEmpty()) {
        throw new RuntimeException("Got empty list of impacts on level " + level);
      }
      Impact first = perLevelImpacts.get(0);
      if (first.freq < 1) {
        throw new RuntimeException("First impact had a freq <= 0: " + first);
      }
      if (first.norm == 0) {
        throw new RuntimeException("First impact had a norm == 0: " + first);
      }
      // Impacts must be in increasing order of norm AND freq
      Impact previous = first;
      for (int i = 1; i < perLevelImpacts.size(); ++i) {
        Impact impact = perLevelImpacts.get(i);
        if (impact.freq <= previous.freq || Long.compareUnsigned(impact.norm, previous.norm) <= 0) {
          throw new RuntimeException(
              "Impacts are not ordered or contain dups, got " + previous + " then " + impact);
        }
      }
      if (level > 0) {
        // Make sure that impacts at level N trigger better scores than an level N-1
        Iterator<Impact> previousIt = impacts.getImpacts(level - 1).iterator();
        previous = previousIt.next();
        Iterator<Impact> it = perLevelImpacts.iterator();
        Impact impact = it.next();
        while (previousIt.hasNext()) {
          previous = previousIt.next();
          if (previous.freq <= impact.freq
              && Long.compareUnsigned(previous.norm, impact.norm) >= 0) {
            // previous triggers a lower score than the current impact, all good
            continue;
          }
          if (it.hasNext() == false) {
            throw new RuntimeException(
                "Found impact "
                    + previous
                    + " on level "
                    + (level - 1)
                    + " but no impact on level "
                    + level
                    + " triggers a better score: "
                    + perLevelImpacts);
          }
          impact = it.next();
        }
      }
    }
  }

