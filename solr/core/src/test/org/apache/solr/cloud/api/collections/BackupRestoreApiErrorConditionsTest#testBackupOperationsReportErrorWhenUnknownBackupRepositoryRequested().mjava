  @Test
  public void testBackupOperationsReportErrorWhenUnknownBackupRepositoryRequested() throws Exception {
    // Check message for create-backup
    Exception e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.backupCollection(COLLECTION_NAME, BACKUP_NAME)
              .setRepositoryName("some-nonexistent-repo-name")
              .setLocation(validBackupLocation)
              .process(cluster.getSolrClient());
    });
    assertTrue(e.getMessage().contains("Could not find a backup repository with name some-nonexistent-repo-name"));

    // Check message for list-backup
    e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.listBackup(BACKUP_NAME)
              .setBackupLocation(validBackupLocation)
              .setBackupRepository("some-nonexistent-repo-name")
              .process(cluster.getSolrClient());
    });
    assertTrue(e.getMessage().contains("Could not find a backup repository with name some-nonexistent-repo-name"));

    // Check message for delete-backup
    e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.deleteBackupById(BACKUP_NAME, 1)
              .setLocation(validBackupLocation)
              .setRepositoryName("some-nonexistent-repo-name")
              .process(cluster.getSolrClient());
    });
    assertTrue(e.getMessage().contains("Could not find a backup repository with name some-nonexistent-repo-name"));

    // Check message for restore-backup
    e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.restoreCollection(COLLECTION_NAME + "_restored", BACKUP_NAME)
              .setLocation(validBackupLocation)
              .setRepositoryName("some-nonexistent-repo-name")
              .process(cluster.getSolrClient());
    });
    assertTrue(e.getMessage().contains("Could not find a backup repository with name some-nonexistent-repo-name"));
  }

