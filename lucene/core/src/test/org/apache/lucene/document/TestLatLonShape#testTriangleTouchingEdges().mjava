  public void testTriangleTouchingEdges() {
    Polygon p = new Polygon(new double[] {0, 0, 1, 1, 0}, new double[] {0, 1, 1, 0, 0});
    Component2D polygon2D = LatLonGeometry.create(p);
    // 3 shared points
    boolean containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(1));
    boolean intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(1));
    assertTrue(intersectsTriangle);
    assertTrue(containsTriangle);
    // 2 shared points
    containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(0.75));
    intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(0.75));
    assertTrue(intersectsTriangle);
    assertTrue(containsTriangle);
    // 1 shared point
    containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(0.5), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(0.75), quantizeLat(0.75));
    intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(0.75));
    assertTrue(intersectsTriangle);
    assertTrue(containsTriangle);
    // 1 shared point but out
    containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(2), quantizeLat(0),
            quantizeLon(2), quantizeLat(2));
    intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(1), quantizeLat(0.5),
            quantizeLon(2), quantizeLat(0),
            quantizeLon(2), quantizeLat(2));
    assertTrue(intersectsTriangle);
    assertFalse(containsTriangle);
    // 1 shared point but crossing
    containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(2), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(1));
    intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(0.5), quantizeLat(0),
            quantizeLon(2), quantizeLat(0.5),
            quantizeLon(0.5), quantizeLat(1));
    assertTrue(intersectsTriangle);
    assertFalse(containsTriangle);
    // share one edge
    containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(0), quantizeLat(0),
            quantizeLon(0), quantizeLat(1),
            quantizeLon(0.5), quantizeLat(0.5));
    intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(0), quantizeLat(0),
            quantizeLon(0), quantizeLat(1),
            quantizeLon(0.5), quantizeLat(0.5));
    assertTrue(intersectsTriangle);
    assertTrue(containsTriangle);
    // share one edge outside
    containsTriangle =
        polygon2D.containsTriangle(
            quantizeLon(0), quantizeLat(1),
            quantizeLon(1.5), quantizeLat(1.5),
            quantizeLon(1), quantizeLat(1));
    intersectsTriangle =
        polygon2D.intersectsTriangle(
            quantizeLon(0), quantizeLat(1),
            quantizeLon(1.5), quantizeLat(1.5),
            quantizeLon(1), quantizeLat(1));
    assertTrue(intersectsTriangle);
    assertFalse(containsTriangle);
  }

