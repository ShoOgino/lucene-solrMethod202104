  public void testMixedSoftDeletesAndHardDeletes() throws Exception {
    Directory dir = newDirectory();
    String softDeletesField = "soft-deletes";
    IndexWriterConfig config =
        newIndexWriterConfig()
            .setMaxBufferedDocs(2 + random().nextInt(50))
            .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)
            .setSoftDeletesField(softDeletesField)
            .setMergePolicy(
                new SoftDeletesRetentionMergePolicy(
                    softDeletesField, MatchAllDocsQuery::new, newMergePolicy()));
    IndexWriter writer = new IndexWriter(dir, config);
    int numDocs = 10 + random().nextInt(100);
    Set<String> liveDocs = new HashSet<>();
    for (int i = 0; i < numDocs; i++) {
      String id = Integer.toString(i);
      Document doc = new Document();
      doc.add(new StringField("id", id, Field.Store.YES));
      writer.addDocument(doc);
      liveDocs.add(id);
    }
    for (int i = 0; i < numDocs; i++) {
      if (random().nextBoolean()) {
        String id = Integer.toString(i);
        if (random().nextBoolean() && liveDocs.contains(id)) {
          doUpdate(new Term("id", id), writer, new NumericDocValuesField(softDeletesField, 1));
        } else {
          Document doc = new Document();
          doc.add(new StringField("id", "v" + id, Field.Store.YES));
          writer.softUpdateDocument(
              new Term("id", id), doc, new NumericDocValuesField(softDeletesField, 1));
          liveDocs.add("v" + id);
        }
      }
      if (random().nextBoolean() && liveDocs.isEmpty() == false) {
        String delId = RandomPicks.randomFrom(random(), liveDocs);
        if (random().nextBoolean()) {
          doDelete(new Term("id", delId), writer);
        } else {
          writer.deleteDocuments(new Term("id", delId));
        }
        liveDocs.remove(delId);
      }
    }
    try (DirectoryReader unwrapped = writer.getReader()) {
      DirectoryReader reader = new IncludeSoftDeletesWrapper(unwrapped);
      assertEquals(liveDocs.size(), reader.numDocs());
    }
    writer.commit();
    IOUtils.close(writer, dir);
  }

