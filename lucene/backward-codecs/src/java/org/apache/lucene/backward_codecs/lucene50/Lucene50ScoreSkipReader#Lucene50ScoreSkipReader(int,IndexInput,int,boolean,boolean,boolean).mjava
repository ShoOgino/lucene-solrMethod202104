  public Lucene50ScoreSkipReader(int version, IndexInput skipStream, int maxSkipLevels,
      boolean hasPos, boolean hasOffsets, boolean hasPayloads) {
    super(version, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads);
    if (version < Lucene50PostingsFormat.VERSION_IMPACT_SKIP_DATA) {
      throw new IllegalStateException("Cannot skip based on scores if impacts are not indexed");
    }
    this.impactData = new byte[maxSkipLevels][];
    Arrays.fill(impactData, new byte[0]);
    this.impactDataLength = new int[maxSkipLevels];
    this.perLevelImpacts = new MutableImpactList[maxSkipLevels];
    for (int i = 0; i < perLevelImpacts.length; ++i) {
      perLevelImpacts[i] = new MutableImpactList();
    }
    impacts = new Impacts() {

      @Override
      public int numLevels() {
        return numLevels;
      }

      @Override
      public int getDocIdUpTo(int level) {
        return skipDoc[level];
      }

      @Override
      public List<Impact> getImpacts(int level) {
        assert level < numLevels;
        if (impactDataLength[level] > 0) {
          badi.reset(impactData[level], 0, impactDataLength[level]);
          perLevelImpacts[level] = readImpacts(badi, perLevelImpacts[level]);
          impactDataLength[level] = 0;
        }
        return perLevelImpacts[level];
      }
    };
  }

