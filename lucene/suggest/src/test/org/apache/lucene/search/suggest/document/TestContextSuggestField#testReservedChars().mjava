  @Test
  public void testReservedChars() throws Exception {
    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();
    charsRefBuilder.append("sugg");
    charsRefBuilder.setCharAt(2, (char) ContextSuggestField.CONTEXT_SEPARATOR);

    Analyzer analyzer = new MockAnalyzer(random());
    Document document = new Document();
    try (RandomIndexWriter iw =
        new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, "name"))) {
      // exception should be thrown for context value containing CONTEXT_SEPARATOR
      IllegalArgumentException expected =
          expectThrows(
              IllegalArgumentException.class,
              () -> {
                document.add(
                    new ContextSuggestField("name", "sugg", 1, charsRefBuilder.toString()));
                iw.addDocument(document);
                iw.commit();
              });
      assertTrue(expected.getMessage().contains("[0x1d]"));
    }
    document.clear();

    try (RandomIndexWriter iw =
        new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, "name"))) {
      // exception should be thrown for context value containing CONTEXT_SEPARATOR
      IllegalArgumentException expected =
          expectThrows(
              IllegalArgumentException.class,
              () -> {
                document.add(
                    new ContextSuggestField("name", charsRefBuilder.toString(), 1, "sugg"));
                iw.addDocument(document);
                iw.commit(false);
              });
      assertTrue(expected.getMessage().contains("[0x1d]"));
    }
  }

