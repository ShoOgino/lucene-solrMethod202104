  public void testConcurrency() throws Exception {
    final int ncats =
        TEST_NIGHTLY ? atLeast(100000) : atLeast(1000); // at night, add many categories
    final int range = ncats * 3; // affects the categories selection
    final AtomicInteger numCats = new AtomicInteger(ncats);
    final Directory dir = newDirectory();
    final ConcurrentHashMap<String, String> values = new ConcurrentHashMap<>();
    final double d = random().nextDouble();
    final TaxonomyWriterCache cache;
    if (d < 0.7) {
      // this is the fastest, yet most memory consuming
      cache = new UTF8TaxonomyWriterCache();
    } else if (TEST_NIGHTLY && d > 0.98) {
      // this is the slowest, but tests the writer concurrency when no caching is done.
      // only pick it during NIGHTLY tests, and even then, with very low chances.
      cache = NO_OP_CACHE;
    } else {
      // this is slower than UTF8, but less memory consuming, and exercises finding categories on
      // disk too.
      cache = new LruTaxonomyWriterCache(ncats / 10);
    }
    if (VERBOSE) {
      System.out.println("TEST: use cache=" + cache);
    }
    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE, cache);
    Thread[] addThreads = new Thread[atLeast(4)];
    for (int z = 0; z < addThreads.length; z++) {
      addThreads[z] =
          new Thread() {
            @Override
            public void run() {
              Random random = random();
              while (numCats.decrementAndGet() > 0) {
                try {
                  int value = random.nextInt(range);
                  FacetLabel cp =
                      new FacetLabel(
                          Integer.toString(value / 1000),
                          Integer.toString(value / 10000),
                          Integer.toString(value / 100000),
                          Integer.toString(value));
                  int ord = tw.addCategory(cp);
                  assertTrue(
                      "invalid parent for ordinal " + ord + ", category " + cp,
                      tw.getParent(ord) != -1);
                  String l1 = FacetsConfig.pathToString(cp.components, 1);
                  String l2 = FacetsConfig.pathToString(cp.components, 2);
                  String l3 = FacetsConfig.pathToString(cp.components, 3);
                  String l4 = FacetsConfig.pathToString(cp.components, 4);
                  values.put(l1, l1);
                  values.put(l2, l2);
                  values.put(l3, l3);
                  values.put(l4, l4);
                } catch (IOException e) {
                  throw new RuntimeException(e);
                }
              }
            }
          };
    }

    for (Thread t : addThreads) t.start();
    for (Thread t : addThreads) t.join();
    tw.close();

    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dir);
    // +1 for root category
    if (values.size() + 1 != dtr.getSize()) {
      for (String value : values.keySet()) {
        FacetLabel label = new FacetLabel(FacetsConfig.stringToPath(value));
        if (dtr.getOrdinal(label) == -1) {
          System.out.println("FAIL: path=" + label + " not recognized");
        }
      }
      fail("mismatch number of categories");
    }

    int[] parents = dtr.getParallelTaxonomyArrays().parents();
    for (String cat : values.keySet()) {
      FacetLabel cp = new FacetLabel(FacetsConfig.stringToPath(cat));
      assertTrue("category not found " + cp, dtr.getOrdinal(cp) > 0);
      int level = cp.length;
      int parentOrd = 0; // for root, parent is always virtual ROOT (ord=0)
      FacetLabel path = new FacetLabel();
      for (int i = 0; i < level; i++) {
        path = cp.subpath(i + 1);
        int ord = dtr.getOrdinal(path);
        assertEquals("invalid parent for cp=" + path, parentOrd, parents[ord]);
        parentOrd = ord; // next level should have this parent
      }
    }

    IOUtils.close(dtr, dir);
  }

