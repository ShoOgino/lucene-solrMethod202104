  /**
   * Converts a 32 bit float to an 8 bit float. <br>
   * Values less than zero are all mapped to zero. <br>
   * Values are truncated (rounded down) to the nearest 8 bit value. <br>
   * Values between zero and the smallest representable value are rounded up.
   *
   * @param f the 32 bit float to be converted to an 8 bit float (byte)
   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be
   *     used in the exponent
   * @param zeroExp the zero-point in the range of exponent values
   * @return the 8 bit float representation
   */
  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {
    // Adjustment from a float zero exponent to our zero exponent,
    // shifted over to our exponent position.
    int fzero = (63 - zeroExp) << numMantissaBits;
    int bits = Float.floatToRawIntBits(f);
    int smallfloat = bits >> (24 - numMantissaBits);
    if (smallfloat <= fzero) {
      return (bits <= 0)
          ? (byte) 0 // negative numbers and zero both map to 0 byte
          : (byte) 1; // underflow is mapped to smallest non-zero number.
    } else if (smallfloat >= fzero + 0x100) {
      return -1; // overflow maps to largest number
    } else {
      return (byte) (smallfloat - fzero);
    }
  }

