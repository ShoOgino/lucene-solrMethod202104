  /**
   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified
   * {@link ClusterState} is returned and it is expected that the caller will use the returned
   * cluster state for the subsequent invocation of this method.
   * <p>
   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering
   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the
   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can
   * be used to force an immediate flush of pending cluster state changes.
   *
   * @param prevState the cluster state information on which the given <code>cmd</code> is applied
   * @param cmds       the list of {@link ZkWriteCommand} which specifies the change to be applied to cluster state in atomic
   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used
   *                  for any callbacks
   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If
   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.
   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be
   *                               discarded.
   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results
   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and
   *                               must be discarded
   */
  public ClusterState enqueueUpdate(ClusterState prevState, List<ZkWriteCommand> cmds, ZkWriteCallback callback) throws IllegalStateException, Exception {
    if (invalidState) {
      throw new IllegalStateException("ZkStateWriter has seen a tragic error, this instance can no longer be used");
    }
    if (cmds.isEmpty()) return prevState;
    if (isNoOps(cmds)) return prevState;

    boolean forceFlush = false;
    if (cmds.size() == 1) {
      //most messages result in only one command. let's deal with it right away
      ZkWriteCommand cmd = cmds.get(0);
      if (cmd.collection != null && cmd.collection.isPerReplicaState()) {
        //we do not wish to batch any updates for collections with per-replica state because
        // these changes go to individual ZK nodes and there is zero advantage to batching
        //now check if there are any updates for the same collection already present
        if (updates.containsKey(cmd.name)) {
          //this should not happen
          // but let's get those updates out anyway
          writeUpdate(updates.remove(cmd.name));
        }
        //now let's write the current message
        try {
          return writeUpdate(cmd);
        } finally {
          if (callback !=null) callback.onWrite();
        }
      }
    } else {
      //there are more than one commands created as a result of this message
      for (ZkWriteCommand cmd : cmds) {
        if (cmd.collection != null && cmd.collection.isPerReplicaState()) {
          // we don't try to optimize for this case. let's flush out all after this
          forceFlush = true;
          break;
        }
      }
    }


    for (ZkWriteCommand cmd : cmds) {
      if (cmd == NO_OP) continue;
      prevState = prevState.copyWith(cmd.name, cmd.collection);
      updates.put(cmd.name, cmd);
      numUpdates++;
    }
    clusterState = prevState;

    if (forceFlush || maybeFlushAfter()) {
      ClusterState state = writePendingUpdates();
      if (callback != null) {
        callback.onWrite();
      }
      return state;
    }

    return clusterState;
  }

