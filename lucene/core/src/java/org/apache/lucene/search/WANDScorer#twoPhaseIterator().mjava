  @Override
  public TwoPhaseIterator twoPhaseIterator() {
    DocIdSetIterator approximation =
        new DocIdSetIterator() {

          @Override
          public int docID() {
            return doc;
          }

          @Override
          public int nextDoc() throws IOException {
            return advance(doc + 1);
          }

          @Override
          public int advance(int target) throws IOException {
            assert ensureConsistent();

            // Move 'lead' iterators back to the tail
            pushBackLeads(target);

            // Advance 'head' as well
            advanceHead(target);

            // Pop the new 'lead' from 'head'
            moveToNextCandidate(target);

            if (doc == DocIdSetIterator.NO_MORE_DOCS) {
              return DocIdSetIterator.NO_MORE_DOCS;
            }

            assert ensureConsistent();

            // Advance to the next possible match
            return doNextCompetitiveCandidate();
          }

          @Override
          public long cost() {
            return cost;
          }
        };
    return new TwoPhaseIterator(approximation) {

      @Override
      public boolean matches() throws IOException {
        while (leadMaxScore < minCompetitiveScore || freq < minShouldMatch) {
          if (leadMaxScore + tailMaxScore < minCompetitiveScore
              || freq + tailSize < minShouldMatch) {
            return false;
          } else {
            // a match on doc is still possible, try to
            // advance scorers from the tail
            advanceTail();
          }
        }

        return true;
      }

      @Override
      public float matchCost() {
        // maximum number of scorer that matches() might advance
        return tail.length;
      }
    };
  }

