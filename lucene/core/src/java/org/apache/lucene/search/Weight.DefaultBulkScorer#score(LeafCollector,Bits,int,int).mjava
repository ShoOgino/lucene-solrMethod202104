    @Override
    public int score(LeafCollector collector, Bits acceptDocs, int min, int max)
        throws IOException {
      collector.setScorer(scorer);
      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();
      DocIdSetIterator collectorIterator = collector.competitiveIterator();
      DocIdSetIterator filteredIterator;
      if (collectorIterator == null) {
        filteredIterator = scorerIterator;
      } else {
        if (scorerIterator.docID() != -1) {
          // Wrap ScorerIterator to start from -1 for conjunction
          scorerIterator = new StartDISIWrapper(scorerIterator);
        }
        // filter scorerIterator to keep only competitive docs as defined by collector
        filteredIterator =
            ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));
      }
      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {
        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);
        return DocIdSetIterator.NO_MORE_DOCS;
      } else {
        int doc = filteredIterator.docID();
        if (doc < min) {
          doc = filteredIterator.advance(min);
        }
        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);
      }
    }

