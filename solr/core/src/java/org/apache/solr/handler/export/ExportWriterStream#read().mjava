  @Override
  public Tuple read() throws IOException {
    Tuple res = null;
    if (pos < 0) {

      try {
        buffer.outDocsIndex = ExportBuffers.Buffer.EMPTY;
        //log.debug("--- ews exchange empty buffer {}", buffer);
        boolean exchanged = false;
        while (!exchanged) {
          try {
            long startExchangeBuffers = System.nanoTime();
            exportBuffers.exchangeBuffers();
            long endExchangeBuffers = System.nanoTime();
            if(log.isDebugEnabled()) {
              log.debug("Waited for reader thread:{}",  Long.toString(((endExchangeBuffers - startExchangeBuffers) / 1000000)));
            }
            exchanged = true;
          } catch (TimeoutException e) {
            log.debug("--- ews timeout loop");
            if (exportBuffers.isShutDown()) {
              log.debug("--- ews - the other end is shutdown, returning EOF");
              res = Tuple.EOF();
              break;
            }
            continue;
          } catch (InterruptedException e) {
            log.debug("--- ews interrupted");
            exportBuffers.error(e);
            res = Tuple.EXCEPTION(e, true);
            break;
          } catch (BrokenBarrierException e) {
            if (exportBuffers.getError() != null) {
              res = Tuple.EXCEPTION(exportBuffers.getError(), true);
            } else {
              res = Tuple.EXCEPTION(e, true);
            }
            break;
          } finally {
          }
        }
      } catch (InterruptedException e) {
        log.debug("--- ews interrupt");
        exportBuffers.error(e);
        res = Tuple.EXCEPTION(e, true);
      } catch (Exception e) {
        log.debug("--- ews exception", e);
        exportBuffers.error(e);
        res = Tuple.EXCEPTION(e, true);
      }
      buffer = exportBuffers.getOutputBuffer();
      if (buffer == null) {
        res = Tuple.EOF();
      }
      if (buffer.outDocsIndex == ExportBuffers.Buffer.NO_MORE_DOCS) {
        log.debug("--- ews EOF");
        res = Tuple.EOF();
      } else {
        pos = buffer.outDocsIndex;
        index = -1;  //restart index.
        log.debug("--- ews new pos={}", pos);
      }
    }
    if (pos < 0) {
      log.debug("--- ews EOF?");
      res = Tuple.EOF();
    }
    if (res != null) {
      // only errors or EOF assigned result so far

      return res;
    }

    SortDoc sortDoc = buffer.outDocs[++index];
    tupleEntryWriter.tuple = new Tuple();
    exportBuffers.exportWriter.writeDoc(sortDoc, exportBuffers.leaves, tupleEntryWriter, exportBuffers.exportWriter.fieldWriters);
    pos--;
    return tupleEntryWriter.tuple;
  }

