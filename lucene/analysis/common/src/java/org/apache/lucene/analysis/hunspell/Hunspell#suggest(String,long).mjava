  List<String> suggest(String word, long timeLimitMs) throws SuggestionTimeoutException {
    checkCanceled.run();
    if (word.length() >= 100) return Collections.emptyList();

    if (dictionary.needsInputCleaning(word)) {
      word = dictionary.cleanInput(word, new StringBuilder()).toString();
    }

    WordCase wordCase = WordCase.caseOf(word);
    if (dictionary.forceUCase != FLAG_UNSET && wordCase == WordCase.LOWER) {
      String title = dictionary.toTitleCase(word);
      if (spell(title)) {
        return Collections.singletonList(title);
      }
    }

    LinkedHashSet<String> suggestions = new LinkedHashSet<>();
    Runnable checkCanceled =
        policy == NO_TIMEOUT
            ? this.checkCanceled
            : checkTimeLimit(word, wordCase, suggestions, timeLimitMs);
    try {
      doSuggest(word, wordCase, suggestions, checkCanceled);
    } catch (SuggestionTimeoutException e) {
      if (policy == RETURN_PARTIAL_RESULT) {
        return postprocess(word, wordCase, suggestions);
      }
      throw e;
    }

    return postprocess(word, wordCase, suggestions);
  }

