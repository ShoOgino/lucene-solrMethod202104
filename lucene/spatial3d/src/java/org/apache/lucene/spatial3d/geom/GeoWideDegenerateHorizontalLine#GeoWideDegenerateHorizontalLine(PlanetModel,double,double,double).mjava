  /**
   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI ->
   * PI}. Horizontal angle must be greater than or equal to PI.
   *
   * @param planetModel is the planet model.
   * @param latitude is the line latitude.
   * @param leftLon is the left cutoff longitude.
   * @param rightLon is the right cutoff longitude.
   */
  public GeoWideDegenerateHorizontalLine(
      final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {
    super(planetModel);
    // Argument checking
    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5) {
      throw new IllegalArgumentException("Latitude out of range");
    }
    if (leftLon < -Math.PI || leftLon > Math.PI) {
      throw new IllegalArgumentException("Left longitude out of range");
    }
    if (rightLon < -Math.PI || rightLon > Math.PI) {
      throw new IllegalArgumentException("Right longitude out of range");
    }
    double extent = rightLon - leftLon;
    if (extent < 0.0) {
      extent += 2.0 * Math.PI;
    }
    if (extent < Math.PI) {
      throw new IllegalArgumentException("Width of rectangle too small");
    }

    this.latitude = latitude;
    this.leftLon = leftLon;
    this.rightLon = rightLon;

    final double sinLatitude = Math.sin(latitude);
    final double cosLatitude = Math.cos(latitude);
    final double sinLeftLon = Math.sin(leftLon);
    final double cosLeftLon = Math.cos(leftLon);
    final double sinRightLon = Math.sin(rightLon);
    final double cosRightLon = Math.cos(rightLon);

    // Now build the two points
    this.LHC =
        new GeoPoint(
            planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon, latitude, leftLon);
    this.RHC =
        new GeoPoint(
            planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon, latitude, rightLon);

    this.plane = new Plane(planetModel, sinLatitude);

    // Normalize
    while (leftLon > rightLon) {
      rightLon += Math.PI * 2.0;
    }
    double middleLon = (leftLon + rightLon) * 0.5;
    double sinMiddleLon = Math.sin(middleLon);
    double cosMiddleLon = Math.cos(middleLon);

    this.centerPoint =
        new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);

    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);
    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);

    this.planePoints = new GeoPoint[] {LHC, RHC};

    this.eitherBound = new EitherBound();

    this.edgePoints = new GeoPoint[] {centerPoint};
  }

