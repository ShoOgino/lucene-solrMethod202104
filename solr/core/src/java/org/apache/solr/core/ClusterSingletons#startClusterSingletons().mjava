  /**
   * Start singletons when the helper is ready and when it's supposed to start
   * (as determined by {@link #runSingletons} function). If the helper is not ready this
   * method will use {@link #asyncRunner} to wait in another thread for
   * {@link #DEFAULT_WAIT_TIMEOUT_SEC} seconds.
   */
  public void startClusterSingletons() {
    final Runnable initializer = () -> {
      try {
        waitUntilReady(DEFAULT_WAIT_TIMEOUT_SEC, TimeUnit.SECONDS);
      } catch (InterruptedException e) {
        log.warn("Interrupted initialization of ClusterSingleton-s");
        return;
      } catch (TimeoutException te) {
        log.warn("Timed out during initialization of ClusterSingleton-s (waited {} sec)", DEFAULT_WAIT_TIMEOUT_SEC);
        return;
      }
      if (!runSingletons.get()) {
        return;
      }
      singletonMap.forEach((name, singleton) -> {
        if (!runSingletons.get()) {
          return;
        }
        try {
          singleton.start();
        } catch (Exception e) {
          log.warn("Exception starting ClusterSingleton {}: {}", singleton, e);
        }
      });
    };
    if (!isReady()) {
      // wait until all singleton-s are ready for the first startup
      asyncRunner.accept(initializer);
    } else {
      initializer.run();
    }
  }

