  public void testPointValues() throws Exception {
    List<Function<Long, IndexableField>> fieldFunctions =
        Arrays.asList(
            (t) -> new IntPoint("number", t.intValue()),
            (t) -> new LongPoint("number", t),
            (t) -> new FloatPoint("number", t.floatValue()),
            (t) -> new DoublePoint("number", t.doubleValue()));
    List<Function<Long, Query>> exactQueryFunctions =
        Arrays.asList(
            (t) -> IntPoint.newExactQuery("number", t.intValue()),
            (t) -> LongPoint.newExactQuery("number", t),
            (t) -> FloatPoint.newExactQuery("number", t.floatValue()),
            (t) -> DoublePoint.newExactQuery("number", t.doubleValue()));
    List<Function<long[], Query>> setQueryFunctions =
        Arrays.asList(
            (t) ->
                IntPoint.newSetQuery(
                    "number", LongStream.of(t).mapToInt(value -> (int) value).toArray()),
            (t) -> LongPoint.newSetQuery("number", t),
            (t) ->
                FloatPoint.newSetQuery(
                    "number",
                    Arrays.asList(
                        LongStream.of(t).mapToObj(value -> (float) value).toArray(Float[]::new))),
            (t) ->
                DoublePoint.newSetQuery(
                    "number", LongStream.of(t).mapToDouble(value -> (double) value).toArray()));
    List<BiFunction<Long, Long, Query>> rangeQueryFunctions =
        Arrays.asList(
            (t, u) -> IntPoint.newRangeQuery("number", t.intValue(), u.intValue()),
            (t, u) -> LongPoint.newRangeQuery("number", t, u),
            (t, u) -> FloatPoint.newRangeQuery("number", t.floatValue(), u.floatValue()),
            (t, u) -> DoublePoint.newRangeQuery("number", t.doubleValue(), u.doubleValue()));

    for (int i = 0; i < fieldFunctions.size(); i++) {
      Function<Long, IndexableField> fieldFunction = fieldFunctions.get(i);
      Function<Long, Query> exactQueryFunction = exactQueryFunctions.get(i);
      Function<long[], Query> setQueryFunction = setQueryFunctions.get(i);
      BiFunction<Long, Long, Query> rangeQueryFunction = rangeQueryFunctions.get(i);

      Document doc = new Document();
      for (int number = 1; number < 32; number += 2) {
        doc.add(fieldFunction.apply((long) number));
      }
      MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);
      IndexSearcher indexSearcher = mi.createSearcher();
      Query query = exactQueryFunction.apply(5L);
      assertEquals(1, indexSearcher.count(query));
      query = exactQueryFunction.apply(4L);
      assertEquals(0, indexSearcher.count(query));

      query = setQueryFunction.apply(new long[] {3L, 9L, 19L});
      assertEquals(1, indexSearcher.count(query));
      query = setQueryFunction.apply(new long[] {2L, 8L, 13L});
      assertEquals(1, indexSearcher.count(query));
      query = setQueryFunction.apply(new long[] {2L, 8L, 16L});
      assertEquals(0, indexSearcher.count(query));

      query = rangeQueryFunction.apply(2L, 16L);
      assertEquals(1, indexSearcher.count(query));
      query = rangeQueryFunction.apply(24L, 48L);
      assertEquals(1, indexSearcher.count(query));
      query = rangeQueryFunction.apply(48L, 68L);
      assertEquals(0, indexSearcher.count(query));
    }
  }

