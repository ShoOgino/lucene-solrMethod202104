  /**
   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints.
   * Returns NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.
   *
   * @param planetModel The planet model.
   * @param constraints The given constraints.
   * @return The random generated GeoCompositeMembershipShape.
   */
  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {
    int iterations = 0;
    while (iterations < MAX_SHAPE_ITERATIONS) {
      iterations++;
      int numberShapes = random().nextInt(3) + 2;
      GeoCompositeAreaShape collection = new GeoCompositeAreaShape(planetModel);
      for (int i = 0; i < numberShapes; i++) {
        GeoPolygon member = convexPolygon(planetModel, constraints);
        if (member != null) {
          collection.addShape(member);
        }
      }
      if (collection.shapes.size() == 0) {
        continue;
      }
      return collection;
    }
    return null;
  }

