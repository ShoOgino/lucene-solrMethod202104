  public void testIndexSortWithSparseField() throws Exception {
    Directory dir = newDirectory();
    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
    SortField sortField = new SortField("dense_int", SortField.Type.INT, true);
    Sort indexSort = new Sort(sortField);
    iwc.setIndexSort(indexSort);
    IndexWriter w = new IndexWriter(dir, iwc);
    Field textField = newTextField("sparse_text", "", Field.Store.NO);
    for (int i = 0; i < 128; i++) {
      Document doc = new Document();
      doc.add(new NumericDocValuesField("dense_int", i));
      if (i < 64) {
        doc.add(new NumericDocValuesField("sparse_int", i));
        doc.add(new BinaryDocValuesField("sparse_binary", new BytesRef(Integer.toString(i))));
        textField.setStringValue("foo");
        doc.add(textField);
      }
      w.addDocument(doc);
    }
    w.commit();
    w.forceMerge(1);
    DirectoryReader r = DirectoryReader.open(w);
    assertEquals(1, r.leaves().size());
    LeafReader leafReader = r.leaves().get(0).reader();

    NumericDocValues denseValues = leafReader.getNumericDocValues("dense_int");
    NumericDocValues sparseValues = leafReader.getNumericDocValues("sparse_int");
    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues("sparse_binary");
    NumericDocValues normsValues = leafReader.getNormValues("sparse_text");
    for (int docID = 0; docID < 128; docID++) {
      assertTrue(denseValues.advanceExact(docID));
      assertEquals(127 - docID, (int) denseValues.longValue());
      if (docID >= 64) {
        assertTrue(denseValues.advanceExact(docID));
        assertTrue(sparseValues.advanceExact(docID));
        assertTrue(sparseBinaryValues.advanceExact(docID));
        assertTrue(normsValues.advanceExact(docID));
        assertEquals(1, normsValues.longValue());
        assertEquals(127 - docID, (int) sparseValues.longValue());
        assertEquals(new BytesRef(Integer.toString(127 - docID)), sparseBinaryValues.binaryValue());
      } else {
        assertFalse(sparseBinaryValues.advanceExact(docID));
        assertFalse(sparseValues.advanceExact(docID));
        assertFalse(normsValues.advanceExact(docID));
      }
    }
    IOUtils.close(r, w, dir);
  }

