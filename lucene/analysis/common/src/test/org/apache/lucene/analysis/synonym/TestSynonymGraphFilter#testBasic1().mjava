  public void testBasic1() throws Exception {
    SynonymMap.Builder b = new SynonymMap.Builder(true);
    add(b, "a", "foo", true);
    add(b, "a b", "bar fee", true);
    add(b, "b c", "dog collar", true);
    add(b, "c d", "dog harness holder extras", true);
    add(b, "m c e", "dog barks loudly", false);
    add(b, "i j k", "feep", true);

    add(b, "e f", "foo bar", false);
    add(b, "e f", "baz bee", false);

    add(b, "z", "boo", false);
    add(b, "y", "bee", true);
    Analyzer a = getFlattenAnalyzer(b, true);

    assertAnalyzesTo(
        a, "a b c", new String[] {"bar", "a", "fee", "b", "c"}, new int[] {1, 0, 1, 0, 1});

    assertAnalyzesTo(
        a,
        "x a b c d",
        new String[] {"x", "bar", "a", "fee", "b", "dog", "c", "harness", "d", "holder", "extras"},
        new int[] {1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1});

    assertAnalyzesTo(
        a,
        "a b a",
        new String[] {"bar", "a", "fee", "b", "foo", "a"},
        new int[] {1, 0, 1, 0, 1, 0});

    // outputs no longer add to one another:
    assertAnalyzesTo(
        a,
        "c d c d",
        new String[] {
          "dog", "c", "harness", "d", "holder", "extras", "dog", "c", "harness", "d", "holder",
          "extras"
        },
        new int[] {1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1});

    // two outputs for same input
    assertAnalyzesTo(a, "e f", new String[] {"foo", "baz", "bar", "bee"}, new int[] {1, 0, 1, 0});

    // verify multi-word / single-output offsets:
    assertAnalyzesTo(
        a,
        "g i j k g",
        new String[] {"g", "feep", "i", "j", "k", "g"},
        new int[] {1, 1, 0, 1, 1, 1});

    // mixed keepOrig true/false:
    assertAnalyzesTo(
        a,
        "a m c e x",
        new String[] {"foo", "a", "dog", "barks", "loudly", "x"},
        new int[] {1, 0, 1, 1, 1, 1});
    assertAnalyzesTo(
        a,
        "c d m c e x",
        new String[] {
          "dog", "c", "harness", "d", "holder", "extras", "dog", "barks", "loudly", "x"
        },
        new int[] {1, 0, 1, 0, 1, 1, 1, 1, 1, 1});
    assertTrue(synFilter.getCaptureCount() > 0);

    // no captureStates when no syns matched
    assertAnalyzesTo(
        a, "p q r s t", new String[] {"p", "q", "r", "s", "t"}, new int[] {1, 1, 1, 1, 1});
    assertEquals(0, synFilter.getCaptureCount());

    // captureStates are necessary for the single-token syn case:
    assertAnalyzesTo(
        a,
        "p q z y t",
        new String[] {"p", "q", "boo", "bee", "y", "t"},
        new int[] {1, 1, 1, 1, 0, 1});
    assertTrue(synFilter.getCaptureCount() > 0);
  }

