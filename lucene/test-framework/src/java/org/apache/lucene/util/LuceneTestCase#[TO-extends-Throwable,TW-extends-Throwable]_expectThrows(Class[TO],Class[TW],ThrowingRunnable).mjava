  /**
   * Checks that specific wrapped and outer exception classes are thrown by the given runnable, and
   * returns the wrapped exception.
   */
  public static <TO extends Throwable, TW extends Throwable> TW expectThrows(
      Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {
    final Throwable thrown = _expectThrows(Collections.singletonList(expectedOuterType), runnable);
    if (null == thrown) {
      throw new AssertionFailedError(
          "Expected outer exception "
              + expectedOuterType.getSimpleName()
              + " but no exception was thrown.");
    }
    if (expectedOuterType.isInstance(thrown)) {
      Throwable cause = thrown.getCause();
      if (expectedWrappedType.isInstance(cause)) {
        return expectedWrappedType.cast(cause);
      } else {
        AssertionFailedError assertion =
            new AssertionFailedError(
                "Unexpected wrapped exception type, expected "
                    + expectedWrappedType.getSimpleName()
                    + " but got: "
                    + cause);
        assertion.initCause(thrown);
        throw assertion;
      }
    }
    AssertionFailedError assertion =
        new AssertionFailedError(
            "Unexpected outer exception type, expected "
                + expectedOuterType.getSimpleName()
                + " but got: "
                + thrown);
    assertion.initCause(thrown);
    throw assertion;
  }

