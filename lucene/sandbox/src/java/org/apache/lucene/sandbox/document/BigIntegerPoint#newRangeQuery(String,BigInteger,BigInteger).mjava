  /** 
   * Create a range query for big integer values.
   * <p>
   * This is for simple one-dimension ranges, for multidimensional ranges use
   * {@link #newRangeQuery(String, BigInteger[], BigInteger[])} instead.
   * <p>
   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
   * by setting {@code lowerValue = BigIntegerPoint.MIN_VALUE} 
   * or {@code upperValue = BigIntegerPoint.MAX_VALUE}. 
   * <p>
   * Ranges are inclusive. For exclusive ranges, pass {@code lowerValue.add(BigInteger.ONE)} 
   * or {@code upperValue.subtract(BigInteger.ONE)}
   *
   * @param field field name. must not be {@code null}.
   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}.
   * @param upperValue upper portion of the range (inclusive). must not be {@code null}.
   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, or {@code upperValue} is null.
   * @return a query matching documents within this range.
   */
  public static Query newRangeQuery(String field, BigInteger lowerValue, BigInteger upperValue) {
    PointRangeQuery.checkArgs(field, lowerValue, upperValue);
    return newRangeQuery(field, new BigInteger[] { lowerValue }, new BigInteger[] { upperValue });
  }

