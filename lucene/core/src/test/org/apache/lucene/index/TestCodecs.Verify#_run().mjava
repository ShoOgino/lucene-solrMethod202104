    public void _run() throws Throwable {

      for (int iter = 0; iter < NUM_TEST_ITER; iter++) {
        final FieldData field = fields[random().nextInt(fields.length)];
        final TermsEnum termsEnum = termsDict.terms(field.fieldInfo.name).iterator();

        int upto = 0;
        // Test straight enum of the terms:
        while (true) {
          final BytesRef term = termsEnum.next();
          if (term == null) {
            break;
          }
          final BytesRef expected = new BytesRef(field.terms[upto++].text2);
          assertTrue("expected=" + expected + " vs actual " + term, expected.bytesEquals(term));
        }
        assertEquals(upto, field.terms.length);

        // Test random seek:
        TermData term = field.terms[random().nextInt(field.terms.length)];
        TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(term.text2));
        assertEquals(status, TermsEnum.SeekStatus.FOUND);
        assertEquals(term.docs.length, termsEnum.docFreq());
        if (field.omitTF) {
          this.verifyDocs(
              term.docs,
              term.positions,
              TestUtil.docs(random(), termsEnum, null, PostingsEnum.NONE),
              false);
        } else {
          this.verifyDocs(
              term.docs, term.positions, termsEnum.postings(null, PostingsEnum.ALL), true);
        }

        // Test random seek by ord:
        final int idx = random().nextInt(field.terms.length);
        term = field.terms[idx];
        boolean success = false;
        try {
          termsEnum.seekExact(idx);
          success = true;
        } catch (UnsupportedOperationException uoe) {
          // ok -- skip it
        }
        if (success) {
          assertEquals(status, TermsEnum.SeekStatus.FOUND);
          assertTrue(termsEnum.term().bytesEquals(new BytesRef(term.text2)));
          assertEquals(term.docs.length, termsEnum.docFreq());
          if (field.omitTF) {
            this.verifyDocs(
                term.docs,
                term.positions,
                TestUtil.docs(random(), termsEnum, null, PostingsEnum.NONE),
                false);
          } else {
            this.verifyDocs(
                term.docs, term.positions, termsEnum.postings(null, PostingsEnum.ALL), true);
          }
        }

        // Test seek to non-existent terms:
        if (VERBOSE) {
          System.out.println("TEST: seek non-exist terms");
        }
        for (int i = 0; i < 100; i++) {
          final String text2 = TestUtil.randomUnicodeString(random()) + ".";
          status = termsEnum.seekCeil(new BytesRef(text2));
          assertTrue(
              status == TermsEnum.SeekStatus.NOT_FOUND || status == TermsEnum.SeekStatus.END);
        }

        // Seek to each term, backwards:
        if (VERBOSE) {
          System.out.println("TEST: seek terms backwards");
        }
        for (int i = field.terms.length - 1; i >= 0; i--) {
          assertEquals(
              Thread.currentThread().getName()
                  + ": field="
                  + field.fieldInfo.name
                  + " term="
                  + field.terms[i].text2,
              TermsEnum.SeekStatus.FOUND,
              termsEnum.seekCeil(new BytesRef(field.terms[i].text2)));
          assertEquals(field.terms[i].docs.length, termsEnum.docFreq());
        }

        // Seek to each term by ord, backwards
        for (int i = field.terms.length - 1; i >= 0; i--) {
          try {
            termsEnum.seekExact(i);
            assertEquals(field.terms[i].docs.length, termsEnum.docFreq());
            assertTrue(termsEnum.term().bytesEquals(new BytesRef(field.terms[i].text2)));
          } catch (UnsupportedOperationException uoe) {
          }
        }

        // Seek to non-existent empty-string term
        status = termsEnum.seekCeil(new BytesRef(""));
        assertNotNull(status);
        // assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);

        // Make sure we're now pointing to first term
        assertTrue(termsEnum.term().bytesEquals(new BytesRef(field.terms[0].text2)));

        // Test docs enum
        termsEnum.seekCeil(new BytesRef(""));
        upto = 0;
        do {
          term = field.terms[upto];
          if (random().nextInt(3) == 1) {
            final PostingsEnum postings;
            if (!field.omitTF) {
              // TODO: we should randomize which postings features are available, but
              // need to coordinate this with the checks below that rely on such features
              postings = termsEnum.postings(null, PostingsEnum.ALL);
            } else {
              postings = TestUtil.docs(random(), termsEnum, null, PostingsEnum.FREQS);
            }
            assertNotNull(postings);
            int upto2 = -1;
            boolean ended = false;
            while (upto2 < term.docs.length - 1) {
              // Maybe skip:
              final int left = term.docs.length - upto2;
              int doc;
              if (random().nextInt(3) == 1 && left >= 1) {
                final int inc = 1 + random().nextInt(left - 1);
                upto2 += inc;
                if (random().nextInt(2) == 1) {
                  doc = postings.advance(term.docs[upto2]);
                  assertEquals(term.docs[upto2], doc);
                } else {
                  doc = postings.advance(1 + term.docs[upto2]);
                  if (doc == DocIdSetIterator.NO_MORE_DOCS) {
                    // skipped past last doc
                    assert upto2 == term.docs.length - 1;
                    ended = true;
                    break;
                  } else {
                    // skipped to next doc
                    assert upto2 < term.docs.length - 1;
                    if (doc >= term.docs[1 + upto2]) {
                      upto2++;
                    }
                  }
                }
              } else {
                doc = postings.nextDoc();
                assertTrue(doc != -1);
                upto2++;
              }
              assertEquals(term.docs[upto2], doc);
              if (!field.omitTF) {
                assertEquals(term.positions[upto2].length, postings.freq());
                if (random().nextInt(2) == 1) {
                  this.verifyPositions(term.positions[upto2], postings);
                }
              }
            }

            if (!ended) {
              assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
            }
          }
          upto++;

        } while (termsEnum.next() != null);

        assertEquals(upto, field.terms.length);
      }
    }

