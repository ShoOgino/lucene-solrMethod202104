    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {
      final int docBase = context.docBase;
      
      final NumericDocValues docValues = context.reader().getNumericDocValues(this.field);
      final LeafCollector leafNullGroupCollector = expandNullGroup ? nullGroupCollector.getLeafCollector(context) : null;
      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();
      for (LongObjectCursor<Collector> entry : groups) {
        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));
      }

      return new LeafCollector() {

        @Override
        public void setScorer(Scorable scorer) throws IOException {
          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {
            c.value.setScorer(scorer);
          }
          if (expandNullGroup) {
            leafNullGroupCollector.setScorer(scorer);
          }
        }

        @Override
        public void collect(int docId) throws IOException {
          if (docValues.advanceExact(docId)) {
            final long value = docValues.longValue();
            final int index = leafCollectors.indexOf(value);
            if (index >= 0 && !collapsedSet.contains(docId + docBase)) {
              leafCollectors.indexGet(index).collect(docId);
            }
          } else if (expandNullGroup && !collapsedSet.contains(docId + docBase)) {
            leafNullGroupCollector.collect(docId);
          }
        }
      };
    }

