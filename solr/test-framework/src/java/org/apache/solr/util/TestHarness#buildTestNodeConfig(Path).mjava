  public static NodeConfig buildTestNodeConfig(Path solrHome) {
    CloudConfig cloudConfig = (null == System.getProperty("zkHost"))
      ? null
      : new CloudConfig.CloudConfigBuilder(System.getProperty("host"),
                                           Integer.getInteger("hostPort", 8983),
                                           System.getProperty("hostContext", ""))
      .setZkClientTimeout(Integer.getInteger("zkClientTimeout", 30000))
      .setZkHost(System.getProperty("zkHost"))
      .build();
    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(
        HttpClientUtil.DEFAULT_MAXCONNECTIONS,
        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,
        30000, 30000,
        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);
    // universal default metric reporter
    Map<String,Object> attributes = new HashMap<>();
    attributes.put("name", "default");
    attributes.put("class", SolrJmxReporter.class.getName());
    PluginInfo defaultPlugin = new PluginInfo("reporter", attributes);
    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()
        .setMetricReporterPlugins(new PluginInfo[]{defaultPlugin})
        .setHistoryHandler(
            Boolean.getBoolean("metricsHistory")
                ? null : new PluginInfo("typeUnused", Collections.singletonMap("enable", "false")))
        .build();

    return new NodeConfig.NodeConfigBuilder("testNode", solrHome)
        .setUseSchemaCache(Boolean.getBoolean("shareSchema"))
        .setCloudConfig(cloudConfig)
        .setUpdateShardHandlerConfig(updateShardHandlerConfig)
        .setMetricsConfig(metricsConfig)
        .build();
  }

