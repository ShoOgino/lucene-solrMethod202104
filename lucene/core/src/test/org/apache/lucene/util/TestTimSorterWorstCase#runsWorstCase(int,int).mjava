  /**
   * Fills <code>runs</code> with a sequence of run lengths of the form<br>
   * Y_n x_{n,1} x_{n,2} ... x_{n,l_n} <br>
   * Y_{n-1} x_{n-1,1} x_{n-1,2} ... x_{n-1,l_{n-1}} <br>
   * ... <br>
   * Y_1 x_{1,1} x_{1,2} ... x_{1,l_1}<br>
   * The Y_i's are chosen to satisfy the invariant throughout execution, but the x_{i,j}'s are
   * merged (by <code>TimSort.mergeCollapse</code>) into an X_i that violates the invariant.
   */
  private static List<Integer> runsWorstCase(int length, int minRun) {
    List<Integer> runs = new LinkedList<>();

    int runningTotal = 0, Y = minRun + 4, X = minRun;

    while ((long) runningTotal + Y + X <= length) {
      runningTotal += X + Y;
      generateWrongElem(X, minRun, runs);
      runs.add(0, Y);

      // X_{i+1} = Y_i + x_{i,1} + 1, since runs.get(1) = x_{i,1}
      X = Y + runs.get(1) + 1;

      // Y_{i+1} = X_{i+1} + Y_i + 1
      Y += X + 1;
    }

    if ((long) runningTotal + X <= length) {
      runningTotal += X;
      generateWrongElem(X, minRun, runs);
    }

    runs.add(length - runningTotal);
    return runs;
  }

