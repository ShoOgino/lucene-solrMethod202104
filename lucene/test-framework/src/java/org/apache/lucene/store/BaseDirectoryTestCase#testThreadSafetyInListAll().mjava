  public void testThreadSafetyInListAll() throws Exception {
    try (Directory dir = getDirectory(createTempDir("testThreadSafety"))) {
      if (dir instanceof BaseDirectoryWrapper) {
        // we are not making a real index, just writing, reading files.
        ((BaseDirectoryWrapper) dir).setCheckIndexOnClose(false);
      }
      if (dir instanceof MockDirectoryWrapper) {
        // makes this test really slow
        ((MockDirectoryWrapper) dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
      }

      AtomicBoolean stop = new AtomicBoolean();
      Thread writer =
          new Thread(
              () -> {
                try {
                  for (int i = 0, max = RandomizedTest.randomIntBetween(500, 1000); i < max; i++) {
                    String fileName = "file-" + i;
                    try (IndexOutput output = dir.createOutput(fileName, newIOContext(random()))) {
                      assert output != null;
                      // Add some lags so that the other thread can read the content of the
                      // directory.
                      Thread.yield();
                    }
                    assertTrue(slowFileExists(dir, fileName));
                  }
                } catch (IOException e) {
                  throw new UncheckedIOException(e);
                } finally {
                  stop.set(true);
                }
              });

      Thread reader =
          new Thread(
              () -> {
                try {
                  Random rnd = new Random(RandomizedTest.randomLong());
                  while (!stop.get()) {
                    String[] files =
                        Arrays.stream(dir.listAll())
                            .filter(
                                name -> !ExtrasFS.isExtra(name)) // Ignore anything from ExtraFS.
                            .toArray(String[]::new);

                    if (files.length > 0) {
                      do {
                        String file = RandomPicks.randomFrom(rnd, files);
                        try (IndexInput input = dir.openInput(file, newIOContext(random()))) {
                          // Just open, nothing else.
                          assert input != null;
                        } catch (AccessDeniedException e) {
                          // Access denied is allowed for files for which the output is still open
                          // (MockDirectoryWriter enforces
                          // this, for example). Since we don't synchronize with the writer thread,
                          // just ignore it.
                        } catch (IOException e) {
                          throw new UncheckedIOException(
                              "Something went wrong when opening: " + file, e);
                        }
                      } while (rnd.nextInt(3) != 0); // Sometimes break and list files again.
                    }
                  }
                } catch (IOException e) {
                  throw new UncheckedIOException(e);
                }
              });

      reader.start();
      writer.start();

      writer.join();
      reader.join();
    }
  }

