  // The two hour time was achieved on a Linux 3.13 system with these specs:
  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.
  @Monster("takes over two hours")
  public void testExactlyAtTrueLimit() throws Exception {
    Directory dir = newFSDirectory(createTempDir("2BDocs3"));
    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
    Document doc = new Document();
    doc.add(newStringField("field", "text", Field.Store.NO));
    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {
      iw.addDocument(doc);
      /*
      if (i%1000000 == 0) {
        System.out.println((i/1000000) + " M docs...");
      }
      */
    }
    iw.commit();

    // First unoptimized, then optimized:
    for (int i = 0; i < 2; i++) {
      DirectoryReader ir = DirectoryReader.open(dir);
      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());
      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());
      IndexSearcher searcher = new IndexSearcher(ir);
      TopScoreDocCollector collector = TopScoreDocCollector.create(10, Integer.MAX_VALUE);
      searcher.search(new TermQuery(new Term("field", "text")), collector);
      TopDocs hits = collector.topDocs();
      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);

      // Sort by docID reversed:
      hits =
          searcher.search(
              new TermQuery(new Term("field", "text")),
              10,
              new Sort(new SortField(null, SortField.Type.DOC, true)));
      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);
      assertEquals(10, hits.scoreDocs.length);
      assertEquals(IndexWriter.MAX_DOCS - 1, hits.scoreDocs[0].doc);
      ir.close();

      iw.forceMerge(1);
    }

    iw.close();
    dir.close();
  }

