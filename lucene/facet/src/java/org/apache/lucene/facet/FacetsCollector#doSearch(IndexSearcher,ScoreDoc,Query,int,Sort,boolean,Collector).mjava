  private static TopDocs doSearch(
      IndexSearcher searcher,
      ScoreDoc after,
      Query q,
      int n,
      Sort sort,
      boolean doDocScores,
      Collector fc)
      throws IOException {

    int limit = searcher.getIndexReader().maxDoc();
    if (limit == 0) {
      limit = 1;
    }
    n = Math.min(n, limit);

    if (after != null && after.doc >= limit) {
      throw new IllegalArgumentException(
          "after.doc exceeds the number of documents in the reader: after.doc="
              + after.doc
              + " limit="
              + limit);
    }

    TopDocs topDocs = null;
    if (n == 0) {
      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();
      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));
      topDocs =
          new TopDocs(
              new TotalHits(totalHitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO),
              new ScoreDoc[0]);
    } else {
      TopDocsCollector<?> hitsCollector;
      if (sort != null) {
        if (after != null && !(after instanceof FieldDoc)) {
          // TODO: if we fix type safety of TopFieldDocs we can
          // remove this
          throw new IllegalArgumentException("after must be a FieldDoc; got " + after);
        }
        hitsCollector =
            TopFieldCollector.create(
                sort,
                n,
                (FieldDoc) after,
                Integer.MAX_VALUE); // TODO: can we disable exact hit counts
      } else {
        hitsCollector = TopScoreDocCollector.create(n, after, Integer.MAX_VALUE);
      }
      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));

      topDocs = hitsCollector.topDocs();
      if (doDocScores) {
        TopFieldCollector.populateScores(topDocs.scoreDocs, searcher, q);
      }
    }
    return topDocs;
  }

