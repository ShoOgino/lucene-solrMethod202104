  /**
   * Compare two arrays, starting at the specified offsets, but treating shortArray as a prefix to
   * longArray. As long as shortArray is a prefix of longArray, return 0. Otherwise, behave as
   * {@link Utility#compareArray(char[], int, char[], int)}
   *
   * @param shortArray prefix array
   * @param shortIndex offset into shortArray
   * @param longArray long array (word)
   * @param longIndex offset into longArray
   * @return 0 if shortArray is a prefix of longArray, otherwise act as {@link
   *     Utility#compareArray(char[], int, char[], int)}
   */
  public static int compareArrayByPrefix(
      char[] shortArray, int shortIndex, char[] longArray, int longIndex) {

    // a null prefix is a prefix of longArray
    if (shortArray == null) return 0;
    else if (longArray == null) return (shortIndex < shortArray.length) ? 1 : 0;

    int si = shortIndex, li = longIndex;
    while (si < shortArray.length && li < longArray.length && shortArray[si] == longArray[li]) {
      si++;
      li++;
    }
    if (si == shortArray.length) {
      // shortArray is a prefix of longArray
      return 0;
    } else {
      // shortArray > longArray because longArray ended first.
      if (li == longArray.length) return 1;
      else
        // determine by comparison
        return (shortArray[si] > longArray[li]) ? 1 : -1;
    }
  }

