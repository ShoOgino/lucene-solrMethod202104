  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {
    String backupName = "configonlybackup";
    CloudSolrClient solrClient = cluster.getSolrClient();

    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)
        .setRepositoryName(getBackupRepoName())
        .setIncremental(false)
        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);
    backup.process(solrClient);

    Map<String,String> params = new HashMap<>();
    params.put("location", "/backup");
    params.put("solr.hdfs.home", hdfsUri + "/solr");

    HdfsBackupRepository repo = new HdfsBackupRepository();
    repo.init(new NamedList<>(params));

    URI baseLoc = repo.createURI("/backup");

    BackupManager mgr = BackupManager.forRestore(repo, solrClient.getZkStateReader(), repo.resolve(baseLoc, backupName));
    BackupProperties props = mgr.readBackupProperties();
    assertNotNull(props);
    assertEquals(collectionName, props.getCollection());
    assertEquals(backupName, props.getBackupName());
    assertEquals(configName, props.getConfigName());

    DocCollection collectionState = mgr.readCollectionState(collectionName);
    assertNotNull(collectionState);
    assertEquals(collectionName, collectionState.getName());

    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);
    assertTrue(repo.exists(configDirLoc));

    Collection<String> expected = Arrays.asList(TRADITIONAL_BACKUP_PROPS_FILE, ZK_STATE_DIR);
    URI backupLoc = repo.resolve(baseLoc, backupName);
    String[] dirs = repo.listAll(backupLoc);
    for (String d : dirs) {
      assertTrue(expected.contains(d));
    }
  }

