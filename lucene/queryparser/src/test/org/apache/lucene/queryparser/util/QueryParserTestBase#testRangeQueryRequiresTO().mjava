  public void testRangeQueryRequiresTO() throws Exception {
    Analyzer a = new MockAnalyzer(random());

    assertQueryEquals("{A TO B}", a, "{a TO b}");
    assertQueryEquals("[A TO B}", a, "[a TO b}");
    assertQueryEquals("{A TO B]", a, "{a TO b]");
    assertQueryEquals("[A TO B]", a, "[a TO b]");

    // " TO " is required between range endpoints

    Class<? extends Throwable> exceptionClass =
        this instanceof TestQueryParser
            ? org.apache.lucene.queryparser.classic.ParseException.class
            : org.apache.lucene.queryparser.flexible.standard.parser.ParseException.class;

    expectThrows(exceptionClass, () -> getQuery("{A B}"));
    expectThrows(exceptionClass, () -> getQuery("[A B}"));
    expectThrows(exceptionClass, () -> getQuery("{A B]"));
    expectThrows(exceptionClass, () -> getQuery("[A B]"));

    expectThrows(exceptionClass, () -> getQuery("{TO B}"));
    expectThrows(exceptionClass, () -> getQuery("[TO B}"));
    expectThrows(exceptionClass, () -> getQuery("{TO B]"));
    expectThrows(exceptionClass, () -> getQuery("[TO B]"));

    expectThrows(exceptionClass, () -> getQuery("{A TO}"));
    expectThrows(exceptionClass, () -> getQuery("[A TO}"));
    expectThrows(exceptionClass, () -> getQuery("{A TO]"));
    expectThrows(exceptionClass, () -> getQuery("[A TO]"));
  }

