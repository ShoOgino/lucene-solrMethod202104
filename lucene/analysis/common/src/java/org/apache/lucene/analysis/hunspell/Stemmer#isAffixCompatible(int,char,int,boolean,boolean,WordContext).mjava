  private boolean isAffixCompatible(
      int affix,
      char prevFlag,
      int recursionDepth,
      boolean isPrefix,
      boolean previousWasPrefix,
      WordContext context) {
    int append = dictionary.affixData(affix, Dictionary.AFFIX_APPEND);

    if (context.isCompound() && dictionary.compoundPermit > 0) {
      WordContext allowed = isPrefix ? WordContext.COMPOUND_BEGIN : WordContext.COMPOUND_END;
      if (context != allowed && !dictionary.hasFlag(append, dictionary.compoundPermit, scratch)) {
        return false;
      }
    }

    if (recursionDepth == 0) {
      // check if affix is allowed in a non-compound word
      return context.isCompound()
          || !dictionary.hasFlag(append, dictionary.onlyincompound, scratch);
    }

    if (isCrossProduct(affix)) {
      // cross check incoming continuation class (flag of previous affix) against list.
      char[] appendFlags = dictionary.decodeFlags(append, scratch);
      if (context.isCompound() || !Dictionary.hasFlag(appendFlags, dictionary.onlyincompound)) {
        return previousWasPrefix || Dictionary.hasFlag(appendFlags, prevFlag);
      }
    }

    return false;
  }

