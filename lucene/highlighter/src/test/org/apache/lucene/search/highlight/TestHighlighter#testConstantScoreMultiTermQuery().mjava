  public void testConstantScoreMultiTermQuery() throws Exception {

    numHighlights = 0;

    query = new WildcardQuery(new Term(FIELD_NAME, "ken*"));
    ((WildcardQuery) query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);
    searcher = newSearcher(reader);
    // can't rewrite ConstantScore if you want to highlight it -
    // it rewrites to ConstantScoreQuery which cannot be highlighted
    // query = unReWrittenQuery.rewrite(reader);
    if (VERBOSE) System.out.println("Searching for: " + query.toString(FIELD_NAME));
    hits = searcher.search(query, 1000);

    for (int i = 0; i < hits.totalHits.value; i++) {
      final int docId = hits.scoreDocs[i].doc;
      final Document doc = searcher.doc(docId);
      String text = doc.get(FIELD_NAME);
      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);
      int maxNumFragmentsRequired = 2;
      String fragmentSeparator = "...";
      QueryScorer scorer = new QueryScorer(query, TestHighlighter.FIELD_NAME);

      Highlighter highlighter = new Highlighter(this, scorer);

      highlighter.setTextFragmenter(new SimpleFragmenter(20));

      String result =
          highlighter.getBestFragments(
              tokenStream, text, maxNumFragmentsRequired, fragmentSeparator);
      if (VERBOSE) System.out.println("\t" + result);
    }
    assertTrue(
        "Failed to find correct number of highlights " + numHighlights + " found",
        numHighlights == 5);

    // try null field

    hits = searcher.search(query, 1000);

    numHighlights = 0;

    for (int i = 0; i < hits.totalHits.value; i++) {
      final int docId = hits.scoreDocs[i].doc;
      final Document doc = searcher.doc(docId);
      String text = doc.get(FIELD_NAME);
      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);
      int maxNumFragmentsRequired = 2;
      String fragmentSeparator = "...";
      QueryScorer scorer = new QueryScorer(query, null);

      Highlighter highlighter = new Highlighter(this, scorer);

      highlighter.setTextFragmenter(new SimpleFragmenter(20));

      String result =
          highlighter.getBestFragments(
              tokenStream, text, maxNumFragmentsRequired, fragmentSeparator);
      if (VERBOSE) System.out.println("\t" + result);
    }
    assertTrue(
        "Failed to find correct number of highlights " + numHighlights + " found",
        numHighlights == 5);

    // try default field

    hits = searcher.search(query, 1000);

    numHighlights = 0;

    for (int i = 0; i < hits.totalHits.value; i++) {
      final int docId = hits.scoreDocs[i].doc;
      final Document doc = searcher.doc(docId);
      String text = doc.get(FIELD_NAME);
      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);
      int maxNumFragmentsRequired = 2;
      String fragmentSeparator = "...";
      QueryScorer scorer = new QueryScorer(query, "random_field", TestHighlighter.FIELD_NAME);

      Highlighter highlighter = new Highlighter(this, scorer);

      highlighter.setTextFragmenter(new SimpleFragmenter(20));

      String result =
          highlighter.getBestFragments(
              tokenStream, text, maxNumFragmentsRequired, fragmentSeparator);
      if (VERBOSE) System.out.println("\t" + result);
    }
    assertTrue(
        "Failed to find correct number of highlights " + numHighlights + " found",
        numHighlights == 5);
  }

