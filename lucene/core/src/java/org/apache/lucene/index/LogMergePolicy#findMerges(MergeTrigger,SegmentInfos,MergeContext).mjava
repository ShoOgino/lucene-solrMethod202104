  /**
   * Checks if any merges are now necessary and returns a {@link MergePolicy.MergeSpecification} if
   * so. A merge is necessary when there are more than {@link #setMergeFactor} segments at a given
   * level. When multiple levels have too many segments, this method will return multiple merges,
   * allowing the {@link MergeScheduler} to use concurrency.
   */
  @Override
  public MergeSpecification findMerges(
      MergeTrigger mergeTrigger, SegmentInfos infos, MergeContext mergeContext) throws IOException {

    final int numSegments = infos.size();
    if (verbose(mergeContext)) {
      message("findMerges: " + numSegments + " segments", mergeContext);
    }

    // Compute levels, which is just log (base mergeFactor)
    // of the size of each segment
    final List<SegmentInfoAndLevel> levels = new ArrayList<>(numSegments);
    final float norm = (float) Math.log(mergeFactor);

    final Set<SegmentCommitInfo> mergingSegments = mergeContext.getMergingSegments();

    for (int i = 0; i < numSegments; i++) {
      final SegmentCommitInfo info = infos.info(i);
      long size = size(info, mergeContext);

      // Floor tiny segments
      if (size < 1) {
        size = 1;
      }

      final SegmentInfoAndLevel infoLevel =
          new SegmentInfoAndLevel(info, (float) Math.log(size) / norm);
      levels.add(infoLevel);

      if (verbose(mergeContext)) {
        final long segBytes = sizeBytes(info, mergeContext);
        String extra = mergingSegments.contains(info) ? " [merging]" : "";
        if (size >= maxMergeSize) {
          extra += " [skip: too large]";
        }
        message(
            "seg="
                + segString(mergeContext, Collections.singleton(info))
                + " level="
                + infoLevel.level
                + " size="
                + String.format(Locale.ROOT, "%.3f MB", segBytes / 1024 / 1024.)
                + extra,
            mergeContext);
      }
    }

    final float levelFloor;
    if (minMergeSize <= 0) levelFloor = (float) 0.0;
    else levelFloor = (float) (Math.log(minMergeSize) / norm);

    // Now, we quantize the log values into levels.  The
    // first level is any segment whose log size is within
    // LEVEL_LOG_SPAN of the max size, or, who has such as
    // segment "to the right".  Then, we find the max of all
    // other segments and use that to define the next level
    // segment, etc.

    MergeSpecification spec = null;

    final int numMergeableSegments = levels.size();

    int start = 0;
    while (start < numMergeableSegments) {

      // Find max level of all segments not already
      // quantized.
      float maxLevel = levels.get(start).level;
      for (int i = 1 + start; i < numMergeableSegments; i++) {
        final float level = levels.get(i).level;
        if (level > maxLevel) {
          maxLevel = level;
        }
      }

      // Now search backwards for the rightmost segment that
      // falls into this level:
      float levelBottom;
      if (maxLevel <= levelFloor) {
        // All remaining segments fall into the min level
        levelBottom = -1.0F;
      } else {
        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);

        // Force a boundary at the level floor
        if (levelBottom < levelFloor && maxLevel >= levelFloor) {
          levelBottom = levelFloor;
        }
      }

      int upto = numMergeableSegments - 1;
      while (upto >= start) {
        if (levels.get(upto).level >= levelBottom) {
          break;
        }
        upto--;
      }
      if (verbose(mergeContext)) {
        message(
            "  level " + levelBottom + " to " + maxLevel + ": " + (1 + upto - start) + " segments",
            mergeContext);
      }

      // Finally, record all merges that are viable at this level:
      int end = start + mergeFactor;
      while (end <= 1 + upto) {
        boolean anyTooLarge = false;
        boolean anyMerging = false;
        for (int i = start; i < end; i++) {
          final SegmentCommitInfo info = levels.get(i).info;
          anyTooLarge |=
              (size(info, mergeContext) >= maxMergeSize
                  || sizeDocs(info, mergeContext) >= maxMergeDocs);
          if (mergingSegments.contains(info)) {
            anyMerging = true;
            break;
          }
        }

        if (anyMerging) {
          // skip
        } else if (!anyTooLarge) {
          if (spec == null) spec = new MergeSpecification();
          final List<SegmentCommitInfo> mergeInfos = new ArrayList<>(end - start);
          for (int i = start; i < end; i++) {
            mergeInfos.add(levels.get(i).info);
            assert infos.contains(levels.get(i).info);
          }
          if (verbose(mergeContext)) {
            message(
                "  add merge="
                    + segString(mergeContext, mergeInfos)
                    + " start="
                    + start
                    + " end="
                    + end,
                mergeContext);
          }
          spec.add(new OneMerge(mergeInfos));
        } else if (verbose(mergeContext)) {
          message(
              "    "
                  + start
                  + " to "
                  + end
                  + ": contains segment over maxMergeSize or maxMergeDocs; skipping",
              mergeContext);
        }

        start = end;
        end = start + mergeFactor;
      }

      start = 1 + upto;
    }

    return spec;
  }

