  @Override
  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {
    super.document(
        docID,
        new StoredFieldVisitor() {
          @Override
          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {
            visitor.binaryField(fieldInfo, value);
          }

          @Override
          public void stringField(FieldInfo fieldInfo, String value) throws IOException {
            visitor.stringField(
                fieldInfo, Objects.requireNonNull(value, "String value should not be null"));
          }

          @Override
          public void intField(FieldInfo fieldInfo, int value) throws IOException {
            visitor.intField(fieldInfo, value);
          }

          @Override
          public void longField(FieldInfo fieldInfo, long value) throws IOException {
            visitor.longField(fieldInfo, value);
          }

          @Override
          public void floatField(FieldInfo fieldInfo, float value) throws IOException {
            visitor.floatField(fieldInfo, value);
          }

          @Override
          public void doubleField(FieldInfo fieldInfo, double value) throws IOException {
            visitor.doubleField(fieldInfo, value);
          }

          @Override
          public Status needsField(FieldInfo fieldInfo) throws IOException {
            return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;
          }
        });
  }

