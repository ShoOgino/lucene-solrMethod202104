  /**
   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for the given selection of
   * fields from terms with a document frequency greater than the given maxDocFreq
   *
   * @param delegate Analyzer whose TokenStream will be filtered
   * @param indexReader IndexReader to identify the stopwords from
   * @param fields Selection of fields to calculate stopwords for
   * @param maxDocFreq Document frequency terms should be above in order to be stopwords
   * @throws IOException Can be thrown while reading from the IndexReader
   */
  public QueryAutoStopWordAnalyzer(
      Analyzer delegate, IndexReader indexReader, Collection<String> fields, int maxDocFreq)
      throws IOException {
    super(delegate.getReuseStrategy());
    this.delegate = delegate;

    for (String field : fields) {
      Set<String> stopWords = new HashSet<>();
      Terms terms = MultiTerms.getTerms(indexReader, field);
      CharsRefBuilder spare = new CharsRefBuilder();
      if (terms != null) {
        TermsEnum te = terms.iterator();
        BytesRef text;
        while ((text = te.next()) != null) {
          if (te.docFreq() > maxDocFreq) {
            spare.copyUTF8Bytes(text);
            stopWords.add(spare.toString());
          }
        }
      }
      stopWordsPerField.put(field, stopWords);
    }
  }

