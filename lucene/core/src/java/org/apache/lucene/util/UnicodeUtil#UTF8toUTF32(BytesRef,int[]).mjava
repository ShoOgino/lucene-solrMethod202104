  /**
   * This method assumes valid UTF8 input. This method <strong>does not perform</strong> full UTF8
   * validation, it will check only the first byte of each codepoint (for multi-byte sequences any
   * bytes after the head are skipped). It is the responsibility of the caller to make sure that the
   * destination array is large enough.
   *
   * @throws IllegalArgumentException If invalid codepoint header byte occurs or the content is
   *     prematurely truncated.
   */
  public static int UTF8toUTF32(final BytesRef utf8, final int[] ints) {
    // TODO: ints must not be null, should be an assert
    int utf32Count = 0;
    int utf8Upto = utf8.offset;
    final byte[] bytes = utf8.bytes;
    final int utf8Limit = utf8.offset + utf8.length;
    while (utf8Upto < utf8Limit) {
      final int numBytes = utf8CodeLength[bytes[utf8Upto] & 0xFF];
      int v = 0;
      switch (numBytes) {
        case 1:
          ints[utf32Count++] = bytes[utf8Upto++];
          continue;
        case 2:
          // 5 useful bits
          v = bytes[utf8Upto++] & 31;
          break;
        case 3:
          // 4 useful bits
          v = bytes[utf8Upto++] & 15;
          break;
        case 4:
          // 3 useful bits
          v = bytes[utf8Upto++] & 7;
          break;
        default:
          throw new IllegalArgumentException("invalid utf8");
      }

      // TODO: this may read past utf8's limit.
      final int limit = utf8Upto + numBytes - 1;
      while (utf8Upto < limit) {
        v = v << 6 | bytes[utf8Upto++] & 63;
      }
      ints[utf32Count++] = v;
    }

    return utf32Count;
  }

