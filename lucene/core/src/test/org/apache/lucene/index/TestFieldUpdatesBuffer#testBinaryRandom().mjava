  public void testBinaryRandom() throws IOException {
    List<DocValuesUpdate.BinaryDocValuesUpdate> updates = new ArrayList<>();
    int numUpdates = 1 + random().nextInt(1000);
    Counter counter = Counter.newCounter();
    DocValuesUpdate.BinaryDocValuesUpdate randomUpdate = getRandomBinaryUpdate();
    updates.add(randomUpdate);
    FieldUpdatesBuffer buffer =
        new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpTo);
    for (int i = 0; i < numUpdates; i++) {
      randomUpdate = getRandomBinaryUpdate();
      updates.add(randomUpdate);
      if (randomUpdate.hasValue) {
        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpTo);
      } else {
        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpTo);
      }
    }
    buffer.finish();
    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();
    FieldUpdatesBuffer.BufferedUpdate value;

    int count = 0;
    while ((value = iterator.next()) != null) {
      randomUpdate = updates.get(count++);
      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());
      assertEquals(randomUpdate.term.field, value.termField);
      assertEquals("count: " + count, randomUpdate.hasValue, value.hasValue);
      if (randomUpdate.hasValue) {
        assertEquals(randomUpdate.getValue(), value.binaryValue);
      } else {
        assertNull(value.binaryValue);
      }
      assertEquals(randomUpdate.docIDUpTo, value.docUpTo);
    }
    assertEquals(count, updates.size());
  }

