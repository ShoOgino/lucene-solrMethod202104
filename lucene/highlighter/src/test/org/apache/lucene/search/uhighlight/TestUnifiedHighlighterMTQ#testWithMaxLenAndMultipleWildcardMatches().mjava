  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {
    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);

    Field body = new Field("body", "", fieldType);
    Document doc = new Document();
    doc.add(body);

    // tests interleaving of multiple wildcard matches with the CompositePostingsEnum
    // In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form
    // pos 1 to 9 for bravo
    // and a second with position 2 for Bravado
    body.setStringValue("Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo");
    iw.addDocument(doc);

    IndexReader ir = iw.getReader();
    iw.close();

    IndexSearcher searcher = newSearcher(ir);
    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);
    highlighter.setMaxLength(32); // a little past first sentence

    BooleanQuery query =
        new BooleanQuery.Builder()
            .add(new TermQuery(new Term("body", "alpha")), BooleanClause.Occur.MUST)
            .add(new PrefixQuery(new Term("body", "bra")), BooleanClause.Occur.MUST)
            .build();
    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    String snippets[] =
        highlighter.highlight("body", query, topDocs, 2); // ask for 2 but we'll only get 1
    assertArrayEquals(
        new String[] {"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo."}, snippets);

    ir.close();
  }

