  /**
   * Writer calls this when it has hit an error and had to roll back, to tell us that there may now
   * be unreferenced files in the filesystem. So we re-list the filesystem and delete such files. If
   * segmentName is non-null, we will only delete files corresponding to that segment.
   */
  void refresh() throws IOException {
    assert locked();
    Set<String> toDelete = new HashSet<>();

    String[] files = directory.listAll();

    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher("");

    for (int i = 0; i < files.length; i++) {
      String fileName = files[i];
      m.reset(fileName);
      if (!fileName.endsWith("write.lock")
          && !refCounts.containsKey(fileName)
          && (m.matches()
              || fileName.startsWith(IndexFileNames.SEGMENTS)
              // we only try to clear out pending_segments_N during rollback(), because we don't
              // ref-count it
              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback
              // closes anyway, and
              // any leftover file will be deleted/retried on next IW bootup anyway...
              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {
        // Unreferenced file, so remove it
        if (infoStream.isEnabled("IFD")) {
          infoStream.message(
              "IFD", "refresh: removing newly created unreferenced file \"" + fileName + "\"");
        }
        toDelete.add(fileName);
      }
    }

    deleteFiles(toDelete);
  }

