  /**
   * For definition of "check point" see IndexWriter comments: "Clarification: Check Points (and
   * commits)".
   *
   * <p>Writer calls this when it has made a "consistent change" to the index, meaning new files are
   * written to the index and the in-memory SegmentInfos have been modified to point to those files.
   *
   * <p>This may or may not be a commit (segments_N may or may not have been written).
   *
   * <p>We simply incref the files referenced by the new SegmentInfos and decref the files we had
   * previously seen (if any).
   *
   * <p>If this is a commit, we also call the policy to give it a chance to remove other commits. If
   * any commits are removed, we decref their files as well.
   */
  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {
    assert locked();

    assert Thread.holdsLock(writer);
    long t0 = System.nanoTime();
    if (infoStream.isEnabled("IFD")) {
      infoStream.message(
          "IFD",
          "now checkpoint \""
              + writer.segString(writer.toLiveInfos(segmentInfos))
              + "\" ["
              + segmentInfos.size()
              + " segments "
              + "; isCommit = "
              + isCommit
              + "]");
    }

    // Incref the files:
    incRef(segmentInfos, isCommit);

    if (isCommit) {
      // Append to our commits list:
      commits.add(new CommitPoint(commitsToDelete, directoryOrig, segmentInfos));

      // Tell policy so it can remove commits:
      policy.onCommit(commits);

      // Decref files for commits that were deleted by the policy:
      deleteCommits();
    } else {
      // DecRef old files from the last checkpoint, if any:
      try {
        decRef(lastFiles);
      } finally {
        lastFiles.clear();
      }

      // Save files so we can decr on next checkpoint/commit:
      lastFiles.addAll(segmentInfos.files(false));
    }

    if (infoStream.isEnabled("IFD")) {
      long t1 = System.nanoTime();
      infoStream.message("IFD", ((t1 - t0) / 1000000) + " msec to checkpoint");
    }
  }

