  public void testQueryVisitor() throws IOException {
    Term a = new Term("f", "a");
    Term b = new Term("f", "b");
    Term c = new Term("f", "c");
    Term d = new Term("f", "d");
    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();
    bqBuilder.add(new TermQuery(a), Occur.SHOULD);
    bqBuilder.add(new TermQuery(b), Occur.MUST);
    bqBuilder.add(new TermQuery(c), Occur.FILTER);
    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);
    BooleanQuery bq = bqBuilder.build();

    bq.visit(
        new QueryVisitor() {

          Term expected;

          @Override
          public QueryVisitor getSubVisitor(Occur occur, Query parent) {
            switch (occur) {
              case SHOULD:
                expected = a;
                break;
              case MUST:
                expected = b;
                break;
              case FILTER:
                expected = c;
                break;
              case MUST_NOT:
                expected = d;
                break;
              default:
                throw new IllegalStateException();
            }
            return this;
          }

          @Override
          public void consumeTerms(Query query, Term... terms) {
            assertEquals(expected, terms[0]);
          }
        });
  }

