  public void testNearestNeighborRandom() throws Exception {
    
    int numPoints = atLeast(1000);
    Directory dir;
    if (numPoints > 100000) {
      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));
    } else {
      dir = newDirectory();
    }
    double[] lats = new double[numPoints];
    double[] lons = new double[numPoints];

    IndexWriterConfig iwc = getIndexWriterConfig();
    iwc.setMergePolicy(newLogMergePolicy());
    iwc.setMergeScheduler(new SerialMergeScheduler());
    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);
    for(int id=0;id<numPoints;id++) {
      lats[id] = quantizeLat(GeoTestUtil.nextLatitude());
      lons[id] = quantizeLon(GeoTestUtil.nextLongitude());
      Document doc = new Document();
      doc.add(new LatLonPoint("point", lats[id], lons[id]));
      doc.add(new LatLonDocValuesField("point", lats[id], lons[id]));
      doc.add(new StoredField("id", id));
      w.addDocument(doc);
    }

    if (random().nextBoolean()) {
      w.forceMerge(1);
    }

    DirectoryReader r = w.getReader();
    if (VERBOSE) {      
      System.out.println("TEST: reader=" + r);
    }
    // can't wrap because we require Lucene60PointsFormat directly but e.g. ParallelReader wraps with its own points impl:
    IndexSearcher s = newSearcher(r, false);
    int iters = atLeast(100);
    for(int iter=0;iter<iters;iter++) {
      if (VERBOSE) {      
        System.out.println("\nTEST: iter=" + iter);
      }
      double pointLat = GeoTestUtil.nextLatitude();
      double pointLon = GeoTestUtil.nextLongitude();

      // dumb brute force search to get the expected result:
      FieldDoc[] expectedHits = new FieldDoc[lats.length];
      for(int id=0;id<lats.length;id++) {
        double distance = SloppyMath.haversinMeters(pointLat, pointLon, lats[id], lons[id]);
        FieldDoc hit = new FieldDoc(id, 0.0f, new Object[] {Double.valueOf(distance)});
        expectedHits[id] = hit;
      }

      Arrays.sort(expectedHits, new Comparator<FieldDoc>() {
          @Override
          public int compare(FieldDoc a, FieldDoc  b) {
            int cmp = Double.compare(((Double) a.fields[0]).doubleValue(), ((Double) b.fields[0]).doubleValue());
            if (cmp != 0) {
              return cmp;
            }
            // tie break by smaller docID:
            return a.doc - b.doc;
          }
        });

      int topN = TestUtil.nextInt(random(), 1, lats.length);

      if (VERBOSE) {
        System.out.println("\nhits for pointLat=" + pointLat + " pointLon=" + pointLon);
      }

      // Also test with MatchAllDocsQuery, sorting by distance:
      TopFieldDocs fieldDocs = s.search(new MatchAllDocsQuery(), topN, new Sort(LatLonDocValuesField.newDistanceSort("point", pointLat, pointLon)));

      ScoreDoc[] hits = LatLonPointPrototypeQueries.nearest(s, "point", pointLat, pointLon, topN).scoreDocs;
      for(int i=0;i<topN;i++) {
        FieldDoc expected = expectedHits[i];
        FieldDoc expected2 = (FieldDoc) fieldDocs.scoreDocs[i];
        FieldDoc actual = (FieldDoc) hits[i];
        Document actualDoc = r.document(actual.doc);

        if (VERBOSE) {
          System.out.println("hit " + i);
          System.out.println("  expected id=" + expected.doc+ " lat=" + lats[expected.doc] + " lon=" + lons[expected.doc]
              + " distance=" + ((Double) expected.fields[0]).doubleValue() + " meters");
          System.out.println("  actual id=" + actualDoc.getField("id") + " distance=" + actual.fields[0] + " meters");
        }

        assertEquals(expected.doc, actual.doc);
        assertEquals(((Double) expected.fields[0]).doubleValue(), ((Double) actual.fields[0]).doubleValue(), 0.0);

        assertEquals(expected2.doc, actual.doc);
        assertEquals(((Double) expected2.fields[0]).doubleValue(), ((Double) actual.fields[0]).doubleValue(), 0.0);
      }
    }

    r.close();
    w.close();
    dir.close();
  }

