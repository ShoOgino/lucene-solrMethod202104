  // TODO: in the future, if there is demand for real usage, we can "graduate" this test-only query
  // factory as IntPoint.newMultiSetQuery or
  // something (and same for other XXXPoint classes):
  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn)
      throws IOException {
    if (valuesIn.length % numDims != 0) {
      throw new IllegalArgumentException(
          "incongruent number of values: valuesIn.length="
              + valuesIn.length
              + " but numDims="
              + numDims);
    }

    // Pack all values:
    byte[][] packedValues = new byte[valuesIn.length / numDims][];
    for (int i = 0; i < packedValues.length; i++) {
      byte[] packedValue = new byte[numDims * Integer.BYTES];
      packedValues[i] = packedValue;
      for (int dim = 0; dim < numDims; dim++) {
        IntPoint.encodeDimension(valuesIn[i * numDims + dim], packedValue, dim * Integer.BYTES);
      }
    }

    // Sort:
    Arrays.sort(
        packedValues,
        new Comparator<byte[]>() {
          @Override
          public int compare(byte[] a, byte[] b) {
            return Arrays.compareUnsigned(a, 0, a.length, b, 0, a.length);
          }
        });

    final BytesRef value = new BytesRef();
    value.length = numDims * Integer.BYTES;

    return new PointInSetQuery(
        field,
        numDims,
        Integer.BYTES,
        new PointInSetQuery.Stream() {
          int upto;

          @Override
          public BytesRef next() {
            if (upto >= packedValues.length) {
              return null;
            }
            value.bytes = packedValues[upto];
            upto++;
            return value;
          }
        }) {
      @Override
      protected String toString(byte[] value) {
        assert value.length == numDims * Integer.BYTES;
        StringBuilder sb = new StringBuilder();
        for (int dim = 0; dim < numDims; dim++) {
          if (dim > 0) {
            sb.append(',');
          }
          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim * Integer.BYTES)));
        }

        return sb.toString();
      }
    };
  }

