  /**
   * Constructs a new <code>RunAutomaton</code> from a deterministic <code>Automaton</code>.
   *
   * @param a an automaton
   * @param maxDeterminizedStates maximum number of states that can be created while determinizing a
   */
  protected RunAutomaton(Automaton a, int alphabetSize, int maxDeterminizedStates) {
    this.alphabetSize = alphabetSize;
    a = Operations.determinize(a, maxDeterminizedStates);
    this.automaton = a;
    points = a.getStartPoints();
    size = Math.max(1, a.getNumStates());
    accept = new FixedBitSet(size);
    transitions = new int[size * points.length];
    Arrays.fill(transitions, -1);
    Transition transition = new Transition();
    for (int n = 0; n < size; n++) {
      if (a.isAccept(n)) {
        accept.set(n);
      }
      transition.source = n;
      transition.transitionUpto = -1;
      for (int c = 0; c < points.length; c++) {
        int dest = a.next(transition, points[c]);
        assert dest == -1 || dest < size;
        transitions[n * points.length + c] = dest;
      }
    }

    /*
     * Set alphabet table for optimal run performance.
     */
    classmap = new int[Math.min(256, alphabetSize)];
    int i = 0;
    for (int j = 0; j < classmap.length; j++) {
      if (i + 1 < points.length && j == points[i + 1]) {
        i++;
      }
      classmap[j] = i;
    }
  }

