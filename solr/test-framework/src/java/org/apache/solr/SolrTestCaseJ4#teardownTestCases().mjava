  @AfterClass
  public static void teardownTestCases() throws Exception {
    TestInjection.notifyPauseForeverDone();
    try {
      try {
        deleteCore();
      } catch (Exception e) {
        log.error("Error deleting SolrCore.");
      }
      
      if (null != testExecutor) {
        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);
        testExecutor = null;
      }

      resetExceptionIgnores();

      if (suiteFailureMarker.wasSuccessful()) {
        // if the tests passed, make sure everything was closed / released
        String orr = clearObjectTrackerAndCheckEmpty(60, false);
        assertNull(orr, orr);
      } else {
        ObjectReleaseTracker.tryClose();
      }
      resetFactory();
      coreName = DEFAULT_TEST_CORENAME;
    } finally {
      ObjectReleaseTracker.clear();
      TestInjection.reset();
      initCoreDataDir = null;
      System.clearProperty("solr.v2RealPath");
      System.clearProperty("zookeeper.forceSync");
      System.clearProperty("jetty.testMode");
      System.clearProperty("tests.shardhandler.randomSeed");
      System.clearProperty("enable.update.log");
      System.clearProperty("useCompoundFile");
      System.clearProperty(URL_SCHEME);
      UrlScheme.INSTANCE.setUrlScheme(UrlScheme.HTTP);
      System.clearProperty("solr.cloud.wait-for-updates-with-stale-state-pause");
      System.clearProperty("solr.zkclienttmeout");
      System.clearProperty(ZK_WHITELIST_PROPERTY);
      HttpClientUtil.resetHttpClientBuilder();
      Http2SolrClient.resetSslContextFactory();

      clearNumericTypesProperties();

      // clean up static
      sslConfig = null;
      testSolrHome = null;

      IpTables.unblockAllPorts();

      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);
      savedClassLogLevels.clear();
      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);
    }
  }

