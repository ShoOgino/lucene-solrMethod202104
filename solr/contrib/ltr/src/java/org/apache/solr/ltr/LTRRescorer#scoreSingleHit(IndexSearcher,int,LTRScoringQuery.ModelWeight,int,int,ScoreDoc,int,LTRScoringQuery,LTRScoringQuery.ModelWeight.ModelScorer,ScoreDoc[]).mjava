  protected static void scoreSingleHit(IndexSearcher indexSearcher, int topN, LTRScoringQuery.ModelWeight modelWeight, int docBase, int hitUpto, ScoreDoc hit, int docID, LTRScoringQuery rerankingQuery, LTRScoringQuery.ModelWeight.ModelScorer scorer, ScoreDoc[] reranked) throws IOException {
    final FeatureLogger featureLogger = rerankingQuery.getFeatureLogger();
    // Scorer for a LTRScoringQuery.ModelWeight should never be null since we always have to
    // call score
    // even if no feature scorers match, since a model might use that info to
    // return a
    // non-zero score. Same applies for the case of advancing a LTRScoringQuery.ModelWeight.ModelScorer
    // past the target
    // doc since the model algorithm still needs to compute a potentially
    // non-zero score from blank features.
    assert (scorer != null);
    final int targetDoc = docID - docBase;
    scorer.docID();
    scorer.iterator().advance(targetDoc);

    scorer.getDocInfo().setOriginalDocScore(hit.score);
    hit.score = scorer.score();
    if (hitUpto < topN) {
      reranked[hitUpto] = hit;
      // if the heap is not full, maybe I want to log the features for this
      // document
      if (featureLogger != null && indexSearcher instanceof SolrIndexSearcher) {
        featureLogger.log(hit.doc, rerankingQuery, (SolrIndexSearcher) indexSearcher,
            modelWeight.getFeaturesInfo());
      }
    } else if (hitUpto == topN) {
      // collected topN document, I create the heap
      heapify(reranked, topN);
    }
    if (hitUpto >= topN) {
      // once that heap is ready, if the score of this document is lower that
      // the minimum
      // i don't want to log the feature. Otherwise I replace it with the
      // minimum and fix the
      // heap.
      if (hit.score > reranked[0].score) {
        reranked[0] = hit;
        heapAdjust(reranked, topN, 0);
        if (featureLogger != null && indexSearcher instanceof SolrIndexSearcher) {
          featureLogger.log(hit.doc, rerankingQuery, (SolrIndexSearcher) indexSearcher,
              modelWeight.getFeaturesInfo());
        }
      }
    }
  }

