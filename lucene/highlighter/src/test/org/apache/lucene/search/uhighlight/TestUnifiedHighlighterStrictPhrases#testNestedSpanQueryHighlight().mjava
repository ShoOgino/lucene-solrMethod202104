  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.
  public void testNestedSpanQueryHighlight() throws Exception {
    // For a long time, the highlighters used to assume all query terms within the SpanQuery were
    // valid at the Spans'
    //   position range.  This would highlight occurrences of terms that were actually not matched
    // by the query.
    //   But now using the SpanCollector API we don't make this kind of mistake.
    final String FIELD_NAME = "body";
    final String indexedText = "x y z x z x a";
    indexWriter.addDocument(newDoc(indexedText));
    initReaderSearcherHighlighter();
    TopDocs topDocs =
        new TopDocs(
            new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, 1f)});

    String expected = "<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>";
    Query q =
        new SpanNearQuery(
            new SpanQuery[] {
              new SpanNearQuery(
                  new SpanQuery[] {
                    new SpanTermQuery(new Term(FIELD_NAME, "x")),
                    new SpanTermQuery(new Term(FIELD_NAME, "y")),
                    new SpanTermQuery(new Term(FIELD_NAME, "z"))
                  },
                  0,
                  true),
              new SpanTermQuery(new Term(FIELD_NAME, "a"))
            },
            10,
            false);
    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];
    if (VERBOSE) System.out.println("Expected: \"" + expected + "\n" + "Observed: \"" + observed);
    assertEquals("Nested SpanNear query not properly highlighted.", expected, observed);

    expected = "x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>";
    q =
        new SpanNearQuery(
            new SpanQuery[] {
              new SpanOrQuery(
                  new SpanNearQuery(
                      new SpanQuery[] {
                        new SpanTermQuery(new Term(FIELD_NAME, "x")),
                        new SpanTermQuery(new Term(FIELD_NAME, "z"))
                      },
                      0,
                      true),
                  new SpanNearQuery(
                      new SpanQuery[] {
                        new SpanTermQuery(new Term(FIELD_NAME, "y")),
                        new SpanTermQuery(new Term(FIELD_NAME, "z"))
                      },
                      0,
                      true)),
              new SpanOrQuery(
                  new SpanTermQuery(new Term(FIELD_NAME, "a")),
                  new SpanTermQuery(new Term(FIELD_NAME, "b")))
            },
            10,
            false);
    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];
    if (VERBOSE) System.out.println("Expected: \"" + expected + "\n" + "Observed: \"" + observed);
    assertEquals(
        "Nested SpanNear query within SpanOr not properly highlighted.", expected, observed);

    expected = "x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>";
    q =
        new SpanNearQuery(
            new SpanQuery[] {
              new SpanNearQuery(
                  new SpanQuery[] {
                    new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, "*"))),
                    new SpanTermQuery(new Term(FIELD_NAME, "z"))
                  },
                  0,
                  true),
              new SpanTermQuery(new Term(FIELD_NAME, "a"))
            },
            10,
            false);
    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];
    if (VERBOSE) System.out.println("Expected: \"" + expected + "\n" + "Observed: \"" + observed);
    assertEquals(
        "Nested SpanNear query with wildcard not properly highlighted.", expected, observed);

    expected = "<b>x</b> <b>y</b> z x z x <b>a</b>";
    q =
        new SpanNearQuery(
            new SpanQuery[] {
              new SpanOrQuery(
                  new SpanNearQuery(
                      new SpanQuery[] {
                        new SpanTermQuery(new Term(FIELD_NAME, "x")),
                        new SpanTermQuery(new Term(FIELD_NAME, "y"))
                      },
                      0,
                      true),
                  new SpanNearQuery(
                      new SpanQuery[] { // No hit span query
                        new SpanTermQuery(new Term(FIELD_NAME, "z")),
                        new SpanTermQuery(new Term(FIELD_NAME, "a"))
                      },
                      0,
                      true)),
              new SpanTermQuery(new Term(FIELD_NAME, "a"))
            },
            10,
            false);
    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];
    if (VERBOSE) System.out.println("Expected: \"" + expected + "\n" + "Observed: \"" + observed);
    assertEquals(
        "Nested SpanNear query within SpanOr not properly highlighted.", expected, observed);
  }

