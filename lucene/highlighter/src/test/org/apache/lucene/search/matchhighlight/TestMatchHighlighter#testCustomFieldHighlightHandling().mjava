  @Test
  public void testCustomFieldHighlightHandling() throws IOException {
    // Match highlighter is a showcase of individual components in this package, suitable
    // to create any kind of field-display designs.
    //
    // In this example we will build a custom field highlighting handler that
    // highlights matches over a multivalued field, shows that field's values if it received
    // no matches and limits the number of values displayed to at most 2 (with an appropriate
    // message).
    new IndexBuilder(this::toField)
        // Just one document, one field, four values.
        .doc(FLD_TEXT1, "foo bar", "bar foo baz", "bar baz foo", "baz baz baz")
        .build(
            analyzer,
            reader -> {
              IndexSearcher searcher = new IndexSearcher(reader);
              Sort sortOrder = Sort.INDEXORDER;

              // Let's start with the simple predefined highlighter so that the field's value shows
              // and is highlighted when it was part of the hit.
              MatchHighlighter.FieldValueHighlighter highlighted =
                  FieldValueHighlighters.highlighted(
                      80 * 3, 2, new PassageFormatter("...", ">", "<"), FLD_TEXT1::equals);
              MatchHighlighter highlighter =
                  new MatchHighlighter(searcher, analyzer)
                      .appendFieldHighlighter(highlighted)
                      .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());

              Query query = new TermQuery(new Term(FLD_TEXT1, "foo"));
              TopDocs topDocs = searcher.search(query, 10, sortOrder);

              // Note the highlighter is configured with at most 2 snippets so the match on the
              // third value ("bar baz foo") is omitted. Ellipsis isn't inserted too because
              // values are displayed in full.
              assertHighlights(
                  toDocList(highlighter.highlight(topDocs, query)),
                  "0. text1: >foo< bar, bar >foo< baz");

              // So the above works fine if the field received a match but omits it otherwise. We
              // can
              // force the display of this field by chaining with verbatim value highlighter:
              highlighter =
                  new MatchHighlighter(searcher, analyzer)
                      .appendFieldHighlighter(
                          highlighted.or(FieldValueHighlighters.verbatimValue(FLD_TEXT1)))
                      .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());

              assertHighlights(
                  toDocList(highlighter.highlight(topDocs, new MatchAllDocsQuery())),
                  "0. text1: foo bar, bar foo baz, bar baz foo, baz baz baz");

              // But this is not exactly what we'd like because we want to limit the display of
              // values to the first two.
              // Let's just write a custom field highlighter handler that does it.
              class AtMostNValuesHighlighter implements MatchHighlighter.FieldValueHighlighter {
                private final String field;
                private final int limit;

                AtMostNValuesHighlighter(String field, int limit) {
                  this.field = field;
                  this.limit = limit;
                }

                @Override
                public boolean isApplicable(String field, boolean hasMatches) {
                  return Objects.equals(field, this.field);
                }

                @Override
                public List<String> format(
                    String field,
                    String[] values,
                    String contiguousValue,
                    List<OffsetRange> valueRanges,
                    List<MatchHighlighter.QueryOffsetRange> matchOffsets) {
                  if (values.length <= limit) {
                    return Arrays.asList(values);
                  } else {
                    List<String> collected =
                        Stream.of(values).limit(limit).collect(Collectors.toList());
                    int remaining = values.length - collected.size();
                    collected.add(String.format(Locale.ROOT, "[%d omitted]", remaining));
                    return collected;
                  }
                }

                @Override
                public Collection<String> alwaysFetchedFields() {
                  return Collections.singleton(field);
                }
              }

              // We can now chain it as usual and contemplate the result.
              highlighter =
                  new MatchHighlighter(searcher, analyzer)
                      .appendFieldHighlighter(
                          highlighted.or(new AtMostNValuesHighlighter(FLD_TEXT1, 2)))
                      .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());

              assertHighlights(
                  toDocList(highlighter.highlight(topDocs, query)),
                  "0. text1: >foo< bar, bar >foo< baz");
              assertHighlights(
                  toDocList(highlighter.highlight(topDocs, new MatchAllDocsQuery())),
                  "0. text1: foo bar, bar foo baz, [2 omitted]");
            });
  }

