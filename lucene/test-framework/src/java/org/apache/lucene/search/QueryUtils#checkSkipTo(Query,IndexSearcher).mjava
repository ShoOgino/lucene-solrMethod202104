  /**
   * alternate scorer advance(),advance(),next(),next(),advance(),advance(), etc and ensure a
   * hitcollector receives same docs and scores
   */
  public static void checkSkipTo(final Query q, final IndexSearcher s) throws IOException {
    // System.out.println("Checking "+q);
    final List<LeafReaderContext> readerContextArray = s.getTopReaderContext().leaves();

    final int skip_op = 0;
    final int next_op = 1;
    final int orders[][] = {
      {next_op},
      {skip_op},
      {skip_op, next_op},
      {next_op, skip_op},
      {skip_op, skip_op, next_op, next_op},
      {next_op, next_op, skip_op, skip_op},
      {skip_op, skip_op, skip_op, next_op, next_op},
    };
    for (int k = 0; k < orders.length; k++) {

      final int order[] = orders[k];
      // System.out.print("Order:");for (int i = 0; i < order.length; i++)
      // System.out.print(order[i]==skip_op ? " skip()":" next()");
      // System.out.println();
      final int opidx[] = {0};
      final int lastDoc[] = {-1};

      // FUTURE: ensure scorer.doc()==-1

      final float maxDiff = 1e-5f;
      final LeafReader lastReader[] = {null};

      s.search(
          q,
          new SimpleCollector() {
            private Scorable sc;
            private Scorer scorer;
            private DocIdSetIterator iterator;
            private int leafPtr;

            @Override
            public void setScorer(Scorable scorer) {
              this.sc = scorer;
            }

            @Override
            public void collect(int doc) throws IOException {
              float score = sc.score();
              lastDoc[0] = doc;
              try {
                if (scorer == null) {
                  Query rewritten = s.rewrite(q);
                  Weight w = s.createWeight(rewritten, ScoreMode.COMPLETE, 1);
                  LeafReaderContext context = readerContextArray.get(leafPtr);
                  scorer = w.scorer(context);
                  iterator = scorer.iterator();
                }

                int op = order[(opidx[0]++) % order.length];
                // System.out.println(op==skip_op ?
                // "skip("+(sdoc[0]+1)+")":"next()");
                boolean more =
                    op == skip_op
                        ? iterator.advance(scorer.docID() + 1) != DocIdSetIterator.NO_MORE_DOCS
                        : iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;
                int scorerDoc = scorer.docID();
                float scorerScore = scorer.score();
                float scorerScore2 = scorer.score();
                float scoreDiff = Math.abs(score - scorerScore);
                float scorerDiff = Math.abs(scorerScore2 - scorerScore);

                boolean success = false;
                try {
                  assertTrue(more);
                  assertEquals("scorerDoc=" + scorerDoc + ",doc=" + doc, scorerDoc, doc);
                  assertTrue(
                      "score=" + score + ", scorerScore=" + scorerScore, scoreDiff <= maxDiff);
                  assertTrue(
                      "scorerScorer=" + scorerScore + ", scorerScore2=" + scorerScore2,
                      scorerDiff <= maxDiff);
                  success = true;
                } finally {
                  if (!success) {
                    if (LuceneTestCase.VERBOSE) {
                      StringBuilder sbord = new StringBuilder();
                      for (int i = 0; i < order.length; i++) {
                        sbord.append(order[i] == skip_op ? " skip()" : " next()");
                      }
                      System.out.println(
                          "ERROR matching docs:"
                              + "\n\t"
                              + (doc != scorerDoc ? "--> " : "")
                              + "doc="
                              + doc
                              + ", scorerDoc="
                              + scorerDoc
                              + "\n\t"
                              + (!more ? "--> " : "")
                              + "tscorer.more="
                              + more
                              + "\n\t"
                              + (scoreDiff > maxDiff ? "--> " : "")
                              + "scorerScore="
                              + scorerScore
                              + " scoreDiff="
                              + scoreDiff
                              + " maxDiff="
                              + maxDiff
                              + "\n\t"
                              + (scorerDiff > maxDiff ? "--> " : "")
                              + "scorerScore2="
                              + scorerScore2
                              + " scorerDiff="
                              + scorerDiff
                              + "\n\thitCollector.doc="
                              + doc
                              + " score="
                              + score
                              + "\n\t Scorer="
                              + scorer
                              + "\n\t Query="
                              + q
                              + "  "
                              + q.getClass().getName()
                              + "\n\t Searcher="
                              + s
                              + "\n\t Order="
                              + sbord
                              + "\n\t Op="
                              + (op == skip_op ? " skip()" : " next()"));
                    }
                  }
                }
              } catch (IOException e) {
                throw new RuntimeException(e);
              }
            }

            @Override
            public ScoreMode scoreMode() {
              return ScoreMode.COMPLETE;
            }

            @Override
            protected void doSetNextReader(LeafReaderContext context) throws IOException {
              // confirm that skipping beyond the last doc, on the
              // previous reader, hits NO_MORE_DOCS
              if (lastReader[0] != null) {
                final LeafReader previousReader = lastReader[0];
                IndexSearcher indexSearcher = LuceneTestCase.newSearcher(previousReader, false);
                indexSearcher.setSimilarity(s.getSimilarity());
                Query rewritten = indexSearcher.rewrite(q);
                Weight w = indexSearcher.createWeight(rewritten, ScoreMode.COMPLETE, 1);
                LeafReaderContext ctx = (LeafReaderContext) indexSearcher.getTopReaderContext();
                Scorer scorer = w.scorer(ctx);
                if (scorer != null) {
                  DocIdSetIterator iterator = scorer.iterator();
                  boolean more = false;
                  final Bits liveDocs = context.reader().getLiveDocs();
                  for (int d = iterator.advance(lastDoc[0] + 1);
                      d != DocIdSetIterator.NO_MORE_DOCS;
                      d = iterator.nextDoc()) {
                    if (liveDocs == null || liveDocs.get(d)) {
                      more = true;
                      break;
                    }
                  }
                  Assert.assertFalse(
                      "query's last doc was "
                          + lastDoc[0]
                          + " but advance("
                          + (lastDoc[0] + 1)
                          + ") got to "
                          + scorer.docID(),
                      more);
                }
                leafPtr++;
              }
              lastReader[0] = context.reader();
              assert readerContextArray.get(leafPtr).reader() == context.reader();
              this.scorer = null;
              lastDoc[0] = -1;
            }
          });

      if (lastReader[0] != null) {
        // confirm that skipping beyond the last doc, on the
        // previous reader, hits NO_MORE_DOCS
        final LeafReader previousReader = lastReader[0];
        IndexSearcher indexSearcher = LuceneTestCase.newSearcher(previousReader, false);
        indexSearcher.setSimilarity(s.getSimilarity());
        Query rewritten = indexSearcher.rewrite(q);
        Weight w = indexSearcher.createWeight(rewritten, ScoreMode.COMPLETE, 1);
        LeafReaderContext ctx = previousReader.getContext();
        Scorer scorer = w.scorer(ctx);
        if (scorer != null) {
          DocIdSetIterator iterator = scorer.iterator();
          boolean more = false;
          final Bits liveDocs = lastReader[0].getLiveDocs();
          for (int d = iterator.advance(lastDoc[0] + 1);
              d != DocIdSetIterator.NO_MORE_DOCS;
              d = iterator.nextDoc()) {
            if (liveDocs == null || liveDocs.get(d)) {
              more = true;
              break;
            }
          }
          assertFalse(
              "query's last doc was "
                  + lastDoc[0]
                  + " but advance("
                  + (lastDoc[0] + 1)
                  + ") got to "
                  + scorer.docID(),
              more);
        }
      }
    }
  }

