  @Override
  public FieldComparator<?> getComparator(int numHits, int sortPos) {
    switch (type) {
      case INT:
        return new IntComparator(numHits, getField(), (Integer) missingValue, reverse, sortPos) {
          @Override
          public LeafFieldComparator getLeafComparator(LeafReaderContext context)
              throws IOException {
            return new IntLeafComparator(context) {
              @Override
              protected NumericDocValues getNumericDocValues(
                  LeafReaderContext context, String field) throws IOException {
                return SortedNumericSelector.wrap(
                    DocValues.getSortedNumeric(context.reader(), field), selector, type);
              }
            };
          }
        };
      case FLOAT:
        return new FloatComparator(numHits, getField(), (Float) missingValue, reverse, sortPos) {
          @Override
          public LeafFieldComparator getLeafComparator(LeafReaderContext context)
              throws IOException {
            return new FloatLeafComparator(context) {
              @Override
              protected NumericDocValues getNumericDocValues(
                  LeafReaderContext context, String field) throws IOException {
                return SortedNumericSelector.wrap(
                    DocValues.getSortedNumeric(context.reader(), field), selector, type);
              }
            };
          }
        };
      case LONG:
        return new LongComparator(numHits, getField(), (Long) missingValue, reverse, sortPos) {
          @Override
          public LeafFieldComparator getLeafComparator(LeafReaderContext context)
              throws IOException {
            return new LongLeafComparator(context) {
              @Override
              protected NumericDocValues getNumericDocValues(
                  LeafReaderContext context, String field) throws IOException {
                return SortedNumericSelector.wrap(
                    DocValues.getSortedNumeric(context.reader(), field), selector, type);
              }
            };
          }
        };
      case DOUBLE:
        return new DoubleComparator(numHits, getField(), (Double) missingValue, reverse, sortPos) {
          @Override
          public LeafFieldComparator getLeafComparator(LeafReaderContext context)
              throws IOException {
            return new DoubleLeafComparator(context) {
              @Override
              protected NumericDocValues getNumericDocValues(
                  LeafReaderContext context, String field) throws IOException {
                return SortedNumericSelector.wrap(
                    DocValues.getSortedNumeric(context.reader(), field), selector, type);
              }
            };
          }
        };
      default:
        throw new AssertionError();
    }
  }

