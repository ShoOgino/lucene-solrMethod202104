  private void testComparePolygons(double limitDistance) {
    final PlanetModel planetModel = randomPlanetModel();
    //Create polygon points using a reference point and a maximum distance to the point
    final GeoPoint referencePoint;
    if (random().nextBoolean()) {
     referencePoint = getBiasedPoint(planetModel);
    } else {
      referencePoint = randomGeoPoint(planetModel);
    }
    final int n = random().nextInt(4) + 4;

    List<GeoPoint> orderedPoints = null;
    GeoPolygon polygon = null;
    GeoPolygon largePolygon = null;
    do {
      final List<GeoPoint> points = new ArrayList<>(n);
      double maxDistance = random().nextDouble() * limitDistance;
      //if distance is too small we can fail
      //building the polygon.
      while (maxDistance < 1e-7) {
        maxDistance = random().nextDouble() * limitDistance;
      }
      for (int i = 0; i < n; i++) {
        while (true) {
          final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;
          final double bearing = random().nextDouble() * 2 * Math.PI;
          final GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);
          if (!contains(p, points)) {
            if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() - 1), points.get(points.size() - 2), p)) {
              continue;
            }
            points.add(p);
            break;
          }
        }
      }
      //order points so we don't get crossing edges
      orderedPoints = orderPoints(points);
      if (random().nextBoolean() && random().nextBoolean()) {
        Collections.reverse(orderedPoints);
      }
      final GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);

      try {
        polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);
      } catch (Exception e) {
        final StringBuilder buffer = new StringBuilder("Polygon failed to build with an exception:\n");
        buffer.append(points.toString() + "\n");
        buffer.append("WKT:" + getWKT(orderedPoints));
        buffer.append(e.toString());
        fail(buffer.toString());
      }
      if (polygon == null) {
        final StringBuilder buffer = new StringBuilder("Polygon failed to build:\n");
        buffer.append(points.toString() + "\n");
        buffer.append("WKT:" + getWKT(orderedPoints));
        fail(buffer.toString());
      }
      try {
        largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));
      } catch (Exception e) {
        final StringBuilder buffer = new StringBuilder("Large polygon failed to build with an exception:\n");
        buffer.append(points.toString() + "\n");
        buffer.append("WKT:" + getWKT(orderedPoints));
        buffer.append(e.toString());
        fail(buffer.toString());
      }
      if (largePolygon == null) {
        StringBuilder buffer = new StringBuilder("Large polygon failed to build:\n");
        buffer.append(points.toString() + "\n");
        buffer.append("WKT:" + getWKT(orderedPoints));
        fail(buffer.toString());
      }
    } while(polygon.getClass().equals(largePolygon.getClass()));
    //Some of these do not work but it seems it s from the way the point is created
    //GeoPoint centerOfMass = getCenterOfMass(planetModel, orderedPoints);
    //checkPoint(polygon, largePolygon, centerOfMass, orderedPoints);
    //checkPoint(polygon, largePolygon, new GeoPoint(-centerOfMass.x, -centerOfMass.y, -centerOfMass.z), orderedPoints);
    //checkPoint(polygon, largePolygon, new GeoPoint(centerOfMass.x, -centerOfMass.y, -centerOfMass.z), orderedPoints);
    //checkPoint(polygon, largePolygon, new GeoPoint(centerOfMass.x, centerOfMass.y, -centerOfMass.z), orderedPoints);
    //checkPoint(polygon, largePolygon, new GeoPoint(-centerOfMass.x, -centerOfMass.y, centerOfMass.z), orderedPoints);
    //checkPoint(polygon, largePolygon, new GeoPoint(-centerOfMass.x, centerOfMass.y, -centerOfMass.z), orderedPoints);
    //checkPoint(polygon, largePolygon, new GeoPoint(centerOfMass.x, -centerOfMass.y, centerOfMass.z), orderedPoints);
    for(int i = 0; i < 100000; i++) {
      final GeoPoint point;
      if (random().nextBoolean()) {
        point = getBiasedPoint(planetModel);
      } else {
        point = randomGeoPoint(planetModel);
      }
      checkPoint(polygon, largePolygon, point, orderedPoints);
    }
  }

