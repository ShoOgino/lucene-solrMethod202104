  private void doSearch() {
    Query query;
    if (termQueryCB.isSelected()) {
      // term query
      if (StringUtils.isNullOrEmpty(queryStringTA.getText())) {
        throw new LukeException("Query is not set.");
      }
      String[] tmp = queryStringTA.getText().split(":");
      if (tmp.length < 2) {
        throw new LukeException(
            String.format(Locale.ENGLISH, "Invalid query [ %s ]", queryStringTA.getText()));
      }
      query = new TermQuery(new Term(tmp[0].trim(), tmp[1].trim()));
    } else {
      query = parse(false);
    }
    SimilarityConfig simConfig =
        operatorRegistry
            .get(SimilarityTabOperator.class)
            .map(SimilarityTabOperator::getConfig)
            .orElse(new SimilarityConfig.Builder().build());
    Sort sort =
        operatorRegistry.get(SortTabOperator.class).map(SortTabOperator::getSort).orElse(null);
    Set<String> fieldsToLoad =
        operatorRegistry
            .get(FieldValuesTabOperator.class)
            .map(FieldValuesTabOperator::getFieldsToLoad)
            .orElse(Collections.emptySet());
    SearchResults results =
        searchModel.search(
            query, simConfig, sort, fieldsToLoad, DEFAULT_PAGE_SIZE, exactHitsCntCB.isSelected());

    TableUtils.setupTable(
        resultsTable,
        ListSelectionModel.SINGLE_SELECTION,
        new SearchResultsTableModel(),
        null,
        SearchResultsTableModel.Column.DOCID.getColumnWidth(),
        SearchResultsTableModel.Column.SCORE.getColumnWidth());
    populateResults(results);

    messageBroker.clearStatusMessage();
  }

