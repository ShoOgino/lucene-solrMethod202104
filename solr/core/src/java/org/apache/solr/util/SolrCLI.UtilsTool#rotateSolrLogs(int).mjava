    /**
     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:
     * <pre>
     *   solr.log.9 (and higher) are deleted
     *   solr.log.8 -&gt; solr.log.9
     *   solr.log.7 -&gt; solr.log.8
     *   ...
     *   solr.log   -&gt; solr.log.1
     * </pre>
     * @param generations number of generations to keep. Should agree with setting in log4j2.xml
     * @return 0 if success
     * @throws Exception if problems
     */
    public int rotateSolrLogs(int generations) throws Exception {
      prepareLogsPath();
      if (logsPath.toFile().exists() && logsPath.resolve("solr.log").toFile().exists()) {
        out("Rotating solr logs, keeping a max of "+generations+" generations.");
        try (Stream<Path> files = Files.find(logsPath, 1,
            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith("solr.log."))
            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))
                .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {
          files.forEach(p -> {
            try {
              int number = Integer.parseInt(p.getFileName().toString().substring(9));
              if (number >= generations) {
                Files.delete(p);
              } else {
                Path renamed = p.getParent().resolve("solr.log." + (number + 1));
                Files.move(p, renamed);
              }
            } catch (IOException e) {
              out("Problem during rotation of log files: " + e.getMessage());
            }
          });
        } catch (NumberFormatException nfe) {
          throw new Exception("Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.", nfe);
        }
        Files.move(logsPath.resolve("solr.log"), logsPath.resolve("solr.log.1"));
      }

      return 0;
    }

