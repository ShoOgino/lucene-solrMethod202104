  /**
   * This utility method takes a previously caught (non-null) {@code Throwable} and rethrows either
   * the original argument if it was a subclass of the {@code IOException} or an {@code
   * RuntimeException} with the cause set to the argument.
   *
   * <p>This method <strong>never returns any value</strong>, even though it declares a return value
   * of type {@link Error}. The return value declaration is very useful to let the compiler know
   * that the code path following the invocation of this method is unreachable. So in most cases the
   * invocation of this method will be guarded by an {@code if} and used together with a {@code
   * throw} statement, as in:
   *
   * <pre>{@code
   * if (t != null) throw IOUtils.rethrowAlways(t)
   * }</pre>
   *
   * @param th The throwable to rethrow, <strong>must not be null</strong>.
   * @return This method always results in an exception, it never returns any value. See method
   *     documentation for details and usage example.
   * @throws IOException if the argument was an instance of IOException
   * @throws RuntimeException with the {@link RuntimeException#getCause()} set to the argument, if
   *     it was not an instance of IOException.
   */
  public static Error rethrowAlways(Throwable th) throws IOException, RuntimeException {
    if (th == null) {
      throw new AssertionError("rethrow argument must not be null.");
    }

    if (th instanceof IOException) {
      throw (IOException) th;
    }

    if (th instanceof RuntimeException) {
      throw (RuntimeException) th;
    }

    if (th instanceof Error) {
      throw (Error) th;
    }

    throw new RuntimeException(th);
  }

