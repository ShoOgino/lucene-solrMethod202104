  @Test
  public void testQueryMetricTemplate() throws Exception {
    Document config =
        DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(SolrTestCaseJ4.getFile("conf/test-config-with-templates.xml"));
    NodeList jqTemplates =
        (NodeList) (xpathFactory.newXPath()).evaluate("/config/jq-templates/template", config, XPathConstants.NODESET);
    assertNotNull(jqTemplates);
    assertTrue(jqTemplates.getLength() > 0);
    MetricsQueryTemplate coreQueryTemplate = MetricsConfiguration.loadJqTemplates(jqTemplates).get("core-query");
    assertNotNull(coreQueryTemplate);

    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode parsedMetrics = objectMapper.readTree(SolrTestCaseJ4.getFile("query-metrics.json"));
    final String[] queryMetrics = new String[]{
        "$jq:core-query(1minRate, select(.key | endswith(\".distrib.requestTimes\")), 1minRate)",
        "$jq:core-query(p75_ms, select(.key | endswith(\".distrib.requestTimes\")), p75_ms)",
        "$jq:core-query(mean_rate, select(.key | endswith(\".distrib.requestTimes\")), meanRate)",
        "$jq:core-query(local_5minRate, select(.key | endswith(\".local.requestTimes\")), 5minRate)",
        "$jq:core-query(local_median_ms, select(.key | endswith(\".local.requestTimes\")), median_ms)",
        "$jq:core-query(local_p95_ms, select(.key | endswith(\".local.requestTimes\")), p95_ms)",
        "$jq:core-query(local_count, select(.key | endswith(\".local.requestTimes\")), count, COUNTER)"
    };

    final double[] expectedMetrics = new double[]{
        5.156897804421665,
        1.31788,
        0.0031956674240800156,
        0.030666407244305586,
        0.079579,
        0.105268,
        4712
    };

    for (int m = 0; m < queryMetrics.length; m++) {
      Optional<Matcher> maybe = MetricsQueryTemplate.matches(queryMetrics[m]);
      assertTrue(maybe.isPresent());
      Matcher matcher = maybe.get();
      JsonQuery jsonQuery = JsonQuery.compile(coreQueryTemplate.applyTemplate(matcher));
      List<JsonNode> results = jsonQuery.apply(parsedMetrics);
      assertNotNull(results);
      assertTrue(results.size() == 1);
      double value = results.get(0).get("value").doubleValue();
      assertEquals(expectedMetrics[m], value, 0.0001);
    }
  }

