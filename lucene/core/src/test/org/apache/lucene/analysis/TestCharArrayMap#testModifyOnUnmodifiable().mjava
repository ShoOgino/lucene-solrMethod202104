  // TODO: break this up into simpler test methods vs. "telling a story"
  public void testModifyOnUnmodifiable() {
    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);
    map.put("foo", 1);
    map.put("bar", 2);
    final int size = map.size();
    assertEquals(2, size);
    assertTrue(map.containsKey("foo"));
    assertEquals(1, map.get("foo").intValue());
    assertTrue(map.containsKey("bar"));
    assertEquals(2, map.get("bar").intValue());

    CharArrayMap<Integer> unmodifiableMap = CharArrayMap.unmodifiableMap(map);
    assertEquals("Map size changed due to unmodifiableMap call", size, unmodifiableMap.size());
    String NOT_IN_MAP = "SirGallahad";
    assertFalse("Test String already exists in map", unmodifiableMap.containsKey(NOT_IN_MAP));
    assertNull("Test String already exists in map", unmodifiableMap.get(NOT_IN_MAP));

    expectThrows(
        UnsupportedOperationException.class,
        () -> unmodifiableMap.put(NOT_IN_MAP.toCharArray(), 3));
    assertFalse(
        "Test String has been added to unmodifiable map", unmodifiableMap.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map", unmodifiableMap.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(NOT_IN_MAP, 3));
    assertFalse(
        "Test String has been added to unmodifiable map", unmodifiableMap.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map", unmodifiableMap.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(
        UnsupportedOperationException.class,
        () -> unmodifiableMap.put(new StringBuilder(NOT_IN_MAP), 3));
    assertFalse(
        "Test String has been added to unmodifiable map", unmodifiableMap.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map", unmodifiableMap.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(UnsupportedOperationException.class, unmodifiableMap::clear);
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.entrySet().clear());
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.keySet().clear());
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(
        UnsupportedOperationException.class, () -> unmodifiableMap.put((Object) NOT_IN_MAP, 3));
    assertFalse(
        "Test String has been added to unmodifiable map", unmodifiableMap.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map", unmodifiableMap.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    expectThrows(
        UnsupportedOperationException.class,
        () -> unmodifiableMap.putAll(Collections.singletonMap(NOT_IN_MAP, 3)));
    assertFalse(
        "Test String has been added to unmodifiable map", unmodifiableMap.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map", unmodifiableMap.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed", size, unmodifiableMap.size());

    assertTrue(unmodifiableMap.containsKey("foo"));
    assertEquals(1, unmodifiableMap.get("foo").intValue());
    assertTrue(unmodifiableMap.containsKey("bar"));
    assertEquals(2, unmodifiableMap.get("bar").intValue());
  }

