  /**
   * Determinizes the given automaton.
   *
   * <p>Worst case complexity: exponential in number of states.
   *
   * @param maxDeterminizedStates Maximum number of states created when determinizing. Higher
   *     numbers allow this operation to consume more memory but allow more complex automatons. Use
   *     DEFAULT_MAX_DETERMINIZED_STATES as a decent default if you don't know how many to allow.
   * @throws TooComplexToDeterminizeException if determinizing a creates an automaton with more than
   *     maxDeterminizedStates
   */
  public static Automaton determinize(Automaton a, int maxDeterminizedStates) {
    if (a.isDeterministic()) {
      // Already determinized
      return a;
    }
    if (a.getNumStates() <= 1) {
      // Already determinized
      return a;
    }

    // subset construction
    Automaton.Builder b = new Automaton.Builder();

    // System.out.println("DET:");
    // a.writeDot("/l/la/lucene/core/detin.dot");

    // Same initial values and state will always have the same hashCode
    FrozenIntSet initialset = new FrozenIntSet(new int[] {0}, 683, 0);

    // Create state 0:
    b.createState();

    ArrayDeque<FrozenIntSet> worklist = new ArrayDeque<>();
    Map<IntSet, Integer> newstate = new HashMap<>();

    worklist.add(initialset);

    b.setAccept(0, a.isAccept(0));
    newstate.put(initialset, 0);

    // like Set<Integer,PointTransitions>
    final PointTransitionSet points = new PointTransitionSet();

    // like SortedMap<Integer,Integer>
    final SortedIntSet statesSet = new SortedIntSet(5);

    Transition t = new Transition();

    while (worklist.size() > 0) {
      FrozenIntSet s = worklist.removeFirst();
      // System.out.println("det: pop set=" + s);

      // Collate all outgoing transitions by min/1+max:
      for (int i = 0; i < s.values.length; i++) {
        final int s0 = s.values[i];
        int numTransitions = a.getNumTransitions(s0);
        a.initTransition(s0, t);
        for (int j = 0; j < numTransitions; j++) {
          a.getNextTransition(t);
          points.add(t);
        }
      }

      if (points.count == 0) {
        // No outgoing transitions -- skip it
        continue;
      }

      points.sort();

      int lastPoint = -1;
      int accCount = 0;

      final int r = s.state;

      for (int i = 0; i < points.count; i++) {

        final int point = points.points[i].point;

        if (statesSet.upto > 0) {
          assert lastPoint != -1;

          statesSet.computeHash();

          Integer q = newstate.get(statesSet);
          if (q == null) {
            q = b.createState();
            if (q >= maxDeterminizedStates) {
              throw new TooComplexToDeterminizeException(a, maxDeterminizedStates);
            }
            final FrozenIntSet p = statesSet.freeze(q);
            // System.out.println("  make new state=" + q + " -> " + p + " accCount=" + accCount);
            worklist.add(p);
            b.setAccept(q, accCount > 0);
            newstate.put(p, q);
          } else {
            assert (accCount > 0 ? true : false) == b.isAccept(q)
                : "accCount="
                    + accCount
                    + " vs existing accept="
                    + b.isAccept(q)
                    + " states="
                    + statesSet;
          }

          // System.out.println("  add trans src=" + r + " dest=" + q + " min=" + lastPoint + "
          // max=" + (point-1));

          b.addTransition(r, q, lastPoint, point - 1);
        }

        // process transitions that end on this point
        // (closes an overlapping interval)
        int[] transitions = points.points[i].ends.transitions;
        int limit = points.points[i].ends.next;
        for (int j = 0; j < limit; j += 3) {
          int dest = transitions[j];
          statesSet.decr(dest);
          accCount -= a.isAccept(dest) ? 1 : 0;
        }
        points.points[i].ends.next = 0;

        // process transitions that start on this point
        // (opens a new interval)
        transitions = points.points[i].starts.transitions;
        limit = points.points[i].starts.next;
        for (int j = 0; j < limit; j += 3) {
          int dest = transitions[j];
          statesSet.incr(dest);
          accCount += a.isAccept(dest) ? 1 : 0;
        }
        lastPoint = point;
        points.points[i].starts.next = 0;
      }
      points.reset();
      assert statesSet.upto == 0 : "upto=" + statesSet.upto;
    }

    Automaton result = b.finish();
    assert result.isDeterministic();
    return result;
  }

