  // LUCENE-7570
  public void testDeadlockStalledMerges() throws Exception {
    Directory dir = newDirectory();
    IndexWriterConfig iwc = new IndexWriterConfig();

    // so we merge every 2 segments:
    LogMergePolicy mp = new LogDocMergePolicy();
    mp.setMergeFactor(2);
    iwc.setMergePolicy(mp);
    CountDownLatch done = new CountDownLatch(1);
    ConcurrentMergeScheduler cms =
        new ConcurrentMergeScheduler() {
          @Override
          protected void doMerge(MergeSource mergeSource, MergePolicy.OneMerge merge)
              throws IOException {
            // let merge takes forever, until commit thread is stalled
            try {
              done.await();
            } catch (InterruptedException ie) {
              Thread.currentThread().interrupt();
              throw new RuntimeException(ie);
            }
            super.doMerge(mergeSource, merge);
          }

          @Override
          protected synchronized void doStall() {
            done.countDown();
            super.doStall();
          }

          @Override
          protected void handleMergeException(Throwable exc) {}
        };

    // so we stall once the 2nd merge wants to run:
    cms.setMaxMergesAndThreads(1, 1);
    iwc.setMergeScheduler(cms);

    // so we write a segment every 2 indexed docs:
    iwc.setMaxBufferedDocs(2);

    final IndexWriter w =
        new IndexWriter(dir, iwc) {
          @Override
          protected void mergeSuccess(MergePolicy.OneMerge merge) {
            // tragedy strikes!
            throw new OutOfMemoryError();
          }
        };

    w.addDocument(new Document());
    w.addDocument(new Document());
    // w writes first segment
    w.addDocument(new Document());
    w.addDocument(new Document());
    // w writes second segment, and kicks off merge, that takes forever (done.await)
    w.addDocument(new Document());
    w.addDocument(new Document());
    // w writes third segment
    w.addDocument(new Document());
    w.commit();
    // w writes fourth segment, and commit flushes and kicks off merge that stalls
    w.close();
    dir.close();
  }

