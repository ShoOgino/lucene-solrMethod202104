    /**
     * Get the next cell in the tree without using recursion. descend parameter requests traversal
     * to the child nodes, setting this to false will step to the next sibling. Note: This complies
     * with lexicographical ordering, once you've moved to the next sibling there is no
     * backtracking.
     */
    public PackedQuadCell nextCell(boolean descend) {
      final int level = getLevel();
      final int shift = getShiftForLevel(level);
      // base case: can't go further
      if ((!descend && isEnd(level, shift)) || isEnd(maxLevels, getShiftForLevel(maxLevels))) {
        return null;
      }
      long newTerm;
      final boolean isLeaf = (term & 0x1L) == 0x1L;
      // if descend requested && we're not at the maxLevel
      if ((descend && !isLeaf && (level != maxLevels)) || level == 0) {
        // simple case: increment level bits (next level)
        newTerm = ((term >>> 1) + 0x1L) << 1;
      } else { // we're not descending or we can't descend
        newTerm = term + (0x1L << shift);
        // we're at the last sibling...force descend
        if (((term >>> shift) & 0x3L) == 0x3L) {
          // adjust level for number popping up
          newTerm = ((newTerm >>> 1) - (Long.numberOfTrailingZeros(newTerm >>> shift) >>> 1)) << 1;
        }
      }
      return new PackedQuadCell(newTerm);
    }

