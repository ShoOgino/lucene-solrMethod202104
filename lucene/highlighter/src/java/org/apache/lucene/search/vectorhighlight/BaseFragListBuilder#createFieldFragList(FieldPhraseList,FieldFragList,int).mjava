  protected FieldFragList createFieldFragList(
      FieldPhraseList fieldPhraseList, FieldFragList fieldFragList, int fragCharSize) {
    if (fragCharSize < minFragCharSize)
      throw new IllegalArgumentException(
          "fragCharSize("
              + fragCharSize
              + ") is too small. It must be "
              + minFragCharSize
              + " or higher.");

    List<WeightedPhraseInfo> wpil = new ArrayList<>();
    IteratorQueue<WeightedPhraseInfo> queue =
        new IteratorQueue<>(fieldPhraseList.getPhraseList().iterator());
    WeightedPhraseInfo phraseInfo = null;
    int startOffset = 0;
    while ((phraseInfo = queue.top()) != null) {
      // if the phrase violates the border of previous fragment, discard it and try next phrase
      if (phraseInfo.getStartOffset() < startOffset) {
        queue.removeTop();
        continue;
      }

      wpil.clear();
      final int currentPhraseStartOffset = phraseInfo.getStartOffset();
      int currentPhraseEndOffset = phraseInfo.getEndOffset();
      int spanStart = Math.max(currentPhraseStartOffset - margin, startOffset);
      int spanEnd = Math.max(currentPhraseEndOffset, spanStart + fragCharSize);
      if (acceptPhrase(
          queue.removeTop(), currentPhraseEndOffset - currentPhraseStartOffset, fragCharSize)) {
        wpil.add(phraseInfo);
      }
      while ((phraseInfo = queue.top()) != null) { // pull until we crossed the current spanEnd
        if (phraseInfo.getEndOffset() <= spanEnd) {
          currentPhraseEndOffset = phraseInfo.getEndOffset();
          if (acceptPhrase(
              queue.removeTop(), currentPhraseEndOffset - currentPhraseStartOffset, fragCharSize)) {
            wpil.add(phraseInfo);
          }
        } else {
          break;
        }
      }
      if (wpil.isEmpty()) {
        continue;
      }

      final int matchLen = currentPhraseEndOffset - currentPhraseStartOffset;
      // now recalculate the start and end position to "center" the result
      // matchLen can be > fragCharSize prevent IAOOB here
      final int newMargin = Math.max(0, (fragCharSize - matchLen) / 2);
      spanStart = currentPhraseStartOffset - newMargin;
      if (spanStart < startOffset) {
        spanStart = startOffset;
      }
      // whatever is bigger here we grow this out
      spanEnd = spanStart + Math.max(matchLen, fragCharSize);
      startOffset = spanEnd;
      fieldFragList.add(spanStart, spanEnd, wpil);
    }
    return fieldFragList;
  }

