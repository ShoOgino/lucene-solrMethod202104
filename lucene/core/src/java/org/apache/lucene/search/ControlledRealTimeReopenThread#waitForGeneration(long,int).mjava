  /**
   * Waits for the target generation to become visible in the searcher, up to a maximum specified
   * milli-seconds. If the current searcher is older than the target generation, this method will
   * block until the searcher has been reopened by another thread via {@link
   * ReferenceManager#maybeRefresh}, the given waiting time has elapsed, or until the {@link
   * ReferenceManager} is closed.
   *
   * <p>NOTE: if the waiting time elapses before the requested target generation is available the
   * current {@link SearcherManager} is returned instead.
   *
   * @param targetGen the generation to wait for
   * @param maxMS maximum milliseconds to wait, or -1 to wait indefinitely
   * @return true if the targetGeneration is now available, or false if maxMS wait time was exceeded
   */
  public synchronized boolean waitForGeneration(long targetGen, int maxMS)
      throws InterruptedException {
    if (targetGen > searchingGen) {
      // Notify the reopen thread that the waitingGen has
      // changed, so it may wake up and realize it should
      // not sleep for much or any longer before reopening:
      reopenLock.lock();

      // Need to find waitingGen inside lock as it's used to determine
      // stale time
      waitingGen = Math.max(waitingGen, targetGen);

      try {
        reopenCond.signal();
      } finally {
        reopenLock.unlock();
      }

      long startMS = System.nanoTime() / 1000000;

      while (targetGen > searchingGen) {
        if (maxMS < 0) {
          wait();
        } else {
          long msLeft = (startMS + maxMS) - System.nanoTime() / 1000000;
          if (msLeft <= 0) {
            return false;
          } else {
            wait(msLeft);
          }
        }
      }
    }

    return true;
  }

