  public void testBasics() throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter w =
        new RandomIndexWriter(
            random(),
            dir,
            newIndexWriterConfig().setMergePolicy(newLogMergePolicy(random().nextBoolean())));
    Document doc = new Document();
    LatLonPoint point = new LatLonPoint("foo", 0.0, 0.0);
    doc.add(point);
    LatLonDocValuesField docValue = new LatLonDocValuesField("foo", 0.0, 0.0);
    doc.add(docValue);

    double pivotDistance = 5000; // 5k

    point.setLocationValue(-7, -7);
    docValue.setLocationValue(-7, -7);
    w.addDocument(doc);

    point.setLocationValue(9, 9);
    docValue.setLocationValue(9, 9);
    w.addDocument(doc);

    point.setLocationValue(8, 8);
    docValue.setLocationValue(8, 8);
    w.addDocument(doc);

    point.setLocationValue(4, 4);
    docValue.setLocationValue(4, 4);
    w.addDocument(doc);

    point.setLocationValue(-1, -1);
    docValue.setLocationValue(-1, -1);
    w.addDocument(doc);

    DirectoryReader reader = w.getReader();
    IndexSearcher searcher = newSearcher(reader);

    Query q = LatLonPoint.newDistanceFeatureQuery("foo", 3, 10, 10, pivotDistance);
    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, 1);
    searcher.search(q, collector);
    TopDocs topHits = collector.topDocs();
    assertEquals(2, topHits.scoreDocs.length);

    double distance1 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(9)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(9)),
            10,
            10);
    double distance2 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(8)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(8)),
            10,
            10);

    CheckHits.checkEqual(
        q,
        new ScoreDoc[] {
          new ScoreDoc(1, (float) (3f * (pivotDistance / (pivotDistance + distance1)))),
          new ScoreDoc(2, (float) (3f * (pivotDistance / (pivotDistance + distance2))))
        },
        topHits.scoreDocs);

    distance1 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(9)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(9)),
            9,
            9);
    distance2 =
        SloppyMath.haversinMeters(
            GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(8)),
            GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(8)),
            9,
            9);

    q = LatLonPoint.newDistanceFeatureQuery("foo", 3, 9, 9, pivotDistance);
    collector = TopScoreDocCollector.create(2, null, 1);
    searcher.search(q, collector);
    topHits = collector.topDocs();
    assertEquals(2, topHits.scoreDocs.length);
    CheckHits.checkExplanations(q, "", searcher);

    CheckHits.checkEqual(
        q,
        new ScoreDoc[] {
          new ScoreDoc(1, (float) (3f * (pivotDistance / (pivotDistance + distance1)))),
          new ScoreDoc(2, (float) (3f * (pivotDistance / (pivotDistance + distance2))))
        },
        topHits.scoreDocs);

    reader.close();
    w.close();
    dir.close();
  }

