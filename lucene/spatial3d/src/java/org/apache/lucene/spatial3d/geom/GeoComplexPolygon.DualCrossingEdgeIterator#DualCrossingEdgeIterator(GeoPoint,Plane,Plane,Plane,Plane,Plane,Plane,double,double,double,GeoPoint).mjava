    public DualCrossingEdgeIterator(
        final GeoPoint testPoint,
        final Plane testPointPlane,
        final Plane testPointAbovePlane,
        final Plane testPointBelowPlane,
        final Plane travelPlane,
        final Plane travelAbovePlane,
        final Plane travelBelowPlane,
        final double thePointX,
        final double thePointY,
        final double thePointZ,
        final GeoPoint intersectionPoint) {
      this.testPoint = testPoint;
      this.testPointPlane = testPointPlane;
      this.testPointAbovePlane = testPointAbovePlane;
      this.testPointBelowPlane = testPointBelowPlane;
      this.travelPlane = travelPlane;
      this.travelAbovePlane = travelAbovePlane;
      this.travelBelowPlane = travelBelowPlane;
      this.thePointX = thePointX;
      this.thePointY = thePointY;
      this.thePointZ = thePointZ;
      this.intersectionPoint = intersectionPoint;

      // System.out.println("Intersection point = " + intersectionPoint);
      // System.out.println("TestPoint plane: " + testPoint + " -> " + intersectionPoint);
      // System.out.println("Travel plane: [" + thePointX + "," + thePointY + "," + thePointZ
      // + "] -> " + intersectionPoint);

      assert travelPlane.evaluateIsZero(intersectionPoint)
          : "intersection point must be on travel plane";
      assert testPointPlane.evaluateIsZero(intersectionPoint)
          : "intersection point must be on test point plane";

      // System.out.println("Test point distance to intersection point: "
      // + intersectionPoint.linearDistance(testPoint));
      // System.out.println("Check point distance to intersection point: "
      // + intersectionPoint.linearDistance(thePointX, thePointY, thePointZ));

      assert !testPoint.isNumericallyIdentical(intersectionPoint)
          : "test point is the same as intersection point";
      assert !intersectionPoint.isNumericallyIdentical(thePointX, thePointY, thePointZ)
          : "check point is same as intersection point";

      /*
      final SidedPlane bound1Plane = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);
      final SidedPlane bound2Plane = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);
      if (bound1Plane.isNumericallyIdentical(bound2Plane)) {
        throw new IllegalArgumentException("Sector iterator unreliable when bounds planes are numerically identical");
      }
      */

      final SidedPlane testPointBound1 =
          new SidedPlane(intersectionPoint, testPointPlane, testPoint);
      final SidedPlane testPointBound2 =
          new SidedPlane(testPoint, testPointPlane, intersectionPoint);
      if (testPointBound1.isFunctionallyIdentical(testPointBound2)) {
        throw new IllegalArgumentException(
            "Dual iterator unreliable when bounds planes are functionally identical");
      }
      this.testPointCutoffPlane = testPointBound1;
      this.testPointOtherCutoffPlane = testPointBound2;

      final SidedPlane checkPointBound1 =
          new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);
      final SidedPlane checkPointBound2 =
          new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);
      if (checkPointBound1.isFunctionallyIdentical(checkPointBound2)) {
        throw new IllegalArgumentException(
            "Dual iterator unreliable when bounds planes are functionally identical");
      }
      this.checkPointCutoffPlane = checkPointBound1;
      this.checkPointOtherCutoffPlane = checkPointBound2;

      // Sanity check
      assert testPointCutoffPlane.isWithin(intersectionPoint)
          : "intersection must be within testPointCutoffPlane";
      assert testPointOtherCutoffPlane.isWithin(intersectionPoint)
          : "intersection must be within testPointOtherCutoffPlane";
      assert checkPointCutoffPlane.isWithin(intersectionPoint)
          : "intersection must be within checkPointCutoffPlane";
      assert checkPointOtherCutoffPlane.isWithin(intersectionPoint)
          : "intersection must be within checkPointOtherCutoffPlane";
    }

