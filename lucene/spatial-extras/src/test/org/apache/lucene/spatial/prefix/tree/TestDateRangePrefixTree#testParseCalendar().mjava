  public void testParseCalendar() throws ParseException {
    Instant expected = OffsetDateTime.of(1984, 12, 18, 12, 34, 56, 100000000, ZoneOffset.UTC).toInstant();

    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1Z").toInstant());
    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 10), tree.parseCalendar("1984-12-18T12:34:56.01Z").toInstant());
    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 1), tree.parseCalendar("1984-12-18T12:34:56.001Z").toInstant());
    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1000Z").toInstant());
    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.100000000Z").toInstant());
    assertEquals(expected.with(ChronoField.NANO_OF_SECOND, 0), tree.parseCalendar("1984-12-18T12:34:56Z").toInstant());
    // decimal places are simply cut off as rounding may affect the "seconds" part of the calender which was set before
    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 999), tree.parseCalendar("1984-12-18T12:34:56.9999Z").toInstant());

    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1").toInstant());
    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 10), tree.parseCalendar("1984-12-18T12:34:56.01").toInstant());
    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 1), tree.parseCalendar("1984-12-18T12:34:56.001").toInstant());
    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1000").toInstant());
    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.100000000").toInstant());
    assertEquals(expected.with(ChronoField.NANO_OF_SECOND, 0), tree.parseCalendar("1984-12-18T12:34:56").toInstant());
    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 999), tree.parseCalendar("1984-12-18T12:34:56.9999").toInstant());
    
    assertEquals(OffsetDateTime.parse("1984-12-18T12:34:56.01Z", ISO_DATE_TIME).get(ChronoField.MILLI_OF_SECOND), 10);
  }

