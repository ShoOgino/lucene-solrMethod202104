  /**
   * Opens the specified file, reads its identifying information, including file length, full index
   * header (includes the unique segment ID) and the full footer (includes checksum), and returns
   * the resulting {@link FileMetaData}.
   *
   * <p>This returns null, logging a message, if there are any problems (the file does not exist, is
   * corrupt, truncated, etc.).
   */
  public FileMetaData readLocalFileMetaData(String fileName) throws IOException {

    Map<String, FileMetaData> cache = lastFileMetaData;
    FileMetaData result;
    if (cache != null) {
      // We may already have this file cached from the last NRT point:
      result = cache.get(fileName);
    } else {
      result = null;
    }

    if (result == null) {
      // Pull from the filesystem
      long checksum;
      long length;
      byte[] header;
      byte[] footer;
      try (IndexInput in = dir.openInput(fileName, IOContext.DEFAULT)) {
        try {
          length = in.length();
          header = CodecUtil.readIndexHeader(in);
          footer = CodecUtil.readFooter(in);
          checksum = CodecUtil.retrieveChecksum(in);
        } catch (EOFException | CorruptIndexException cie) {
          // File exists but is busted: we must copy it.  This happens when node had crashed,
          // corrupting an un-fsync'd file.  On init we try
          // to delete such unreferenced files, but virus checker can block that, leaving this bad
          // file.
          if (VERBOSE_FILES) {
            message("file " + fileName + ": will copy [existing file is corrupt]");
          }
          return null;
        }
        if (VERBOSE_FILES) {
          message("file " + fileName + " has length=" + bytesToString(length));
        }
      } catch (FileNotFoundException | NoSuchFileException e) {
        if (VERBOSE_FILES) {
          message("file " + fileName + ": will copy [file does not exist]");
        }
        return null;
      }

      // NOTE: checksum is redundant w/ footer, but we break it out separately because when the bits
      // cross the wire we need direct access to
      // checksum when copying to catch bit flips:
      result = new FileMetaData(header, footer, length, checksum);
    }

    return result;
  }

