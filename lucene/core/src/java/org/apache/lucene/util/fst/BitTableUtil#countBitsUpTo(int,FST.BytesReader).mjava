  /**
   * Counts the bits set up to the given bit zero-based index, exclusive. <br>
   * In other words, how many 1s there are up to the bit at the given index excluded. <br>
   * Example: bitIndex 10 means the third bit on the right of the second byte.
   *
   * @param bitIndex The bit zero-based index, exclusive. It must be greater than or equal to 0, and
   *     less than or equal to {@code number of bit-table bytes * Byte.SIZE}.
   * @param reader The {@link FST.BytesReader} to read. It must be positioned at the beginning of
   *     the bit-table.
   */
  static int countBitsUpTo(int bitIndex, FST.BytesReader reader) throws IOException {
    assert bitIndex >= 0 : "bitIndex=" + bitIndex;
    int bitCount = 0;
    for (int i = bitIndex >> 6; i > 0; i--) {
      // Count the bits set for all plain longs.
      bitCount += bitCount8Bytes(reader);
    }
    int remainingBits;
    if ((remainingBits = bitIndex & (Long.SIZE - 1)) != 0) {
      int numRemainingBytes = (remainingBits + (Byte.SIZE - 1)) >> 3;
      // Prepare a mask with 1s on the right up to bitIndex exclusive.
      long mask = (1L << bitIndex) - 1L; // Shifts are mod 64.
      // Count the bits set only within the mask part, so up to bitIndex exclusive.
      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader) & mask);
    }
    return bitCount;
  }

