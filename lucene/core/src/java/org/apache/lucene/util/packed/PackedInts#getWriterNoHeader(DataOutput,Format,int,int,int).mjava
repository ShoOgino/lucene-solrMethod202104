  /**
   * Expert: Create a packed integer array writer for the given output, format, value count, and
   * number of bits per value.
   *
   * <p>The resulting stream will be long-aligned. This means that depending on the format which is
   * used, up to 63 bits will be wasted. An easy way to make sure that no space is lost is to always
   * use a <code>valueCount</code> that is a multiple of 64.
   *
   * <p>This method does not write any metadata to the stream, meaning that it is your
   * responsibility to store it somewhere else in order to be able to recover data from the stream
   * later on:
   *
   * <ul>
   *   <li><code>format</code> (using {@link Format#getId()}),
   *   <li><code>valueCount</code>,
   *   <li><code>bitsPerValue</code>,
   *   <li>{@link #VERSION_CURRENT}.
   * </ul>
   *
   * <p>It is possible to start writing values without knowing how many of them you are actually
   * going to write. To do this, just pass <code>-1</code> as <code>valueCount</code>. On the other
   * hand, for any positive value of <code>valueCount</code>, the returned writer will make sure
   * that you don't write more values than expected and pad the end of stream with zeros in case you
   * have written less than <code>valueCount</code> when calling {@link Writer#finish()}.
   *
   * <p>The <code>mem</code> parameter lets you control how much memory can be used to buffer
   * changes in memory before flushing to disk. High values of <code>mem</code> are likely to
   * improve throughput. On the other hand, if speed is not that important to you, a value of <code>
   * 0</code> will use as little memory as possible and should already offer reasonable throughput.
   *
   * @param out the data output
   * @param format the format to use to serialize the values
   * @param valueCount the number of values
   * @param bitsPerValue the number of bits per value
   * @param mem how much memory (in bytes) can be used to speed up serialization
   * @return a Writer
   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)
   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)
   * @lucene.internal
   */
  public static Writer getWriterNoHeader(
      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {
    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);
  }

