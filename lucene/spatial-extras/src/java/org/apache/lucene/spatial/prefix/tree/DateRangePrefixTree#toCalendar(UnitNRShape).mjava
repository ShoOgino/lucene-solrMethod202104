  /**
   * Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape}
   * shape to a corresponding Calendar that is cleared below its level.
   */
  public Calendar toCalendar(UnitNRShape lv) {
    if (lv.getLevel() == 0) return newCal();
    if (comparePrefix(lv, minLV) <= 0) { // shouldn't typically happen; sometimes in a debugger
      return (Calendar) MINCAL.clone(); // full precision; truncation would cause underflow
    }
    assert comparePrefix(lv, maxLV) <= 0;
    Calendar cal = newCal();

    int yearAdj = lv.getValAtLevel(1) * 1_000_000;
    if (lv.getLevel() > 1) {
      yearAdj += lv.getValAtLevel(2) * 1000;
      if (lv.getLevel() > 2) {
        yearAdj += lv.getValAtLevel(3);
      }
    }
    if (yearAdj > AD_YEAR_BASE) {
      cal.set(Calendar.ERA, 1);
      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE); // setting the year resets the era
    } else {
      cal.set(Calendar.ERA, 0); // we assert this "sticks" at the end
      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);
    }
    for (int level = YEAR_LEVEL + 1; level <= lv.getLevel(); level++) {
      int field = FIELD_BY_LEVEL[level];
      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));
    }
    assert yearAdj > AD_YEAR_BASE || ((Calendar) cal.clone()).get(Calendar.ERA) == 0
        : "ERA / YEAR underflow";
    return cal;
  }

