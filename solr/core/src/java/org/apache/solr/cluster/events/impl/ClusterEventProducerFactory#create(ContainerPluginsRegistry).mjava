  /**
   * Create a {@link ClusterEventProducer} based on the current plugin configurations.
   * <p>NOTE: this method can only be called once because it has side-effects, such as
   * transferring the initially collected listeners to the resulting producer's instance, and
   * installing a {@link org.apache.solr.api.ContainerPluginsRegistry.PluginRegistryListener}.
   * Calling this method more than once will result in an exception.</p>
   * @param plugins current plugin configurations
   * @return configured instance of cluster event producer (with side-effects, see above)
   */
  public DelegatingClusterEventProducer create(ContainerPluginsRegistry plugins) {
    if (created) {
      throw new RuntimeException("this factory can be called only once!");
    }
    final DelegatingClusterEventProducer clusterEventProducer = new DelegatingClusterEventProducer(cc);
    // since this is a ClusterSingleton, register it as such, under unique name
    cc.getClusterSingletons().getSingletons().put(ClusterEventProducer.PLUGIN_NAME +"_delegate", clusterEventProducer);
    ContainerPluginsRegistry.ApiInfo clusterEventProducerInfo = plugins.getPlugin(ClusterEventProducer.PLUGIN_NAME);
    if (clusterEventProducerInfo != null) {
      // the listener in ClusterSingletons already registered this instance
      clusterEventProducer.setDelegate((ClusterEventProducer) clusterEventProducerInfo.getInstance());
    } else {
      // use the default NoOp impl
    }
    // transfer those listeners that were already registered to the initial impl
    transferListeners(clusterEventProducer, plugins);

    // install plugin registry listener that maintains plugin-based listeners in
    // the event producer impl
    ContainerPluginsRegistry.PluginRegistryListener pluginListener = new ContainerPluginsRegistry.PluginRegistryListener() {
      @Override
      public void added(ContainerPluginsRegistry.ApiInfo plugin) {
        if (plugin == null || plugin.getInstance() == null) {
          return;
        }
        Object instance = plugin.getInstance();
        if (instance instanceof ClusterEventListener) {
          ClusterEventListener listener = (ClusterEventListener) instance;
          clusterEventProducer.registerListener(listener);
        } else if (instance instanceof ClusterEventProducer) {
          // replace the existing impl
          if (cc.getClusterEventProducer() instanceof DelegatingClusterEventProducer) {
            ((DelegatingClusterEventProducer) cc.getClusterEventProducer())
                .setDelegate((ClusterEventProducer) instance);
          } else {
            log.warn("Can't configure plugin-based ClusterEventProducer while CoreContainer is still loading - " +
                " using existing implementation {}", cc.getClusterEventProducer().getClass().getName());
          }
        }
      }

      @Override
      public void deleted(ContainerPluginsRegistry.ApiInfo plugin) {
        if (plugin == null || plugin.getInstance() == null) {
          return;
        }
        Object instance = plugin.getInstance();
        if (instance instanceof ClusterEventListener) {
          ClusterEventListener listener = (ClusterEventListener) instance;
          clusterEventProducer.unregisterListener(listener);
        } else if (instance instanceof ClusterEventProducer) {
          // replace the existing impl with NoOp
          if (cc.getClusterEventProducer() instanceof DelegatingClusterEventProducer) {
            ((DelegatingClusterEventProducer) cc.getClusterEventProducer())
                .setDelegate(new NoOpProducer(cc));
          } else {
            log.warn("Can't configure plugin-based ClusterEventProducer while CoreContainer is still loading - " +
                " using existing implementation {}", cc.getClusterEventProducer().getClass().getName());
          }
        }
      }

      @Override
      public void modified(ContainerPluginsRegistry.ApiInfo old, ContainerPluginsRegistry.ApiInfo replacement) {
        added(replacement);
        deleted(old);
      }
    };
    plugins.registerListener(pluginListener);
    created = true;
    return clusterEventProducer;
  }

