  // TODO: can we simplify this Consuming !?!?!?
  /**
   * Internal utility: input stream of the provided response, which optionally consumes the
   * response's resources when the input stream is exhausted.
   */
  public InputStream responseInputStream(HttpResponse response, boolean consume)
      throws IOException {
    final HttpEntity entity = response.getEntity();
    final InputStream in = entity.getContent();
    if (!consume) {
      return in;
    }
    return new InputStream() {
      private boolean consumed = false;

      @Override
      public int read() throws IOException {
        final int res = in.read();
        consume(res);
        return res;
      }

      @Override
      public void close() throws IOException {
        in.close();
        consume(-1);
      }

      @Override
      public int read(byte[] b) throws IOException {
        final int res = in.read(b);
        consume(res);
        return res;
      }

      @Override
      public int read(byte[] b, int off, int len) throws IOException {
        final int res = in.read(b, off, len);
        consume(res);
        return res;
      }

      private void consume(int minusOne) {
        if (!consumed && minusOne == -1) {
          try {
            EntityUtils.consume(entity);
          } catch (Exception e) {
            // ignored on purpose
          }
          consumed = true;
        }
      }
    };
  }

