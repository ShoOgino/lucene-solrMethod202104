  private void mergeVectors(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {
    if (mergeState.infoStream.isEnabled("VV")) {
      mergeState.infoStream.message("VV", "merging " + mergeState.segmentInfo);
    }
    List<VectorValuesSub> subs = new ArrayList<>();
    int dimension = -1;
    VectorValues.ScoreFunction scoreFunction = null;
    int nonEmptySegmentIndex = 0;
    for (int i = 0; i < mergeState.vectorReaders.length; i++) {
      VectorReader vectorReader = mergeState.vectorReaders[i];
      if (vectorReader != null) {
        if (mergeFieldInfo != null && mergeFieldInfo.hasVectorValues()) {
          int segmentDimension = mergeFieldInfo.getVectorDimension();
          VectorValues.ScoreFunction segmentScoreFunction = mergeFieldInfo.getVectorScoreFunction();
          if (dimension == -1) {
            dimension = segmentDimension;
            scoreFunction = mergeFieldInfo.getVectorScoreFunction();
          } else if (dimension != segmentDimension) {
            throw new IllegalStateException("Varying dimensions for vector-valued field " + mergeFieldInfo.name
                + ": " + dimension + "!=" + segmentDimension);
          } else if (scoreFunction != segmentScoreFunction) {
            throw new IllegalStateException("Varying score functions for vector-valued field " + mergeFieldInfo.name
                + ": " + scoreFunction + "!=" + segmentScoreFunction);
          }
          VectorValues values = vectorReader.getVectorValues(mergeFieldInfo.name);
          if (values != null) {
            subs.add(new VectorValuesSub(nonEmptySegmentIndex++, mergeState.docMaps[i], values));
          }
        }
      }
    }
    // Create a new VectorValues by iterating over the sub vectors, mapping the resulting
    // docids using docMaps in the mergeState.
    if (subs.size() > 0) {
      writeField(mergeFieldInfo, new VectorValuesMerger(subs, mergeState));
    }
    if (mergeState.infoStream.isEnabled("VV")) {
      mergeState.infoStream.message("VV", "merge done " + mergeState.segmentInfo);
    }
  }

