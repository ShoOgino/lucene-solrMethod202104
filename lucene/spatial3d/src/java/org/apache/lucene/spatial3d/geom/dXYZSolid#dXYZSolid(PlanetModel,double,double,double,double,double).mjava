  /**
   * Sole constructor
   *
   * @param planetModel is the planet model.
   * @param X is the X value.
   * @param minY is the minimum Y value.
   * @param maxY is the maximum Y value.
   * @param minZ is the minimum Z value.
   * @param maxZ is the maximum Z value.
   */
  public dXYZSolid(
      final PlanetModel planetModel,
      final double X,
      final double minY,
      final double maxY,
      final double minZ,
      final double maxZ) {
    super(planetModel);
    // Argument checking
    if (maxY - minY < Vector.MINIMUM_RESOLUTION)
      throw new IllegalArgumentException("Y values in wrong order or identical");
    if (maxZ - minZ < Vector.MINIMUM_RESOLUTION)
      throw new IllegalArgumentException("Z values in wrong order or identical");

    this.X = X;
    this.minY = minY;
    this.maxY = maxY;
    this.minZ = minZ;
    this.maxZ = maxZ;

    final double worldMinX = planetModel.getMinimumXValue();
    final double worldMaxX = planetModel.getMaximumXValue();

    // Construct the planes
    xPlane = new Plane(xUnitVector, -X);
    minYPlane = new SidedPlane(0.0, maxY, 0.0, yUnitVector, -minY);
    maxYPlane = new SidedPlane(0.0, minY, 0.0, yUnitVector, -maxY);
    minZPlane = new SidedPlane(0.0, 0.0, maxZ, zUnitVector, -minZ);
    maxZPlane = new SidedPlane(0.0, 0.0, minZ, zUnitVector, -maxZ);

    // We need at least one point on the planet surface for each manifestation of the shape.
    // There can be up to 2 (on opposite sides of the world).  But we have to go through
    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.
    // Typically, this requires 4 square root operations.
    final GeoPoint[] XminY =
        xPlane.findIntersections(planetModel, minYPlane, maxYPlane, minZPlane, maxZPlane);
    final GeoPoint[] XmaxY =
        xPlane.findIntersections(planetModel, maxYPlane, minYPlane, minZPlane, maxZPlane);
    final GeoPoint[] XminZ =
        xPlane.findIntersections(planetModel, minZPlane, maxZPlane, minYPlane, maxYPlane);
    final GeoPoint[] XmaxZ =
        xPlane.findIntersections(planetModel, maxZPlane, minZPlane, minYPlane, maxYPlane);

    notableXPoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ);

    // Now, compute the edge points.
    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already,
    // so
    // we'll start there.  We know that at most there will be two disconnected shapes on the planet
    // surface.
    // But there's also a case where exactly one plane slices through the world, and none of the
    // bounding plane
    // intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look
    // for that last case.

    // We need to look at single-plane/world intersections.
    // We detect these by looking at the world model and noting its x, y, and z bounds.
    // For the single-dimension degenerate case, there's really only one plane that can possibly
    // intersect the world.
    // The cases we are looking for are when the four corner points for any given
    // plane are all outside of the world, AND that plane intersects the world.
    // There are four corner points all told; we must evaluate these WRT the planet surface.
    final boolean XminYminZ = planetModel.pointOutside(X, minY, minZ);
    final boolean XminYmaxZ = planetModel.pointOutside(X, minY, maxZ);
    final boolean XmaxYminZ = planetModel.pointOutside(X, maxY, minZ);
    final boolean XmaxYmaxZ = planetModel.pointOutside(X, maxY, maxZ);

    final GeoPoint[] xEdges;
    if (X - worldMinX >= -Vector.MINIMUM_RESOLUTION
        && X - worldMaxX <= Vector.MINIMUM_RESOLUTION
        && minY < 0.0
        && maxY > 0.0
        && minZ < 0.0
        && maxZ > 0.0
        && XminYminZ
        && XminYmaxZ
        && XmaxYminZ
        && XmaxYmaxZ) {
      // Find any point on the X plane that intersects the world
      // First construct a perpendicular plane that will allow us to find a sample point.
      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)
      // Then use it to compute a sample point.
      final GeoPoint intPoint = xPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane);
      if (intPoint != null) {
        xEdges = new GeoPoint[] {intPoint};
      } else {
        xEdges = EMPTY_POINTS;
      }
    } else {
      xEdges = EMPTY_POINTS;
    }

    this.edgePoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ, xEdges);
  }

