  /** See {@link Scorer#advanceShallow(int)}. */
  int advanceShallow(int target) throws IOException {
    // For scorers that are below the lead index, just propagate.
    for (int i = 0; i < leadIndex; ++i) {
      Scorer s = scorers[i];
      if (s.docID() < target) {
        s.advanceShallow(target);
      }
    }

    // For scorers above the lead index, we take the minimum
    // boundary.
    Scorer leadScorer = scorers[leadIndex];
    int upTo = leadScorer.advanceShallow(Math.max(leadScorer.docID(), target));

    for (int i = leadIndex + 1; i < scorers.length; ++i) {
      Scorer scorer = scorers[i];
      if (scorer.docID() <= target) {
        upTo = Math.min(scorer.advanceShallow(target), upTo);
      }
    }

    // If the maximum scoring clauses are beyond `target`, then we use their
    // docID as a boundary. It helps not consider them when computing the
    // maximum score and get a lower score upper bound.
    for (int i = scorers.length - 1; i > leadIndex; --i) {
      Scorer scorer = scorers[i];
      if (scorer.docID() > target) {
        upTo = Math.min(upTo, scorer.docID() - 1);
      } else {
        break;
      }
    }

    return upTo;
  }

