  @Test
  public void testEmptyNullComponents() throws Exception {
    // LUCENE-4724: CategoryPath should not allow empty or null components
    String[][] components_tests =
        new String[][] {
          new String[] {"", "test"}, // empty in the beginning
          new String[] {"test", ""}, // empty in the end
          new String[] {"test", "", "foo"}, // empty in the middle
          new String[] {null, "test"}, // null at the beginning
          new String[] {"test", null}, // null in the end
          new String[] {"test", null, "foo"}, // null in the middle
        };

    // empty or null components should not be allowed.
    for (String[] components : components_tests) {
      expectThrows(
          IllegalArgumentException.class,
          () -> {
            new FacetLabel(components);
          });
      expectThrows(
          IllegalArgumentException.class,
          () -> {
            new FacetField("dim", components);
          });
      expectThrows(
          IllegalArgumentException.class,
          () -> {
            new AssociationFacetField(new BytesRef(), "dim", components);
          });
      expectThrows(
          IllegalArgumentException.class,
          () -> {
            new IntAssociationFacetField(17, "dim", components);
          });
      expectThrows(
          IllegalArgumentException.class,
          () -> {
            new FloatAssociationFacetField(17.0f, "dim", components);
          });
    }

    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new FacetField(null, new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new FacetField("", new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new IntAssociationFacetField(17, null, new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new IntAssociationFacetField(17, "", new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new FloatAssociationFacetField(17.0f, null, new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new FloatAssociationFacetField(17.0f, "", new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new AssociationFacetField(new BytesRef(), null, new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new AssociationFacetField(new BytesRef(), "", new String[] {"abc"});
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new SortedSetDocValuesFacetField(null, "abc");
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new SortedSetDocValuesFacetField("", "abc");
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new SortedSetDocValuesFacetField("dim", null);
        });
    expectThrows(
        IllegalArgumentException.class,
        () -> {
          new SortedSetDocValuesFacetField("dim", "");
        });
  }

