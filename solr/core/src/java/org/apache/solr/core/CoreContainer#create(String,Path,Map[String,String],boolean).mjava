  /**
   * Creates a new core in a specified instance directory, publishing the core state to the cluster
   *
   * @param coreName     the core name
   * @param instancePath the instance directory
   * @param parameters   the core parameters
   * @return the newly created core
   */
  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {
    boolean iAdded = false;
    try {
      iAdded = inFlightCreations.add(coreName);
      if (! iAdded) {
        String msg = "Already creating a core with name '" + coreName + "', call aborted '";
        log.warn(msg);
        throw new SolrException(ErrorCode.CONFLICT, msg);
      }
      CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), getZkController());

      // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.
      if (getCoreDescriptor(coreName) != null) {
        log.warn("Creating a core with existing name is not allowed: '{}'", coreName);
        // TODO: Shouldn't this be a BAD_REQUEST?
        throw new SolrException(ErrorCode.SERVER_ERROR, "Core with name '" + coreName + "' already exists.");
      }

      // Validate paths are relative to known locations to avoid path traversal
      assertPathAllowed(cd.getInstanceDir());
      assertPathAllowed(Paths.get(cd.getDataDir()));

      boolean preExisitingZkEntry = false;
      try {
        if (getZkController() != null) {
          if (cd.getCloudDescriptor().getCoreNodeName() == null) {
            throw new SolrException(ErrorCode.SERVER_ERROR, "coreNodeName missing " + parameters.toString());
          }
          preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);
        }

        // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it
        // first and clean it up if there's an error.
        coresLocator.create(this, cd);

        SolrCore core;
        try {
          solrCores.waitAddPendingCoreOps(cd.getName());
          core = createFromDescriptor(cd, true, newCollection);
          coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created
        } finally {
          solrCores.removeFromPendingOps(cd.getName());
        }

        return core;
      } catch (Exception ex) {
        // First clean up any core descriptor, there should never be an existing core.properties file for any core that
        // failed to be created on-the-fly.
        coresLocator.delete(this, cd);
        if (isZooKeeperAware() && !preExisitingZkEntry) {
          try {
            getZkController().unregister(coreName, cd);
          } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            SolrException.log(log, null, e);
          } catch (KeeperException e) {
            SolrException.log(log, null, e);
          } catch (Exception e) {
            SolrException.log(log, null, e);
          }
        }

        Throwable tc = ex;
        Throwable c = null;
        do {
          tc = tc.getCause();
          if (tc != null) {
            c = tc;
          }
        } while (tc != null);

        String rootMsg = "";
        if (c != null) {
          rootMsg = " Caused by: " + c.getMessage();
        }

        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Error CREATEing SolrCore '" + coreName + "': " + ex.getMessage() + rootMsg, ex);
      }
    } finally {
      if (iAdded) {
        inFlightCreations.remove(coreName);
      }
    }
  }

