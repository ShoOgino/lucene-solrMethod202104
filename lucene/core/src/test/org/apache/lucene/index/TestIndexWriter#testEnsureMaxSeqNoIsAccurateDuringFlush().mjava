  public void testEnsureMaxSeqNoIsAccurateDuringFlush() throws IOException, InterruptedException {
    AtomicReference<CountDownLatch> waitRef = new AtomicReference<>(new CountDownLatch(0));
    AtomicReference<CountDownLatch> arrivedRef = new AtomicReference<>(new CountDownLatch(0));
    InfoStream stream =
        new InfoStream() {
          @Override
          public void message(String component, String message) {
            if ("TP".equals(component)
                && "DocumentsWriterPerThread addDocuments start".equals(message)) {
              try {
                arrivedRef.get().countDown();
                waitRef.get().await();
              } catch (InterruptedException e) {
                throw new AssertionError(e);
              }
            }
          }

          @Override
          public boolean isEnabled(String component) {
            return "TP".equals(component);
          }

          @Override
          public void close() throws IOException {}
        };
    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();
    indexWriterConfig.setInfoStream(stream);
    try (Directory dir = newDirectory();
        IndexWriter writer =
            new IndexWriter(dir, indexWriterConfig) {
              @Override
              protected boolean isEnableTestPoints() {
                return true;
              }
            }) {
      // we produce once DWPT with 1 doc
      writer.addDocument(new Document());
      assertEquals(1, writer.docWriter.perThreadPool.size());
      long maxCompletedSequenceNumber = writer.getMaxCompletedSequenceNumber();
      // safe the seqNo and use the latches to block this DWPT such that a refresh must wait for it
      waitRef.set(new CountDownLatch(1));
      arrivedRef.set(new CountDownLatch(1));
      Thread waiterThread =
          new Thread(
              () -> {
                try {
                  writer.addDocument(new Document());
                } catch (IOException e) {
                  throw new AssertionError(e);
                }
              });
      waiterThread.start();
      arrivedRef.get().await();
      Thread refreshThread =
          new Thread(
              () -> {
                try {
                  writer.getReader().close();
                } catch (IOException e) {
                  throw new AssertionError(e);
                }
              });
      DocumentsWriterDeleteQueue deleteQueue = writer.docWriter.deleteQueue;
      refreshThread.start();
      // now we wait until the refresh has swapped the deleted queue and assert that
      // we see an accurate seqId
      while (writer.docWriter.deleteQueue == deleteQueue) {
        Thread.yield(); // busy wait for refresh to swap the queue
      }
      try {
        assertEquals(maxCompletedSequenceNumber, writer.getMaxCompletedSequenceNumber());
      } finally {
        waitRef.get().countDown();
        waiterThread.join();
        refreshThread.join();
      }
      assertEquals(maxCompletedSequenceNumber + 2, writer.getMaxCompletedSequenceNumber());
    }
  }

