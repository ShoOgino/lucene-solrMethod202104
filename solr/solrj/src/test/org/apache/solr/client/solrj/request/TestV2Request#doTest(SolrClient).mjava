  private void doTest(SolrClient client) throws IOException, SolrServerException {
    assertSuccess(client, new V2Request.Builder("/collections")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{" +
            "  'create' : {" +
            "    'name' : 'test'," +
            "    'numShards' : 2," +
            "    'replicationFactor' : 2," +
            "    'config' : 'config'" +
            "  }" +
            "}" + "/* ignore comment*/").build());
    assertSuccess(client, new V2Request.Builder("/c").build());
    assertSuccess(client, new V2Request.Builder("/c/_introspect").build());


    String requestHandlerName = "/x" + random().nextInt();
    assertSuccess(client, new V2Request.Builder("/c/test/config")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{'create-requesthandler' : { 'name' : '" + requestHandlerName + 
            "', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}")
        .build());

    assertSuccess(client, new V2Request.Builder("/c/test").withMethod(SolrRequest.METHOD.DELETE).build());
    NamedList<Object> res = client.request(new V2Request.Builder("/c").build());

    
    // TODO: this is not guaranteed now - beast test if you try to fix
    //List collections = (List) res.get("collections");
    // assertFalse( collections.contains("test"));
    try{
      NamedList<Object> res1 = client.request(new V2Request.Builder("/collections")
              .withMethod(SolrRequest.METHOD.POST)
              .withPayload("{" +
                  "  'create' : {" +
                  "    'name' : 'jsontailtest'," +
                  "    'numShards' : 2," +
                  "    'replicationFactor' : 2," +
                  "    'config' : 'config'" +
                  "  }" +
                  "}" + ", 'something':'bogus'").build());
      assertFalse("The request failed", res1.get("responseHeader").toString().contains("status=0"));
    } catch(BaseHttpSolrClient.RemoteExecutionException itsOk) {
    }
  }

