    /** Waits if necessary for at most the given time for all merges. */
    boolean await(long timeout, TimeUnit unit) {
      try {
        CompletableFuture<Void> future =
            CompletableFuture.allOf(
                merges.stream()
                    .map(m -> m.mergeCompleted)
                    .collect(Collectors.toList())
                    .toArray(CompletableFuture<?>[]::new));
        future.get(timeout, unit);
        return true;
      } catch (InterruptedException e) {
        throw new ThreadInterruptedException(e);
      } catch (ExecutionException | TimeoutException e) {
        return false;
      }
    }

