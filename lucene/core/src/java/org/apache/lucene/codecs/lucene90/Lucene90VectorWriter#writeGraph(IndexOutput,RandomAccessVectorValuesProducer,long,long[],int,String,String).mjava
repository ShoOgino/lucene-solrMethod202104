  private void writeGraph(
      IndexOutput graphData,
      RandomAccessVectorValuesProducer vectorValues,
      long graphDataOffset,
      long[] offsets,
      int count,
      String maxConnStr,
      String beamWidthStr)
      throws IOException {
    int maxConn, beamWidth;
    if (maxConnStr == null) {
      maxConn = HnswGraphBuilder.DEFAULT_MAX_CONN;
    } else {
      try {
        maxConn = Integer.parseInt(maxConnStr);
      } catch (NumberFormatException e) {
        throw new NumberFormatException(
            "Received non integer value for max-connections parameter of HnswGraphBuilder, value: "
                + maxConnStr);
      }
    }
    if (beamWidthStr == null) {
      beamWidth = HnswGraphBuilder.DEFAULT_BEAM_WIDTH;
    } else {
      try {
        beamWidth = Integer.parseInt(beamWidthStr);
      } catch (NumberFormatException e) {
        throw new NumberFormatException(
            "Received non integer value for beam-width parameter of HnswGraphBuilder, value: "
                + beamWidthStr);
      }
    }
    HnswGraphBuilder hnswGraphBuilder =
        new HnswGraphBuilder(vectorValues, maxConn, beamWidth, HnswGraphBuilder.randSeed);
    hnswGraphBuilder.setInfoStream(segmentWriteState.infoStream);
    HnswGraph graph = hnswGraphBuilder.build(vectorValues.randomAccess());

    for (int ord = 0; ord < count; ord++) {
      // write graph
      offsets[ord] = graphData.getFilePointer() - graphDataOffset;

      NeighborArray neighbors = graph.getNeighbors(ord);
      int size = neighbors.size();

      // Destructively modify; it's ok we are discarding it after this
      int[] nodes = neighbors.node();
      Arrays.sort(nodes, 0, size);
      graphData.writeInt(size);

      int lastNode = -1; // to make the assertion work?
      for (int i = 0; i < size; i++) {
        int node = nodes[i];
        assert node > lastNode : "nodes out of order: " + lastNode + "," + node;
        assert node < offsets.length : "node too large: " + node + ">=" + offsets.length;
        graphData.writeVInt(node - lastNode);
        lastNode = node;
      }
    }
  }

