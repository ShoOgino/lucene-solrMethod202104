  /** Search, sorting by score, and computing drill down and sideways counts. */
  public DrillSidewaysResult search(ScoreDoc after, DrillDownQuery query, int topN)
      throws IOException {
    int limit = searcher.getIndexReader().maxDoc();
    if (limit == 0) {
      limit = 1; // the collector does not alow numHits = 0
    }
    final int fTopN = Math.min(topN, limit);

    if (executor != null) { // We have an executor, let use the multi-threaded version

      final CollectorManager<TopScoreDocCollector, TopDocs> collectorManager =
          new CollectorManager<>() {

            @Override
            public TopScoreDocCollector newCollector() throws IOException {
              return TopScoreDocCollector.create(fTopN, after, Integer.MAX_VALUE);
            }

            @Override
            public TopDocs reduce(Collection<TopScoreDocCollector> collectors) throws IOException {
              final TopDocs[] topDocs = new TopDocs[collectors.size()];
              int pos = 0;
              for (TopScoreDocCollector collector : collectors)
                topDocs[pos++] = collector.topDocs();
              return TopDocs.merge(topN, topDocs);
            }
          };
      ConcurrentDrillSidewaysResult<TopDocs> r = search(query, collectorManager);
      return new DrillSidewaysResult(r.facets, r.collectorResult);

    } else {

      TopScoreDocCollector hitCollector =
          TopScoreDocCollector.create(topN, after, Integer.MAX_VALUE);
      DrillSidewaysResult r = search(query, hitCollector);
      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());
    }
  }

