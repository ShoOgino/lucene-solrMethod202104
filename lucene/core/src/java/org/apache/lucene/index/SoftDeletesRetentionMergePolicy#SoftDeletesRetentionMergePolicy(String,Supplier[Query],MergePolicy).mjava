  /**
   * Creates a new {@link SoftDeletesRetentionMergePolicy}
   *
   * @param field the soft deletes field
   * @param retentionQuerySupplier a query supplier for the retention query
   * @param in the wrapped MergePolicy
   */
  public SoftDeletesRetentionMergePolicy(
      String field, Supplier<Query> retentionQuerySupplier, MergePolicy in) {
    super(
        in,
        toWrap ->
            new MergePolicy.OneMerge(toWrap.segments) {
              @Override
              public CodecReader wrapForMerge(CodecReader reader) throws IOException {
                CodecReader wrapped = toWrap.wrapForMerge(reader);
                Bits liveDocs = reader.getLiveDocs();
                if (liveDocs == null) { // no deletes - just keep going
                  return wrapped;
                }
                return applyRetentionQuery(field, retentionQuerySupplier.get(), wrapped);
              }
            });
    Objects.requireNonNull(field, "field must not be null");
    Objects.requireNonNull(retentionQuerySupplier, "retentionQuerySupplier must not be null");
    this.field = field;
    this.retentionQuerySupplier = retentionQuerySupplier;
  }

