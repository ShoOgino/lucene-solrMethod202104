  /**
   * Returns keys sorted in alphabetical order. This includes the current Node and all nodes
   * connected to the current Node.
   *
   * <p>Sorted keys will be appended to the end of the resulting <code>List</code>. The result may
   * be empty when this method is invoked, but may not be <code>null</code>.
   *
   * @param currentNode The current node.
   * @param sortKeysNumReturnValues The maximum number of values in the result.
   * @param sortKeysResult2 The results so far.
   * @return A <code>List</code> with the results.
   */
  private List<String> sortKeysRecursion(
      TSTNode currentNode, int sortKeysNumReturnValues, List<String> sortKeysResult2) {
    if (currentNode == null) {
      return sortKeysResult2;
    }
    List<String> sortKeysResult =
        sortKeysRecursion(
            currentNode.relatives[TSTNode.LOKID], sortKeysNumReturnValues, sortKeysResult2);
    if (sortKeysNumReturnValues != -1 && sortKeysResult.size() >= sortKeysNumReturnValues) {
      return sortKeysResult;
    }
    if (currentNode.data != null) {
      sortKeysResult.add(getKey(currentNode));
    }
    sortKeysResult =
        sortKeysRecursion(
            currentNode.relatives[TSTNode.EQKID], sortKeysNumReturnValues, sortKeysResult);
    return sortKeysRecursion(
        currentNode.relatives[TSTNode.HIKID], sortKeysNumReturnValues, sortKeysResult);
  }

