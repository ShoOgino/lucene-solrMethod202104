  protected synchronized CopyJob launchPreCopyMerge(
      AtomicBoolean finished, long newPrimaryGen, Map<String, FileMetaData> files)
      throws IOException {

    CopyJob job;

    maybeNewPrimary(newPrimaryGen);
    final long primaryGenStart = lastPrimaryGen;
    Set<String> fileNames = files.keySet();
    message("now pre-copy warm merge files=" + fileNames + " primaryGen=" + newPrimaryGen);

    for (String fileName : fileNames) {
      assert pendingMergeFiles.contains(fileName) == false
          : "file \"" + fileName + "\" is already being warmed!";
      assert lastNRTFiles.contains(fileName) == false
          : "file \"" + fileName + "\" is already NRT visible!";
    }

    job =
        newCopyJob(
            "warm merge on " + name() + " filesNames=" + fileNames,
            files,
            null,
            false,
            new CopyJob.OnceDone() {

              @Override
              public void run(CopyJob job) throws IOException {
                // Signals that this replica has finished
                mergeCopyJobs.remove(job);
                message("done warming merge " + fileNames + " failed?=" + job.getFailed());
                synchronized (this) {
                  if (job.getFailed() == false) {
                    if (lastPrimaryGen != primaryGenStart) {
                      message(
                          "merge pre copy finished but primary has changed; cancelling job files="
                              + fileNames);
                      job.cancel("primary changed during merge copy", null);
                    } else {
                      boolean abort = false;
                      for (String fileName : fileNames) {
                        if (lastNRTFiles.contains(fileName)) {
                          message(
                              "abort merge finish: file "
                                  + fileName
                                  + " is referenced by last NRT point");
                          abort = true;
                        }
                        if (lastCommitFiles.contains(fileName)) {
                          message(
                              "abort merge finish: file "
                                  + fileName
                                  + " is referenced by last commit point");
                          abort = true;
                        }
                      }
                      if (abort) {
                        // Even though in newNRTPoint we have similar logic, which cancels any merge
                        // copy jobs if an NRT point
                        // shows up referencing the files we are warming (because primary got
                        // impatient and gave up on us), we also
                        // need it here in case replica is way far behind and fails to even receive
                        // the merge pre-copy request
                        // until after the newNRTPoint referenced those files:
                        job.cancel("merged segment was separately copied via NRT point", null);
                      } else {
                        job.finish();
                        message("merge pre copy finished files=" + fileNames);
                        for (String fileName : fileNames) {
                          assert pendingMergeFiles.contains(fileName) == false
                              : "file \"" + fileName + "\" is already in pendingMergeFiles";
                          message("add file " + fileName + " to pendingMergeFiles");
                          pendingMergeFiles.add(fileName);
                        }
                      }
                    }
                  } else {
                    message("merge copy finished with failure");
                  }
                }
                finished.set(true);
              }
            });

    job.start();

    // When warming a merge we better not already have any of these files copied!
    assert job.getFileNamesToCopy().size() == files.size();

    mergeCopyJobs.add(job);
    launch(job);

    return job;
  }

