  public void testAtanhMethod() {
    // atanh(NaN) == NaN
    assertTrue(Double.isNaN(MathUtil.atanh(Double.NaN)));
    // atanh(+0) == +0
    assertEquals(0, Double.doubleToLongBits(MathUtil.atanh(0D)));
    // atanh(-0) == -0
    assertEquals(Double.doubleToLongBits(-0D), Double.doubleToLongBits(MathUtil.atanh(-0D)));
    // atanh(1) == POSITIVE_INFINITY
    assertEquals(
        Double.doubleToLongBits(Double.POSITIVE_INFINITY),
        Double.doubleToLongBits(MathUtil.atanh(1D)));
    // atanh(-1) == NEGATIVE_INFINITY
    assertEquals(
        Double.doubleToLongBits(Double.NEGATIVE_INFINITY),
        Double.doubleToLongBits(MathUtil.atanh(-1D)));
    // atanh(x) : Math.abs(x) > 1 == NaN
    assertTrue(Double.isNaN(MathUtil.atanh(1.1D))); // x > 1
    assertTrue(Double.isNaN(MathUtil.atanh(Double.POSITIVE_INFINITY))); // x == Inf
    assertTrue(Double.isNaN(MathUtil.atanh(-1.1D))); // x < -1
    assertTrue(Double.isNaN(MathUtil.atanh(Double.NEGATIVE_INFINITY))); // x == -Inf

    double epsilon = 0.000001;
    assertEquals(Double.NEGATIVE_INFINITY, MathUtil.atanh(-1), 0);
    assertEquals(-0.5493061443340549, MathUtil.atanh(-0.5), epsilon);
    assertEquals(0, MathUtil.atanh(0), 0);
    assertEquals(0.5493061443340549, MathUtil.atanh(0.5), epsilon);
    assertEquals(Double.POSITIVE_INFINITY, MathUtil.atanh(1), 0);
  }

