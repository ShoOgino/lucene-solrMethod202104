    /**
     * Add a {@link ConditionalTokenFilterFactory} to the analysis chain
     *
     * <p>TokenFilters added by subsequent calls to {@link ConditionBuilder#addTokenFilter(String,
     * String...)} and related functions will only be used if the current token matches the
     * condition. Consumers must call {@link ConditionBuilder#endwhen()} to return to the normal
     * tokenfilter chain once conditional filters have been added
     *
     * @param name is used to look up the factory with {@link TokenFilterFactory#forName(String,
     *     Map)}
     * @param params the parameters to be passed to the factory. The map must be modifiable
     */
    @SuppressWarnings("unchecked")
    public ConditionBuilder when(String name, Map<String, String> params) throws IOException {
      Class<? extends TokenFilterFactory> clazz = TokenFilterFactory.lookupClass(name);
      if (ConditionalTokenFilterFactory.class.isAssignableFrom(clazz) == false) {
        throw new IllegalArgumentException(
            "TokenFilterFactory " + name + " is not a ConditionalTokenFilterFactory");
      }
      return when((Class<? extends ConditionalTokenFilterFactory>) clazz, params);
    }

