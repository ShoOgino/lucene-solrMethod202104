  @Test
  public void testNonDegenerateRelationships() {
    XYZSolid s;
    GeoShape shape;
    // Something bigger than the world
    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);
    // Any shape, except whole world, should be within.
    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);
    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));
    shape = new GeoWorld(PlanetModel.SPHERE);
    // An XYZSolid represents a surface shape, which when larger than the world is in fact
    // the entire world, so it should overlap the world.
    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));

    // Something overlapping the world on only one side
    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);
    // Some things should be disjoint...
    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);
    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));
    // And, some things should be within... 
    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);
    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));
    // And, some things should overlap.
    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);
    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));

    // Partial world should be contained by GeoWorld object...
    shape = new GeoWorld(PlanetModel.SPHERE);
    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));
    
    // Something inside the world
    s = new StandardXYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);
    // All shapes should be disjoint
    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);
    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));
    shape = new GeoWorld(PlanetModel.SPHERE);
    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));
    
  }

