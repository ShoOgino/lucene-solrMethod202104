  public void testIndexSortOnSparseField() throws Exception {
    Directory dir = newDirectory();
    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
    SortField sortField = new SortField("sparse", SortField.Type.INT, false);
    sortField.setMissingValue(Integer.MIN_VALUE);
    Sort indexSort = new Sort(sortField);
    iwc.setIndexSort(indexSort);
    IndexWriter w = new IndexWriter(dir, iwc);
    for (int i = 0; i < 128; i++) {
      Document doc = new Document();
      if (i < 64) {
        doc.add(new NumericDocValuesField("sparse", i));
      }
      w.addDocument(doc);
    }
    w.commit();
    w.forceMerge(1);
    DirectoryReader r = DirectoryReader.open(w);
    assertEquals(1, r.leaves().size());
    LeafReader leafReader = r.leaves().get(0).reader();
    NumericDocValues sparseValues = leafReader.getNumericDocValues("sparse");
    for (int docID = 0; docID < 128; docID++) {
      if (docID >= 64) {
        assertTrue(sparseValues.advanceExact(docID));
        assertEquals(docID - 64, (int) sparseValues.longValue());
      } else {
        assertFalse(sparseValues.advanceExact(docID));
      }
    }
    IOUtils.close(r, w, dir);
  }

