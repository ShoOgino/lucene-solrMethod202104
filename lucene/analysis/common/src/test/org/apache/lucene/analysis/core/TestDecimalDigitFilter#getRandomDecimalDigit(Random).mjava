  /** returns a psuedo-random codepoint which is a Decimal Digit */
  public static int getRandomDecimalDigit(Random r) {
    final int aprox = TestUtil.nextInt(r, 0, DECIMAL_DIGIT_CODEPOINTS.length() - 1);

    if (DECIMAL_DIGIT_CODEPOINTS.get(aprox)) { // lucky guess
      assert Character.isDigit(aprox);
      return aprox;
    }

    // seek up and down for closest set bit
    final int lower = DECIMAL_DIGIT_CODEPOINTS.prevSetBit(aprox);
    final int higher = DECIMAL_DIGIT_CODEPOINTS.nextSetBit(aprox);

    // sanity check edge cases
    if (lower < 0) {
      assert higher != DocIdSetIterator.NO_MORE_DOCS;
      assert Character.isDigit(higher);
      return higher;
    }
    if (higher == DocIdSetIterator.NO_MORE_DOCS) {
      assert 0 <= lower;
      assert Character.isDigit(lower);
      return lower;
    }

    // which is closer?
    final int cmp = Integer.compare(aprox - lower, higher - aprox);

    if (0 == cmp) {
      // dead even, flip a coin
      final int result = random().nextBoolean() ? lower : higher;
      assert Character.isDigit(result);
      return result;
    }

    final int result = (cmp < 0) ? lower : higher;
    assert Character.isDigit(result);
    return result;
  }

