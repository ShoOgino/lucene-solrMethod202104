  /**
   * Creates a SortField for sorting by outside distance from a box.
   *
   * <p>This sort orders documents by ascending outside distance from the box. Points within the box
   * have distance 0.0. The value returned in {@link FieldDoc} for the hits contains a Double
   * instance with the distance in meters.
   *
   * <p>If a document is missing the field, then by default it is treated as having {@link
   * Double#POSITIVE_INFINITY} distance (missing values sort last).
   *
   * <p>If a document contains multiple values for the field, the <i>closest</i> distance to the box
   * is used.
   *
   * @param field field name. must not be null.
   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.
   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.
   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.
   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.
   * @return SortField ordering documents by distance
   * @throws IllegalArgumentException if {@code field} is null or box has invalid coordinates.
   */
  public static SortField newOutsideBoxSort(
      final String field,
      final double minLatitude,
      final double maxLatitude,
      final double minLongitude,
      final double maxLongitude,
      final PlanetModel planetModel) {
    final GeoOutsideDistance shape =
        Geo3DUtil.fromBox(planetModel, minLatitude, maxLatitude, minLongitude, maxLongitude);
    return new Geo3DPointOutsideSortField(field, planetModel, shape);
  }

