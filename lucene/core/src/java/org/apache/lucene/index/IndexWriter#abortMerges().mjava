  /**
   * Aborts running merges. Be careful when using this method: when you abort a long-running merge,
   * you lose a lot of work that must later be redone.
   */
  private synchronized void abortMerges() throws IOException {
    merges.disable();
    // Abort all pending & running merges:
    IOUtils.applyToAll(
        pendingMerges,
        merge -> {
          if (infoStream.isEnabled("IW")) {
            infoStream.message("IW", "now abort pending merge " + segString(merge.segments));
          }
          abortOneMerge(merge);
          mergeFinish(merge);
        });
    pendingMerges.clear();

    for (final MergePolicy.OneMerge merge : runningMerges) {
      if (infoStream.isEnabled("IW")) {
        infoStream.message("IW", "now abort running merge " + segString(merge.segments));
      }
      merge.setAborted();
    }

    // We wait here to make all merges stop.  It should not
    // take very long because they periodically check if
    // they are aborted.
    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {

      if (infoStream.isEnabled("IW")) {
        infoStream.message(
            "IW",
            "now wait for "
                + runningMerges.size()
                + " running merge/s to abort; currently running addIndexes: "
                + runningAddIndexesMerges.size());
      }

      doWait();
    }

    notifyAll();
    if (infoStream.isEnabled("IW")) {
      infoStream.message("IW", "all running merges have aborted");
    }
  }

