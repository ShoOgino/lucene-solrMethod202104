  public void testEquality() throws IOException {
    try (SolrQueryRequest req = req("custom_req_param","foo_i",
                                    "overridden_param","xxxxx_i")) {
      
      @SuppressWarnings({"unchecked"})
      final FacetRequest fr = FacetRequest.parse
        (req, (Map<String,Object>) Utils.fromJSONString
         ("{ " +
             // with valuesource
             "  f1:'min(field(\"foo_i\"))', " +
             "  f2:'min(field($custom_req_param))', " +
             // with fieldName and query de-reference
             "  s1:'min(foo_i)', " +
             "  s2:'min($custom_req_param)', " +
             "  s3:{ func:'min($custom_req_param)' }, " +
             "  s4:{ type:func, func:'min($custom_req_param)' }, " +
             "  s5:{ type:func, func:'min($custom_local_param)', custom_local_param:foo_i }, " +
             "  s6:{ type:func, func:'min($overridden_param)', overridden_param:foo_i }, " +
             // test the test...
             "  diff:'min(field(\"bar_i\"))'," +
             "}"));
         
      final Map<String, AggValueSource> stats = fr.getFacetStats();
      assertEquals(9, stats.size());
      
      for (Map.Entry<String,AggValueSource> entry : stats.entrySet()) {
        final String key = entry.getKey();
        final AggValueSource agg = entry.getValue();
        
        assertEquals("name of " + key, "min", agg.name());
        MatcherAssert.assertThat("type of " + key, agg, instanceOf(SimpleAggValueSource.class));
        SimpleAggValueSource sagg = (SimpleAggValueSource) agg;

        if (key.startsWith("f")) { // value source as arg to min
          MatcherAssert.assertThat("vs of " + key, sagg.getArg(), instanceOf(IntFieldSource.class));
          assertEquals("field of " + key, "foo_i", ((IntFieldSource)sagg.getArg()).getField());
          assertEquals(key + ".equals(f1)", agg, stats.get("f1"));
        } else if (key.startsWith("s")) { // field as arg to min
          MatcherAssert.assertThat("vs of " + key, sagg.getArg(), instanceOf(FieldNameValueSource.class));
          assertEquals("field of " + key, "foo_i", ((FieldNameValueSource)sagg.getArg()).getFieldName());
          assertEquals(key + ".equals(s1)", agg, stats.get("s1"));
          assertEquals("s1.equals("+key+")", stats.get("s1"), agg);
        } else if ("diff".equals(key)) {
          assertEquals("field of " + key, "bar_i", ((IntFieldSource)sagg.getArg()).getField());
          assertNotEquals("diff.equals(s1) ?!?!", agg, stats.get("f1"));
        }
      }
    }
  }

