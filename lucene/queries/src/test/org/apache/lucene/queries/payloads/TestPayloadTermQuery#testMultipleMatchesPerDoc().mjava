  public void testMultipleMatchesPerDoc() throws Exception {
    SpanQuery query =
        new PayloadScoreQuery(
            new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, "seventy")),
            new MaxPayloadFunction(),
            PayloadDecoder.FLOAT_DECODER);
    TopDocs hits = searcher.search(query, 100);
    assertTrue("hits is null and it shouldn't be", hits != null);
    assertTrue(
        "hits Size: " + hits.totalHits.value + " is not: " + 100, hits.totalHits.value == 100);

    // they should all have the exact same score, because they all contain seventy once, and we set
    // all the other similarity factors to be 1

    // System.out.println("Hash: " + seventyHash + " Twice Hash: " + 2*seventyHash);
    // there should be exactly 10 items that score a 4, all the rest should score a 2
    // The 10 items are: 70 + i*100 where i in [0-9]
    int numTens = 0;
    for (int i = 0; i < hits.scoreDocs.length; i++) {
      ScoreDoc doc = hits.scoreDocs[i];
      if (doc.doc % 10 == 0) {
        numTens++;
        assertTrue(doc.score + " does not equal: " + 4.0, doc.score == 4.0);
      } else {
        assertTrue(doc.score + " does not equal: " + 2, doc.score == 2);
      }
    }
    assertTrue(numTens + " does not equal: " + 10, numTens == 10);
    CheckHits.checkExplanations(query, "field", searcher, true);
    Spans spans =
        query
            .createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f)
            .getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);
    assertTrue("spans is null and it shouldn't be", spans != null);
    // should be two matches per document
    int count = 0;
    // 100 hits times 2 matches per hit, we should have 200 in count
    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {
      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {
        count++;
      }
    }
    assertTrue(count + " does not equal: " + 200, count == 200);
  }

