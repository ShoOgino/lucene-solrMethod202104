  /**
   * Build a GeoPolygon out of one concave part and multiple convex parts given points, starting
   * edge, and whether starting edge is internal or not.
   *
   * @param rval is the composite polygon to add to.
   * @param seenConcave is true if a concave polygon has been seen in this generation yet.
   * @param planetModel is the planet model.
   * @param pointsList is a list of the GeoPoints to build an arbitrary polygon out of.
   * @param internalEdges specifies which edges are internal.
   * @param startPointIndex is the first of the points, constituting the starting edge.
   * @param startingEdge is the plane describing the starting edge.
   * @param holes is the list of holes in the polygon, or null if none.
   * @param testPoint is an (optional) test point, which will be used to determine if we are
   *     generating a shape with the proper sidedness. It is passed in only when the test point is
   *     supposed to be outside of the generated polygon. In this case, if the generated polygon is
   *     found to contain the point, the method exits early with a null return value. This only
   *     makes sense in the context of evaluating both possible choices and using logic to determine
   *     which result to use. If the test point is supposed to be within the shape, then it must be
   *     outside of the complement shape. If the test point is supposed to be outside the shape,
   *     then it must be outside of the original shape. Either way, we can figure out the right
   *     thing to use.
   * @return false if what was specified was inconsistent with what we generated. Specifically, if
   *     we specify an exterior point that is found in the interior of the shape we create here we
   *     return false, which is a signal that we chose our initial plane sidedness backwards.
   */
  static boolean buildPolygonShape(
      final GeoCompositePolygon rval,
      final MutableBoolean seenConcave,
      final PlanetModel planetModel,
      final List<GeoPoint> pointsList,
      final BitSet internalEdges,
      final int startPointIndex,
      final int endPointIndex,
      final SidedPlane startingEdge,
      final List<GeoPolygon> holes,
      final GeoPoint testPoint)
      throws TileException {

    // It could be the case that we need a concave polygon.  So we need to try and look for that
    // case as part of the general code for constructing complex polygons.

    // Note that there can be only one concave polygon.  This code will enforce that condition and
    // will return false if it is violated.

    // The code here must keep track of two lists of sided planes.  The first list contains the
    // planes consistent with a concave polygon.  This list will grow and shrink.  The second list
    // is built starting at the current edge that was last consistent with the concave polygon,
    // and contains all edges consistent with a convex polygon.
    // When that sequence of edges is done, then an internal edge is created and the identified
    // points are converted to a convex polygon.  That internal edge is used to extend the list
    // of edges in the concave polygon edge list.

    // The edge buffer.
    final EdgeBuffer edgeBuffer =
        new EdgeBuffer(pointsList, internalEdges, startPointIndex, endPointIndex, startingEdge);

    /*
    // Verify that the polygon does not self-intersect
    // Now, look for non-adjacent edges that cross.
    System.err.println("Looking for intersections...");
    System.err.println("Starting edge is: "+startingEdge);
    final Iterator<Edge> edgeIterator = edgeBuffer.iterator();
    while (edgeIterator.hasNext()) {
      final Edge edge = edgeIterator.next();
      final Set<Edge> excludedEdges = new HashSet<>();
      excludedEdges.add(edge);
      Edge oneBoundary = edgeBuffer.getPrevious(edge);
      while (oneBoundary.plane.isNumericallyIdentical(edge.plane)) {
        excludedEdges.add(oneBoundary);
        oneBoundary = edgeBuffer.getPrevious(oneBoundary);
      }
      excludedEdges.add(oneBoundary);
      Edge otherBoundary = edgeBuffer.getNext(edge);
      while (otherBoundary.plane.isNumericallyIdentical(edge.plane)) {
        excludedEdges.add(otherBoundary);
        otherBoundary = edgeBuffer.getNext(otherBoundary);
      }
      excludedEdges.add(otherBoundary);

      // Now go through all other edges and rule out any intersections
      final Iterator<Edge> compareIterator = edgeBuffer.iterator();
      while (compareIterator.hasNext()) {
        final Edge compareEdge = compareIterator.next();
        if (!excludedEdges.contains(compareEdge)) {
          // Found an edge we can compare with!
          //System.err.println("Found a compare edge...");
          boolean nonOverlapping = true;
          // We need the other boundaries though.
          Edge oneCompareBoundary = edgeBuffer.getPrevious(compareEdge);
          while (oneCompareBoundary.plane.isNumericallyIdentical(compareEdge.plane)) {
            if (excludedEdges.contains(oneCompareBoundary)) {
              //System.err.println(" excluded because oneCompareBoundary found to be in set");
              nonOverlapping = false;
              break;
            }
            oneCompareBoundary = edgeBuffer.getPrevious(oneCompareBoundary);
          }
          Edge otherCompareBoundary = edgeBuffer.getNext(compareEdge);
          while (otherCompareBoundary.plane.isNumericallyIdentical(compareEdge.plane)) {
            if (excludedEdges.contains(otherCompareBoundary)) {
              //System.err.println(" excluded because otherCompareBoundary found to be in set");
              nonOverlapping = false;
              break;
            }
            otherCompareBoundary = edgeBuffer.getNext(otherCompareBoundary);
          }
          if (nonOverlapping) {
            //System.err.println("Preparing to call findIntersections...");
            // Finally do an intersection test
            if (edge.plane.findIntersections(planetModel, compareEdge.plane, oneBoundary.plane, otherBoundary.plane, oneCompareBoundary.plane, otherCompareBoundary.plane).length > 0) {
              throw new IllegalArgumentException("polygon has intersecting edges");
            }
          }
        }
      }
    }
    */

    // Starting state:
    // The stopping point
    Edge stoppingPoint = edgeBuffer.pickOne();
    // The current edge
    Edge currentEdge = stoppingPoint;

    // Progressively look for convex sections.  If we find one, we emit it and replace it.
    // Keep going until we have been around once and nothing needed to change, and then
    // do the concave polygon, if necessary.
    while (true) {

      if (currentEdge == null) {
        // We're done!
        break;
      }

      // Find convexity around the current edge, if any
      final Boolean foundIt =
          findConvexPolygon(planetModel, currentEdge, rval, edgeBuffer, holes, testPoint);
      if (foundIt == null) {
        return false;
      }

      if (foundIt) {
        // New start point
        stoppingPoint = edgeBuffer.pickOne();
        currentEdge = stoppingPoint;
        // back around
        continue;
      }

      // Otherwise, go on to the next
      currentEdge = edgeBuffer.getNext(currentEdge);
      if (currentEdge == stoppingPoint) {
        break;
      }
    }

    // Look for any reason that the concave polygon cannot be created.
    // This test is really the converse of the one for a convex polygon.
    // Points on the edge of a convex polygon MUST be inside all the other
    // edges.  For a concave polygon, this check is still the same, except we have
    // to look at the reverse sided planes, not the forward ones.

    // If we find a point that is outside of the complementary edges, it means that
    // the point is in fact able to form a convex polygon with the edge it is
    // offending.

    // If what is left has any plane/point pair that is on the wrong side, we have to split using
    // one of the plane endpoints and the point in question.  This is best structured as a
    // recursion, if detected.

    // Note: Any edge that fails means (I think!!) that there's another edge that will also fail.
    // This is because each point is included in two edges.
    // So, when we look for a non-conforming edge, and we can find one (but can't use it), we
    // also can find another edge that we might be able to use instead.
    // If this is true, it means we should continue when we find a bad edge we can't use --
    // but we need to keep track of this, and fail hard if we don't find a place to split.
    boolean foundBadEdge = false;
    final Iterator<Edge> checkIterator = edgeBuffer.iterator();
    while (checkIterator.hasNext()) {
      final Edge checkEdge = checkIterator.next();
      final SidedPlane flippedPlane = new SidedPlane(checkEdge.plane);
      // Now walk around again looking for points that fail.
      final Iterator<Edge> confirmIterator = edgeBuffer.iterator();
      while (confirmIterator.hasNext()) {
        final Edge confirmEdge = confirmIterator.next();
        if (confirmEdge == checkEdge) {
          continue;
        }
        // Look for a point that is on the wrong side of the check edge.  This means that we can't
        // build the polygon.
        final GeoPoint thePoint;
        if (checkEdge.startPoint != confirmEdge.startPoint
            && checkEdge.endPoint != confirmEdge.startPoint
            && !flippedPlane.isWithin(confirmEdge.startPoint)) {
          thePoint = confirmEdge.startPoint;
        } else if (checkEdge.startPoint != confirmEdge.endPoint
            && checkEdge.endPoint != confirmEdge.endPoint
            && !flippedPlane.isWithin(confirmEdge.endPoint)) {
          thePoint = confirmEdge.endPoint;
        } else {
          thePoint = null;
        }
        if (thePoint != null) {
          // Note that we found a problem.
          foundBadEdge = true;
          // thePoint is on the wrong side of the complementary plane.  That means we cannot build a
          // concave polygon, because the complement would not be a legal convex polygon.
          // But we can take advantage of the fact that the distance between the edge and thePoint
          // is less than 180 degrees, and so we can split the would-be concave polygon into three
          // segments.  The first segment includes the edge and thePoint, and uses the sense of the
          // edge to determine the sense of the polygon.

          // This should be the only problematic part of the polygon.
          // We know that thePoint is on the "wrong" side of the edge -- that is, it's on the side
          // that the edge is pointing at.

          // The proposed tiling generates two new edges -- one from thePoint to the start point of
          // the edge we found, and the other from thePoint to the end point of the edge.  We
          // generate that as a triangle convex polygon, and tile the two remaining pieces.
          if (Plane.arePointsCoplanar(checkEdge.startPoint, checkEdge.endPoint, thePoint)) {
            // Can't build this particular tile because of colinearity, so advance to another that
            // maybe we can build.
            continue;
          }
          final List<GeoPoint> thirdPartPoints = new ArrayList<>(3);
          final BitSet thirdPartInternal = new BitSet();
          thirdPartPoints.add(checkEdge.startPoint);
          thirdPartInternal.set(0, checkEdge.isInternal);
          thirdPartPoints.add(checkEdge.endPoint);
          thirdPartInternal.set(1, true);
          thirdPartPoints.add(thePoint);
          assert checkEdge.plane.isWithin(thePoint)
              : "Point was on wrong side of complementary plane, so must be on the right side of the non-complementary plane!";
          // Check for illegal argument using try/catch rather than pre-emptive check, since it cuts
          // down on building objects for a rare case
          final GeoPolygon convexPart =
              new GeoConvexPolygon(planetModel, thirdPartPoints, holes, thirdPartInternal, true);
          // System.out.println("convex part = "+convexPart);
          rval.addShape(convexPart);

          // The part preceding the bad edge, back to thePoint, needs to be recursively
          // processed.  So, assemble what we need, which is basically a list of edges.
          Edge loopEdge = edgeBuffer.getPrevious(checkEdge);
          final List<GeoPoint> firstPartPoints = new ArrayList<>();
          final BitSet firstPartInternal = new BitSet();
          int i = 0;
          while (true) {
            firstPartPoints.add(loopEdge.endPoint);
            if (loopEdge.endPoint == thePoint) {
              break;
            }
            firstPartInternal.set(i++, loopEdge.isInternal);
            loopEdge = edgeBuffer.getPrevious(loopEdge);
          }
          firstPartInternal.set(i, true);
          // System.out.println("Doing first part...");
          if (buildPolygonShape(
                  rval,
                  seenConcave,
                  planetModel,
                  firstPartPoints,
                  firstPartInternal,
                  firstPartPoints.size() - 1,
                  0,
                  new SidedPlane(checkEdge.endPoint, false, checkEdge.startPoint, thePoint),
                  holes,
                  testPoint)
              == false) {
            return false;
          }
          // System.out.println("...done first part.");

          final List<GeoPoint> secondPartPoints = new ArrayList<>();
          final BitSet secondPartInternal = new BitSet();
          loopEdge = edgeBuffer.getNext(checkEdge);
          i = 0;
          while (true) {
            secondPartPoints.add(loopEdge.startPoint);
            if (loopEdge.startPoint == thePoint) {
              break;
            }
            secondPartInternal.set(i++, loopEdge.isInternal);
            loopEdge = edgeBuffer.getNext(loopEdge);
          }
          secondPartInternal.set(i, true);
          // System.out.println("Doing second part...");
          if (buildPolygonShape(
                  rval,
                  seenConcave,
                  planetModel,
                  secondPartPoints,
                  secondPartInternal,
                  secondPartPoints.size() - 1,
                  0,
                  new SidedPlane(checkEdge.startPoint, false, checkEdge.endPoint, thePoint),
                  holes,
                  testPoint)
              == false) {
            return false;
          }
          // System.out.println("... done second part");

          return true;
        }
      }
    }

    if (foundBadEdge) {
      // Unaddressed bad edge
      throw new TileException(
          "Could not tile polygon; found a pathological coplanarity that couldn't be addressed");
    }

    // No violations found: we know it's a legal concave polygon.

    // If there's anything left in the edge buffer, convert to concave polygon.
    // System.out.println("adding concave part");
    if (makeConcavePolygon(planetModel, rval, seenConcave, edgeBuffer, holes, testPoint) == false) {
      return false;
    }
    return true;
  }

