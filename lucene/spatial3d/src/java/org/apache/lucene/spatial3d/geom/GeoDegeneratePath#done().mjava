  /** Complete the path. */
  public void done() {
    if (isDone) {
      throw new IllegalStateException("Can't call done() twice");
    }
    if (points.size() == 0) {
      throw new IllegalArgumentException("Path must have at least one point");
    }
    isDone = true;

    endPoints = new ArrayList<>(points.size());
    segments = new ArrayList<>(points.size());

    // First, build all segments.  We'll then go back and build corresponding segment endpoints.
    GeoPoint lastPoint = null;
    for (final GeoPoint end : points) {
      if (lastPoint != null) {
        final Plane normalizedConnectingPlane = new Plane(lastPoint, end);
        if (normalizedConnectingPlane == null) {
          continue;
        }
        segments.add(new PathSegment(planetModel, lastPoint, end, normalizedConnectingPlane));
      }
      lastPoint = end;
    }

    if (segments.size() == 0) {
      // Simple circle
      final GeoPoint point = points.get(0);

      final SegmentEndpoint onlyEndpoint = new SegmentEndpoint(point);
      endPoints.add(onlyEndpoint);
      this.edgePoints = new GeoPoint[] {point};
      return;
    }

    // Create segment endpoints.  Use an appropriate constructor for the start and end of the path.
    for (int i = 0; i < segments.size(); i++) {
      final PathSegment currentSegment = segments.get(i);

      if (i == 0) {
        // Starting endpoint
        final SegmentEndpoint startEndpoint =
            new SegmentEndpoint(currentSegment.start, currentSegment.startCutoffPlane);
        endPoints.add(startEndpoint);
        this.edgePoints = new GeoPoint[] {currentSegment.start};
        continue;
      }

      endPoints.add(
          new SegmentEndpoint(
              currentSegment.start,
              segments.get(i - 1).endCutoffPlane,
              currentSegment.startCutoffPlane));
    }
    // Do final endpoint
    final PathSegment lastSegment = segments.get(segments.size() - 1);
    endPoints.add(new SegmentEndpoint(lastSegment.end, lastSegment.endCutoffPlane));
  }

