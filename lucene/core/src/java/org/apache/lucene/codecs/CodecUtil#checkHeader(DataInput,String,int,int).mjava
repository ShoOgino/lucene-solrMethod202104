  /**
   * Reads and validates a header previously written with {@link #writeHeader(DataOutput, String,
   * int)}.
   *
   * <p>When reading a file, supply the expected <code>codec</code> and an expected version range (
   * <code>minVersion to maxVersion</code>).
   *
   * @param in Input stream, positioned at the point where the header was previously written.
   *     Typically this is located at the beginning of the file.
   * @param codec The expected codec name.
   * @param minVersion The minimum supported expected version number.
   * @param maxVersion The maximum supported expected version number.
   * @return The actual version found, when a valid header is found that matches <code>codec</code>,
   *     with an actual version where {@code minVersion <= actual <= maxVersion}. Otherwise an
   *     exception is thrown.
   * @throws CorruptIndexException If the first four bytes are not {@link #CODEC_MAGIC}, or if the
   *     actual codec found is not <code>codec</code>.
   * @throws IndexFormatTooOldException If the actual version is less than <code>minVersion</code>.
   * @throws IndexFormatTooNewException If the actual version is greater than <code>maxVersion
   *     </code>.
   * @throws IOException If there is an I/O error reading from the underlying medium.
   * @see #writeHeader(DataOutput, String, int)
   */
  public static int checkHeader(DataInput in, String codec, int minVersion, int maxVersion)
      throws IOException {
    // Safety to guard against reading a bogus string:
    final int actualHeader = in.readInt();
    if (actualHeader != CODEC_MAGIC) {
      throw new CorruptIndexException(
          "codec header mismatch: actual header="
              + actualHeader
              + " vs expected header="
              + CODEC_MAGIC,
          in);
    }
    return checkHeaderNoMagic(in, codec, minVersion, maxVersion);
  }

