  public void test() throws IOException {

    Term allTerm = new Term(FIELD, "all");
    TermQuery termQuery = new TermQuery(allTerm);

    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);
    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);
    LeafReaderContext context = (LeafReaderContext) indexSearcher.getTopReaderContext();
    BulkScorer ts = weight.bulkScorer(context);
    // we have 2 documents with the term all in them, one document for all the
    // other values
    final List<TestHit> docs = new ArrayList<>();
    // must call next first

    ts.score(
        new SimpleCollector() {
          private int base = 0;
          private Scorable scorer;

          @Override
          public void setScorer(Scorable scorer) {
            this.scorer = scorer;
          }

          @Override
          public void collect(int doc) throws IOException {
            float score = scorer.score();
            doc = doc + base;
            docs.add(new TestHit(doc, score));
            assertTrue("score " + score + " is not greater than 0", score > 0);
            assertTrue(
                "Doc: " + doc + " does not equal 0 or doc does not equal 5", doc == 0 || doc == 5);
          }

          @Override
          protected void doSetNextReader(LeafReaderContext context) throws IOException {
            base = context.docBase;
          }

          @Override
          public ScoreMode scoreMode() {
            return ScoreMode.COMPLETE;
          }
        },
        null);
    assertTrue("docs Size: " + docs.size() + " is not: " + 2, docs.size() == 2);
    TestHit doc0 = docs.get(0);
    TestHit doc5 = docs.get(1);
    // The scores should be the same
    assertTrue(doc0.score + " does not equal: " + doc5.score, doc0.score == doc5.score);
  }

