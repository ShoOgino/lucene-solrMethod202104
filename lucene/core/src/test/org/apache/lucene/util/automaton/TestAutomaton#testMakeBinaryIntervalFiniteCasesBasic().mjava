  public void testMakeBinaryIntervalFiniteCasesBasic() throws Exception {
    // 0 (incl) - 00 (incl)
    byte[] zeros = new byte[3];
    Automaton a =
        makeBinaryInterval(new BytesRef(zeros, 0, 1), true, new BytesRef(zeros, 0, 2), true);
    assertTrue(Operations.isFinite(a));
    assertFalse(accepts(a, new BytesRef()));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 1)));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));

    // '' (incl) - 00 (incl)
    a = makeBinaryInterval(new BytesRef(), true, new BytesRef(zeros, 0, 2), true);
    assertTrue(Operations.isFinite(a));
    assertTrue(accepts(a, new BytesRef()));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 1)));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));

    // '' (excl) - 00 (incl)
    a = makeBinaryInterval(new BytesRef(), false, new BytesRef(zeros, 0, 2), true);
    assertTrue(Operations.isFinite(a));
    assertFalse(accepts(a, new BytesRef()));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 1)));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));

    // 0 (excl) - 00 (incl)
    a = makeBinaryInterval(new BytesRef(zeros, 0, 1), false, new BytesRef(zeros, 0, 2), true);
    assertTrue(Operations.isFinite(a));
    assertFalse(accepts(a, new BytesRef()));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 1)));
    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));

    // 0 (excl) - 00 (excl)
    a = makeBinaryInterval(new BytesRef(zeros, 0, 1), false, new BytesRef(zeros, 0, 2), false);
    assertTrue(Operations.isFinite(a));
    assertFalse(accepts(a, new BytesRef()));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 1)));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 2)));
    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));
  }

