  /*
   * Run N indexer and N searchers against single index as
   * stress test.
   */
  public void runTest(Directory directory) throws Exception {
    int indexThreads = TEST_NIGHTLY ? 2 : 1;
    int searchThreads = TEST_NIGHTLY ? 2 : 1;
    int indexIterations = TEST_NIGHTLY ? 10 : 1;
    int searchIterations = TEST_NIGHTLY ? 10 : 1;

    IndexWriterConfig conf =
        new IndexWriterConfig(new MockAnalyzer(random())).setMaxBufferedDocs(7);
    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);
    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());

    // Establish a base index of 100 docs:
    for (int i = 0; i < 100; i++) {
      Document d = new Document();
      d.add(newStringField("id", Integer.toString(i), Field.Store.YES));
      d.add(newTextField("contents", English.intToEnglish(i), Field.Store.NO));
      if ((i - 1) % 7 == 0) {
        writer.commit();
      }
      writer.addDocument(d);
    }
    writer.commit();

    IndexReader r = DirectoryReader.open(directory);
    assertEquals(100, r.numDocs());
    r.close();

    List<TimedThread> threads = new ArrayList<>();
    for (int i = 0; i < indexThreads; i++) {
      threads.add(new IndexerThread(writer, indexIterations));
    }
    for (int i = 0; i < searchThreads; i++) {
      threads.add(new SearcherThread(directory, searchIterations));
    }
    for (TimedThread thread : threads) {
      thread.start();
    }
    for (TimedThread thread : threads) {
      thread.join();
    }

    writer.close();

    for (TimedThread thread : threads) {
      if (thread.failure != null) {
        throw new RuntimeException("hit exception from " + thread, thread.failure);
      }
    }
  }

