  @Override
  public void setUp() throws Exception {
    super.setUp();
    UserDictionary userDictionary = readDict();
    analyzer =
        new Analyzer() {
          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(), userDictionary, DecompoundMode.NONE, false);
            return new TokenStreamComponents(tokenizer, tokenizer);
          }
        };
    analyzerWithPunctuation =
        new Analyzer() {
          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(), userDictionary, DecompoundMode.NONE, false, false);
            return new TokenStreamComponents(tokenizer, tokenizer);
          }
        };
    analyzerUnigram =
        new Analyzer() {
          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(), userDictionary, DecompoundMode.NONE, true);
            return new TokenStreamComponents(tokenizer, tokenizer);
          }
        };
    analyzerDecompound =
        new Analyzer() {
          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(), userDictionary, DecompoundMode.DISCARD, false);
            return new TokenStreamComponents(tokenizer);
          }
        };
    analyzerDecompoundKeep =
        new Analyzer() {
          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(), userDictionary, DecompoundMode.MIXED, false);
            return new TokenStreamComponents(tokenizer);
          }
        };
    analyzerReading =
        new Analyzer() {
          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(), userDictionary, DecompoundMode.NONE, false);
            KoreanReadingFormFilter filter = new KoreanReadingFormFilter(tokenizer);
            return new TokenStreamComponents(tokenizer, filter);
          }
        };
  }

