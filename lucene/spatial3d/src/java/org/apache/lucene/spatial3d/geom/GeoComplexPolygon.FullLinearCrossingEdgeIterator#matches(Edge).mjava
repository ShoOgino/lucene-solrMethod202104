    @Override
    public boolean matches(final Edge edge) {
      // System.out.println(" Edge [" + edge.startPoint + " --> " + edge.endPoint
      // + "] potentially crosses travel plane " + plane);
      // Early exit if the point is on the edge.
      if (edge.isWithin(thePointX, thePointY, thePointZ)) {
        // System.out.println("  Point is on the edge; in-set");
        onEdge = true;
        return false;
      }

      // This should precisely mirror what is in DualCrossingIterator, but without the dual
      // crossings.
      // Some edges are going to be given to us even when there's no real intersection, so do that
      // as a sanity check, first.
      final GeoPoint[] planeCrossings =
          plane.findIntersections(planetModel, edge.plane, bound, edge.startPlane, edge.endPlane);
      if (planeCrossings != null && planeCrossings.length == 0) {
        // Sometimes on the hairy edge an intersection will be missed.  This check finds those.
        if (!plane.evaluateIsZero(edge.startPoint) && !plane.evaluateIsZero(edge.endPoint)) {
          return true;
        }
      }

      // System.out.println("  Edge intersects travel plane " + plane);

      // Determine crossings of this edge against all inside/outside planes.  There's no further
      // need to look at the actual travel plane itself.
      final int aboveCrossings = countCrossings(edge, abovePlane, bound);
      aboveCrossingCount += aboveCrossings;
      final int belowCrossings = countCrossings(edge, belowPlane, bound);
      belowCrossingCount += belowCrossings;
      // System.out.println("  Above crossings = " + aboveCrossings + "; below crossings = "
      // + belowCrossings);

      return true;
    }

