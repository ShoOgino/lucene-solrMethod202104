  /**
   * Method that returns a random generated a GeoCircle under given constraints. Returns NULL if it
   * cannot build the GeoCircle under the given constraints.
   *
   * @param planetModel The planet model.
   * @param constraints The given constraints.
   * @return The random generated GeoCircle.
   */
  private GeoCircle exactCircle(PlanetModel planetModel, Constraints constraints) {
    int iterations = 0;
    while (iterations < MAX_SHAPE_ITERATIONS) {
      iterations++;
      final GeoPoint center = randomGeoPoint(planetModel, constraints);
      if (center == null) {
        continue;
      }
      final double radius = randomCutoffAngle();
      final int pow = random().nextInt(10) + 3;
      final double accuracy = random().nextDouble() * Math.pow(10, (-1) * pow);
      try {
        GeoCircle circle =
            GeoCircleFactory.makeExactGeoCircle(
                planetModel, center.getLatitude(), center.getLongitude(), radius, accuracy);
        if (!constraints.valid(circle)) {
          continue;
        }
        return circle;
      } catch (IllegalArgumentException e) {
        continue;
      }
    }
    return null;
  }

