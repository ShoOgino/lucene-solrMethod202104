  /**
   * Parses a query which searches on the fields specified.
   *
   * <p>If x fields are specified, this effectively constructs:
   *
   * <pre>
   * <code>
   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)
   * </code>
   * </pre>
   *
   * @param queries Queries strings to parse
   * @param fields Fields to search on
   * @param analyzer Analyzer to use
   * @throws IllegalArgumentException if the length of the queries array differs from the length of
   *     the fields array
   */
  public static Query parse(String[] queries, String[] fields, Analyzer analyzer)
      throws QueryNodeException {
    if (queries.length != fields.length)
      throw new IllegalArgumentException("queries.length != fields.length");
    BooleanQuery.Builder bQuery = new BooleanQuery.Builder();

    StandardQueryParser qp = new StandardQueryParser();
    qp.setAnalyzer(analyzer);

    for (int i = 0; i < fields.length; i++) {
      Query q = qp.parse(queries[i], fields[i]);

      if (q != null) { // q never null, just being defensive
        bQuery.add(q, BooleanClause.Occur.SHOULD);
      }
    }
    return bQuery.build();
  }

