  public void testComputeScoresOnlyOnce() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
    Document doc = new Document();
    StringField text = new StringField("text", "foo", Store.NO);
    doc.add(text);
    NumericDocValuesField relevance = new NumericDocValuesField("relevance", 1);
    doc.add(relevance);
    w.addDocument(doc);
    text.setStringValue("bar");
    w.addDocument(doc);
    text.setStringValue("baz");
    w.addDocument(doc);
    IndexReader reader = w.getReader();
    Query foo = new TermQuery(new Term("text", "foo"));
    Query bar = new TermQuery(new Term("text", "bar"));
    foo = new BoostQuery(foo, 2);
    Query baz = new TermQuery(new Term("text", "baz"));
    baz = new BoostQuery(baz, 3);
    Query query =
        new BooleanQuery.Builder()
            .add(foo, Occur.SHOULD)
            .add(bar, Occur.SHOULD)
            .add(baz, Occur.SHOULD)
            .build();
    final IndexSearcher searcher = new IndexSearcher(reader);
    for (Sort sort :
        new Sort[] {new Sort(FIELD_SCORE), new Sort(new SortField("f", SortField.Type.SCORE))}) {
      final TopFieldCollector topCollector =
          TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), Integer.MAX_VALUE);
      final Collector assertingCollector =
          new Collector() {
            @Override
            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {
              final LeafCollector in = topCollector.getLeafCollector(context);
              return new FilterLeafCollector(in) {
                @Override
                public void setScorer(final Scorable scorer) throws IOException {
                  Scorable s =
                      new FilterScorable(scorer) {

                        int lastComputedDoc = -1;

                        @Override
                        public float score() throws IOException {
                          if (lastComputedDoc == docID()) {
                            throw new AssertionError("Score computed twice on " + docID());
                          }
                          lastComputedDoc = docID();
                          return scorer.score();
                        }
                      };
                  super.setScorer(s);
                }
              };
            }

            @Override
            public ScoreMode scoreMode() {
              return topCollector.scoreMode();
            }
          };
      searcher.search(query, assertingCollector);
    }
    reader.close();
    w.close();
    dir.close();
  }

