  /** Returns a leaf node that will match any document */
  public static QueryTree anyTerm(String reason) {
    return new QueryTree() {
      @Override
      public double weight() {
        return 0;
      }

      @Override
      public void collectTerms(BiConsumer<String, BytesRef> termCollector) {
        termCollector.accept(
            TermFilteredPresearcher.ANYTOKEN_FIELD, new BytesRef(TermFilteredPresearcher.ANYTOKEN));
      }

      @Override
      public boolean advancePhase(double minWeight) {
        return false;
      }

      @Override
      public String toString(int depth) {
        return space(depth) + "ANY[" + reason + "]";
      }
    };
  }

