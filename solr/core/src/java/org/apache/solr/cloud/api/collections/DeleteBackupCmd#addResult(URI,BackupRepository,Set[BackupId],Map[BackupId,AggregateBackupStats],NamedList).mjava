    @SuppressWarnings("unchecked")
    private void addResult(URI backupPath, BackupRepository repository,
                           Set<BackupId> backupIdDeletes,
                           Map<BackupId, AggregateBackupStats> backupIdToCollectionBackupPoint,
                           @SuppressWarnings({"rawtypes"}) NamedList results) {

        String collectionName = null;
        @SuppressWarnings({"rawtypes"})
        List<NamedList> shardBackupIdDetails = new ArrayList<>();
        results.add("deleted", shardBackupIdDetails);
        for (BackupId backupId : backupIdDeletes) {
            NamedList<Object> backupIdResult = new NamedList<>();

            try {
                BackupProperties props = BackupProperties.readFrom(repository, backupPath, BackupFilePaths.getBackupPropsName(backupId));
                backupIdResult.add(START_TIME_PROP, props.getStartTime());
                if (collectionName == null) {
                    collectionName = props.getCollection();
                    results.add(COLLECTION_NAME_PROP, collectionName);
                }
            } catch (IOException e) {
                //prop file not found
            }

            AggregateBackupStats cbp = backupIdToCollectionBackupPoint.getOrDefault(backupId, new AggregateBackupStats());
            backupIdResult.add("backupId", backupId.getId());
            backupIdResult.add("size", cbp.getTotalSize());
            backupIdResult.add("numFiles", cbp.getNumFiles());
            shardBackupIdDetails.add(backupIdResult);
        }
    }

