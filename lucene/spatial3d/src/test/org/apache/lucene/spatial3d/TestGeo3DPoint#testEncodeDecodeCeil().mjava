  public void testEncodeDecodeCeil() throws Exception {
    PlanetModel planetModel = randomPlanetModel();
    // just for testing quantization error
    final double ENCODING_TOLERANCE = planetModel.DECODE;

    int iters = atLeast(10000);
    for (int iter = 0; iter < iters; iter++) {
      GeoPoint point =
          new GeoPoint(
              planetModel,
              toRadians(GeoTestUtil.nextLatitude()),
              toRadians(GeoTestUtil.nextLongitude()));
      double xEnc = planetModel.decodeValue(planetModel.encodeValue(point.x));
      assertEquals(
          "x=" + point.x + " xEnc=" + xEnc + " diff=" + (point.x - xEnc),
          point.x,
          xEnc,
          ENCODING_TOLERANCE);

      double yEnc = planetModel.decodeValue(planetModel.encodeValue(point.y));
      assertEquals(
          "y=" + point.y + " yEnc=" + yEnc + " diff=" + (point.y - yEnc),
          point.y,
          yEnc,
          ENCODING_TOLERANCE);

      double zEnc = planetModel.decodeValue(planetModel.encodeValue(point.z));
      assertEquals(
          "z=" + point.z + " zEnc=" + zEnc + " diff=" + (point.z - zEnc),
          point.z,
          zEnc,
          ENCODING_TOLERANCE);
    }

    // check edge/interesting cases explicitly
    double planetMax = planetModel.getMaximumMagnitude();
    for (double value : new double[] {0.0, -planetMax, planetMax}) {
      assertEquals(
          value, planetModel.decodeValue(planetModel.encodeValue(value)), ENCODING_TOLERANCE);
    }
  }

