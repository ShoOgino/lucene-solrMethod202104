  /** Returns true if cell was added as a leaf. If it wasn't it recursively descends. */
  private boolean recursiveTraverseAndPrune(
      Cell cell, Shape shape, int detailLevel, List<Cell> result) {

    if (cell.getLevel() == detailLevel) {
      cell.setLeaf(); // FYI might already be a leaf
    }
    if (cell.isLeaf()) {
      result.add(cell);
      return true;
    }
    if (cell.getLevel() != 0) {
      result.add(cell);
    }

    int leaves = 0;
    CellIterator subCells = cell.getNextLevelCells(shape);
    while (subCells.hasNext()) {
      Cell subCell = subCells.next();
      if (recursiveTraverseAndPrune(subCell, shape, detailLevel, result)) {
        leaves++;
      }
    }

    if (!(cell instanceof CellCanPrune)) {
      // Cannot prune so return false
      return false;
    }

    // can we prune?
    if (leaves == ((CellCanPrune) cell).getSubCellsSize() && cell.getLevel() != 0) {
      // Optimization: substitute the parent as a leaf instead of adding all
      // children as leaves

      // remove the leaves
      do {
        result.remove(result.size() - 1); // remove last
      } while (--leaves > 0);
      // add cell as the leaf
      cell.setLeaf();
      return true;
    }
    return false;
  }

