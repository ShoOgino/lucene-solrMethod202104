  @Test
  public void doTestDetails() throws Exception {
    followerJetty.stop();
    
    follower.setTestPort(leaderJetty.getLocalPort());
    follower.copyConfigFile(CONF_DIR + "solrconfig-follower.xml", "solrconfig.xml");
    followerJetty = createAndStartJetty(follower);
    
    followerClient.close();
    leaderClient.close();
    leaderClient = createNewSolrClient(leaderJetty.getLocalPort());
    followerClient = createNewSolrClient(followerJetty.getLocalPort());
    
    clearIndexWithReplication();
    { 
      NamedList<Object> details = getDetails(leaderClient);
      
      assertEquals("leader isLeader?",
                   "true", details.get("isLeader"));
      assertEquals("leader isFollower?",
                   "false", details.get("isFollower"));
      assertNotNull("leader has leader section",
                    details.get("leader"));
    }

    // check details on the follower a couple of times before & after fetching
    for (int i = 0; i < 3; i++) {
      NamedList<Object> details = getDetails(followerClient);
      assertNotNull(i + ": " + details);
      assertNotNull(i + ": " + details.toString(), details.get("follower"));

      if (i > 0) {
        rQuery(i, "*:*", followerClient);
        @SuppressWarnings({"rawtypes"})
        List replicatedAtCount = (List) ((NamedList) details.get("follower")).get("indexReplicatedAtList");
        int tries = 0;
        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {
          Thread.sleep(1000);
          details = getDetails(followerClient);
          replicatedAtCount = (List) ((NamedList) details.get("follower")).get("indexReplicatedAtList");
        }
        
        assertNotNull("Expected to see that the follower has replicated" + i + ": " + details.toString(), replicatedAtCount);
        
        // we can have more replications than we added docs because a replication can legally fail and try 
        // again (sometimes we cannot merge into a live index and have to try again)
        assertTrue("i:" + i + " replicationCount:" + replicatedAtCount.size(), replicatedAtCount.size() >= i); 
      }

      assertEquals(i + ": " + "follower isLeader?", "false", details.get("isLeader"));
      assertEquals(i + ": " + "follower isFollower?", "true", details.get("isFollower"));
      assertNotNull(i + ": " + "follower has follower section", details.get("follower"));
      // SOLR-2677: assert not false negatives
      Object timesFailed = ((NamedList)details.get("follower")).get(IndexFetcher.TIMES_FAILED);
      // SOLR-7134: we can have a fail because some mock index files have no checksum, will
      // always be downloaded, and may not be able to be moved into the existing index
      assertTrue(i + ": " + "follower has fetch error count: " + timesFailed, timesFailed == null || ((Number) timesFailed).intValue() == 1);

      if (3 != i) {
        // index & fetch
        index(leaderClient, "id", i, "name", "name = " + i);
        leaderClient.commit();
        pullFromTo(leaderJetty, followerJetty);
      }
    }

    SolrInstance repeater = null;
    JettySolrRunner repeaterJetty = null;
    SolrClient repeaterClient = null;
    try {
      repeater = new SolrInstance(createTempDir("solr-instance").toFile(), "repeater", leaderJetty.getLocalPort());
      repeater.setUp();
      repeaterJetty = createAndStartJetty(repeater);
      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());

      
      NamedList<Object> details = getDetails(repeaterClient);
      
      assertEquals("repeater isLeader?",
                   "true", details.get("isLeader"));
      assertEquals("repeater isFollower?",
                   "true", details.get("isFollower"));
      assertNotNull("repeater has leader section",
                    details.get("leader"));
      assertNotNull("repeater has follower section",
                    details.get("follower"));

    } finally {
      try { 
        if (repeaterJetty != null) repeaterJetty.stop(); 
      } catch (Exception e) { /* :NOOP: */ }
      if (repeaterClient != null) repeaterClient.close();
    }
  }

