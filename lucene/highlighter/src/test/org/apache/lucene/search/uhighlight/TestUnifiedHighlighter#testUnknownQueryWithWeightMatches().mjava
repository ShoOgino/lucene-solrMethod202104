  public void testUnknownQueryWithWeightMatches() throws IOException {
    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);

    Field body = new Field("body", "", fieldType);
    Document doc = new Document();
    doc.add(body);

    body.setStringValue("Test a one sentence document.");
    iw.addDocument(doc);

    IndexReader ir = iw.getReader();
    iw.close();

    IndexSearcher searcher = newSearcher(ir);
    UnifiedHighlighter highlighter =
        randomUnifiedHighlighter(
            searcher, indexAnalyzer, EnumSet.of(HighlightFlag.WEIGHT_MATCHES), null);
    Query query =
        new BooleanQuery.Builder()
            // simple term query body:one
            .add(new TermQuery(new Term(body.name(), "one")), BooleanClause.Occur.MUST)
            // a custom query, a leaf, that which matches body:sentence
            //    Note this isn't even an MTQ.  What matters is that Weight.matches works.
            .add(
                new Query() {
                  @Override
                  public String toString(String field) {
                    return "bogus";
                  }

                  @Override
                  public Query rewrite(IndexReader reader) {
                    return this;
                  }

                  // we don't visit terms, and we don't expose an automata.  Thus this appears as
                  // some unknown leaf.
                  @Override
                  public void visit(QueryVisitor visitor) {
                    if (visitor.acceptField(body.name())) {
                      visitor.visitLeaf(this);
                    }
                  }

                  @Override
                  public boolean equals(Object obj) {
                    return this == obj;
                  }

                  @Override
                  public int hashCode() {
                    return System.identityHashCode(this);
                  }

                  @Override
                  public Weight createWeight(
                      IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {
                    // TODO maybe should loop through index terms to show we can see other terms
                    return new TermQuery(new Term(body.name(), "sentence"))
                        .createWeight(searcher, scoreMode, boost);
                  }
                },
                BooleanClause.Occur.MUST)
            .build();
    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    assertEquals(1, topDocs.totalHits.value);
    String[] snippets = highlighter.highlight("body", query, topDocs);
    assertEquals(1, snippets.length);
    assertEquals("Test a <b>one</b> <b>sentence</b> document.", snippets[0]);

    ir.close();
  }

