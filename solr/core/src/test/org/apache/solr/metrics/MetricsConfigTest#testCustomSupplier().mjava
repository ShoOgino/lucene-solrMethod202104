  @Test
  public void testCustomSupplier() throws Exception {
    System.setProperty("counter.class", MockCounterSupplier.class.getName());
    System.setProperty("meter.class", MockMeterSupplier.class.getName());
    System.setProperty("timer.class", MockTimerSupplier.class.getName());
    System.setProperty("histogram.class", MockHistogramSupplier.class.getName());
    NodeConfig cfg = loadNodeConfig("solr-metricsconfig.xml");
    SolrMetricManager mgr = new SolrMetricManager(cfg.getSolrResourceLoader(), cfg.getMetricsConfig());
    assertTrue(mgr.getCounterSupplier() instanceof MockCounterSupplier);
    assertTrue(mgr.getMeterSupplier() instanceof MockMeterSupplier);
    assertTrue(mgr.getTimerSupplier() instanceof MockTimerSupplier);
    assertTrue(mgr.getHistogramSupplier() instanceof MockHistogramSupplier);

    // assert setter-based configuration
    MockCounterSupplier mockCounterSupplier = ((MockCounterSupplier)mgr.getCounterSupplier());
    assertEquals("bar", mockCounterSupplier.foo);
    MockMeterSupplier mockMeterSupplier = ((MockMeterSupplier)mgr.getMeterSupplier());
    assertEquals("bar", mockMeterSupplier.foo);
    MockTimerSupplier mockTimerSupplier = ((MockTimerSupplier)mgr.getTimerSupplier());
    assertEquals(true, mockTimerSupplier.boolParam);
    assertEquals("strParam", mockTimerSupplier.strParam);
    assertEquals(-100, mockTimerSupplier.intParam);

    // assert PluginInfoInitialized-based configuration
    MockHistogramSupplier mockHistogramSupplier = ((MockHistogramSupplier)mgr.getHistogramSupplier());
    assertNotNull(mockHistogramSupplier.info);
  }

