  /**
   * Creates an NGramTokenFilter that, for a given input term, produces all contained n-grams with
   * lengths &gt;= minGram and &lt;= maxGram. Will optionally preserve the original term when its
   * length is outside of the defined range.
   *
   * <p>Note: Care must be taken when choosing minGram and maxGram; depending on the input token
   * size, this filter potentially produces a huge number of terms.
   *
   * @param input {@link TokenStream} holding the input to be tokenized
   * @param minGram the minimum length of the generated n-grams
   * @param maxGram the maximum length of the generated n-grams
   * @param preserveOriginal Whether or not to keep the original term when it is shorter than
   *     minGram or longer than maxGram
   */
  public NGramTokenFilter(TokenStream input, int minGram, int maxGram, boolean preserveOriginal) {
    super(input);
    if (minGram < 1) {
      throw new IllegalArgumentException("minGram must be greater than zero");
    }
    if (minGram > maxGram) {
      throw new IllegalArgumentException("minGram must not be greater than maxGram");
    }
    this.minGram = minGram;
    this.maxGram = maxGram;
    this.preserveOriginal = preserveOriginal;
  }

