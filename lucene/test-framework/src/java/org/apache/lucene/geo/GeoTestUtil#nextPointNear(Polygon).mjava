  /** Returns next point (lat/lon) for testing near a Polygon */
  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these
  // strategies
  public static double[] nextPointNear(Polygon polygon) {
    double polyLats[] = polygon.getPolyLats();
    double polyLons[] = polygon.getPolyLons();
    Polygon holes[] = polygon.getHoles();

    // if there are any holes, target them aggressively
    if (holes.length > 0 && random().nextInt(3) == 0) {
      return nextPointNear(holes[random().nextInt(holes.length)]);
    }

    int surpriseMe = random().nextInt(97);
    if (surpriseMe == 0) {
      // purely random
      return new double[] {nextLatitude(), nextLongitude()};
    } else if (surpriseMe < 5) {
      // purely random within bounding box
      return new double[] {
        nextLatitudeBetween(polygon.minLat, polygon.maxLat),
        nextLongitudeBetween(polygon.minLon, polygon.maxLon)
      };
    } else if (surpriseMe < 20) {
      // target a vertex
      int vertex = random().nextInt(polyLats.length - 1);
      return new double[] {
        nextLatitudeNear(polyLats[vertex], polyLats[vertex + 1] - polyLats[vertex]),
        nextLongitudeNear(polyLons[vertex], polyLons[vertex + 1] - polyLons[vertex])
      };
    } else if (surpriseMe < 30) {
      // target points around the bounding box edges
      Polygon container =
          boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));
      double containerLats[] = container.getPolyLats();
      double containerLons[] = container.getPolyLons();
      int startVertex = random().nextInt(containerLats.length - 1);
      return nextPointAroundLine(
          containerLats[startVertex], containerLons[startVertex],
          containerLats[startVertex + 1], containerLons[startVertex + 1]);
    } else {
      // target points around diagonals between vertices
      int startVertex = random().nextInt(polyLats.length - 1);
      // but favor edges heavily
      int endVertex =
          random().nextBoolean() ? startVertex + 1 : random().nextInt(polyLats.length - 1);
      return nextPointAroundLine(
          polyLats[startVertex], polyLons[startVertex],
          polyLats[endVertex], polyLons[endVertex]);
    }
  }

