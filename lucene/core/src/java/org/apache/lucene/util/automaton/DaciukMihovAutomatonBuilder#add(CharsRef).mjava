  /**
   * Add another character sequence to this automaton. The sequence must be lexicographically larger
   * or equal compared to any previous sequences added to this automaton (the input must be sorted).
   */
  public void add(CharsRef current) {
    if (current.length > MAX_TERM_LENGTH) {
      throw new IllegalArgumentException(
          "This builder doesn't allow terms that are larger than 1,000 characters, got " + current);
    }
    assert stateRegistry != null : "Automaton already built.";
    assert previous == null || comparator.compare(previous, current) <= 0
        : "Input must be in sorted UTF-8 order: " + previous + " >= " + current;
    assert setPrevious(current);

    // Descend in the automaton (find matching prefix).
    int pos = 0, max = current.length();
    State next, state = root;
    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {
      state = next;
      // todo, optimize me
      pos += Character.charCount(Character.codePointAt(current, pos));
    }

    if (state.hasChildren()) replaceOrRegister(state);

    addSuffix(state, current, pos);
  }

