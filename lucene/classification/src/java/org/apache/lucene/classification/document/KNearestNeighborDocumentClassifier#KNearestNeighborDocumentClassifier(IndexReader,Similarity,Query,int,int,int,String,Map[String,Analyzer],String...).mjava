  /**
   * Creates a {@link KNearestNeighborClassifier}.
   *
   * @param indexReader the reader on the index to be used for classification
   * @param similarity the {@link Similarity} to be used by the underlying {@link IndexSearcher} or
   *     {@code null} (defaults to {@link org.apache.lucene.search.similarities.BM25Similarity})
   * @param query a {@link org.apache.lucene.search.Query} to eventually filter the docs used for
   *     training the classifier, or {@code null} if all the indexed docs should be used
   * @param k the no. of docs to select in the MLT results to find the nearest neighbor
   * @param minDocsFreq {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter
   * @param minTermFreq {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter
   * @param classFieldName the name of the field used as the output for the classifier
   * @param field2analyzer map with key a field name and the related
   *     {org.apache.lucene.analysis.Analyzer}
   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can
   *     contain boosting indication e.g. title^10
   */
  public KNearestNeighborDocumentClassifier(
      IndexReader indexReader,
      Similarity similarity,
      Query query,
      int k,
      int minDocsFreq,
      int minTermFreq,
      String classFieldName,
      Map<String, Analyzer> field2analyzer,
      String... textFieldNames) {
    super(
        indexReader,
        similarity,
        null,
        query,
        k,
        minDocsFreq,
        minTermFreq,
        classFieldName,
        textFieldNames);
    this.field2analyzer = field2analyzer;
  }

