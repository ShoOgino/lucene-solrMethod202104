  private IndexableFieldType randomFieldType(Random r) {
    FieldType type = new FieldType();

    if (r.nextBoolean()) {
      IndexOptions[] values = IndexOptions.values();
      type.setIndexOptions(values[r.nextInt(values.length)]);
      type.setOmitNorms(r.nextBoolean());

      if (r.nextBoolean()) {
        type.setStoreTermVectors(true);
        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {
          type.setStoreTermVectorPositions(r.nextBoolean());
          type.setStoreTermVectorOffsets(r.nextBoolean());
          if (type.storeTermVectorPositions()) {
            type.setStoreTermVectorPayloads(r.nextBoolean());
          }
        }
      }
    }

    if (r.nextBoolean()) {
      DocValuesType[] values = DocValuesType.values();
      type.setDocValuesType(values[r.nextInt(values.length)]);
    }

    if (r.nextBoolean()) {
      int dimension = 1 + r.nextInt(PointValues.MAX_DIMENSIONS);
      int indexDimension = 1 + r.nextInt(Math.min(dimension, PointValues.MAX_INDEX_DIMENSIONS));
      int dimensionNumBytes = 1 + r.nextInt(PointValues.MAX_NUM_BYTES);
      type.setDimensions(dimension, indexDimension, dimensionNumBytes);
    }

    if (r.nextBoolean()) {
      int dimension = 1 + r.nextInt(VectorValues.MAX_DIMENSIONS);
      VectorValues.SearchStrategy searchStrategy =
          RandomPicks.randomFrom(r, VectorValues.SearchStrategy.values());
      type.setVectorDimensionsAndSearchStrategy(dimension, searchStrategy);
    }

    return type;
  }

