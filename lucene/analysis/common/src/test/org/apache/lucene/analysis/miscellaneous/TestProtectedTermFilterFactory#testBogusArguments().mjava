  /** Test that bogus arguments result in exception */
  public void testBogusArguments() throws Exception {
    IllegalArgumentException exception =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                tokenFilterFactory(
                    "ProtectedTerm", "protected", "protected-1.txt", "bogusArg", "bogusValue"));
    assertTrue(exception.getMessage().contains("Unknown parameters"));

    // same-named wrapped filters
    exception =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                tokenFilterFactory(
                    "ProtectedTerm",
                    "protected",
                    "protected-1.txt",
                    "wrappedFilters",
                    "truncate, truncate"));
    assertTrue(exception.getMessage().contains("wrappedFilters contains duplicate"));

    // case-insensitive same-named wrapped filters
    exception =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                tokenFilterFactory(
                    "ProtectedTerm",
                    "protected",
                    "protected-1.txt",
                    "wrappedFilters",
                    "TRUNCATE, truncate"));
    assertTrue(exception.getMessage().contains("wrappedFilters contains duplicate"));

    // case-insensitive same-named wrapped filter IDs
    exception =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                tokenFilterFactory(
                    "ProtectedTerm",
                    "protected",
                    "protected-1.txt",
                    "wrappedFilters",
                    "truncate-ABC, truncate-abc"));
    assertTrue(exception.getMessage().contains("wrappedFilters contains duplicate"));

    // mismatched wrapped filter and associated args
    exception =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                tokenFilterFactory(
                    "ProtectedTerm",
                    "protected",
                    "protected-1.txt",
                    "wrappedFilters",
                    "truncate-A, reversestring, truncate-B",
                    "truncate.prefixLength",
                    "3",
                    "truncate-A.prefixLength",
                    "2"));
    assertTrue(exception.getMessage().contains("Unknown parameters: {truncate.prefixLength=3}"));

    // missing required arg(s) for wrapped filter
    String str = "Foo Clara Bar David";
    TokenStream stream = whitespaceMockTokenizer(str);
    exception =
        expectThrows(
            IllegalArgumentException.class,
            () ->
                tokenFilterFactory(
                        "ProtectedTerm", "protected", "protected-1.txt", "wrappedFilters", "length")
                    .create(stream));
    assertTrue(exception.getMessage().contains("Configuration Error: missing parameter"));
  }

