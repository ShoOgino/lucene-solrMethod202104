  public void testAddAndUpdateRandom() throws IOException {
    AtomicInteger newCalled = new AtomicInteger(0);
    AtomicInteger addCalled = new AtomicInteger(0);
    TermsHashPerField hash = createNewHash(newCalled, addCalled);
    hash.start(null, true);
    class Posting {
      int termId = -1;
      final TreeMap<Integer, Integer> docAndFreq = new TreeMap<>();
    }
    Map<BytesRef, Posting> postingMap = new HashMap<>();
    int numStrings = 1 + random().nextInt(200);
    for (int i = 0; i < numStrings; i++) {
      String randomString =
          RandomStrings.randomRealisticUnicodeOfCodepointLengthBetween(random(), 1, 10);
      postingMap.putIfAbsent(new BytesRef(randomString), new Posting());
    }
    List<BytesRef> bytesRefs = Arrays.asList(postingMap.keySet().toArray(new BytesRef[0]));
    Collections.sort(bytesRefs);
    int numDocs = 1 + random().nextInt(200);
    int termOrd = 0;
    for (int i = 0; i < numDocs; i++) {
      int numTerms = 1 + random().nextInt(200);
      int doc = i;
      for (int j = 0; i < numTerms; i++) {
        BytesRef ref = RandomPicks.randomFrom(random(), bytesRefs);
        Posting posting = postingMap.get(ref);
        if (posting.termId == -1) {
          posting.termId = termOrd++;
        }
        posting.docAndFreq.putIfAbsent(doc, 0);
        posting.docAndFreq.compute(doc, (key, oldVal) -> oldVal + 1);
        hash.add(ref, doc);
      }
      hash.finish();
    }
    List<Posting> values =
        postingMap.values().stream().filter(x -> x.termId != -1).collect(Collectors.toList());
    Collections.shuffle(values, random()); // term order doesn't matter
    final ByteSliceReader reader = new ByteSliceReader();
    for (Posting p : values) {
      hash.initReader(reader, p.termId, 0);
      boolean eof = false;
      int prefDoc = 0;
      for (Map.Entry<Integer, Integer> entry : p.docAndFreq.entrySet()) {
        assertFalse("the reader must not be EOF here", eof);
        eof =
            assertDocAndFreq(
                reader,
                (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray,
                prefDoc,
                p.termId,
                entry.getKey(),
                entry.getValue());
        prefDoc = entry.getKey();
      }
      assertTrue("the last posting must be EOF on the reader", eof);
    }
  }

