  public void testCloseUnderException() throws IOException {
    Directory dir = newDirectory();
    IndexWriter writer =
        new IndexWriter(dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));
    writer.addDocument(new Document());
    writer.commit();
    writer.close();
    final int iters = 1000 + 1 + random().nextInt(20);
    for (int j = 0; j < iters; j++) {
      DirectoryReader open = DirectoryReader.open(dir);
      final boolean throwOnClose = !rarely();
      LeafReader leaf = getOnlyLeafReader(open);
      FilterLeafReader reader =
          new FilterLeafReader(leaf) {
            @Override
            public CacheHelper getCoreCacheHelper() {
              return in.getCoreCacheHelper();
            }

            @Override
            public CacheHelper getReaderCacheHelper() {
              return in.getReaderCacheHelper();
            }

            @Override
            protected void doClose() throws IOException {
              try {
                super.doClose();
              } finally {
                if (throwOnClose) {
                  throw new IllegalStateException("BOOM!");
                }
              }
            }
          };
      int listenerCount = random().nextInt(20);
      AtomicInteger count = new AtomicInteger();
      boolean faultySet = false;
      for (int i = 0; i < listenerCount; i++) {
        if (rarely()) {
          faultySet = true;
          reader.getReaderCacheHelper().addClosedListener(new FaultyListener());
        } else {
          count.incrementAndGet();
          reader
              .getReaderCacheHelper()
              .addClosedListener(new CountListener(count, reader.getReaderCacheHelper().getKey()));
        }
      }
      if (!faultySet && !throwOnClose) {
        reader.getReaderCacheHelper().addClosedListener(new FaultyListener());
      }

      IllegalStateException expected =
          expectThrows(IllegalStateException.class, () -> reader.close());

      if (throwOnClose) {
        assertEquals("BOOM!", expected.getMessage());
      } else {
        assertEquals("GRRRRRRRRRRRR!", expected.getMessage());
      }

      expectThrows(AlreadyClosedException.class, () -> reader.terms("someField"));

      if (random().nextBoolean()) {
        reader.close(); // call it again
      }
      assertEquals(0, count.get());
    }
    dir.close();
  }

