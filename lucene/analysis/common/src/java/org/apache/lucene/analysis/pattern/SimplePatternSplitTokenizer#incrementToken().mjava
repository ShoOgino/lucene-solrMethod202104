  @Override
  public boolean incrementToken() throws IOException {

    int offsetStart = offset;

    clearAttributes();

    tokenUpto = 0;

    while (true) {
      sepUpto = 0;

      // The runDFA operates in Unicode space, not UTF16 (java's char):
      int ch = nextCodePoint();
      if (ch == -1) {
        if (tokenUpto > 0) {
          fillToken(offsetStart);
          return true;
        } else {
          return false;
        }
      }
      int state = runDFA.step(0, ch);

      if (state != -1) {
        // a token separator just possibly started; keep scanning to see if the token is accepted:
        int lastAcceptLength = -1;
        do {

          if (runDFA.isAccept(state)) {
            // record that the token separator matches here, but keep scanning in case a longer
            // match also works (greedy):
            lastAcceptLength = sepUpto;
          }

          ch = nextCodePoint();
          if (ch == -1) {
            break;
          }
          state = runDFA.step(state, ch);
        } while (state != -1);

        if (lastAcceptLength != -1) {
          // we found a token separator; strip the trailing separator we just matched from the
          // token:
          int extra = sepUpto - lastAcceptLength;
          if (extra != 0) {
            pushBack(extra);
          }
          tokenUpto -= lastAcceptLength;
          if (tokenUpto > 0) {
            fillToken(offsetStart);
            return true;
          } else {
            // we matched one token separator immediately after another
            offsetStart = offset;
          }
        } else if (ch == -1) {
          if (tokenUpto > 0) {
            fillToken(offsetStart);
            return true;
          } else {
            return false;
          }
        } else {
          // false alarm: there was no token separator here; push back all but the first character
          // we scanned
          pushBack(sepUpto - 1);
        }
      }
    }
  }

