  FST<T> doTest(int prune1, int prune2, boolean allowRandomSuffixSharing) throws IOException {
    if (LuceneTestCase.VERBOSE) {
      System.out.println("\nTEST: prune1=" + prune1 + " prune2=" + prune2);
    }

    final FSTCompiler<T> fstCompiler =
        new FSTCompiler.Builder<>(
                inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4, outputs)
            .minSuffixCount1(prune1)
            .minSuffixCount2(prune2)
            .shouldShareSuffix(prune1 == 0 && prune2 == 0)
            .shouldShareNonSingletonNodes(allowRandomSuffixSharing ? random.nextBoolean() : true)
            .shareMaxTailLength(
                allowRandomSuffixSharing ? TestUtil.nextInt(random, 1, 10) : Integer.MAX_VALUE)
            .build();

    for (InputOutput<T> pair : pairs) {
      if (pair.output instanceof List) {
        @SuppressWarnings("unchecked")
        List<Long> longValues = (List<Long>) pair.output;
        @SuppressWarnings("unchecked")
        final FSTCompiler<Object> fstCompilerObject = (FSTCompiler<Object>) fstCompiler;
        for (Long value : longValues) {
          fstCompilerObject.add(pair.input, value);
        }
      } else {
        fstCompiler.add(pair.input, pair.output);
      }
    }
    FST<T> fst = fstCompiler.compile();

    if (random.nextBoolean() && fst != null) {
      IOContext context = LuceneTestCase.newIOContext(random);
      IndexOutput out = dir.createOutput("fst.bin", context);
      fst.save(out, out);
      out.close();
      IndexInput in = dir.openInput("fst.bin", context);
      try {
        fst = new FST<T>(in, in, outputs);
      } finally {
        in.close();
        dir.deleteFile("fst.bin");
      }
    }

    if (LuceneTestCase.VERBOSE && pairs.size() <= 20 && fst != null) {
      System.out.println("Printing FST as dot file to stdout:");
      final Writer w = new OutputStreamWriter(System.out, Charset.defaultCharset());
      Util.toDot(fst, w, false, false);
      w.flush();
      System.out.println("END dot file");
    }

    if (LuceneTestCase.VERBOSE) {
      if (fst == null) {
        System.out.println("  fst has 0 nodes (fully pruned)");
      } else {
        System.out.println(
            "  fst has "
                + fstCompiler.getNodeCount()
                + " nodes and "
                + fstCompiler.getArcCount()
                + " arcs");
      }
    }

    if (prune1 == 0 && prune2 == 0) {
      verifyUnPruned(inputMode, fst);
    } else {
      verifyPruned(inputMode, fst, prune1, prune2);
    }

    nodeCount = fstCompiler.getNodeCount();
    arcCount = fstCompiler.getArcCount();

    return fst;
  }

