  public void testSearchSegmentationNoOriginal() throws IOException {
    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);
    if (is == null) {
      throw new FileNotFoundException("Cannot find " + SEGMENTATION_FILENAME + " in test classpath");
    }
    try {
      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, StandardCharsets.UTF_8));
      String line = null;
      while ((line = reader.readLine()) != null) {
        // Remove comments
        line = line.replaceAll("#.*$", "");
        // Skip empty lines or comment lines
        if (line.trim().isEmpty()) {
          continue;
        }
        if (VERBOSE) {
          System.out.println("Line no. " + reader.getLineNumber() + ": " + line);
        }
        String[] fields = line.split("\t", 2);
        String sourceText = fields[0];
        String[] tmpExpectedTokens = fields[1].split("\\s+");

        List<String> expectedTokenList = new ArrayList<>();
        for(int tokIDX=0;tokIDX<tmpExpectedTokens.length;tokIDX++) {
          if (!tmpExpectedTokens[tokIDX].endsWith("/0")) {
            expectedTokenList.add(tmpExpectedTokens[tokIDX]);
          }
        }

        int[] expectedPosIncrs = new int[expectedTokenList.size()];
        int[] expectedPosLengths = new int[expectedTokenList.size()];
        for(int tokIDX=0;tokIDX<expectedTokenList.size();tokIDX++) {
          expectedPosIncrs[tokIDX] = 1;
          expectedPosLengths[tokIDX] = 1;
        }
        assertAnalyzesTo(analyzerNoOriginal, sourceText, expectedTokenList.toArray(new String[expectedTokenList.size()]), expectedPosIncrs);
      }
    } finally {
      is.close();
    }
  }

