  public void testDeleteLeftoverFiles() throws IOException {
    Directory dir = newDirectory();

    MergePolicy mergePolicy = newLogMergePolicy(true, 10);

    // This test expects all of its segments to be in CFS
    mergePolicy.setNoCFSRatio(1.0);
    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);

    IndexWriter writer =
        new IndexWriter(
            dir,
            newIndexWriterConfig(new MockAnalyzer(random()))
                .setMaxBufferedDocs(10)
                .setMergePolicy(mergePolicy)
                .setUseCompoundFile(true));

    int i;
    for (i = 0; i < 35; i++) {
      addDoc(writer, i);
    }
    writer.getConfig().getMergePolicy().setNoCFSRatio(0.0);
    writer.getConfig().setUseCompoundFile(false);
    for (; i < 45; i++) {
      addDoc(writer, i);
    }
    writer.close();

    // Delete one doc so we get a .del file:
    writer =
        new IndexWriter(
            dir,
            newIndexWriterConfig(new MockAnalyzer(random()))
                .setMergePolicy(NoMergePolicy.INSTANCE)
                .setUseCompoundFile(true));
    Term searchTerm = new Term("id", "7");
    writer.deleteDocuments(searchTerm);
    writer.close();

    // read in index to try to not depend on codec-specific filenames so much
    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);
    SegmentInfo si0 = sis.info(0).info;
    SegmentInfo si1 = sis.info(1).info;
    SegmentInfo si3 = sis.info(3).info;

    // Now, artificially create an extra .del file & extra
    // .s0 file:
    String[] files = dir.listAll();

    /*
    for(int j=0;j<files.length;j++) {
      System.out.println(j + ": " + files[j]);
    }
    */

    // TODO: fix this test better
    String ext = ".liv";

    // Create a bogus separate del file for a
    // segment that already has a separate del file:
    copyFile(dir, "_0_1" + ext, "_0_2" + ext);

    // Create a bogus separate del file for a
    // segment that does not yet have a separate del file:
    copyFile(dir, "_0_1" + ext, "_1_1" + ext);

    // Create a bogus separate del file for a
    // non-existent segment:
    copyFile(dir, "_0_1" + ext, "_188_1" + ext);

    String cfsFiles0[] =
        si0.getCodec() instanceof SimpleTextCodec
            ? new String[] {"_0.scf"}
            : new String[] {"_0.cfs", "_0.cfe"};

    // Create a bogus segment file:
    copyFile(dir, cfsFiles0[0], "_188.cfs");

    // Create a bogus fnm file when the CFS already exists:
    copyFile(dir, cfsFiles0[0], "_0.fnm");

    // Create a bogus cfs file shadowing a non-cfs segment:

    // TODO: assert is bogus (relies upon codec-specific filenames)
    assertTrue(slowFileExists(dir, "_3.fdt") || slowFileExists(dir, "_3.fld"));

    String cfsFiles3[] =
        si3.getCodec() instanceof SimpleTextCodec
            ? new String[] {"_3.scf"}
            : new String[] {"_3.cfs", "_3.cfe"};
    for (String f : cfsFiles3) {
      assertTrue(!slowFileExists(dir, f));
    }

    String cfsFiles1[] =
        si1.getCodec() instanceof SimpleTextCodec
            ? new String[] {"_1.scf"}
            : new String[] {"_1.cfs", "_1.cfe"};
    copyFile(dir, cfsFiles1[0], "_3.cfs");

    String[] filesPre = dir.listAll();

    // Open & close a writer: it should delete the above files and nothing more:
    writer =
        new IndexWriter(
            dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
    writer.close();

    String[] files2 = dir.listAll();
    dir.close();

    Arrays.sort(files);
    Arrays.sort(files2);

    Set<String> dif = difFiles(files, files2);

    if (!Arrays.equals(files, files2)) {
      fail(
          "IndexFileDeleter failed to delete unreferenced extra files: should have deleted "
              + (filesPre.length - files.length)
              + " files but only deleted "
              + (filesPre.length - files2.length)
              + "; expected files:\n    "
              + asString(files)
              + "\n  actual files:\n    "
              + asString(files2)
              + "\ndiff: "
              + dif);
    }
  }

