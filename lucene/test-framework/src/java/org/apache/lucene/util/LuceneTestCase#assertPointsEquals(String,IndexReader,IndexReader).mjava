  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader)
      throws IOException {
    FieldInfos fieldInfos1 = FieldInfos.getMergedFieldInfos(leftReader);
    FieldInfos fieldInfos2 = FieldInfos.getMergedFieldInfos(rightReader);
    for (FieldInfo fieldInfo1 : fieldInfos1) {
      if (fieldInfo1.getPointDimensionCount() != 0) {
        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);
        // same data dimension count?
        assertEquals(
            info, fieldInfo2.getPointDimensionCount(), fieldInfo2.getPointDimensionCount());
        // same index dimension count?
        assertEquals(
            info,
            fieldInfo2.getPointIndexDimensionCount(),
            fieldInfo2.getPointIndexDimensionCount());
        // same bytes per dimension?
        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());

        assertEquals(
            info + " field=" + fieldInfo1.name,
            uninvert(fieldInfo1.name, leftReader),
            uninvert(fieldInfo1.name, rightReader));
      }
    }

    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have
    for (FieldInfo fieldInfo2 : fieldInfos2) {
      if (fieldInfo2.getPointDimensionCount() != 0) {
        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);
        // same data dimension count?
        assertEquals(
            info, fieldInfo2.getPointDimensionCount(), fieldInfo1.getPointDimensionCount());
        // same index dimension count?
        assertEquals(
            info,
            fieldInfo2.getPointIndexDimensionCount(),
            fieldInfo1.getPointIndexDimensionCount());
        // same bytes per dimension?
        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());

        // we don't need to uninvert and compare here ... we did that in the first loop above
      }
    }
  }

