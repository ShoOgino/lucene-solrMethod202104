  /**
   * Parses a query, searching on the fields specified. Use this if you need to specify certain
   * fields as required, and others as prohibited.
   *
   * <p>Usage:
   *
   * <pre class="prettyprint">
   * <code>
   * String[] query = {"query1", "query2", "query3"};
   * String[] fields = {"filename", "contents", "description"};
   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,
   *                BooleanClause.Occur.MUST,
   *                BooleanClause.Occur.MUST_NOT};
   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);
   * </code>
   * </pre>
   *
   * <p>The code above would construct a query:
   *
   * <pre>
   * <code>
   * (filename:query1) +(contents:query2) -(description:query3)
   * </code>
   * </pre>
   *
   * @param queries Queries string to parse
   * @param fields Fields to search on
   * @param flags Flags describing the fields
   * @param analyzer Analyzer to use
   * @throws ParseException if query parsing fails
   * @throws IllegalArgumentException if the length of the queries, fields, and flags array differ
   */
  public static Query parse(
      String[] queries, String[] fields, BooleanClause.Occur[] flags, Analyzer analyzer)
      throws ParseException {
    if (!(queries.length == fields.length && queries.length == flags.length))
      throw new IllegalArgumentException(
          "queries, fields, and flags array have have different length");
    BooleanQuery.Builder bQuery = new BooleanQuery.Builder();
    for (int i = 0; i < fields.length; i++) {
      QueryParser qp = new QueryParser(fields[i], analyzer);
      Query q = qp.parse(queries[i]);
      if (q != null
          && // q never null, just being defensive
          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).clauses().size() > 0)) {
        bQuery.add(q, flags[i]);
      }
    }
    return bQuery.build();
  }

