  public void testTryUpdateMultiThreaded()
      throws IOException, BrokenBarrierException, InterruptedException {
    Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig();
    IndexWriter writer = new IndexWriter(dir, conf);
    ReentrantLock[] locks = new ReentrantLock[25 + random().nextInt(50)];
    Long[] values = new Long[locks.length];

    for (int i = 0; i < locks.length; i++) {
      locks[i] = new ReentrantLock();
      Document doc = new Document();
      values[i] = random().nextLong();
      doc.add(new StringField("id", Integer.toString(i), Store.NO));
      doc.add(new NumericDocValuesField("value", values[i]));
      writer.addDocument(doc);
    }

    int numThreads = TEST_NIGHTLY ? 2 + random().nextInt(3) : 2;
    Thread[] threads = new Thread[numThreads];
    CyclicBarrier barrier = new CyclicBarrier(threads.length + 1);
    for (int i = 0; i < threads.length; i++) {
      threads[i] =
          new Thread(
              () -> {
                try {
                  barrier.await();
                  for (int doc = 0; doc < 1000; doc++) {
                    int docId = random().nextInt(locks.length);
                    locks[docId].lock();
                    try {
                      Long value = rarely() ? null : random().nextLong(); // sometimes reset it
                      if (random().nextBoolean()) {
                        writer.updateDocValues(
                            new Term("id", docId + ""), new NumericDocValuesField("value", value));
                      } else {
                        doUpdate(
                            new Term("id", docId + ""),
                            writer,
                            new NumericDocValuesField("value", value));
                      }
                      values[docId] = value;
                    } catch (IOException e) {
                      throw new AssertionError(e);
                    } finally {
                      locks[docId].unlock();
                    }
                    if (rarely()) {
                      writer.flush();
                    }
                  }
                } catch (Exception e) {
                  throw new AssertionError(e);
                }
              });
      threads[i].start();
    }

    barrier.await();
    for (Thread t : threads) {
      t.join();
    }
    try (DirectoryReader reader = writer.getReader()) {
      for (int i = 0; i < locks.length; i++) {
        locks[i].lock();
        try {
          Long value = values[i];
          TopDocs topDocs =
              new IndexSearcher(reader).search(new TermQuery(new Term("id", "" + i)), 10);
          assertEquals(topDocs.totalHits.value, 1);
          int docID = topDocs.scoreDocs[0].doc;
          List<LeafReaderContext> leaves = reader.leaves();
          int subIndex = ReaderUtil.subIndex(docID, leaves);
          LeafReader leafReader = leaves.get(subIndex).reader();
          docID -= leaves.get(subIndex).docBase;
          NumericDocValues numericDocValues = leafReader.getNumericDocValues("value");
          if (value == null) {
            assertFalse("docID: " + docID, numericDocValues.advanceExact(docID));
          } else {
            assertTrue("docID: " + docID, numericDocValues.advanceExact(docID));
            assertEquals(numericDocValues.longValue(), value.longValue());
          }
        } finally {
          locks[i].unlock();
        }
      }
    }

    IOUtils.close(writer, dir);
  }

