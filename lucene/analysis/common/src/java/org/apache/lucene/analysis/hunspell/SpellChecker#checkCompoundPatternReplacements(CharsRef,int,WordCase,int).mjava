  private boolean checkCompoundPatternReplacements(
      CharsRef word, int pos, WordCase originalCase, int depth) {
    for (CheckCompoundPattern pattern : dictionary.checkCompoundPatterns) {
      CharsRef expanded = pattern.expandReplacement(word, pos);
      if (expanded != null) {
        WordContext context = depth == 0 ? COMPOUND_BEGIN : COMPOUND_MIDDLE;
        int breakPos = pos + pattern.endLength();
        CharsRef stem = findStem(expanded.chars, expanded.offset, breakPos, originalCase, context);
        if (stem != null) {
          Predicate<CharsRef> nextCheck =
              next -> pattern.prohibitsCompounding(expanded, breakPos, stem, next);
          if (checkCompoundsAfter(expanded, breakPos, originalCase, depth, stem, nextCheck)) {
            return true;
          }
        }
      }
    }
    return false;
  }

