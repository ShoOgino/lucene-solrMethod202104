  /**
   * Create a priority queue that is pre-filled with sentinel objects, so that the code which uses
   * that queue can always assume it's full and only change the top without attempting to insert any
   * new object.
   *
   * <p>Those sentinel values should always compare worse than any non-sentinel value (i.e., {@link
   * #lessThan} should always favor the non-sentinel values).
   *
   * <p>By default, the supplier returns null, which means the queue will not be filled with
   * sentinel values. Otherwise, the value returned will be used to pre-populate the queue.
   *
   * <p>If this method is extended to return a non-null value, then the following usage pattern is
   * recommended:
   *
   * <pre class="prettyprint">
   * PriorityQueue&lt;MyObject&gt; pq = new MyQueue&lt;MyObject&gt;(numHits);
   * // save the 'top' element, which is guaranteed to not be null.
   * MyObject pqTop = pq.top();
   * &lt;...&gt;
   * // now in order to add a new element, which is 'better' than top (after
   * // you've verified it is better), it is as simple as:
   * pqTop.change().
   * pqTop = pq.updateTop();
   * </pre>
   *
   * <b>NOTE:</b> the given supplier will be called {@code maxSize} times, relying on a new object
   * to be returned and will not check if it's null again. Therefore you should ensure any call to
   * this method creates a new instance and behaves consistently, e.g., it cannot return null if it
   * previously returned non-null and all returned instances must {@link #lessThan compare equal}.
   */
  public PriorityQueue(int maxSize, Supplier<T> sentinelObjectSupplier) {
    final int heapSize;
    if (0 == maxSize) {
      // We allocate 1 extra to avoid if statement in top()
      heapSize = 2;
    } else {

      if ((maxSize < 0) || (maxSize >= ArrayUtil.MAX_ARRAY_LENGTH)) {
        // Throw exception to prevent confusing OOME:
        throw new IllegalArgumentException(
            "maxSize must be >= 0 and < " + (ArrayUtil.MAX_ARRAY_LENGTH) + "; got: " + maxSize);
      }

      // NOTE: we add +1 because all access to heap is
      // 1-based not 0-based.  heap[0] is unused.
      heapSize = maxSize + 1;
    }
    // T is unbounded type, so this unchecked cast works always:
    @SuppressWarnings("unchecked")
    final T[] h = (T[]) new Object[heapSize];
    this.heap = h;
    this.maxSize = maxSize;

    // If sentinel objects are supported, populate the queue with them
    T sentinel = sentinelObjectSupplier.get();
    if (sentinel != null) {
      heap[1] = sentinel;
      for (int i = 2; i < heap.length; i++) {
        heap[i] = sentinelObjectSupplier.get();
      }
      size = maxSize;
    }
  }

