  /** @return whether any of the added suggestions are considered "good" */
  boolean suggest(String word, WordCase wordCase) {
    String low = wordCase != WordCase.LOWER ? speller.dictionary.toLowerCase(word) : word;
    if (wordCase == WordCase.UPPER || wordCase == WordCase.MIXED) {
      trySuggestion(low);
    }

    boolean hasGoodSuggestions = tryVariationsOf(word);

    if (wordCase == WordCase.TITLE) {
      hasGoodSuggestions |= tryVariationsOf(low);
    } else if (wordCase == WordCase.UPPER) {
      hasGoodSuggestions |= tryVariationsOf(low);
      hasGoodSuggestions |= tryVariationsOf(speller.dictionary.toTitleCase(word));
    } else if (wordCase == WordCase.MIXED) {
      int dot = word.indexOf('.');
      if (dot > 0
          && dot < word.length() - 1
          && WordCase.caseOf(word.substring(dot + 1)) == WordCase.TITLE) {
        result.add(word.substring(0, dot + 1) + " " + word.substring(dot + 1));
      }

      boolean capitalized = Character.isUpperCase(word.charAt(0));
      if (capitalized) {
        hasGoodSuggestions |=
            tryVariationsOf(speller.dictionary.caseFold(word.charAt(0)) + word.substring(1));
      }

      hasGoodSuggestions |= tryVariationsOf(low);

      if (capitalized) {
        hasGoodSuggestions |= tryVariationsOf(speller.dictionary.toTitleCase(low));
      }

      List<String> adjusted = new ArrayList<>();
      for (String candidate : result) {
        String s = capitalizeAfterSpace(word, candidate);
        adjusted.add(s.equals(candidate) ? adjusted.size() : 0, s);
      }

      result.clear();
      result.addAll(adjusted);
    }
    return hasGoodSuggestions;
  }

