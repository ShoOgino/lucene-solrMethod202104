  /**
   * Get a list of Api-s supported by this class.
   * @param theClass class
   * @param obj object of this class (may be null)
   * @param allowEmpty if false then an exception is thrown if no Api-s can be retrieved, if true
   *                then absence of Api-s is silently ignored.
   * @return list of discovered Api-s
   */
  public static List<Api> getApis(Class<? extends Object> theClass , Object obj, boolean allowEmpty)  {
    Class<?> klas = null;
    try {
      klas = MethodHandles.publicLookup().accessClass(theClass);
    } catch (IllegalAccessException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Method may be non-public/inaccessible", e);
    }
    if (klas.getAnnotation(EndPoint.class) != null) {
      EndPoint endPoint = klas.getAnnotation(EndPoint.class);
      List<Method> methods = new ArrayList<>();
      Map<String, Cmd> commands = new HashMap<>();
      for (Method m : klas.getMethods()) {
        Command command = m.getAnnotation(Command.class);
        if (command != null) {
          methods.add(m);
          if (commands.containsKey(command.name())) {
            throw new RuntimeException("Duplicate commands " + command.name());
          }
          commands.put(command.name(), new Cmd(command.name(), obj, m));
        }
      }
      if (commands.isEmpty()) {
        throw new RuntimeException("No method with @Command in class: " + klas.getName());
      }
      SpecProvider specProvider = readSpec(endPoint, methods);
      return Collections.singletonList(new AnnotatedApi(specProvider, endPoint, commands, null));
    } else {
      List<Api> apis = new ArrayList<>();
      for (Method m : klas.getMethods()) {
        EndPoint endPoint = m.getAnnotation(EndPoint.class);
        if (endPoint == null) continue;
        Cmd cmd = new Cmd("", obj, m);
        SpecProvider specProvider = readSpec(endPoint, Collections.singletonList(m));
        apis.add(new AnnotatedApi(specProvider, endPoint, Collections.singletonMap("", cmd), null));
      }
      if (!allowEmpty && apis.isEmpty()) {
        throw new RuntimeException("Invalid Class : " + klas.getName() + " No @EndPoints");
      }

      return apis;
    }
  }

