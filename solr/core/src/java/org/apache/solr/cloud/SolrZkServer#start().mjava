  public void start() {
    if (zkRun == null) return;

    if (System.getProperty(ZK_WHITELIST_PROPERTY) == null) {
      System.setProperty(ZK_WHITELIST_PROPERTY, "ruok, mntr, conf");
    }
    AtomicReference<Exception> zkException = new AtomicReference<>();
    zkThread = new Thread(() -> {
      try {
        if (zkProps.getServers().size() > 1) {
          QuorumPeerMain zkServer = new QuorumPeerMain();
          zkServer.runFromConfig(zkProps);
        } else {
          ServerConfig sc = new ServerConfig();
          sc.readFrom(zkProps);
          ZooKeeperServerMain zkServer = new ZooKeeperServerMain();
          zkServer.runFromConfig(sc);
        }
        log.info("ZooKeeper Server exited.");
      } catch (Exception e) {
        log.error("ZooKeeper Server ERROR", e);
        zkException.set(e);
      }
    }, "embeddedZkServer");

    if (zkProps.getServers().size() > 1) {
      if (log.isInfoEnabled()) {
        log.info("STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port {}", zkProps.getClientPortAddress().getPort());
      }
    } else {
      if (log.isInfoEnabled()) {
        log.info("STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port {}", zkProps.getClientPortAddress().getPort());
      }
    }

    log.warn("Embedded Zookeeper is not recommended in production environments. See Reference Guide for details.");

    zkThread.setDaemon(true);
    zkThread.start();
    try {
      // We don't have any way to hook into the ZK server object to check that it is running, so we just wait and hope
      Thread.sleep(500); // pause for ZooKeeper to start
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Interrupted while starting embedded zookeeper server", e);
    }

    if (zkException.get() != null) {
      log.info("Embedded ZK dataHome={}", dataHome);
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Could not start embedded zookeeper server", zkException.get());
    }
  }

