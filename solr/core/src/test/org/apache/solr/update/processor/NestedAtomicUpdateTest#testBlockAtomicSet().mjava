  @Test
  public void testBlockAtomicSet() throws Exception {
    SolrInputDocument sdoc2 = sdoc("id", "2", "cat_ss", "child");
    SolrInputDocument doc = sdoc("id", "1",
        "cat_ss", new String[] {"aaa", "ccc"},
        "child1", Collections.singleton(sdoc2)
    );
    assertU(adoc(doc));

    BytesRef rootDocId = new BytesRef("1");
    SolrCore core = h.getCore();
    SolrInputDocument block = RealTimeGetComponent.getInputDocument(core, rootDocId, rootDocId, null, null, ROOT_WITH_CHILDREN);
    // assert block doc has child docs
    assertTrue(block.containsKey("child1"));

    assertJQ(req("q","id:1")
        ,"/response/numFound==0"
    );

    // commit the changes
    assertU(commit());

    BytesRef childDocId = new BytesRef("2");
    assertEquals(sdoc2.toString(), removeSpecialFields(
        RealTimeGetComponent.getInputDocument(core, childDocId, rootDocId, null, null, DOC)
    ).toString());

    assertJQ(req("q","id:1")
        ,"/response/numFound==1"
    );

    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, [child]")
        ,"=={\"doc\":{'id':\"1\"" +
            ", cat_ss:[\"aaa\",\"ccc\"], child1:[{\"id\":\"2\",\"cat_ss\":[\"child\"]}]" +
            "       }}"
    );

    assertU(commit());

    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, [child]")
        ,"=={\"doc\":{'id':\"1\"" +
            ", cat_ss:[\"aaa\",\"ccc\"], child1:[{\"id\":\"2\",\"cat_ss\":[\"child\"]}]" +
            "       }}"
    );

    doc = sdoc("id", "1",
        "cat_ss", Collections.singletonMap("set", Arrays.asList("aaa", "bbb")),
        "child1", Collections.singletonMap("set", sdoc("id", "3", "cat_ss", "child")));
    addAndGetVersion(doc, params("wt", "json", "_route_", "1"));


    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, [child]")
        ,"=={\"doc\":{'id':\"1\"" +
            ", cat_ss:[\"aaa\",\"bbb\"], child1:{\"id\":\"3\",\"cat_ss\":[\"child\"]}" +
            "       }}"
    );

    assertU(commit());

    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log
    // this requires ChildDocTransformer to get the whole block, since the document is retrieved using an index lookup
    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, [child]")
        ,"=={'doc':{'id':'1'" +
            ", cat_ss:[\"aaa\",\"bbb\"], child1:{\"id\":\"3\",\"cat_ss\":[\"child\"]}" +
            "       }}"
    );

    doc = sdoc("id", "3",
        "child2", Collections.singletonMap("set", sdoc("id", "4", "cat_ss", "child")));
    addAndGetVersion(doc, params("wt", "json", "_route_", "1"));

    assertJQ(req("qt","/get", "id","1", "fl","id, cat_ss, child1, child2, [child]")
        ,"=={'doc':{'id':'1'" +
            ", cat_ss:[\"aaa\",\"bbb\"], child1:{\"id\":\"3\",\"cat_ss\":[\"child\"], child2:{\"id\":\"4\",\"cat_ss\":[\"child\"]}}" +
            "       }}"
    );

    assertJQ(req("qt","/get", "id","3", "fl","id, cat_ss, child, child2, [child]")
        ,"=={'doc':{\"id\":\"3\",\"cat_ss\":[\"child\"], child2:{\"id\":\"4\",\"cat_ss\":[\"child\"]}}" +
            "       }}"
    );

    assertU(commit());

    // ensure the whole block has been committed correctly to the index.
    assertJQ(req("q","id:1", "fl", "*, [child]"),
        "/response/numFound==1",
        "/response/docs/[0]/id=='1'",
        "/response/docs/[0]/cat_ss/[0]==\"aaa\"",
        "/response/docs/[0]/cat_ss/[1]==\"bbb\"",
        "/response/docs/[0]/child1/id=='3'",
        "/response/docs/[0]/child1/cat_ss/[0]=='child'",
        "/response/docs/[0]/child1/child2/id=='4'",
        "/response/docs/[0]/child1/child2/cat_ss/[0]=='child'"
    );
  }

