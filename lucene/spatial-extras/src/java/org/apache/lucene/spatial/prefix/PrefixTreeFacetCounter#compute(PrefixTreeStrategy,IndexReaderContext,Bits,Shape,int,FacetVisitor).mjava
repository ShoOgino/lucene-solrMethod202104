  /**
   * Computes facets using a callback/visitor style design, allowing flexibility for the caller to
   * determine what to do with each underlying count.
   *
   * @param strategy the prefix tree strategy (contains the field reference, grid, max levels)
   * @param context the IndexReader's context
   * @param topAcceptDocs a Bits to limit counted docs. If null, live docs are counted.
   * @param queryShape the shape to limit the range of facet counts to
   * @param facetLevel the maximum depth (detail) of faceted cells
   * @param facetVisitor the visitor/callback to receive the counts
   */
  public static void compute(
      PrefixTreeStrategy strategy,
      IndexReaderContext context,
      Bits topAcceptDocs,
      Shape queryShape,
      int facetLevel,
      FacetVisitor facetVisitor)
      throws IOException {
    // We collect per-leaf
    for (final LeafReaderContext leafCtx : context.leaves()) {
      // determine leaf acceptDocs Bits
      Bits leafAcceptDocs;
      if (topAcceptDocs == null) {
        leafAcceptDocs = leafCtx.reader().getLiveDocs(); // filter deleted
      } else {
        leafAcceptDocs =
            new Bits() {
              @Override
              public boolean get(int index) {
                return topAcceptDocs.get(leafCtx.docBase + index);
              }

              @Override
              public int length() {
                return leafCtx.reader().maxDoc();
              }
            };
      }

      compute(strategy, leafCtx, leafAcceptDocs, queryShape, facetLevel, facetVisitor);
    }
  }

