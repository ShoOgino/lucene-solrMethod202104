  @Test
  public void testBooleanFunctions() throws Exception {
    clearIndex();

    assertU(adoc("id", "1", "text", "hello", "foo_s","A", "foo_ti", "0", "foo_tl","0", "foo_tf", "0.00001"));
    assertU(adoc("id", "2"                              , "foo_ti","10", "foo_tl","11"));
    assertU(commit());

    // test weighting of functions
    assertJQ(req("q", "id:1", "fl", "a:testfunc(1)")
          , "/response/docs/[0]=={'a':1}");

    // true and false functions and constants
    assertJQ(req("q", "id:1", "fl", "t:true(),f:false(),tt:{!func}true,ff:{!func}false")
        , "/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}");

    // test that exists(query) depends on the query matching the document
    assertJQ(req("q", "id:1", "fl", "t:exists(query($q1)),f:exists(query($q2))", "q1","text:hello", "q2","text:there")
        , "/response/docs/[0]=={'t':true,'f':false}");

    // test if()
    assertJQ(req("q", "id:1", "fl", "a1:if(true,'A','B')", "fl","b1:if(false,'A',testfunc('B'))")
        , "/response/docs/[0]=={'a1':'A', 'b1':'B'}");
    // queries with positive scores < 1 should still evaluate to 'true' in boolean context
    assertJQ(req("q", "id:1", "nested", "*:*^=0.00001",
                 "fl", "a1:if(query($nested),'A','B')", "fl","b1:if(not(query($nested)),'A','B')")
        , "/response/docs/[0]=={'a1':'A', 'b1':'B'}");

    // test boolean operators
    assertJQ(req("q", "id:1", "fl", "t1:and(testfunc(true),true)", "fl","f1:and(true,false)", "fl","f2:and(false,true)", "fl","f3:and(false,false)")
        , "/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}");
    assertJQ(req("q", "id:1", "fl", "t1:or(testfunc(true),true)", "fl","t2:or(true,false)", "fl","t3:or(false,true)", "fl","f1:or(false,false)")
        , "/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}");
    assertJQ(req("q", "id:1", "fl", "f1:xor(testfunc(true),true)", "fl","t1:xor(true,false)", "fl","t2:xor(false,true)", "fl","f2:xor(false,false)")
        , "/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}");
    assertJQ(req("q", "id:1", "fl", "t:not(testfunc(false)),f:not(true)")
        , "/response/docs/[0]=={'t':true, 'f':false}");

    // test fields evaluated as booleans in wrapping functions
    assertJQ(req("q", "id:1", "fl", "a:not(foo_ti), b:if(foo_tf,'TT','FF'), c:and(true,foo_tf)")
        , "/response/docs/[0]=={'a':true, 'b':'TT', 'c':true}");
    assertJQ(req("q", "id:2", "fl", "a:not(foo_ti), b:if(foo_tf,'TT','FF'), c:and(true,foo_tf)")
        , "/response/docs/[0]=={'a':false, 'b':'FF', 'c':false}");


    // def(), the default function that returns the first value that exists
    assertJQ(req("q", "id:1", "fl", "x:def(id,testfunc(123)), y:def(foo_f,234.0)")
        , "/response/docs/[0]=={'x':'1', 'y':234.0}");
    assertJQ(req("q", "id:1", "fl", "x:def(foo_s,'Q'), y:def(missing_s,'W')")
        , "/response/docs/[0]=={'x':'A', 'y':'W'}");

    // test constant conversion to boolean
    assertJQ(req("q", "id:1", "fl", "a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A'), f:not(0.001)")
        , "/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false, 'f':false}");

  }

