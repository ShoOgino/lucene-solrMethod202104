  /**
   * Splits a extension field and returns the field / extension part as a {@link Pair}. This method
   * tries to split on the first occurrence of the extension field delimiter, if the delimiter is
   * not present in the string the result will contain a <code>null</code> value for the extension
   * key and the given field string as the field value. If the given extension field string contains
   * no field identifier the result pair will carry the given default field as the field value.
   *
   * @param defaultField the default query field
   * @param field the extension field string
   * @return a {@link Pair} with the field name as the {@link Pair#cur} and the extension key as the
   *     {@link Pair#cud}
   */
  public Pair<String, String> splitExtensionField(String defaultField, String field) {
    int indexOf = field.indexOf(this.extensionFieldDelimiter);
    if (indexOf < 0) return new Pair<>(field, null);
    final String indexField = indexOf == 0 ? defaultField : field.substring(0, indexOf);
    final String extensionKey = field.substring(indexOf + 1);
    return new Pair<>(indexField, extensionKey);
  }

