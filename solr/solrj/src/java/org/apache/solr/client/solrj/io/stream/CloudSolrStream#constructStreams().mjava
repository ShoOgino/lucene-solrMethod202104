  protected void constructStreams() throws IOException {
    final ModifiableSolrParams mParams = adjustParams(new ModifiableSolrParams(params));
    mParams.set(DISTRIB, "false"); // We are the aggregator.
    try {
      final Stream<SolrStream> streamOfSolrStream;
      if (streamContext != null && streamContext.get("shards") != null) {
        // stream of shard url with core
        streamOfSolrStream = getShards(this.zkHost, this.collection, this.streamContext, mParams).stream()
            .map(s -> new SolrStream(s, mParams));
      } else {
        // stream of replicas to reuse the same SolrHttpClient per baseUrl
        // avoids re-parsing data we already have in the replicas
        streamOfSolrStream = getReplicas(this.zkHost, this.collection, this.streamContext, mParams).stream()
            .map(r -> new SolrStream(r.getBaseUrl(), mParams, r.getCoreName()));
      }

      streamOfSolrStream.forEach(ss -> {
        if(streamContext != null) {
          ss.setStreamContext(streamContext);
          if (streamContext.isLocal()) {
            ss.setDistrib(false);
          }
        }
        ss.setFieldMappings(this.fieldMappings);
        solrStreams.add(ss);
      });
    } catch (Exception e) {
      throw new IOException(e);
    }
  }

