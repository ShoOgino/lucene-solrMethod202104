  /**
   * Returns a sort key for distance. This is less expensive to compute than {@link
   * #haversinMeters(double, double, double, double)}, but it always compares the same. This can be
   * converted into an actual distance with {@link #haversinMeters(double)}, which effectively does
   * the second half of the computation.
   */
  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {
    double x1 = Math.toRadians(lat1);
    double x2 = Math.toRadians(lat2);
    double h1 = 1 - cos(x1 - x2);
    double h2 = 1 - cos(Math.toRadians(lon1 - lon2));
    double h = h1 + cos(x1) * cos(x2) * h2;
    // clobber crazy precision so subsequent rounding does not create ties.
    return Double.longBitsToDouble(Double.doubleToRawLongBits(h) & 0xFFFFFFFFFFFFFFF8L);
  }

