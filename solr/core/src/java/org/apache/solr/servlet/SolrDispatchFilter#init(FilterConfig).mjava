  @Override
  public void init(FilterConfig config) throws ServletException {
    SSLConfigurationsFactory.current().init();
    if (log.isTraceEnabled()) {
      log.trace("SolrDispatchFilter.init(): {}", this.getClass().getClassLoader());
    }
    CoreContainer coresInit = null;
    try {
      // "extra" properties must be init'ed first so we know things like "do we have a zkHost"
      // wrap as defaults (if set) so we can modify w/o polluting the Properties provided by our caller
      this.extraProperties = SolrXmlConfig.wrapAndSetZkHostFromSysPropIfNeeded
        ((Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE));
      
      StartupLoggingUtils.checkLogDir();
      if (log.isInfoEnabled()) {
        log.info("Using logger factory {}", StartupLoggingUtils.getLoggerImplStr());
      }
      
      logWelcomeBanner();
      
      String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);
      if (muteConsole != null && !Arrays.asList("false","0","off","no").contains(muteConsole.toLowerCase(Locale.ROOT))) {
        StartupLoggingUtils.muteConsole();
      }
      String logLevel = System.getProperty(SOLR_LOG_LEVEL);
      if (logLevel != null) {
        log.info("Log level override, property solr.log.level={}", logLevel);
        StartupLoggingUtils.changeLogLevel(logLevel);
      }
      
      String exclude = config.getInitParameter("excludePatterns");
      if(exclude != null) {
        String[] excludeArray = exclude.split(",");
        excludePatterns = new ArrayList<>();
        for (String element : excludeArray) {
          excludePatterns.add(Pattern.compile(element));
        }
      }

      coresInit = createCoreContainer(computeSolrHome(config), extraProperties);
      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();
      setupJvmMetrics(coresInit);
      
      SolrZkClient zkClient = null;
      ZkController zkController = coresInit.getZkController();
      
      if (zkController != null) {
        zkClient = zkController.getZkClient();
      }
      
      RateLimitManager.Builder builder = new RateLimitManager.Builder(zkClient);
      
      this.rateLimitManager = builder.build();
      
      if (zkController != null) {
        zkController.zkStateReader.registerClusterPropertiesListener(this.rateLimitManager);
      }
      
      if (log.isDebugEnabled()) {
        log.debug("user.dir={}", System.getProperty("user.dir"));
      }
    } catch( Throwable t ) {
      // catch this so our filter still works
      log.error( "Could not start Solr. Check solr/home property and the logs");
      SolrCore.log( t );
      if (t instanceof Error) {
        throw (Error) t;
      }
      
    } finally{
      log.trace("SolrDispatchFilter.init() done");
      this.cores = coresInit; // crucially final assignment 
      init.countDown();
    }
  }

