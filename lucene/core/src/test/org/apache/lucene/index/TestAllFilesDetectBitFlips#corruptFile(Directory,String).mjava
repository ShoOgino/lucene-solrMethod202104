  private void corruptFile(Directory dir, String victim) throws IOException {
    try (BaseDirectoryWrapper dirCopy = newDirectory()) {
      dirCopy.setCheckIndexOnClose(false);

      long victimLength = dir.fileLength(victim);
      long flipOffset = TestUtil.nextLong(random(), 0, victimLength - 1);

      if (VERBOSE) {
        System.out.println(
            "TEST: now corrupt file "
                + victim
                + " by changing byte at offset "
                + flipOffset
                + " (length= "
                + victimLength
                + ")");
      }

      for (String name : dir.listAll()) {
        if (name.equals(victim) == false) {
          dirCopy.copyFrom(dir, name, name, IOContext.DEFAULT);
        } else {
          try (IndexOutput out = dirCopy.createOutput(name, IOContext.DEFAULT);
              IndexInput in = dir.openInput(name, IOContext.DEFAULT)) {
            out.copyBytes(in, flipOffset);
            out.writeByte((byte) (in.readByte() + TestUtil.nextInt(random(), 0x01, 0xFF)));
            out.copyBytes(in, victimLength - flipOffset - 1);
          }
          try (IndexInput in = dirCopy.openInput(name, IOContext.DEFAULT)) {
            try {
              CodecUtil.checksumEntireFile(in);
              System.out.println(
                  "TEST: changing a byte in " + victim + " did not update the checksum)");
              return;
            } catch (CorruptIndexException e) {
              // ok
            }
          }
        }
        dirCopy.sync(Collections.singleton(name));
      }

      // corruption must be detected
      expectThrowsAnyOf(
          Arrays.asList(
              CorruptIndexException.class,
              IndexFormatTooOldException.class,
              IndexFormatTooNewException.class),
          () -> {
            try (IndexReader reader = DirectoryReader.open(dirCopy)) {
              for (LeafReaderContext context : reader.leaves()) {
                context.reader().checkIntegrity();
              }
            }
          });
    }
  }

