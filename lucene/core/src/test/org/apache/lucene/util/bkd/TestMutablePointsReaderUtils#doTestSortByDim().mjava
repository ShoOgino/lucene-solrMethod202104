  private void doTestSortByDim() {
    BKDConfig config = createRandomConfig();
    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));
    int[] commonPrefixLengths = new int[config.numDims];
    Point[] points = createRandomPoints(config, maxDoc, commonPrefixLengths);
    DummyPointsReader reader = new DummyPointsReader(points);
    final int sortedDim = random().nextInt(config.numIndexDims);
    MutablePointsReaderUtils.sortByDim(
        config,
        sortedDim,
        commonPrefixLengths,
        reader,
        0,
        points.length,
        new BytesRef(),
        new BytesRef());
    for (int i = 1; i < points.length; ++i) {
      final int offset = sortedDim * config.bytesPerDim;
      BytesRef previousValue = reader.points[i - 1].packedValue;
      BytesRef currentValue = reader.points[i].packedValue;
      int cmp =
          Arrays.compareUnsigned(
              previousValue.bytes,
              previousValue.offset + offset,
              previousValue.offset + offset + config.bytesPerDim,
              currentValue.bytes,
              currentValue.offset + offset,
              currentValue.offset + offset + config.bytesPerDim);
      if (cmp == 0) {
        int dataDimOffset = config.packedIndexBytesLength;
        int dataDimsLength = (config.numDims - config.numIndexDims) * config.bytesPerDim;
        cmp =
            Arrays.compareUnsigned(
                previousValue.bytes,
                previousValue.offset + dataDimOffset,
                previousValue.offset + dataDimOffset + dataDimsLength,
                currentValue.bytes,
                currentValue.offset + dataDimOffset,
                currentValue.offset + dataDimOffset + dataDimsLength);
        if (cmp == 0) {
          cmp = reader.points[i - 1].doc - reader.points[i].doc;
        }
      }
      assertTrue(cmp <= 0);
    }
  }

