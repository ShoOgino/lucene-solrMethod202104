  @Override
  public void readLELongs(long[] dst, int offset, int length) throws IOException {
    // ByteBuffer#getLong could work but it has some per-long overhead and there
    // is no ByteBuffer#getLongs to read multiple longs at once. So we use the
    // below trick in order to be able to leverage LongBuffer#get(long[]) to
    // read multiple longs at once with as little overhead as possible.
    if (curLongBufferViews == null) {
      // readLELongs is only used for postings today, so we compute the long
      // views lazily so that other data-structures don't have to pay for the
      // associated initialization/memory overhead.
      curLongBufferViews = new LongBuffer[Long.BYTES];
      for (int i = 0; i < Long.BYTES; ++i) {
        // Compute a view for each possible alignment. We cache these views
        // because #asLongBuffer() has some cost that we don't want to pay on
        // each invocation of #readLELongs.
        if (i < curBuf.limit()) {
          curLongBufferViews[i] =
              curBuf.duplicate().position(i).order(ByteOrder.LITTLE_ENDIAN).asLongBuffer();
        } else {
          curLongBufferViews[i] = EMPTY_LONGBUFFER;
        }
      }
    }
    try {
      final int position = curBuf.position();
      guard.getLongs(
          curLongBufferViews[position & 0x07].position(position >>> 3), dst, offset, length);
      // if the above call succeeded, then we know the below sum cannot overflow
      curBuf.position(position + (length << 3));
    } catch (BufferUnderflowException e) {
      super.readLELongs(dst, offset, length);
    } catch (NullPointerException npe) {
      throw new AlreadyClosedException("Already closed: " + this);
    }
  }

