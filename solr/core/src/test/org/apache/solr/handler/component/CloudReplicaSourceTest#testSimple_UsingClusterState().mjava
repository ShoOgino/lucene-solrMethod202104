  @Test
  public void testSimple_UsingClusterState() {
    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);
    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);
    ModifiableSolrParams params = new ModifiableSolrParams();
    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState("csr*sr2", "baseUrl1:8983_", "baseUrl2:8984_")) {
      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()
          .collection("collection1")
          .onlyNrt(false)
          .zkStateReader(zkStateReader)
          .replicaListTransformer(replicaListTransformer)
          .whitelistHostChecker(whitelistHostChecker)
          .params(params)
          .build();
      assertEquals(2, cloudReplicaSource.getSliceCount());
      List<String> sliceNames = cloudReplicaSource.getSliceNames();
      assertEquals(2, sliceNames.size());
      for (int i = 0; i < cloudReplicaSource.getSliceCount(); i++) {
        String sliceName = sliceNames.get(i);
        assertEquals(1, cloudReplicaSource.getReplicasBySlice(i).size());

        // need to switch because without a shards param, the order of slices is not deterministic
        switch (sliceName) {
          case "slice1":
            assertEquals("http://baseUrl1:8983/slice1_replica1/", cloudReplicaSource.getReplicasBySlice(i).get(0));
            break;
          case "slice2":
            assertEquals("http://baseUrl2:8984/slice2_replica2/", cloudReplicaSource.getReplicasBySlice(i).get(0));
            break;
        }
      }
    }
  }

