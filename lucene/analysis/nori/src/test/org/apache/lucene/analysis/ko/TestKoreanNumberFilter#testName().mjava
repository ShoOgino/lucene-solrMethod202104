  @Test
  public void testName() throws IOException {
    // Test name that normalises to number
    assertAnalyzesTo(
        analyzer,
        "전중경일",
        new String[] {"전중", "10000000000000001"}, // 경일 is normalized to a number
        new int[] {0, 2},
        new int[] {2, 4},
        new int[] {1, 1});

    // An analyzer that marks 경일 as a keyword
    Analyzer keywordMarkingAnalyzer =
        new Analyzer() {

          @Override
          protected TokenStreamComponents createComponents(String fieldName) {
            CharArraySet set = new CharArraySet(1, false);
            set.add("경일");
            UserDictionary userDictionary = readDict();
            Set<POS.Tag> stopTags = new HashSet<>();
            stopTags.add(POS.Tag.SP);
            Tokenizer tokenizer =
                new KoreanTokenizer(
                    newAttributeFactory(),
                    userDictionary,
                    KoreanTokenizer.DEFAULT_DECOMPOUND,
                    false,
                    false);
            TokenStream stream = new KoreanPartOfSpeechStopFilter(tokenizer, stopTags);
            return new TokenStreamComponents(
                tokenizer, new KoreanNumberFilter(new SetKeywordMarkerFilter(stream, set)));
          }
        };

    assertAnalyzesTo(
        keywordMarkingAnalyzer,
        "전중경일",
        new String[] {"전중", "경일"}, // 경일 is not normalized
        new int[] {0, 2},
        new int[] {2, 4},
        new int[] {1, 1});
    keywordMarkingAnalyzer.close();
  }

