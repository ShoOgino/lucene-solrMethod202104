  private void registerNode(int node, char[] fragment) {
    int left = lattice.nodeLeft[node];
    int right = lattice.nodeRight[node];
    Type type = lattice.nodeDicType[node];
    if (!discardPunctuation || !isPunctuation(fragment[left])) {
      if (type == Type.USER) {
        // The code below are based on backtrace().
        //
        // Expand the phraseID we recorded into the actual segmentation:
        final int[] wordIDAndLength = userDictionary.lookupSegmentation(lattice.nodeWordID[node]);
        int wordID = wordIDAndLength[0];
        pending.add(
            new Token(
                wordID,
                fragment,
                left,
                right - left,
                Type.USER,
                lattice.rootBase + left,
                userDictionary));
        // Output compound
        int current = 0;
        for (int j = 1; j < wordIDAndLength.length; j++) {
          final int len = wordIDAndLength[j];
          if (len < right - left) {
            pending.add(
                new Token(
                    wordID + j - 1,
                    fragment,
                    current + left,
                    len,
                    Type.USER,
                    lattice.rootBase + current + left,
                    userDictionary));
          }
          current += len;
        }
      } else {
        pending.add(
            new Token(
                lattice.nodeWordID[node],
                fragment,
                left,
                right - left,
                type,
                lattice.rootBase + left,
                getDict(type)));
      }
    }
  }

