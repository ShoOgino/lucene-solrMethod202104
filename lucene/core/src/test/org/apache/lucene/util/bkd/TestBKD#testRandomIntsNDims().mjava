  public void testRandomIntsNDims() throws Exception {
    int numDocs = atLeast(1000);
    try (Directory dir = getDirectory(numDocs)) {
      int numDims = TestUtil.nextInt(random(), 1, 5);
      int numIndexDims = TestUtil.nextInt(random(), 1, numDims);
      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 100);
      float maxMB = (float) 3.0 + (3 * random().nextFloat());
      BKDWriter w =
          new BKDWriter(
              numDocs,
              dir,
              "tmp",
              new BKDConfig(numDims, numIndexDims, 4, maxPointsInLeafNode),
              maxMB,
              numDocs);

      if (VERBOSE) {
        System.out.println(
            "TEST: numDims=" + numDims + " numIndexDims=" + numIndexDims + " numDocs=" + numDocs);
      }
      int[][] docs = new int[numDocs][];
      byte[] scratch = new byte[4 * numDims];
      int[] minValue = new int[numDims];
      int[] maxValue = new int[numDims];
      Arrays.fill(minValue, Integer.MAX_VALUE);
      Arrays.fill(maxValue, Integer.MIN_VALUE);
      for (int docID = 0; docID < numDocs; docID++) {
        int[] values = new int[numDims];
        if (VERBOSE) {
          System.out.println("  docID=" + docID);
        }
        for (int dim = 0; dim < numDims; dim++) {
          values[dim] = random().nextInt();
          if (values[dim] < minValue[dim]) {
            minValue[dim] = values[dim];
          }
          if (values[dim] > maxValue[dim]) {
            maxValue[dim] = values[dim];
          }
          NumericUtils.intToSortableBytes(values[dim], scratch, dim * Integer.BYTES);
          if (VERBOSE) {
            System.out.println("    " + dim + " -> " + values[dim]);
          }
        }
        docs[docID] = values;
        w.add(scratch, docID);
      }

      long indexFP;
      try (IndexOutput out = dir.createOutput("bkd", IOContext.DEFAULT)) {
        Runnable finalizer = w.finish(out, out, out);
        indexFP = out.getFilePointer();
        finalizer.run();
      }

      try (IndexInput in = dir.openInput("bkd", IOContext.DEFAULT)) {
        in.seek(indexFP);
        BKDReader r = new BKDReader(in, in, in);

        byte[] minPackedValue = r.getMinPackedValue();
        byte[] maxPackedValue = r.getMaxPackedValue();
        for (int dim = 0; dim < numIndexDims; dim++) {
          assertEquals(
              minValue[dim], NumericUtils.sortableBytesToInt(minPackedValue, dim * Integer.BYTES));
          assertEquals(
              maxValue[dim], NumericUtils.sortableBytesToInt(maxPackedValue, dim * Integer.BYTES));
        }

        int iters = atLeast(100);
        for (int iter = 0; iter < iters; iter++) {
          if (VERBOSE) {
            System.out.println("\nTEST: iter=" + iter);
          }

          // Random N dims rect query:
          int[] queryMin = new int[numDims];
          int[] queryMax = new int[numDims];
          for (int dim = 0; dim < numIndexDims; dim++) {
            queryMin[dim] = random().nextInt();
            queryMax[dim] = random().nextInt();
            if (queryMin[dim] > queryMax[dim]) {
              int x = queryMin[dim];
              queryMin[dim] = queryMax[dim];
              queryMax[dim] = x;
            }
          }

          final BitSet hits = new BitSet();
          r.intersect(
              new IntersectVisitor() {
                @Override
                public void visit(int docID) {
                  hits.set(docID);
                  // System.out.println("visit docID=" + docID);
                }

                @Override
                public void visit(int docID, byte[] packedValue) {
                  // System.out.println("visit check docID=" + docID);
                  for (int dim = 0; dim < numIndexDims; dim++) {
                    int x = NumericUtils.sortableBytesToInt(packedValue, dim * Integer.BYTES);
                    if (x < queryMin[dim] || x > queryMax[dim]) {
                      // System.out.println("  no");
                      return;
                    }
                  }

                  // System.out.println("  yes");
                  hits.set(docID);
                }

                @Override
                public Relation compare(byte[] minPacked, byte[] maxPacked) {
                  boolean crosses = false;
                  for (int dim = 0; dim < numIndexDims; dim++) {
                    int min = NumericUtils.sortableBytesToInt(minPacked, dim * Integer.BYTES);
                    int max = NumericUtils.sortableBytesToInt(maxPacked, dim * Integer.BYTES);
                    assert max >= min;

                    if (max < queryMin[dim] || min > queryMax[dim]) {
                      return Relation.CELL_OUTSIDE_QUERY;
                    } else if (min < queryMin[dim] || max > queryMax[dim]) {
                      crosses = true;
                    }
                  }

                  if (crosses) {
                    return Relation.CELL_CROSSES_QUERY;
                  } else {
                    return Relation.CELL_INSIDE_QUERY;
                  }
                }
              });

          for (int docID = 0; docID < numDocs; docID++) {
            int[] docValues = docs[docID];
            boolean expected = true;
            for (int dim = 0; dim < numIndexDims; dim++) {
              int x = docValues[dim];
              if (x < queryMin[dim] || x > queryMax[dim]) {
                expected = false;
                break;
              }
            }
            boolean actual = hits.get(docID);
            assertEquals("docID=" + docID, expected, actual);
          }
        }
      }
    }
  }

