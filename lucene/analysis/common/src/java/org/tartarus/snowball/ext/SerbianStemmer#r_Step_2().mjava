private boolean r_Step_2() {
  int among_var;
  ket = cursor;
  among_var = find_among_b(a_2);
  if (among_var == 0)
  {
    return false;
  }
  bra = cursor;
  if (!r_R1())
  {
    return false;
  }
  switch (among_var) {
    case 1:
      slice_from("sk");
      break;
    case 2:
      slice_from("\u0161k");
      break;
    case 3:
      slice_from("stv");
      break;
    case 4:
      slice_from("\u0161tv");
      break;
    case 5:
      slice_from("tanij");
      break;
    case 6:
      slice_from("manij");
      break;
    case 7:
      slice_from("panij");
      break;
    case 8:
      slice_from("ranij");
      break;
    case 9:
      slice_from("ganij");
      break;
    case 10:
      slice_from("an");
      break;
    case 11:
      slice_from("in");
      break;
    case 12:
      slice_from("on");
      break;
    case 13:
      slice_from("n");
      break;
    case 14:
      slice_from("a\u0107");
      break;
    case 15:
      slice_from("e\u0107");
      break;
    case 16:
      slice_from("u\u0107");
      break;
    case 17:
      slice_from("ugov");
      break;
    case 18:
      slice_from("ug");
      break;
    case 19:
      slice_from("log");
      break;
    case 20:
      slice_from("g");
      break;
    case 21:
      slice_from("rari");
      break;
    case 22:
      slice_from("oti");
      break;
    case 23:
      slice_from("si");
      break;
    case 24:
      slice_from("li");
      break;
    case 25:
      slice_from("uj");
      break;
    case 26:
      slice_from("caj");
      break;
    case 27:
      slice_from("\u010Daj");
      break;
    case 28:
      slice_from("\u0107aj");
      break;
    case 29:
      slice_from("\u0111aj");
      break;
    case 30:
      slice_from("laj");
      break;
    case 31:
      slice_from("raj");
      break;
    case 32:
      slice_from("bij");
      break;
    case 33:
      slice_from("cij");
      break;
    case 34:
      slice_from("dij");
      break;
    case 35:
      slice_from("lij");
      break;
    case 36:
      slice_from("nij");
      break;
    case 37:
      slice_from("mij");
      break;
    case 38:
      slice_from("\u017Eij");
      break;
    case 39:
      slice_from("gij");
      break;
    case 40:
      slice_from("fij");
      break;
    case 41:
      slice_from("pij");
      break;
    case 42:
      slice_from("rij");
      break;
    case 43:
      slice_from("sij");
      break;
    case 44:
      slice_from("tij");
      break;
    case 45:
      slice_from("zij");
      break;
    case 46:
      slice_from("nal");
      break;
    case 47:
      slice_from("ijal");
      break;
    case 48:
      slice_from("ozil");
      break;
    case 49:
      slice_from("olov");
      break;
    case 50:
      slice_from("ol");
      break;
    case 51:
      slice_from("lem");
      break;
    case 52:
      slice_from("ram");
      break;
    case 53:
      slice_from("ar");
      break;
    case 54:
      slice_from("dr");
      break;
    case 55:
      slice_from("er");
      break;
    case 56:
      slice_from("or");
      break;
    case 57:
      slice_from("es");
      break;
    case 58:
      slice_from("is");
      break;
    case 59:
      slice_from("ta\u0161");
      break;
    case 60:
      slice_from("na\u0161");
      break;
    case 61:
      slice_from("ja\u0161");
      break;
    case 62:
      slice_from("ka\u0161");
      break;
    case 63:
      slice_from("ba\u0161");
      break;
    case 64:
      slice_from("ga\u0161");
      break;
    case 65:
      slice_from("va\u0161");
      break;
    case 66:
      slice_from("e\u0161");
      break;
    case 67:
      slice_from("i\u0161");
      break;
    case 68:
      slice_from("ikat");
      break;
    case 69:
      slice_from("lat");
      break;
    case 70:
      slice_from("et");
      break;
    case 71:
      slice_from("est");
      break;
    case 72:
      slice_from("ist");
      break;
    case 73:
      slice_from("kst");
      break;
    case 74:
      slice_from("ost");
      break;
    case 75:
      slice_from("i\u0161t");
      break;
    case 76:
      slice_from("ova");
      break;
    case 77:
      slice_from("av");
      break;
    case 78:
      slice_from("ev");
      break;
    case 79:
      slice_from("iv");
      break;
    case 80:
      slice_from("ov");
      break;
    case 81:
      slice_from("mov");
      break;
    case 82:
      slice_from("lov");
      break;
    case 83:
      slice_from("el");
      break;
    case 84:
      slice_from("anj");
      break;
    case 85:
      slice_from("enj");
      break;
    case 86:
      slice_from("\u0161nj");
      break;
    case 87:
      slice_from("en");
      break;
    case 88:
      slice_from("\u0161n");
      break;
    case 89:
      slice_from("\u010Din");
      break;
    case 90:
      slice_from("ro\u0161i");
      break;
    case 91:
      slice_from("o\u0161");
      break;
    case 92:
      slice_from("evit");
      break;
    case 93:
      slice_from("ovit");
      break;
    case 94:
      slice_from("ast");
      break;
    case 95:
      slice_from("k");
      break;
    case 96:
      slice_from("eva");
      break;
    case 97:
      slice_from("ava");
      break;
    case 98:
      slice_from("iva");
      break;
    case 99:
      slice_from("uva");
      break;
    case 100:
      slice_from("ir");
      break;
    case 101:
      slice_from("a\u010D");
      break;
    case 102:
      slice_from("a\u010Da");
      break;
    case 103:
      slice_from("ni");
      break;
    case 104:
      slice_from("a");
      break;
    case 105:
      slice_from("ur");
      break;
    case 106:
      slice_from("astaj");
      break;
    case 107:
      slice_from("istaj");
      break;
    case 108:
      slice_from("ostaj");
      break;
    case 109:
      slice_from("aj");
      break;
    case 110:
      slice_from("asta");
      break;
    case 111:
      slice_from("ista");
      break;
    case 112:
      slice_from("osta");
      break;
    case 113:
      slice_from("ta");
      break;
    case 114:
      slice_from("inj");
      break;
    case 115:
      slice_from("as");
      break;
    case 116:
      slice_from("i");
      break;
    case 117:
      slice_from("lu\u010D");
      break;
    case 118:
      slice_from("jeti");
      break;
    case 119:
      slice_from("e");
      break;
    case 120:
      slice_from("at");
      break;
    case 121:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("luc");
      break;
    case 122:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("snj");
      break;
    case 123:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("os");
      break;
    case 124:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ac");
      break;
    case 125:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ec");
      break;
    case 126:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("uc");
      break;
    case 127:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("rosi");
      break;
    case 128:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("aca");
      break;
    case 129:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("jas");
      break;
    case 130:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("tas");
      break;
    case 131:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("gas");
      break;
    case 132:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("nas");
      break;
    case 133:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("kas");
      break;
    case 134:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("vas");
      break;
    case 135:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("bas");
      break;
    case 136:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("as");
      break;
    case 137:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("cin");
      break;
    case 138:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("astaj");
      break;
    case 139:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("istaj");
      break;
    case 140:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ostaj");
      break;
    case 141:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("asta");
      break;
    case 142:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ista");
      break;
    case 143:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("osta");
      break;
    case 144:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ava");
      break;
    case 145:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("eva");
      break;
    case 146:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("iva");
      break;
    case 147:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("uva");
      break;
    case 148:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ova");
      break;
    case 149:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("jeti");
      break;
    case 150:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("inj");
      break;
    case 151:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ist");
      break;
    case 152:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("es");
      break;
    case 153:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("et");
      break;
    case 154:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("is");
      break;
    case 155:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ir");
      break;
    case 156:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ur");
      break;
    case 157:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("uj");
      break;
    case 158:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ni");
      break;
    case 159:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("sn");
      break;
    case 160:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("ta");
      break;
    case 161:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("a");
      break;
    case 162:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("i");
      break;
    case 163:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("e");
      break;
    case 164:
      if (!(B_no_diacritics))
      {
        return false;
      }
      slice_from("n");
      break;
  }
  return true;
}

