  /** Freezes the last state, sorting and reducing the transitions. */
  private void finishCurrentState() {
    int numTransitions = states[2 * curState + 1];
    assert numTransitions > 0;

    int offset = states[2 * curState];
    int start = offset / 3;
    destMinMaxSorter.sort(start, start + numTransitions);

    // Reduce any "adjacent" transitions:
    int upto = 0;
    int min = -1;
    int max = -1;
    int dest = -1;

    for (int i = 0; i < numTransitions; i++) {
      int tDest = transitions[offset + 3 * i];
      int tMin = transitions[offset + 3 * i + 1];
      int tMax = transitions[offset + 3 * i + 2];

      if (dest == tDest) {
        if (tMin <= max + 1) {
          if (tMax > max) {
            max = tMax;
          }
        } else {
          if (dest != -1) {
            transitions[offset + 3 * upto] = dest;
            transitions[offset + 3 * upto + 1] = min;
            transitions[offset + 3 * upto + 2] = max;
            upto++;
          }
          min = tMin;
          max = tMax;
        }
      } else {
        if (dest != -1) {
          transitions[offset + 3 * upto] = dest;
          transitions[offset + 3 * upto + 1] = min;
          transitions[offset + 3 * upto + 2] = max;
          upto++;
        }
        dest = tDest;
        min = tMin;
        max = tMax;
      }
    }

    if (dest != -1) {
      // Last transition
      transitions[offset + 3 * upto] = dest;
      transitions[offset + 3 * upto + 1] = min;
      transitions[offset + 3 * upto + 2] = max;
      upto++;
    }

    nextTransition -= (numTransitions - upto) * 3;
    states[2 * curState + 1] = upto;

    // Sort transitions by min/max/dest:
    minMaxDestSorter.sort(start, start + upto);

    if (deterministic && upto > 1) {
      int lastMax = transitions[offset + 2];
      for (int i = 1; i < upto; i++) {
        min = transitions[offset + 3 * i + 1];
        if (min <= lastMax) {
          deterministic = false;
          break;
        }
        lastMax = transitions[offset + 3 * i + 2];
      }
    }
  }

