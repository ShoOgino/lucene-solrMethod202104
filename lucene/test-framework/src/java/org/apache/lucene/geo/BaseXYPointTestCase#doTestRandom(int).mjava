  private void doTestRandom(int count) throws Exception {

    int numPoints = atLeast(count);

    if (VERBOSE) {
      System.out.println("TEST: numPoints=" + numPoints);
    }

    float[] xs = new float[numPoints];
    float[] ys = new float[numPoints];

    boolean haveRealDoc = false;

    for (int id = 0; id < numPoints; id++) {
      int x = random().nextInt(20);
      if (x == 17) {
        // Some docs don't have a point:
        ys[id] = Float.NaN;
        if (VERBOSE) {
          System.out.println("  id=" + id + " is missing");
        }
        continue;
      }

      if (id > 0 && x < 3 && haveRealDoc) {
        int oldID;
        while (true) {
          oldID = random().nextInt(id);
          if (Float.isNaN(ys[oldID]) == false) {
            break;
          }
        }

        if (x == 0) {
          // Identical x to old point
          ys[id] = ys[oldID];
          xs[id] = nextX();
          if (VERBOSE) {
            System.out.println(
                "  id=" + id + " x=" + xs[id] + " y=" + ys[id] + " (same x as doc=" + oldID + ")");
          }
        } else if (x == 1) {
          // Identical y to old point
          ys[id] = nextY();
          xs[id] = xs[oldID];
          if (VERBOSE) {
            System.out.println(
                "  id=" + id + " x=" + xs[id] + " y=" + ys[id] + " (same y as doc=" + oldID + ")");
          }
        } else {
          assert x == 2;
          // Fully identical point:
          xs[id] = xs[oldID];
          ys[id] = ys[oldID];
          if (VERBOSE) {
            System.out.println(
                "  id="
                    + id
                    + " x="
                    + xs[id]
                    + " y="
                    + ys[id]
                    + " (same X/y as doc="
                    + oldID
                    + ")");
          }
        }
      } else {
        xs[id] = nextX();
        ys[id] = nextY();
        haveRealDoc = true;
        if (VERBOSE) {
          System.out.println("  id=" + id + " x=" + xs[id] + " y=" + ys[id]);
        }
      }
    }

    verify(xs, ys);
  }

