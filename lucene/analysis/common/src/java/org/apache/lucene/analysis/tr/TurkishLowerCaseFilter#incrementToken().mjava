  @Override
  public final boolean incrementToken() throws IOException {
    boolean iOrAfter = false;

    if (input.incrementToken()) {
      final char[] buffer = termAtt.buffer();
      int length = termAtt.length();
      for (int i = 0; i < length; ) {
        final int ch = Character.codePointAt(buffer, i, length);

        iOrAfter =
            (ch == LATIN_CAPITAL_LETTER_I
                || (iOrAfter && Character.getType(ch) == Character.NON_SPACING_MARK));

        if (iOrAfter) { // all the special I turkish handling happens here.
          switch (ch) {
              // remove COMBINING_DOT_ABOVE to mimic composed lowercase
            case COMBINING_DOT_ABOVE:
              length = delete(buffer, i, length);
              continue;
              // i itself, it depends if it is followed by COMBINING_DOT_ABOVE
              // if it is, we will make it small i and later remove the dot
            case LATIN_CAPITAL_LETTER_I:
              if (isBeforeDot(buffer, i + 1, length)) {
                buffer[i] = LATIN_SMALL_LETTER_I;
              } else {
                buffer[i] = LATIN_SMALL_LETTER_DOTLESS_I;
                // below is an optimization. no COMBINING_DOT_ABOVE follows,
                // so don't waste time calculating Character.getType(), etc
                iOrAfter = false;
              }
              i++;
              continue;
          }
        }

        i += Character.toChars(Character.toLowerCase(ch), buffer, i);
      }

      termAtt.setLength(length);
      return true;
    } else return false;
  }

