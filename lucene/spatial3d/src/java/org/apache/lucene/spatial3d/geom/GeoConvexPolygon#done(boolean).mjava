  /**
   * Finish the polygon, by connecting the last added point with the starting point.
   *
   * @param isInternalReturnEdge is true if the return edge (back to start) is an internal one.
   */
  public void done(final boolean isInternalReturnEdge) {
    if (isDone) {
      throw new IllegalStateException("Can't call done() more than once");
    }
    // If fewer than 3 points, can't do it.
    if (points.size() < 3) {
      throw new IllegalArgumentException("Polygon needs at least three points.");
    }

    if (isInternalReturnEdge) {
      isInternalEdges.set(points.size() - 1);
    }

    isDone = true;

    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point
    // to a segment can provide an interior measurement.
    edges = new SidedPlane[points.size()];
    notableEdgePoints = new GeoPoint[points.size()][];

    for (int i = 0; i < points.size(); i++) {
      final GeoPoint start = points.get(i);
      final GeoPoint end = points.get(legalIndex(i + 1));
      // We have to find the next point that is not on the plane between start and end.
      // If there is no such point, it's an error.
      final Plane planeToFind = new Plane(start, end);
      int endPointIndex = -1;
      for (int j = 0; j < points.size(); j++) {
        final int index = legalIndex(j + i + 2);
        if (!planeToFind.evaluateIsZero(points.get(index))) {
          endPointIndex = index;
          break;
        }
      }
      if (endPointIndex == -1) {
        throw new IllegalArgumentException("Polygon points are all coplanar: " + points);
      }
      final GeoPoint check = points.get(endPointIndex);
      final SidedPlane sp = new SidedPlane(check, start, end);
      edges[i] = sp;
      notableEdgePoints[i] = new GeoPoint[] {start, end};
    }

    // For each edge, create a bounds object.
    eitherBounds = new HashMap<>(edges.length);
    prevBrotherMap = new HashMap<>(edges.length);
    nextBrotherMap = new HashMap<>(edges.length);
    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {
      final SidedPlane edge = edges[edgeIndex];
      int bound1Index = legalIndex(edgeIndex + 1);
      while (edges[bound1Index].isNumericallyIdentical(edge)) {
        if (bound1Index == edgeIndex) {
          throw new IllegalArgumentException("Constructed planes are all coplanar: " + points);
        }
        bound1Index = legalIndex(bound1Index + 1);
      }
      int bound2Index = legalIndex(edgeIndex - 1);
      // Look for bound2
      while (edges[bound2Index].isNumericallyIdentical(edge)) {
        if (bound2Index == edgeIndex) {
          throw new IllegalArgumentException("Constructed planes are all coplanar: " + points);
        }
        bound2Index = legalIndex(bound2Index - 1);
      }
      // Also confirm that all interior points are within the bounds
      int startingIndex = bound2Index;
      while (true) {
        startingIndex = legalIndex(startingIndex + 1);
        if (startingIndex == bound1Index) {
          break;
        }
        final GeoPoint interiorPoint = points.get(startingIndex);
        if (!edges[bound1Index].isWithin(interiorPoint)
            || !edges[bound2Index].isWithin(interiorPoint)) {
          throw new IllegalArgumentException(
              "Convex polygon has a side that is more than 180 degrees");
        }
      }
      eitherBounds.put(edge, new EitherBound(edges[bound1Index], edges[bound2Index]));
      // When we are done with this cycle, we'll need to build the intersection bound for each edge
      // and its brother. For now, keep track of the relationships.
      nextBrotherMap.put(edge, edges[bound1Index]);
      prevBrotherMap.put(edge, edges[bound2Index]);
    }

    // Pick an edge point arbitrarily from the outer polygon.  Glom this together with all edge
    // points from inner polygons.
    int edgePointCount = 1;
    if (holes != null) {
      for (final GeoPolygon hole : holes) {
        edgePointCount += hole.getEdgePoints().length;
      }
    }
    edgePoints = new GeoPoint[edgePointCount];
    edgePointCount = 0;
    edgePoints[edgePointCount++] = points.get(0);
    if (holes != null) {
      for (final GeoPolygon hole : holes) {
        final GeoPoint[] holeEdgePoints = hole.getEdgePoints();
        for (final GeoPoint p : holeEdgePoints) {
          edgePoints[edgePointCount++] = p;
        }
      }
    }

    if (isWithinHoles(points.get(0))) {
      throw new IllegalArgumentException("Polygon edge intersects a polygon hole; not allowed");
    }
  }

