  @Test
  public void testEvents() throws Exception {
    PluginMeta plugin = new PluginMeta();
    plugin.klass = DefaultClusterEventProducer.class.getName();
    plugin.name = ClusterEventProducer.PLUGIN_NAME;
    V2Request req = new V2Request.Builder("/cluster/plugin")
        .withMethod(POST)
        .withPayload(Collections.singletonMap("add", plugin))
        .build();
    V2Response rsp = req.process(cluster.getSolrClient());
    assertEquals(0, rsp.getStatus());

    // NODES_DOWN

    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);

    // don't kill Overseer
    JettySolrRunner nonOverseerJetty = null;
    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {
      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {
        continue;
      }
      nonOverseerJetty = jetty;
      break;
    }
    String nodeName = nonOverseerJetty.getNodeName();
    cluster.stopJettySolrRunner(nonOverseerJetty);
    cluster.waitForJettyToStop(nonOverseerJetty);
    eventsListener.waitForExpectedEvent(30);
    assertNotNull("should be NODES_DOWN events", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));
    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);
    assertEquals("should be one NODES_DOWN event", 1, events.size());
    ClusterEvent event = events.get(0);
    assertEquals("should be NODES_DOWN event type", ClusterEvent.EventType.NODES_DOWN, event.getType());
    NodesDownEvent nodesDown = (NodesDownEvent) event;
    assertEquals("should be node " + nodeName, nodeName, nodesDown.getNodeNames().next());

    // NODES_UP
    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);
    JettySolrRunner newNode = cluster.startJettySolrRunner();
    cluster.waitForNode(newNode, 60);
    eventsListener.waitForExpectedEvent(30);
    assertNotNull("should be NODES_UP events", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));
    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);
    assertEquals("should be one NODES_UP event", 1, events.size());
    event = events.get(0);
    assertEquals("should be NODES_UP event type", ClusterEvent.EventType.NODES_UP, event.getType());
    NodesUpEvent nodesUp = (NodesUpEvent) event;
    assertEquals("should be node " + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());

    // COLLECTIONS_ADDED
    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);
    String collection = "testNodesEvent_collection";
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, "conf", 1, 1);
    cluster.getSolrClient().request(create);
    cluster.waitForActiveCollection(collection, 1, 1);
    eventsListener.waitForExpectedEvent(30);
    assertNotNull("should be COLLECTIONS_ADDED events", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));
    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);
    assertEquals("should be one COLLECTIONS_ADDED event", 1, events.size());
    event = events.get(0);
    assertEquals("should be COLLECTIONS_ADDED event type", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());
    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;
    assertEquals("should be collection " + collection, collection, collectionsAdded.getCollectionNames().next());

    // COLLECTIONS_REMOVED
    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);
    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);
    cluster.getSolrClient().request(delete);
    eventsListener.waitForExpectedEvent(30);
    assertNotNull("should be COLLECTIONS_REMOVED events", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));
    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);
    assertEquals("should be one COLLECTIONS_REMOVED event", 1, events.size());
    event = events.get(0);
    assertEquals("should be COLLECTIONS_REMOVED event type", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());
    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;
    assertEquals("should be collection " + collection, collection, collectionsRemoved.getCollectionNames().next());

    // CLUSTER_CONFIG_CHANGED
    eventsListener.events.clear();
    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);
    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());
    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());
    clusterProperties.setClusterProperty("ext.foo", "bar");
    eventsListener.waitForExpectedEvent(30);
    assertNotNull("should be CLUSTER_CONFIG_CHANGED events", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));
    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);
    assertEquals("should be one CLUSTER_CONFIG_CHANGED event", 1, events.size());
    event = events.get(0);
    assertEquals("should be CLUSTER_CONFIG_CHANGED event type", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());
    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;
    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();
    assertEquals("new properties wrong value of the 'ext.foo' property: " + newProps,
        "bar", newProps.get("ext.foo"));

    // unset the property
    eventsListener.events.clear();
    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);
    clusterProperties.setClusterProperty("ext.foo", null);
    eventsListener.waitForExpectedEvent(30);
    assertNotNull("should be CLUSTER_CONFIG_CHANGED events", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));
    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);
    assertEquals("should be one CLUSTER_CONFIG_CHANGED event", 1, events.size());
    event = events.get(0);
    assertEquals("should be CLUSTER_CONFIG_CHANGED event type", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());
    propertiesChanged = (ClusterPropertiesChangedEvent) event;
    assertEquals("new properties should not have 'ext.foo' property: " + propertiesChanged.getNewClusterProperties(),
        null, propertiesChanged.getNewClusterProperties().get("ext.foo"));

  }

