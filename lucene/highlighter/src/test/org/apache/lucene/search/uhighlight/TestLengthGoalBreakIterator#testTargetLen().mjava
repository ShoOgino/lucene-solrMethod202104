  public void testTargetLen() throws IOException {
    // "goal" means target length goal to find closest break

    // at first word:
    Query query = query("aa");
    assertEquals("almost two sent A",
        "<b>Aa</b> bb.", highlightClosestToLen(CONTENT, query, 7, 0.f));
    assertEquals("almost two sent B",
        "<b>Aa</b> bb.", highlightClosestToLen(CONTENT, query, 15, 0.5f));
    assertEquals("almost two sent C",
        "<b>Aa</b> bb.", highlightClosestToLen(CONTENT, query, 64, 1.f));
    assertEquals("barely two sent A",
        "<b>Aa</b> bb. Cc dd.", highlightClosestToLen(CONTENT, query, 8, 0.f));
    assertEquals("barely two sent B",
        "<b>Aa</b> bb. Cc dd.", highlightClosestToLen(CONTENT, query, 16, 0.5f));
    assertEquals("long goal A",
        "<b>Aa</b> bb. Cc dd. Ee ff", highlightClosestToLen(CONTENT, query, 14 + random().nextInt(20), 0.f));
    assertEquals("long goal B",
        "<b>Aa</b> bb. Cc dd. Ee ff", highlightClosestToLen(CONTENT, query, 28 + random().nextInt(20), 0.5f));
    // at some word not at start of passage
    query = query("dd");
    for (float align : ALIGNS) {
      // alignment is not meaningful if fragsize is shorter than or closer to match-fragment boundaries
      assertEquals("short goal " + align,
          " Cc <b>dd</b>.", highlightClosestToLen(CONTENT, query, random().nextInt(4), align));
    }
    // preceding/following inclusion by alignment parameter
    assertEquals("barely two sent A",
        " Cc <b>dd</b>. Ee ff", highlightClosestToLen(CONTENT, query, 11, 0.f));
    assertEquals("barely two sent B",
        " Cc <b>dd</b>. Ee ff", highlightClosestToLen(CONTENT, query, 11, 0.5f));
    assertEquals("barely two sent C",
        "Aa bb. Cc <b>dd</b>.", highlightClosestToLen(CONTENT, query, 11, 1.f));
    assertEquals("long goal A",
        " Cc <b>dd</b>. Ee ff", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 0.f));
    assertEquals("long goal B",
        "Aa bb. Cc <b>dd</b>. Ee ff", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 0.5f));
    assertEquals("long goal C",
        "Aa bb. Cc <b>dd</b>.", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 1.f));

    query = query("ddxyzee");
    assertEquals("test fragment search from the middle of the match; almost including",
        "<b>ddxyzee</b> ", highlightClosestToLen(CONTENT3, query, 7, 0.5f, 1, ' '));
    assertEquals("test fragment search from the middle of the match; barely including",
        "bbcc <b>ddxyzee</b> ffgg ", highlightClosestToLen(CONTENT3, query, 14, 0.5f, 1, ' '));
  }

