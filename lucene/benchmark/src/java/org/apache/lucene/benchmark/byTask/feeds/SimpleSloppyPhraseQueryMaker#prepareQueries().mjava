  /* (non-Javadoc)
   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()
   */
  @Override
  protected Query[] prepareQueries() throws Exception {
    // extract some 100 words from doc text to an array
    String words[];
    ArrayList<String> w = new ArrayList<>();
    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);
    while (st.hasMoreTokens() && w.size() < 100) {
      w.add(st.nextToken());
    }
    words = w.toArray(new String[0]);

    // create queries (that would find stuff) with varying slops
    ArrayList<Query> queries = new ArrayList<>();
    for (int slop = 0; slop < 8; slop++) {
      for (int qlen = 2; qlen < 6; qlen++) {
        for (int wd = 0; wd < words.length - qlen - slop; wd++) {
          // ordered
          int remainedSlop = slop;
          int wind = wd;
          PhraseQuery.Builder builder = new PhraseQuery.Builder();
          for (int i = 0; i < qlen; i++) {
            builder.add(new Term(DocMaker.BODY_FIELD, words[wind++]), i);
            if (remainedSlop > 0) {
              remainedSlop--;
              wind++;
            }
          }
          builder.setSlop(slop);
          PhraseQuery q = builder.build();
          queries.add(q);
          // reversed
          remainedSlop = slop;
          wind = wd + qlen + remainedSlop - 1;
          builder = new PhraseQuery.Builder();
          for (int i = 0; i < qlen; i++) {
            builder.add(new Term(DocMaker.BODY_FIELD, words[wind--]), i);
            if (remainedSlop > 0) {
              remainedSlop--;
              wind--;
            }
          }
          builder.setSlop(slop + 2 * qlen);
          q = builder.build();
          queries.add(q);
        }
      }
    }
    return queries.toArray(new Query[0]);
  }

