  /**
   * Construct a patch string that transforms a to b.
   *
   * @param a String 1st string
   * @param b String 2nd string
   * @return String
   */
  public synchronized String exec(String a, String b) {
    if (a == null || b == null) {
      return null;
    }

    int x;
    int y;
    int maxx;
    int maxy;
    int go[] = new int[4];
    final int X = 1;
    final int Y = 2;
    final int R = 3;
    final int D = 0;

    /*
     * setup memory if needed => processing speed up
     */
    maxx = a.length() + 1;
    maxy = b.length() + 1;
    if ((maxx >= sizex) || (maxy >= sizey)) {
      sizex = maxx + 8;
      sizey = maxy + 8;
      net = new int[sizex][sizey];
      way = new int[sizex][sizey];
    }

    /*
     * clear the network
     */
    for (x = 0; x < maxx; x++) {
      for (y = 0; y < maxy; y++) {
        net[x][y] = 0;
      }
    }

    /*
     * set known persistent values
     */
    for (x = 1; x < maxx; x++) {
      net[x][0] = x;
      way[x][0] = X;
    }
    for (y = 1; y < maxy; y++) {
      net[0][y] = y;
      way[0][y] = Y;
    }

    for (x = 1; x < maxx; x++) {
      for (y = 1; y < maxy; y++) {
        go[X] = net[x - 1][y] + DELETE;
        // way on x costs 1 unit
        go[Y] = net[x][y - 1] + INSERT;
        // way on y costs 1 unit
        go[R] = net[x - 1][y - 1] + REPLACE;
        go[D] = net[x - 1][y - 1] + ((a.charAt(x - 1) == b.charAt(y - 1)) ? NOOP : 100);
        // diagonal costs 0, when no change
        short min = D;
        if (go[min] >= go[X]) {
          min = X;
        }
        if (go[min] > go[Y]) {
          min = Y;
        }
        if (go[min] > go[R]) {
          min = R;
        }
        way[x][y] = min;
        net[x][y] = (short) go[min];
      }
    }

    // read the patch string
    StringBuilder result = new StringBuilder();
    final char base = 'a' - 1;
    char deletes = base;
    char equals = base;
    for (x = maxx - 1, y = maxy - 1; x + y != 0; ) {
      switch (way[x][y]) {
        case X:
          if (equals != base) {
            result.append('-').append(equals);
            equals = base;
          }
          deletes++;
          x--;
          break;
          // delete
        case Y:
          if (deletes != base) {
            result.append('D').append(deletes);
            deletes = base;
          }
          if (equals != base) {
            result.append('-').append(equals);
            equals = base;
          }
          result.append('I');
          result.append(b.charAt(--y));
          break;
          // insert
        case R:
          if (deletes != base) {
            result.append('D').append(deletes);
            deletes = base;
          }
          if (equals != base) {
            result.append('-').append(equals);
            equals = base;
          }
          result.append('R');
          result.append(b.charAt(--y));
          x--;
          break;
          // replace
        case D:
          if (deletes != base) {
            result.append('D').append(deletes);
            deletes = base;
          }
          equals++;
          x--;
          y--;
          break;
          // no change
      }
    }
    if (deletes != base) {
      result.append('D').append(deletes);
      deletes = base;
    }

    return result.toString();
  }

