  private void initReaderSearcherHighlighter() throws IOException {
    indexReader = indexWriter.getReader();
    searcher = newSearcher(indexReader);
    highlighter =
        TestUnifiedHighlighter.randomUnifiedHighlighter(
            searcher,
            indexAnalyzer,
            EnumSet.of(HighlightFlag.PHRASES, HighlightFlag.MULTI_TERM_QUERY),
            true);
    // intercept the formatter in order to check constraints on the passage.
    final PassageFormatter defaultFormatter = highlighter.getFormatter(null);
    highlighter.setFormatter(
        new PassageFormatter() {
          @Override
          public Object format(Passage[] passages, String content) {
            boolean thisDupMatchAllowed = dupMatchAllowed.getAndSet(true);
            for (Passage passage : passages) {
              String prevPair = "";
              for (int i = 0; i < passage.getNumMatches(); i++) {
                // pad each to make comparable
                String pair =
                    String.format(
                        Locale.ROOT,
                        "%03d-%03d",
                        passage.getMatchStarts()[i],
                        passage.getMatchEnds()[i]);
                int cmp = prevPair.compareTo(pair);
                if (cmp == 0) {
                  assertTrue("dup match in passage at offset " + pair, thisDupMatchAllowed);
                } else if (cmp > 0) {
                  fail("bad match order in passage at offset " + pair);
                }
                prevPair = pair;
              }
            }
            return defaultFormatter.format(passages, content);
          }
        });
  }

