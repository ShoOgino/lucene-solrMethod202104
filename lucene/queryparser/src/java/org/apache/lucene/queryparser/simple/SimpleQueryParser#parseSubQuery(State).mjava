  private void parseSubQuery(State state) {
    while (state.index < state.length) {
      if (state.data[state.index] == '(' && (flags & PRECEDENCE_OPERATORS) != 0) {
        // the beginning of a subquery has been found
        consumeSubQuery(state);
      } else if (state.data[state.index] == ')' && (flags & PRECEDENCE_OPERATORS) != 0) {
        // this is an extraneous character so it is ignored
        ++state.index;
      } else if (state.data[state.index] == '"' && (flags & PHRASE_OPERATOR) != 0) {
        // the beginning of a phrase has been found
        consumePhrase(state);
      } else if (state.data[state.index] == '+' && (flags & AND_OPERATOR) != 0) {
        // an and operation has been explicitly set
        // if an operation has already been set this one is ignored
        // if a term (or phrase or subquery) has not been found yet the
        // operation is also ignored since there is no previous
        // term (or phrase or subquery) to and with
        if (state.currentOperation == null && state.top != null) {
          state.currentOperation = BooleanClause.Occur.MUST;
        }

        ++state.index;
      } else if (state.data[state.index] == '|' && (flags & OR_OPERATOR) != 0) {
        // an or operation has been explicitly set
        // if an operation has already been set this one is ignored
        // if a term (or phrase or subquery) has not been found yet the
        // operation is also ignored since there is no previous
        // term (or phrase or subquery) to or with
        if (state.currentOperation == null && state.top != null) {
          state.currentOperation = BooleanClause.Occur.SHOULD;
        }

        ++state.index;
      } else if (state.data[state.index] == '-' && (flags & NOT_OPERATOR) != 0) {
        // a not operator has been found, so increase the not count
        // two not operators in a row negate each other
        ++state.not;
        ++state.index;

        // continue so the not operator is not reset
        // before the next character is determined
        continue;
      } else if ((state.data[state.index] == ' '
              || state.data[state.index] == '\t'
              || state.data[state.index] == '\n'
              || state.data[state.index] == '\r')
          && (flags & WHITESPACE_OPERATOR) != 0) {
        // ignore any whitespace found as it may have already been
        // used a delimiter across a term (or phrase or subquery)
        // or is simply extraneous
        ++state.index;
      } else {
        // the beginning of a token has been found
        consumeToken(state);
      }

      // reset the not operator as even whitespace is not allowed when
      // specifying the not operation for a term (or phrase or subquery)
      state.not = 0;
    }
  }

