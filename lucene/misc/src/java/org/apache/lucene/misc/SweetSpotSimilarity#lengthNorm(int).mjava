  /**
   * Implemented as: <code>
   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )
   * </code>.
   *
   * <p>This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and steepness is 0.5
   *
   * <p>:TODO: potential optimization is to just flat out return 1.0f if numTerms is between min and
   * max.
   *
   * @see #setLengthNormFactors
   * @see <a href="doc-files/ss.computeLengthNorm.svg">An SVG visualization of this function</a>
   */
  @Override
  public float lengthNorm(int numTerms) {
    final int l = ln_min;
    final int h = ln_max;
    final float s = ln_steep;

    return (float)
        (1.0f
            / Math.sqrt(
                (s * (float) (Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h - l))) + 1.0f));
  }

