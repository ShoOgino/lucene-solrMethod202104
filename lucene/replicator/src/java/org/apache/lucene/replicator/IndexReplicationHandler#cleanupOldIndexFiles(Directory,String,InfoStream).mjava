  /**
   * Cleans up the index directory from old index files. This method uses the last commit found by
   * {@link #getLastCommit(Directory)}. If it matches the expected segmentsFile, then all files not
   * referenced by this commit point are deleted.
   *
   * <p><b>NOTE:</b> this method does a best effort attempt to clean the index directory. It
   * suppresses any exceptions that occur, as this can be retried the next time.
   */
  public static void cleanupOldIndexFiles(
      Directory dir, String segmentsFile, InfoStream infoStream) {
    try {
      IndexCommit commit = getLastCommit(dir);
      // commit == null means weird IO errors occurred, ignore them
      // if there were any IO errors reading the expected commit point (i.e.
      // segments files mismatch), then ignore that commit either.
      if (commit != null && commit.getSegmentsFileName().equals(segmentsFile)) {
        Set<String> commitFiles = new HashSet<>(commit.getFileNames());
        Matcher matcher = IndexFileNames.CODEC_FILE_PATTERN.matcher("");
        for (String file : dir.listAll()) {
          if (!commitFiles.contains(file)
              && (matcher.reset(file).matches() || file.startsWith(IndexFileNames.SEGMENTS))) {
            // suppress exceptions, it's just a best effort
            IOUtils.deleteFilesIgnoringExceptions(dir, file);
          }
        }
      }
    } catch (Throwable t) {
      // ignore any errors that happen during this state and only log it. this
      // cleanup will have a chance to succeed the next time we get a new
      // revision.
      if (infoStream.isEnabled(INFO_STREAM_COMPONENT)) {
        infoStream.message(
            INFO_STREAM_COMPONENT, "cleanupOldIndexFiles(): failed on error " + t.getMessage());
      }
    }
  }

