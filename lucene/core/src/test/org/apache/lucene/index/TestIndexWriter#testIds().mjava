  /** Make sure we see ids per segment and per commit. */
  public void testIds() throws Exception {
    Directory d = newDirectory();
    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));
    w.addDocument(new Document());
    w.close();

    SegmentInfos sis = SegmentInfos.readLatestCommit(d);
    byte[] id1 = sis.getId();
    assertNotNull(id1);
    assertEquals(StringHelper.ID_LENGTH, id1.length);

    byte[] id2 = sis.info(0).info.getId();
    byte[] sciId2 = sis.info(0).getId();
    assertNotNull(id2);
    assertNotNull(sciId2);
    assertEquals(StringHelper.ID_LENGTH, id2.length);
    assertEquals(StringHelper.ID_LENGTH, sciId2.length);

    // Make sure CheckIndex includes id output:
    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
    CheckIndex checker = new CheckIndex(d);
    checker.setDoSlowChecks(false);
    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);
    CheckIndex.Status indexStatus = checker.checkIndex(null);
    String s = bos.toString(IOUtils.UTF_8);
    checker.close();
    // Make sure CheckIndex didn't fail
    assertTrue(s, indexStatus != null && indexStatus.clean);

    // Commit id is always stored:
    assertTrue(
        "missing id=" + StringHelper.idToString(id1) + " in:\n" + s,
        s.contains("id=" + StringHelper.idToString(id1)));

    assertTrue(
        "missing id=" + StringHelper.idToString(id1) + " in:\n" + s,
        s.contains("id=" + StringHelper.idToString(id1)));
    d.close();

    Set<String> ids = new HashSet<>();
    for (int i = 0; i < 100000; i++) {
      String id = StringHelper.idToString(StringHelper.randomId());
      assertFalse("id=" + id + " i=" + i, ids.contains(id));
      ids.add(id);
    }
  }

