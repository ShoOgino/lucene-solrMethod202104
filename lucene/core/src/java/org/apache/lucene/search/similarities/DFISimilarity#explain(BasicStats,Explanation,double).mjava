  @Override
  protected Explanation explain(BasicStats stats, Explanation freq, double docLen) {
    final double expected =
        (stats.getTotalTermFreq() + 1) * docLen / (stats.getNumberOfFieldTokens() + 1);
    if (freq.getValue().doubleValue() <= expected) {
      return Explanation.match(
          (float) 0,
          "score(" + getClass().getSimpleName() + ", freq=" + freq.getValue() + "), equals to 0");
    }
    Explanation explExpected =
        Explanation.match(
            (float) expected,
            "expected, computed as (F + 1) * dl / (T + 1) from:",
            Explanation.match(
                stats.getTotalTermFreq(), "F, total number of occurrences of term across all docs"),
            Explanation.match((float) docLen, "dl, length of field"),
            Explanation.match(
                stats.getNumberOfFieldTokens(), "T, total number of tokens in the field"));

    final double measure = independence.score(freq.getValue().doubleValue(), expected);
    Explanation explMeasure =
        Explanation.match(
            (float) measure,
            "measure, computed as independence.score(freq, expected) from:",
            freq,
            explExpected);

    return Explanation.match(
        (float) score(stats, freq.getValue().doubleValue(), docLen),
        "score("
            + getClass().getSimpleName()
            + ", freq="
            + freq.getValue()
            + "), computed as boost * log2(measure + 1) from:",
        Explanation.match((float) stats.getBoost(), "boost, query boost"),
        explMeasure);
  }

