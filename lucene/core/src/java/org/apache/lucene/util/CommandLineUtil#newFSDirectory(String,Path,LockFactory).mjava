  /**
   * Creates a specific FSDirectory instance starting from its class name
   *
   * @param clazzName The name of the FSDirectory class to load
   * @param path The path to be used as parameter constructor
   * @param lf The lock factory to be used
   * @return the new FSDirectory instance
   */
  public static FSDirectory newFSDirectory(String clazzName, Path path, LockFactory lf) {
    try {
      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);
      return newFSDirectory(clazz, path, lf);
    } catch (ClassNotFoundException e) {
      throw new IllegalArgumentException(
          FSDirectory.class.getSimpleName() + " implementation not found: " + clazzName, e);
    } catch (ClassCastException e) {
      throw new IllegalArgumentException(
          clazzName + " is not a " + FSDirectory.class.getSimpleName() + " implementation", e);
    } catch (NoSuchMethodException e) {
      throw new IllegalArgumentException(
          clazzName + " constructor with " + Path.class.getSimpleName() + " as parameter not found",
          e);
    } catch (Exception e) {
      throw new IllegalArgumentException("Error creating " + clazzName + " instance", e);
    }
  }

