  private void write(
      SegmentInfo si, final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields)
      throws Throwable {

    final Codec codec = si.getCodec();
    final SegmentWriteState state =
        new SegmentWriteState(
            InfoStream.getDefault(), dir, si, fieldInfos, null, newIOContext(random()));

    Arrays.sort(fields);
    FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(state);
    NormsProducer fakeNorms =
        new NormsProducer() {

          @Override
          public long ramBytesUsed() {
            return 0;
          }

          @Override
          public void close() throws IOException {}

          @Override
          public NumericDocValues getNorms(FieldInfo field) throws IOException {
            return new NumericDocValues() {

              int doc = -1;

              @Override
              public int nextDoc() throws IOException {
                return advance(doc + 1);
              }

              @Override
              public int docID() {
                return doc;
              }

              @Override
              public long cost() {
                return si.maxDoc();
              }

              @Override
              public int advance(int target) throws IOException {
                if (target >= si.maxDoc()) {
                  return doc = NO_MORE_DOCS;
                } else {
                  return doc = target;
                }
              }

              @Override
              public boolean advanceExact(int target) throws IOException {
                doc = target;
                return true;
              }

              @Override
              public long longValue() throws IOException {
                return 1;
              }
            };
          }

          @Override
          public void checkIntegrity() throws IOException {}
        };
    boolean success = false;
    try {
      consumer.write(new DataFields(fields), fakeNorms);
      success = true;
    } finally {
      if (success) {
        IOUtils.close(consumer);
      } else {
        IOUtils.closeWhileHandlingException(consumer);
      }
    }
  }

