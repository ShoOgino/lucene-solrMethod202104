  @Override
  public void move(Path source, Path target, CopyOption... options) throws IOException {
    synchronized (openFiles) {
      checkDeleteAccess(source);
      Object key = getKeyOrNull(target);
      super.move(source, target, options);
      if (key != null) {
        Object newKey = getKey(target);
        if (newKey.equals(key) == false) {
          // we need to transfer ownership here if we have open files on this file since the
          // getKey() method will
          // return a different i-node next time we call it with the target path and our onClose
          // method will
          // trip an assert
          Map<Path, Integer> map = openFiles.get(key);
          if (map != null) {
            Integer v = map.remove(target);
            if (v != null) {
              Map<Path, Integer> pathIntegerMap =
                  openFiles.computeIfAbsent(newKey, k -> new HashMap<>());
              Integer existingValue = pathIntegerMap.getOrDefault(target, 0);
              pathIntegerMap.put(target, existingValue + v);
            }
            if (map.isEmpty()) {
              openFiles.remove(key);
            }
          }
        }
      }
    }
  }

