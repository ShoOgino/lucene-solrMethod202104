  /**
   * Find the stem(s) of the provided word
   *
   * @param word Word to find the stems for
   * @return List of stems for the word
   */
  public List<CharsRef> stem(char[] word, int length) {

    if (dictionary.mayNeedInputCleaning()) {
      scratchSegment.setLength(0);
      scratchSegment.append(word, 0, length);
      if (dictionary.needsInputCleaning(scratchSegment)) {
        CharSequence cleaned = dictionary.cleanInput(scratchSegment, segment);
        scratchBuffer = ArrayUtil.grow(scratchBuffer, cleaned.length());
        length = segment.length();
        segment.getChars(0, length, scratchBuffer, 0);
        word = scratchBuffer;
      }
    }

    List<CharsRef> list = new ArrayList<>();
    RootProcessor processor =
        (stem, formID, stemException) -> {
          list.add(newStem(stem, stemException));
          return true;
        };
    if (!doStem(word, 0, length, WordContext.SIMPLE_WORD, processor)) {
      return list;
    }

    WordCase wordCase = caseOf(word, length);
    if (wordCase == WordCase.UPPER || wordCase == WordCase.TITLE) {
      CaseVariationProcessor variationProcessor =
          (variant, varLength, originalCase) ->
              doStem(variant, 0, varLength, WordContext.SIMPLE_WORD, processor);
      varyCase(word, length, wordCase, variationProcessor);
    }
    return list;
  }

