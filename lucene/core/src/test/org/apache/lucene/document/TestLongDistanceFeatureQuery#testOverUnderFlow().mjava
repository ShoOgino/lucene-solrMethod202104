  public void testOverUnderFlow() throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter w =
        new RandomIndexWriter(
            random(),
            dir,
            newIndexWriterConfig().setMergePolicy(newLogMergePolicy(random().nextBoolean())));
    Document doc = new Document();
    LongPoint point = new LongPoint("foo", 0L);
    doc.add(point);
    NumericDocValuesField docValue = new NumericDocValuesField("foo", 0L);
    doc.add(docValue);

    point.setLongValue(3);
    docValue.setLongValue(3);
    w.addDocument(doc);

    point.setLongValue(12);
    docValue.setLongValue(12);
    w.addDocument(doc);

    point.setLongValue(-10);
    docValue.setLongValue(-10);
    w.addDocument(doc);

    point.setLongValue(Long.MAX_VALUE);
    docValue.setLongValue(Long.MAX_VALUE);
    w.addDocument(doc);

    point.setLongValue(Long.MIN_VALUE);
    docValue.setLongValue(Long.MIN_VALUE);
    w.addDocument(doc);

    DirectoryReader reader = w.getReader();
    IndexSearcher searcher = newSearcher(reader);

    Query q = LongPoint.newDistanceFeatureQuery("foo", 3, Long.MAX_VALUE - 1, 100);
    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, 1);
    searcher.search(q, collector);
    TopDocs topHits = collector.topDocs();
    assertEquals(2, topHits.scoreDocs.length);

    CheckHits.checkEqual(
        q,
        new ScoreDoc[] {
          new ScoreDoc(3, (float) (3f * (100. / (100. + 1.)))),
          new ScoreDoc(
              0,
              (float)
                  (3f
                      * (100.
                          / (100.
                              + Long
                                  .MAX_VALUE)))) // rounding makes the distance treated as if it was
          // MAX_VALUE
        },
        topHits.scoreDocs);

    q = LongPoint.newDistanceFeatureQuery("foo", 3, Long.MIN_VALUE + 1, 100);
    collector = TopScoreDocCollector.create(2, null, 1);
    searcher.search(q, collector);
    topHits = collector.topDocs();
    assertEquals(2, topHits.scoreDocs.length);
    CheckHits.checkExplanations(q, "", searcher);

    CheckHits.checkEqual(
        q,
        new ScoreDoc[] {
          new ScoreDoc(4, (float) (3f * (100. / (100. + 1.)))),
          new ScoreDoc(
              0,
              (float)
                  (3f
                      * (100.
                          / (100.
                              + Long
                                  .MAX_VALUE)))) // rounding makes the distance treated as if it was
          // MAX_VALUE
        },
        topHits.scoreDocs);

    reader.close();
    w.close();
    dir.close();
  }

