  @SuppressWarnings({"unchecked", "rawtypes"})
  private TopGroups<BytesRef> getTopGroups(TopGroupsCollector c, int withinGroupOffset) {
    if (c.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {
      TopGroupsCollector<BytesRef> collector = (TopGroupsCollector<BytesRef>) c;
      return collector.getTopGroups(withinGroupOffset);
    } else if (c.getGroupSelector().getClass().isAssignableFrom(ValueSourceGroupSelector.class)) {
      TopGroupsCollector<MutableValue> collector = (TopGroupsCollector<MutableValue>) c;
      TopGroups<MutableValue> mvalTopGroups = collector.getTopGroups(withinGroupOffset);
      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);
      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {
        BytesRef groupValue =
            mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;
        groups.add(
            new GroupDocs<>(
                Float.NaN,
                mvalGd.maxScore,
                mvalGd.totalHits,
                mvalGd.scoreDocs,
                groupValue,
                mvalGd.groupSortValues));
      }
      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class)
      // causes
      // errors on Eclipse Compiler (ecj) used for javadoc lint
      return new TopGroups<BytesRef>(
          mvalTopGroups.groupSort,
          mvalTopGroups.withinGroupSort,
          mvalTopGroups.totalHitCount,
          mvalTopGroups.totalGroupedHitCount,
          groups.toArray(new GroupDocs[groups.size()]),
          Float.NaN);
    }
    fail();
    return null;
  }

