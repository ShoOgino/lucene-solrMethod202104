  private void consumePhrase(State state) {
    assert (flags & PHRASE_OPERATOR) != 0;
    int start = ++state.index;
    int copied = 0;
    boolean escaped = false;
    boolean hasSlop = false;

    while (state.index < state.length) {
      if (!escaped) {
        if (state.data[state.index] == '\\' && (flags & ESCAPE_OPERATOR) != 0) {
          // an escape character has been found so
          // whatever character is next will become
          // part of the phrase unless the escape
          // character is the last one in the data
          escaped = true;
          ++state.index;

          continue;
        } else if (state.data[state.index] == '"') {
          // if there are still characters after the closing ", check for a
          // tilde
          if (state.length > (state.index + 1)
              && state.data[state.index + 1] == '~'
              && (flags & NEAR_OPERATOR) != 0) {
            state.index++;
            // check for characters after the tilde
            if (state.length > (state.index + 1)) {
              hasSlop = true;
            }
            break;
          } else {
            // this should be the end of the phrase
            // all characters found will used for
            // creating the phrase query
            break;
          }
        }
      }

      escaped = false;
      state.buffer[copied++] = state.data[state.index++];
    }

    if (state.index == state.length) {
      // a closing double quote was never found so the opening
      // double quote is considered extraneous and will be ignored
      state.index = start;
    } else if (state.index == start) {
      // a closing double quote was found immediately after the opening
      // double quote so the current operation is reset since it would
      // have been applied to this phrase
      state.currentOperation = null;

      ++state.index;
    } else {
      // a complete phrase has been found and is parsed through
      // through the analyzer from the given field
      String phrase = new String(state.buffer, 0, copied);
      Query branch;
      if (hasSlop) {
        branch = newPhraseQuery(phrase, parseFuzziness(state));
      } else {
        branch = newPhraseQuery(phrase, 0);
      }
      buildQueryTree(state, branch);

      ++state.index;
    }
  }

