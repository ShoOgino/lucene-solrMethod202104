  /**
   * Parses a query, searching on the fields specified. Use this if you need to specify certain
   * fields as required, and others as prohibited.
   *
   * <p>Usage:
   *
   * <pre class="prettyprint">
   * <code>
   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};
   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,
   *                BooleanClause.Occur.MUST,
   *                BooleanClause.Occur.MUST_NOT};
   * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);
   * </code>
   * </pre>
   *
   * <p>The code above would construct a query:
   *
   * <pre>
   * <code>
   * (filename:query) +(contents:query) -(description:query)
   * </code>
   * </pre>
   *
   * @param query Query string to parse
   * @param fields Fields to search on
   * @param flags Flags describing the fields
   * @param analyzer Analyzer to use
   * @throws IllegalArgumentException if the length of the fields array differs from the length of
   *     the flags array
   */
  public static Query parse(
      String query, String[] fields, BooleanClause.Occur[] flags, Analyzer analyzer)
      throws QueryNodeException {
    if (fields.length != flags.length)
      throw new IllegalArgumentException("fields.length != flags.length");
    BooleanQuery.Builder bQuery = new BooleanQuery.Builder();

    StandardQueryParser qp = new StandardQueryParser();
    qp.setAnalyzer(analyzer);

    for (int i = 0; i < fields.length; i++) {
      Query q = qp.parse(query, fields[i]);

      if (q != null) { // q never null, just being defensive
        bQuery.add(q, flags[i]);
      }
    }
    return bQuery.build();
  }

