  public void testUpdate() throws IOException {
    Directory directory = newDirectory();
    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);
    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);
    SegmentInfos segmentInfos = reader.segmentInfos.clone();
    ReaderPool pool =
        new ReaderPool(
            directory,
            directory,
            segmentInfos,
            fieldNumbers,
            () -> 0l,
            new NullInfoStream(),
            null,
            null);
    int id = random().nextInt(10);
    if (random().nextBoolean()) {
      pool.enableReaderPooling();
    }
    for (SegmentCommitInfo commitInfo : segmentInfos) {
      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);
      SegmentReader readOnlyClone = readersAndUpdates.getReadOnlyClone(IOContext.READ);
      PostingsEnum postings = readOnlyClone.postings(new Term("id", "" + id));
      boolean expectUpdate = false;
      int doc = -1;
      if (postings != null && postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
        NumericDocValuesFieldUpdates number =
            new NumericDocValuesFieldUpdates(0, "number", commitInfo.info.maxDoc());
        number.add(doc = postings.docID(), 1000l);
        number.finish();
        readersAndUpdates.addDVUpdate(number);
        expectUpdate = true;
        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
        assertTrue(pool.anyDocValuesChanges());
      } else {
        assertFalse(pool.anyDocValuesChanges());
      }
      readOnlyClone.close();
      boolean writtenToDisk;
      if (pool.isReaderPoolingEnabled()) {
        if (random().nextBoolean()) {
          writtenToDisk = pool.writeAllDocValuesUpdates();
          assertFalse(readersAndUpdates.isMerging());
        } else if (random().nextBoolean()) {
          writtenToDisk = pool.commit(segmentInfos);
          assertFalse(readersAndUpdates.isMerging());
        } else {
          writtenToDisk = pool.writeDocValuesUpdatesForMerge(Collections.singletonList(commitInfo));
          assertTrue(readersAndUpdates.isMerging());
        }
        assertFalse(pool.release(readersAndUpdates, random().nextBoolean()));
      } else {
        if (random().nextBoolean()) {
          writtenToDisk = pool.release(readersAndUpdates, random().nextBoolean());
          assertFalse(readersAndUpdates.isMerging());
        } else {
          writtenToDisk = pool.writeDocValuesUpdatesForMerge(Collections.singletonList(commitInfo));
          assertTrue(readersAndUpdates.isMerging());
          assertFalse(pool.release(readersAndUpdates, random().nextBoolean()));
        }
      }
      assertFalse(pool.anyDocValuesChanges());
      assertEquals(expectUpdate, writtenToDisk);
      if (expectUpdate) {
        readersAndUpdates = pool.get(commitInfo, true);
        SegmentReader updatedReader = readersAndUpdates.getReadOnlyClone(IOContext.READ);
        assertNotSame(-1, doc);
        NumericDocValues number = updatedReader.getNumericDocValues("number");
        assertEquals(doc, number.advance(doc));
        assertEquals(1000l, number.longValue());
        readersAndUpdates.release(updatedReader);
        assertFalse(pool.release(readersAndUpdates, random().nextBoolean()));
      }
    }
    IOUtils.close(pool, reader, directory);
  }

