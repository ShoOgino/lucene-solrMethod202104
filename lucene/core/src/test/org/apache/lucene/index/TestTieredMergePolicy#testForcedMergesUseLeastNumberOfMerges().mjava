  // LUCENE-8688 reports that force merges merged more segments that necessary to respect
  // maxSegmentCount as a result
  // of LUCENE-7976 so we ensure that it only does the minimum number of merges here.
  public void testForcedMergesUseLeastNumberOfMerges() throws Exception {
    final TieredMergePolicy tmp = new TieredMergePolicy();
    final double oneSegmentSize = 1.0D;
    final double maxSegmentSize = 10 * oneSegmentSize;
    tmp.setMaxMergedSegmentMB(maxSegmentSize);

    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);
    for (int j = 0; j < 30; ++j) {
      infos.add(makeSegmentCommitInfo("_" + j, 1000, 0, oneSegmentSize, IndexWriter.SOURCE_MERGE));
    }

    final int expectedCount = random().nextInt(10) + 3;
    final MergeSpecification specification =
        tmp.findForcedMerges(
            infos,
            expectedCount,
            segmentsToMerge(infos),
            new MockMergeContext(SegmentCommitInfo::getDelCount));
    assertMaxSize(specification, maxSegmentSize);
    final int resultingCount =
        infos.size()
            + specification.merges.size()
            - specification.merges.stream().mapToInt(spec -> spec.segments.size()).sum();
    assertEquals(expectedCount, resultingCount);

    SegmentInfos manySegmentsInfos = new SegmentInfos(Version.LATEST.major);
    final int manySegmentsCount = atLeast(100);
    for (int j = 0; j < manySegmentsCount; ++j) {
      manySegmentsInfos.add(
          makeSegmentCommitInfo("_" + j, 1000, 0, 0.1D, IndexWriter.SOURCE_MERGE));
    }

    final MergeSpecification specificationManySegments =
        tmp.findForcedMerges(
            manySegmentsInfos,
            expectedCount,
            segmentsToMerge(manySegmentsInfos),
            new MockMergeContext(SegmentCommitInfo::getDelCount));
    assertMaxSize(specificationManySegments, maxSegmentSize);
    final int resultingCountManySegments =
        manySegmentsInfos.size()
            + specificationManySegments.merges.size()
            - specificationManySegments.merges.stream()
                .mapToInt(spec -> spec.segments.size())
                .sum();
    assertTrue(resultingCountManySegments >= expectedCount);
  }

