  @Test
  public void testRandomQueries() throws Exception {
    String[] vals = {"w1", "w2", "w3", "w4", "w5", "xx", "yy", "zzz"};

    int tot = 0;

    BooleanQuery q1 = null;
    try {

      // increase number of iterations for more complete testing
      int num = atLeast(3);
      for (int i = 0; i < num; i++) {
        int level = random().nextInt(3);
        q1 =
            randBoolQuery(
                    new Random(random().nextLong()),
                    random().nextBoolean(),
                    level,
                    field,
                    vals,
                    null)
                .build();

        // Can't sort by relevance since floating point numbers may not quite
        // match up.
        Sort sort = Sort.INDEXORDER;

        QueryUtils.check(random(), q1, searcher); // baseline sim
        try {
          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.
          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim
          QueryUtils.check(random(), q1, searcher);
        } finally {
          searcher.setSimilarity(new ClassicSimilarity()); // restore
        }

        // check diff (randomized) scorers (from AssertingSearcher) produce the same results
        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, 1);
        searcher.search(q1, collector);
        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;
        collector = TopFieldCollector.create(sort, 1000, 1);
        searcher.search(q1, collector);
        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;
        tot += hits2.length;
        CheckHits.checkEqual(q1, hits1, hits2);

        BooleanQuery.Builder q3 = new BooleanQuery.Builder();
        q3.add(q1, BooleanClause.Occur.SHOULD);
        q3.add(new PrefixQuery(new Term("field2", "b")), BooleanClause.Occur.SHOULD);
        assertEquals(
            mulFactor * collector.totalHits + NUM_EXTRA_DOCS / 2, bigSearcher.count(q3.build()));

        // test diff (randomized) scorers produce the same results on bigSearcher as well
        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);
        bigSearcher.search(q1, collector);
        hits1 = collector.topDocs().scoreDocs;
        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);
        bigSearcher.search(q1, collector);
        hits2 = collector.topDocs().scoreDocs;
        CheckHits.checkEqual(q1, hits1, hits2);
      }

    } catch (Exception e) {
      // For easier debugging
      System.out.println("failed query: " + q1);
      throw e;
    }

    // System.out.println("Total hits:"+tot);
  }

