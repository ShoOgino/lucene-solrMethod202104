  /**
   * Constructs with the specified calendar used as a template to be cloned whenever a new Calendar
   * needs to be created. See {@link #DEFAULT_CAL} and {@link #JAVA_UTIL_TIME_COMPAT_CAL}.
   */
  public DateRangePrefixTree(Calendar templateCal) {
    super(
        new int[] { // sublevels by level
          NUM_MYEARS,
          1000, // 1 thousand thousand-years in a million years
          1000, // 1 thousand years in a thousand-year
          calFieldLen(templateCal, Calendar.MONTH),
          calFieldLen(templateCal, Calendar.DAY_OF_MONTH),
          calFieldLen(templateCal, Calendar.HOUR_OF_DAY),
          calFieldLen(templateCal, Calendar.MINUTE),
          calFieldLen(templateCal, Calendar.SECOND),
          calFieldLen(templateCal, Calendar.MILLISECOND),
        });
    CAL_TMP = (Calendar) templateCal.clone(); // defensive copy
    MINCAL = (Calendar) CAL_TMP.clone();
    MINCAL.setTimeInMillis(Long.MIN_VALUE);
    MAXCAL = (Calendar) CAL_TMP.clone();
    MAXCAL.setTimeInMillis(Long.MAX_VALUE);
    // BC years are decreasing, remember.  Yet ActualMaximum is the numerically high value,
    // ActualMinimum is 1.
    BC_FIRSTYEAR = MINCAL.getActualMaximum(Calendar.YEAR);
    BC_LASTYEAR = MINCAL.getActualMinimum(Calendar.YEAR); // 1
    BC_YEARS = BC_FIRSTYEAR - BC_LASTYEAR + 1;
    AD_FIRSTYEAR = MAXCAL.getActualMinimum(Calendar.YEAR); // 1
    AD_LASTYEAR = MAXCAL.getActualMaximum(Calendar.YEAR);
    AD_YEAR_BASE =
        (((BC_YEARS - 1) / 1000_000) + 1) * 1000_000; // align year 0 at an even # of million years
    assert BC_LASTYEAR == 1 && AD_FIRSTYEAR == 1;
    assert NUM_MYEARS == (AD_YEAR_BASE + AD_LASTYEAR) / 1000_000 + 1;

    maxLV = toShape((Calendar) MAXCAL.clone());
    minLV = toShape((Calendar) MINCAL.clone());
    if (MAXCAL instanceof GregorianCalendar) {
      GregorianCalendar gCal = (GregorianCalendar) MAXCAL;
      gregorianChangeDateLV = toUnitShape(gCal.getGregorianChange());
    } else {
      gregorianChangeDateLV = null;
    }
  }

