  /** Test some exceptional rules, implemented as rewrites. */
  public void testExceptions() throws IOException {
    CzechAnalyzer cz = new CzechAnalyzer();

    /* rewrite of št -> sk */
    assertAnalyzesTo(cz, "český", new String[] {"česk"});
    assertAnalyzesTo(cz, "čeští", new String[] {"česk"});

    /* rewrite of čt -> ck */
    assertAnalyzesTo(cz, "anglický", new String[] {"anglick"});
    assertAnalyzesTo(cz, "angličtí", new String[] {"anglick"});

    /* rewrite of z -> h */
    assertAnalyzesTo(cz, "kniha", new String[] {"knih"});
    assertAnalyzesTo(cz, "knize", new String[] {"knih"});

    /* rewrite of ž -> h */
    assertAnalyzesTo(cz, "mazat", new String[] {"mah"});
    assertAnalyzesTo(cz, "mažu", new String[] {"mah"});

    /* rewrite of c -> k */
    assertAnalyzesTo(cz, "kluk", new String[] {"kluk"});
    assertAnalyzesTo(cz, "kluci", new String[] {"kluk"});
    assertAnalyzesTo(cz, "klucích", new String[] {"kluk"});

    /* rewrite of č -> k */
    assertAnalyzesTo(cz, "hezký", new String[] {"hezk"});
    assertAnalyzesTo(cz, "hezčí", new String[] {"hezk"});

    /* rewrite of *ů* -> *o* */
    assertAnalyzesTo(cz, "hůl", new String[] {"hol"});
    assertAnalyzesTo(cz, "hole", new String[] {"hol"});

    /* rewrite of e* -> * */
    assertAnalyzesTo(cz, "deska", new String[] {"desk"});
    assertAnalyzesTo(cz, "desek", new String[] {"desk"});

    cz.close();
  }

