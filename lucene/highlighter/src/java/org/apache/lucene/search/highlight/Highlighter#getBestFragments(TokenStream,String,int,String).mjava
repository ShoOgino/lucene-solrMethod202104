  /**
   * Highlights terms in the text , extracting the most relevant sections and concatenating the
   * chosen fragments with a separator (typically "..."). The document text is analysed in chunks to
   * record hit statistics across the document. After accumulating stats, the fragments with the
   * highest scores are returned in order as "separator" delimited strings.
   *
   * @param text text to highlight terms in
   * @param maxNumFragments the maximum number of fragments.
   * @param separator the separator used to intersperse the document fragments (typically "...")
   * @return highlighted text
   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided
   *     text's length
   */
  public final String getBestFragments(
      TokenStream tokenStream, String text, int maxNumFragments, String separator)
      throws IOException, InvalidTokenOffsetsException {
    String sections[] = getBestFragments(tokenStream, text, maxNumFragments);
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < sections.length; i++) {
      if (i > 0) {
        result.append(separator);
      }
      result.append(sections[i]);
    }
    return result.toString();
  }

