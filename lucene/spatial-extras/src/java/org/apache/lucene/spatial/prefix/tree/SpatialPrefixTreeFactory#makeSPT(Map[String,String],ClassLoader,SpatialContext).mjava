  /**
   * The factory is looked up via "prefixTree" in args, expecting "geohash" or "quad". If it's
   * neither of these, then "geohash" is chosen for a geo context, otherwise "quad" is chosen. The
   * "version" arg, if present, is parsed with {@link Version} and the prefix tree might be
   * sensitive to it.
   */
  public static SpatialPrefixTree makeSPT(
      Map<String, String> args, ClassLoader classLoader, SpatialContext ctx) {
    // TODO refactor to use Java SPI like how Lucene already does for codecs/postingsFormats, etc
    SpatialPrefixTreeFactory instance;
    String cname = args.get(PREFIX_TREE);
    if (cname == null) cname = ctx.isGeo() ? "geohash" : "quad";
    if ("geohash".equalsIgnoreCase(cname)) instance = new GeohashPrefixTree.Factory();
    else if ("quad".equalsIgnoreCase(cname)) instance = new QuadPrefixTree.Factory();
    else if ("packedQuad".equalsIgnoreCase(cname)) instance = new PackedQuadPrefixTree.Factory();
    else if ("s2".equalsIgnoreCase(cname)) instance = new S2PrefixTree.Factory();
    else {
      try {
        Class<?> c = classLoader.loadClass(cname);
        instance = (SpatialPrefixTreeFactory) c.getConstructor().newInstance();
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
    instance.init(args, ctx);
    return instance.newSPT();
  }

