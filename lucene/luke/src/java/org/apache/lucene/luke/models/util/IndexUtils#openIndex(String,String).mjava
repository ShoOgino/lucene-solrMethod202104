  /**
   * Opens index(es) reader for given index path.
   *
   * @param indexPath - path to the index directory
   * @param dirImpl - class name for the specific directory implementation
   * @return index reader
   * @throws Exception - if there is a low level IO error.
   */
  public static IndexReader openIndex(String indexPath, String dirImpl) throws Exception {
    final Path root = FileSystems.getDefault().getPath(Objects.requireNonNull(indexPath));
    final List<DirectoryReader> readers = new ArrayList<>();

    // find all valid index directories in this directory
    Files.walkFileTree(
        root,
        new SimpleFileVisitor<Path>() {
          @Override
          public FileVisitResult preVisitDirectory(Path path, BasicFileAttributes attrs)
              throws IOException {
            Directory dir = openDirectory(path, dirImpl);
            try {
              DirectoryReader dr = DirectoryReader.open(dir);
              readers.add(dr);
            } catch (IOException e) {
              log.warn("Error opening directory", e);
            }
            return FileVisitResult.CONTINUE;
          }
        });

    if (readers.isEmpty()) {
      throw new RuntimeException("No valid directory at the location: " + indexPath);
    }

    if (log.isInfoEnabled()) {
      log.info(
          String.format(
              Locale.ENGLISH,
              "IndexReaders (%d leaf readers) successfully opened. Index path=%s",
              readers.size(),
              indexPath));
    }

    if (readers.size() == 1) {
      return readers.get(0);
    } else {
      return new MultiReader(readers.toArray(new IndexReader[readers.size()]));
    }
  }

