  public void testMergeImpacts() throws IOException {
    DummyImpactsEnum impacts1 = new DummyImpactsEnum(1000);
    DummyImpactsEnum impacts2 = new DummyImpactsEnum(2000);
    ImpactsSource mergedImpacts =
        ExactPhraseMatcher.mergeImpacts(new ImpactsEnum[] {impacts1, impacts2});

    impacts1.reset(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, 12), new Impact(8, 13)},
          new Impact[] {new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)}
        },
        new int[] {110, 945});

    // Merge with empty impacts
    impacts2.reset(new Impact[0][], new int[0]);
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, 12), new Impact(8, 13)},
          new Impact[] {new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)}
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    // Merge with dummy impacts
    impacts2.reset(
        new Impact[][] {new Impact[] {new Impact(Integer.MAX_VALUE, 1)}}, new int[] {5000});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, 12), new Impact(8, 13)},
          new Impact[] {new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)}
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    // Merge with dummy impacts that we don't special case
    impacts2.reset(
        new Impact[][] {new Impact[] {new Impact(Integer.MAX_VALUE, 2)}}, new int[] {5000});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, 12), new Impact(8, 13)},
          new Impact[] {new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)}
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    // First level of impacts2 doesn't cover the first level of impacts1
    impacts2.reset(
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(6, 13)},
          new Impact[] {new Impact(3, 9), new Impact(5, 11), new Impact(7, 13)}
        },
        new int[] {90, 1000});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, 12), new Impact(7, 13)},
          new Impact[] {new Impact(3, 10), new Impact(5, 11), new Impact(7, 13)}
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    // Second level of impacts2 doesn't cover the first level of impacts1
    impacts2.reset(
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(6, 11)},
          new Impact[] {new Impact(3, 9), new Impact(5, 11), new Impact(7, 13)}
        },
        new int[] {150, 900});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(3, 11), new Impact(5, 12), new Impact(6, 13)},
          new Impact[] {
            new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)
          } // same as impacts1
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    impacts2.reset(
        new Impact[][] {
          new Impact[] {new Impact(4, 10), new Impact(9, 13)},
          new Impact[] {
            new Impact(1, 1),
            new Impact(4, 10),
            new Impact(5, 11),
            new Impact(8, 13),
            new Impact(12, 14),
            new Impact(13, 15)
          }
        },
        new int[] {113, 950});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(4, 12), new Impact(8, 13)},
          new Impact[] {new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14)}
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());

    // Make sure negative norms are treated as unsigned
    impacts1.reset(
        new Impact[][] {
          new Impact[] {new Impact(3, 10), new Impact(5, -10), new Impact(8, -5)},
          new Impact[] {
            new Impact(3, 10), new Impact(5, -15), new Impact(8, -5), new Impact(12, -3)
          }
        },
        new int[] {110, 945});
    impacts2.reset(
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(12, -4)},
          new Impact[] {new Impact(3, 9), new Impact(12, -4), new Impact(20, -1)}
        },
        new int[] {150, 960});
    assertEquals(
        new Impact[][] {
          new Impact[] {new Impact(2, 10), new Impact(8, -4)},
          new Impact[] {new Impact(3, 10), new Impact(8, -4), new Impact(12, -3)}
        },
        new int[] {110, 945},
        mergedImpacts.getImpacts());
  }

