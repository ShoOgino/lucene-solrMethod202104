  public <T> Set<Class<? extends T>> scanSubTypes(Class<T> superType) {
    final int numThreads = Runtime.getRuntime().availableProcessors();

    List<SubtypeCollector<T>> collectors = new ArrayList<>();
    for (int i = 0; i < numThreads; i++) {
      collectors.add(new SubtypeCollector<T>(superType, packageName, classLoaders));
    }

    try {
      List<URL> urls = getJarUrls();
      for (int i = 0; i < urls.size(); i++) {
        collectors.get(i % numThreads).addUrl(urls.get(i));
      }

      ExecutorService executorService =
          Executors.newFixedThreadPool(numThreads, new NamedThreadFactory("scanner-scan-subtypes"));
      for (SubtypeCollector<T> collector : collectors) {
        executorService.submit(collector);
      }

      try {
        executorService.shutdown();
        executorService.awaitTermination(10, TimeUnit.SECONDS);
      } catch (InterruptedException e) {
      } finally {
        executorService.shutdownNow();
      }

      Set<Class<? extends T>> types = new HashSet<>();
      for (SubtypeCollector<T> collector : collectors) {
        types.addAll(collector.getTypes());
      }
      return types;
    } catch (IOException e) {
      log.error("Cannot load jar file entries", e);
    }
    return Collections.emptySet();
  }

