  private void verify(
      Directory dir,
      byte[][][] docValues,
      int[] docIDs,
      int numDataDims,
      int numIndexDims,
      int numBytesPerDim,
      int maxPointsInLeafNode,
      double maxMB)
      throws Exception {
    int numValues = docValues.length;
    if (VERBOSE) {
      System.out.println(
          "TEST: numValues="
              + numValues
              + " numDataDims="
              + numDataDims
              + " numIndexDims="
              + numIndexDims
              + " numBytesPerDim="
              + numBytesPerDim
              + " maxPointsInLeafNode="
              + maxPointsInLeafNode
              + " maxMB="
              + maxMB);
    }

    List<Long> toMerge = null;
    List<MergeState.DocMap> docMaps = null;
    int seg = 0;
    // we force sometimes to provide a bigger  point count
    long maxDocs = Long.MIN_VALUE;
    if (random().nextBoolean()) {
      maxDocs = docValues.length;
    } else {
      while (maxDocs < docValues.length) {
        maxDocs = random().nextLong();
      }
    }
    BKDWriter w =
        new BKDWriter(
            numValues,
            dir,
            "_" + seg,
            new BKDConfig(numDataDims, numIndexDims, numBytesPerDim, maxPointsInLeafNode),
            maxMB,
            maxDocs);
    IndexOutput out = dir.createOutput("bkd", IOContext.DEFAULT);
    IndexInput in = null;

    boolean success = false;

    try {

      byte[] scratch = new byte[numBytesPerDim * numDataDims];
      int lastDocIDBase = 0;
      boolean useMerge = numDataDims == 1 && numValues >= 10 && random().nextBoolean();
      int valuesInThisSeg;
      if (useMerge) {
        // Sometimes we will call merge with a single segment:
        valuesInThisSeg = TestUtil.nextInt(random(), numValues / 10, numValues);
      } else {
        valuesInThisSeg = 0;
      }

      int segCount = 0;

      for (int ord = 0; ord < numValues; ord++) {
        int docID;
        if (docIDs == null) {
          docID = ord;
        } else {
          docID = docIDs[ord];
        }
        if (VERBOSE) {
          System.out.println(
              "  ord=" + ord + " docID=" + docID + " lastDocIDBase=" + lastDocIDBase);
        }
        for (int dim = 0; dim < numDataDims; dim++) {
          if (VERBOSE) {
            System.out.println("    " + dim + " -> " + new BytesRef(docValues[ord][dim]));
          }
          System.arraycopy(docValues[ord][dim], 0, scratch, dim * numBytesPerDim, numBytesPerDim);
        }
        w.add(scratch, docID - lastDocIDBase);

        segCount++;

        if (useMerge && segCount == valuesInThisSeg) {
          if (toMerge == null) {
            toMerge = new ArrayList<>();
            docMaps = new ArrayList<>();
          }
          final int curDocIDBase = lastDocIDBase;
          docMaps.add(
              new MergeState.DocMap() {
                @Override
                public int get(int docID) {
                  return curDocIDBase + docID;
                }
              });
          Runnable finalizer = w.finish(out, out, out);
          toMerge.add(out.getFilePointer());
          finalizer.run();
          valuesInThisSeg = TestUtil.nextInt(random(), numValues / 10, numValues / 2);
          segCount = 0;

          seg++;
          maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 1000);
          maxMB = (float) 3.0 + (3 * random().nextDouble());
          w =
              new BKDWriter(
                  numValues,
                  dir,
                  "_" + seg,
                  new BKDConfig(numDataDims, numIndexDims, numBytesPerDim, maxPointsInLeafNode),
                  maxMB,
                  docValues.length);
          lastDocIDBase = docID;
        }
      }

      long indexFP;

      if (toMerge != null) {
        if (segCount > 0) {
          Runnable finalizer = w.finish(out, out, out);
          toMerge.add(out.getFilePointer());
          finalizer.run();
          final int curDocIDBase = lastDocIDBase;
          docMaps.add(
              new MergeState.DocMap() {
                @Override
                public int get(int docID) {
                  return curDocIDBase + docID;
                }
              });
        }
        out.close();
        in = dir.openInput("bkd", IOContext.DEFAULT);
        seg++;
        w =
            new BKDWriter(
                numValues,
                dir,
                "_" + seg,
                new BKDConfig(numDataDims, numIndexDims, numBytesPerDim, maxPointsInLeafNode),
                maxMB,
                docValues.length);
        List<BKDReader> readers = new ArrayList<>();
        for (long fp : toMerge) {
          in.seek(fp);
          readers.add(new BKDReader(in, in, in));
        }
        out = dir.createOutput("bkd2", IOContext.DEFAULT);
        Runnable finalizer = w.merge(out, out, out, docMaps, readers);
        indexFP = out.getFilePointer();
        finalizer.run();
        out.close();
        in.close();
        in = dir.openInput("bkd2", IOContext.DEFAULT);
      } else {
        Runnable finalizer = w.finish(out, out, out);
        indexFP = out.getFilePointer();
        finalizer.run();
        out.close();
        in = dir.openInput("bkd", IOContext.DEFAULT);
      }

      in.seek(indexFP);
      BKDReader r = new BKDReader(in, in, in);

      int iters = atLeast(100);
      for (int iter = 0; iter < iters; iter++) {
        if (VERBOSE) {
          System.out.println("\nTEST: iter=" + iter);
        }

        // Random N dims rect query:
        byte[][] queryMin = new byte[numDataDims][];
        byte[][] queryMax = new byte[numDataDims][];
        for (int dim = 0; dim < numDataDims; dim++) {
          queryMin[dim] = new byte[numBytesPerDim];
          random().nextBytes(queryMin[dim]);
          queryMax[dim] = new byte[numBytesPerDim];
          random().nextBytes(queryMax[dim]);
          if (Arrays.compareUnsigned(
                  queryMin[dim], 0, numBytesPerDim, queryMax[dim], 0, numBytesPerDim)
              > 0) {
            byte[] x = queryMin[dim];
            queryMin[dim] = queryMax[dim];
            queryMax[dim] = x;
          }
        }

        final BitSet hits = new BitSet();
        r.intersect(
            new IntersectVisitor() {
              @Override
              public void visit(int docID) {
                hits.set(docID);
                // System.out.println("visit docID=" + docID);
              }

              @Override
              public void visit(int docID, byte[] packedValue) {
                // System.out.println("visit check docID=" + docID);
                for (int dim = 0; dim < numIndexDims; dim++) {
                  if (Arrays.compareUnsigned(
                              packedValue,
                              dim * numBytesPerDim,
                              dim * numBytesPerDim + numBytesPerDim,
                              queryMin[dim],
                              0,
                              numBytesPerDim)
                          < 0
                      || Arrays.compareUnsigned(
                              packedValue,
                              dim * numBytesPerDim,
                              dim * numBytesPerDim + numBytesPerDim,
                              queryMax[dim],
                              0,
                              numBytesPerDim)
                          > 0) {
                    // System.out.println("  no");
                    return;
                  }
                }

                // System.out.println("  yes");
                hits.set(docID);
              }

              @Override
              public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {
                if (random().nextBoolean()) {
                  // check the default method is correct
                  IntersectVisitor.super.visit(iterator, packedValue);
                } else {
                  assertEquals(iterator.docID(), -1);
                  int cost = Math.toIntExact(iterator.cost());
                  int numberOfPoints = 0;
                  int docID;
                  while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
                    assertEquals(iterator.docID(), docID);
                    visit(docID, packedValue);
                    numberOfPoints++;
                  }
                  assertEquals(cost, numberOfPoints);
                  assertEquals(iterator.docID(), DocIdSetIterator.NO_MORE_DOCS);
                  assertEquals(iterator.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);
                  assertEquals(iterator.docID(), DocIdSetIterator.NO_MORE_DOCS);
                }
              }

              @Override
              public Relation compare(byte[] minPacked, byte[] maxPacked) {
                boolean crosses = false;
                for (int dim = 0; dim < numIndexDims; dim++) {
                  if (Arrays.compareUnsigned(
                              maxPacked,
                              dim * numBytesPerDim,
                              dim * numBytesPerDim + numBytesPerDim,
                              queryMin[dim],
                              0,
                              numBytesPerDim)
                          < 0
                      || Arrays.compareUnsigned(
                              minPacked,
                              dim * numBytesPerDim,
                              dim * numBytesPerDim + numBytesPerDim,
                              queryMax[dim],
                              0,
                              numBytesPerDim)
                          > 0) {
                    return Relation.CELL_OUTSIDE_QUERY;
                  } else if (Arrays.compareUnsigned(
                              minPacked,
                              dim * numBytesPerDim,
                              dim * numBytesPerDim + numBytesPerDim,
                              queryMin[dim],
                              0,
                              numBytesPerDim)
                          < 0
                      || Arrays.compareUnsigned(
                              maxPacked,
                              dim * numBytesPerDim,
                              dim * numBytesPerDim + numBytesPerDim,
                              queryMax[dim],
                              0,
                              numBytesPerDim)
                          > 0) {
                    crosses = true;
                  }
                }

                if (crosses) {
                  return Relation.CELL_CROSSES_QUERY;
                } else {
                  return Relation.CELL_INSIDE_QUERY;
                }
              }
            });

        BitSet expected = new BitSet();
        for (int ord = 0; ord < numValues; ord++) {
          boolean matches = true;
          for (int dim = 0; dim < numIndexDims; dim++) {
            byte[] x = docValues[ord][dim];
            if (Arrays.compareUnsigned(x, 0, numBytesPerDim, queryMin[dim], 0, numBytesPerDim) < 0
                || Arrays.compareUnsigned(x, 0, numBytesPerDim, queryMax[dim], 0, numBytesPerDim)
                    > 0) {
              matches = false;
              break;
            }
          }

          if (matches) {
            int docID;
            if (docIDs == null) {
              docID = ord;
            } else {
              docID = docIDs[ord];
            }
            expected.set(docID);
          }
        }

        int limit = Math.max(expected.length(), hits.length());
        for (int docID = 0; docID < limit; docID++) {
          assertEquals("docID=" + docID, expected.get(docID), hits.get(docID));
        }
      }
      in.close();
      dir.deleteFile("bkd");
      if (toMerge != null) {
        dir.deleteFile("bkd2");
      }
      success = true;
    } finally {
      if (success == false) {
        IOUtils.closeWhileHandlingException(w, in, out);
        IOUtils.deleteFilesIgnoringExceptions(dir, "bkd", "bkd2");
      }
    }
  }

