  public void uninstall(String packageName, String version) {
    SolrPackageInstance packageInstance = getPackageInstance(packageName, version);
    if (packageInstance == null) {
      PackageUtils.printRed("Package " + packageName + ":" + version + " doesn't exist. Use the install command to install this package version first.");
      System.exit(1);
    }

    // Make sure that this package instance is not deployed on any collection
    Map<String, String> collectionsDeployedOn = getDeployedCollections(packageName);
    for (String collection: collectionsDeployedOn.keySet()) {
      if (version.equals(collectionsDeployedOn.get(collection))) {
        PackageUtils.printRed("Package " + packageName + " is currently deployed on collection: " + collection + ". Undeploy the package with undeploy <package-name> -collections <collection1>[,<collection2>,...] before attempting to uninstall the package.");
        System.exit(1);
      }
    }

    // Make sure that no plugin from this package instance has been deployed as cluster level plugins
    Map<String, SolrPackageInstance> clusterPackages = getPackagesDeployedAsClusterLevelPlugins();
    for (String clusterPackageName: clusterPackages.keySet()) {
      SolrPackageInstance clusterPackageInstance = clusterPackages.get(clusterPackageName);
      if (packageName.equals(clusterPackageName) && version.equals(clusterPackageInstance.version)) {
        PackageUtils.printRed("Package " + packageName + "is currently deployed as a cluster-level plugin (" + clusterPackageInstance.getCustomData() + "). Undeploy the package with undeploy <package-name> -collections <collection1>[,<collection2>,...] before uninstalling the package.");
        System.exit(1);
      }
    }

    // Delete the package by calling the Package API and remove the Jar

    PackageUtils.printGreen("Executing Package API to remove this package...");
    Package.DelVersion del = new Package.DelVersion();
    del.version = version;
    del.pkg = packageName;

    V2Request req = new V2Request.Builder(PackageUtils.PACKAGE_PATH)
            .forceV2(true)
            .withMethod(SolrRequest.METHOD.POST)
            .withPayload(Collections.singletonMap("delete", del))
            .build();

    try {
      V2Response resp = req.process(solrClient);
      PackageUtils.printGreen("Response: " + resp.jsonStr());
    } catch (SolrServerException | IOException e) {
      throw new SolrException(ErrorCode.BAD_REQUEST, e);
    }

    PackageUtils.printGreen("Executing Package Store API to remove the " + packageName + " package...");

    List<String> filesToDelete = new ArrayList<>(packageInstance.files);
    filesToDelete.add(String.format(Locale.ROOT, "/package/%s/%s/%s", packageName, version, "manifest.json"));
    for (String filePath: filesToDelete) {
      DistribPackageStore.deleteZKFileEntry(zkClient, filePath);
      String path = solrClient.getBaseURL() + "/api/cluster/files" + filePath;
      PackageUtils.printGreen("Deleting " + path);
      HttpDelete httpDel = new HttpDelete(path);
      Utils.executeHttpMethod(solrClient.getHttpClient(), path, Utils.JSONCONSUMER, httpDel);
    }

    PackageUtils.printGreen("Package uninstalled: " + packageName + ":" + version + ":-)");
  }

