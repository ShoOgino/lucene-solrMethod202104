  /**
   * Working on a 2 fields like this: Field("field", "one two three four five") Field("palindrome",
   * "one two three two one") Phrase of size 3 occuriong twice, once in order and once in reverse,
   * because doc is a palyndrome, is counted twice. Also, in this case order in query does not
   * matter. Also, when an exact match is found, both sloppy scorer and exact scorer scores the
   * same.
   */
  public void testPalyndrome3() throws Exception {

    // search on non palyndrome, find phrase with no slop, using exact phrase scorer
    // slop=0 to use exact phrase scorer
    query = new PhraseQuery(0, "field", "one", "two", "three");
    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;
    assertEquals("phrase found with exact phrase scorer", 1, hits.length);
    float score0 = hits[0].score;
    // System.out.println("(exact) field: one two three: "+score0);
    QueryUtils.check(random(), query, searcher);

    // just make sure no exc:
    searcher.explain(query, 0);

    // search on non palyndrome, find phrase with slop 3, though no slop required here.
    // slop=4 to use sloppy scorer
    query = new PhraseQuery(4, "field", "one", "two", "three");
    hits = searcher.search(query, 1000).scoreDocs;
    assertEquals("just sloppy enough", 1, hits.length);
    float score1 = hits[0].score;
    // System.out.println("(sloppy) field: one two three: "+score1);
    assertEquals(
        "exact scorer and sloppy scorer score the same when slop does not matter",
        score0,
        score1,
        SCORE_COMP_THRESH);
    QueryUtils.check(random(), query, searcher);

    // search ordered in palyndrome, find it twice
    // slop must be at least four for both ordered and reversed to match
    query = new PhraseQuery(4, "palindrome", "one", "two", "three");
    hits = searcher.search(query, 1000).scoreDocs;

    // just make sure no exc:
    searcher.explain(query, 0);

    assertEquals("just sloppy enough", 1, hits.length);
    // float score2 = hits[0].score;
    // System.out.println("palindrome: one two three: "+score2);
    QueryUtils.check(random(), query, searcher);

    // commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq().
    // assertTrue("ordered scores higher in palindrome",score1+SCORE_COMP_THRESH<score2);

    // search reveresed in palyndrome, find it twice
    // must be at least four for both ordered and reversed to match
    query = new PhraseQuery(4, "palindrome", "three", "two", "one");
    hits = searcher.search(query, 1000).scoreDocs;
    assertEquals("just sloppy enough", 1, hits.length);
    // float score3 = hits[0].score;
    // System.out.println("palindrome: three two one: "+score3);
    QueryUtils.check(random(), query, searcher);

    // commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq().
    // assertTrue("reversed scores higher in palindrome",score1+SCORE_COMP_THRESH<score3);
    // assertEquals("ordered or reversed does not matter",score2, score3, SCORE_COMP_THRESH);
  }

