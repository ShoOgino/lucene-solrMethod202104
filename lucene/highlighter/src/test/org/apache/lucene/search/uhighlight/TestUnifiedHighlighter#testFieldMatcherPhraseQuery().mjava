  public void testFieldMatcherPhraseQuery() throws Exception {
    IndexReader ir = indexSomeFields();
    IndexSearcher searcher = newSearcher(ir);
    UnifiedHighlighter highlighterNoFieldMatch =
        new UnifiedHighlighter(searcher, indexAnalyzer) {
          @Override
          protected Predicate<String> getFieldMatcher(String field) {
            // requireFieldMatch=false
            return (qf) -> true;
          }
        };
    UnifiedHighlighter highlighterFieldMatch =
        randomUnifiedHighlighter(
            searcher,
            indexAnalyzer,
            EnumSet.of(HighlightFlag.PHRASES, HighlightFlag.MULTI_TERM_QUERY),
            null);
    highlighterFieldMatch.setFieldMatcher(null); // default
    BooleanQuery.Builder queryBuilder =
        new BooleanQuery.Builder()
            .add(new PhraseQuery("title", "this", "is", "the", "title"), BooleanClause.Occur.SHOULD)
            .add(
                new PhraseQuery(2, "category", "this", "is", "the", "field"),
                BooleanClause.Occur.SHOULD)
            .add(new PhraseQuery("text", "this", "is"), BooleanClause.Occur.SHOULD)
            .add(new PhraseQuery("category", "this", "is"), BooleanClause.Occur.SHOULD)
            .add(
                new PhraseQuery(1, "text", "you", "can", "put", "text"),
                BooleanClause.Occur.SHOULD);
    Query query = queryBuilder.build();

    // title
    {
      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
      assertEquals(1, topDocs.totalHits.value);
      String[] snippets = highlighterNoFieldMatch.highlight("title", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterNoFieldMatch.getFlags("title").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals("<b>This is the title field</b>.", snippets[0]);
      } else {
        assertEquals("<b>This</b> <b>is</b> <b>the</b> <b>title</b> <b>field</b>.", snippets[0]);
      }

      snippets = highlighterFieldMatch.highlight("title", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterFieldMatch.getFlags("title").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals("<b>This is the title</b> field.", snippets[0]);
      } else {
        assertEquals("<b>This</b> <b>is</b> <b>the</b> <b>title</b> field.", snippets[0]);
      }

      highlighterFieldMatch.setFieldMatcher((fq) -> "text".equals(fq));
      snippets = highlighterFieldMatch.highlight("title", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterFieldMatch.getFlags("title").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals("<b>This is</b> the title field.", snippets[0]);
      } else {
        assertEquals("<b>This</b> <b>is</b> the title field.", snippets[0]);
      }
      highlighterFieldMatch.setFieldMatcher(null);
    }

    // text
    {
      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
      assertEquals(1, topDocs.totalHits.value);
      String[] snippets = highlighterNoFieldMatch.highlight("text", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterNoFieldMatch.getFlags("text").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals(
            "<b>This is the text field</b>. <b>You can put some text</b> if you want.",
            snippets[0]);
      } else {
        assertEquals(
            "<b>This</b> <b>is</b> <b>the</b> <b>text</b> <b>field</b>. <b>You</b> <b>can</b> <b>put</b> some <b>text</b> if you want.",
            snippets[0]);
      }

      snippets = highlighterFieldMatch.highlight("text", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterFieldMatch.getFlags("text").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals(
            "<b>This is</b> the text field. <b>You can put some text</b> if you want.",
            snippets[0]);
      } else {
        // note: odd that the first "text" is highlighted.  Apparently WSTE converts PhraseQuery to
        // a SpanNearQuery with
        //   with inorder=false when non-0 slop.  Probably a bug.
        assertEquals(
            "<b>This</b> <b>is</b> the <b>text</b> field. <b>You</b> <b>can</b> <b>put</b> some <b>text</b> if you want.",
            snippets[0]);
      }

      highlighterFieldMatch.setFieldMatcher((fq) -> "title".equals(fq));
      snippets = highlighterFieldMatch.highlight("text", query, topDocs, 10);
      assertEquals(1, snippets.length);
      assertEquals("This is the text field. You can put some text if you want.", snippets[0]);
      highlighterFieldMatch.setFieldMatcher(null);
    }

    // category
    {
      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
      assertEquals(1, topDocs.totalHits.value);
      String[] snippets = highlighterNoFieldMatch.highlight("category", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterNoFieldMatch.getFlags("category").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals("<b>This is the category field</b>.", snippets[0]);
      } else {
        assertEquals("<b>This</b> <b>is</b> <b>the</b> category <b>field</b>.", snippets[0]);
      }

      snippets = highlighterFieldMatch.highlight("category", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterFieldMatch.getFlags("category").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals("<b>This is the category field</b>.", snippets[0]);
      } else {
        assertEquals("<b>This</b> <b>is</b> <b>the</b> category <b>field</b>.", snippets[0]);
      }

      highlighterFieldMatch.setFieldMatcher((fq) -> "text".equals(fq));
      snippets = highlighterFieldMatch.highlight("category", query, topDocs, 10);
      assertEquals(1, snippets.length);
      if (highlighterFieldMatch.getFlags("category").contains(HighlightFlag.WEIGHT_MATCHES)) {
        assertEquals("<b>This is</b> the category field.", snippets[0]);
      } else {
        assertEquals("<b>This</b> <b>is</b> the category field.", snippets[0]);
      }
      highlighterFieldMatch.setFieldMatcher(null);
    }
    ir.close();
  }

