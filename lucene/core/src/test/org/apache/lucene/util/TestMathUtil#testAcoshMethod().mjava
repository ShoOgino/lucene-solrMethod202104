  public void testAcoshMethod() {
    // acosh(NaN) == NaN
    assertTrue(Double.isNaN(MathUtil.acosh(Double.NaN)));
    // acosh(1) == +0
    assertEquals(0, Double.doubleToLongBits(MathUtil.acosh(1D)));
    // acosh(POSITIVE_INFINITY) == POSITIVE_INFINITY
    assertEquals(
        Double.doubleToLongBits(Double.POSITIVE_INFINITY),
        Double.doubleToLongBits(MathUtil.acosh(Double.POSITIVE_INFINITY)));
    // acosh(x) : x < 1 == NaN
    assertTrue(Double.isNaN(MathUtil.acosh(0.9D))); // x < 1
    assertTrue(Double.isNaN(MathUtil.acosh(0D))); // x == 0
    assertTrue(Double.isNaN(MathUtil.acosh(-0D))); // x == -0
    assertTrue(Double.isNaN(MathUtil.acosh(-0.9D))); // x < 0
    assertTrue(Double.isNaN(MathUtil.acosh(-1D))); // x == -1
    assertTrue(Double.isNaN(MathUtil.acosh(-10D))); // x < -1
    assertTrue(Double.isNaN(MathUtil.acosh(Double.NEGATIVE_INFINITY))); // x == -Inf

    double epsilon = 0.000001;
    assertEquals(0, MathUtil.acosh(1), epsilon);
    assertEquals(1.5667992369724109, MathUtil.acosh(2.5), epsilon);
    assertEquals(14.719378760739708, MathUtil.acosh(1234567.89), epsilon);
  }

