  private ReindexingReader getReindexer(Path root) throws IOException {
    return new ReindexingReader(root) {
      @Override
      protected IndexWriterConfig getIndexWriterConfig() throws IOException {
        IndexWriterConfig iwc = newIndexWriterConfig();
        TieredMergePolicy tmp = new TieredMergePolicy();
        // We write tiny docs, so we need tiny floor to avoid O(N^2) merging:
        tmp.setFloorSegmentMB(.01);
        iwc.setMergePolicy(tmp);
        return iwc;
      }

      @Override
      protected Directory openDirectory(Path path) throws IOException {
        MockDirectoryWrapper dir = newMockFSDirectory(path);
        dir.setUseSlowOpenClosers(false);
        dir.setThrottling(Throttling.NEVER);
        return dir;
      }

      @Override
      protected void reindex(
          long oldSchemaGen, long newSchemaGen, LeafReader reader, Directory parallelDir)
          throws IOException {
        IndexWriterConfig iwc = newIndexWriterConfig();

        // The order of our docIDs must precisely matching incoming reader:
        iwc.setMergePolicy(new LogByteSizeMergePolicy());
        IndexWriter w = new IndexWriter(parallelDir, iwc);
        int maxDoc = reader.maxDoc();

        // Slowly parse the stored field into a new doc values field:
        for (int i = 0; i < maxDoc; i++) {
          // TODO: is this still O(blockSize^2)?
          Document oldDoc = reader.document(i);
          Document newDoc = new Document();
          long value = Long.parseLong(oldDoc.get("text").split(" ")[1]);
          newDoc.add(new NumericDocValuesField("number", value));
          newDoc.add(new LongPoint("number", value));
          w.addDocument(newDoc);
        }

        w.forceMerge(1);

        w.close();
      }

      @Override
      protected long getCurrentSchemaGen() {
        return 0;
      }
    };
  }

