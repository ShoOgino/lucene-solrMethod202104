  @Override
  public MergeSpecification findForcedMerges(
      SegmentInfos segmentInfos,
      int maxSegmentCount,
      Map<SegmentCommitInfo, Boolean> segmentsToMerge,
      MergeContext mergeContext)
      throws IOException {
    // first find all old segments
    final Map<SegmentCommitInfo, Boolean> oldSegments = new HashMap<>();
    for (final SegmentCommitInfo si : segmentInfos) {
      final Boolean v = segmentsToMerge.get(si);
      if (v != null && shouldUpgradeSegment(si)) {
        oldSegments.put(si, v);
      }
    }

    if (verbose(mergeContext)) {
      message("findForcedMerges: segmentsToUpgrade=" + oldSegments, mergeContext);
    }

    if (oldSegments.isEmpty()) return null;

    MergeSpecification spec =
        in.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments, mergeContext);

    if (spec != null) {
      // remove all segments that are in merge specification from oldSegments,
      // the resulting set contains all segments that are left over
      // and will be merged to one additional segment:
      for (final OneMerge om : spec.merges) {
        oldSegments.keySet().removeAll(om.segments);
      }
    }

    if (!oldSegments.isEmpty()) {
      if (verbose(mergeContext)) {
        message(
            "findForcedMerges: "
                + in.getClass().getSimpleName()
                + " does not want to merge all old segments, merge remaining ones into new segment: "
                + oldSegments,
            mergeContext);
      }
      final List<SegmentCommitInfo> newInfos = new ArrayList<>();
      for (final SegmentCommitInfo si : segmentInfos) {
        if (oldSegments.containsKey(si)) {
          newInfos.add(si);
        }
      }
      // add the final merge
      if (spec == null) {
        spec = new MergeSpecification();
      }
      spec.add(new OneMerge(newInfos));
    }

    return spec;
  }

