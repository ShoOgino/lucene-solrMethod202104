    @Override
    public Query parse() throws SyntaxError {
      if (threadManager != null) {
        threadManager.setExecutor(req.getCore().getCoreContainer().getUpdateShardHandler().getUpdateExecutor());
      }
      // ReRanking Model
      final String[] modelNames = localParams.getParams(LTRQParserPlugin.MODEL);
      if ((modelNames == null) || (modelNames.length!=1 && modelNames.length!=2)) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Must provide one or two models in the request");
      }
      final boolean isInterleaving = (modelNames.length > 1);
      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);
      final String tranformerFeatureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);
      final Map<String,String[]> externalFeatureInfo = extractEFIParams(localParams);

      LTRScoringQuery rerankingQuery = null;
      LTRInterleavingScoringQuery[] rerankingQueries = new LTRInterleavingScoringQuery[modelNames.length];
      for (int i = 0; i < modelNames.length; i++) {
        if (modelNames[i].isEmpty()) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
              "the " + LTRQParserPlugin.MODEL + " "+ i +" is empty");
        }
        if (!ORIGINAL_RANKING.equals(modelNames[i])) {
          final LTRScoringModel ltrScoringModel = mr.getModel(modelNames[i]);
          if (ltrScoringModel == null) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                "cannot find " + LTRQParserPlugin.MODEL + " " + modelNames[i]);
          }
          final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();
          // Check if features are requested and if the model feature store and feature-transform feature store are the same
          final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(tranformerFeatureStoreName) || tranformerFeatureStoreName == null) ? extractFeatures : false;
          
          if (isInterleaving) {
            rerankingQuery = rerankingQueries[i] = new LTRInterleavingScoringQuery(ltrScoringModel,
                externalFeatureInfo,
                featuresRequestedFromSameStore, threadManager);
          } else {
            rerankingQuery = new LTRScoringQuery(ltrScoringModel,
                externalFeatureInfo,
                featuresRequestedFromSameStore, threadManager);
            rerankingQueries[i] = null;
          }

          // Enable the feature vector caching if we are extracting features, and the features
          // we requested are the same ones we are reranking with
          if (featuresRequestedFromSameStore) {
            rerankingQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );
          }
        }else{
          rerankingQuery = rerankingQueries[i] = new OriginalRankingLTRScoringQuery(ORIGINAL_RANKING);
        }

        // External features
        rerankingQuery.setRequest(req);
      }

      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);
      if (reRankDocs <= 0) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Must rerank at least 1 document");
      }
      if (!isInterleaving) {
        SolrQueryRequestContextUtils.setScoringQueries(req, new LTRScoringQuery[] { rerankingQuery });
        return new LTRQuery(rerankingQuery, reRankDocs);
      } else {
        SolrQueryRequestContextUtils.setScoringQueries(req, rerankingQueries);
        return new LTRInterleavingQuery(Interleaving.getImplementation(Interleaving.TEAM_DRAFT),rerankingQueries, reRankDocs);
      }
    }

