    public Collection<SearchGroup<T>> merge(
        List<Collection<SearchGroup<T>>> shards, int offset, int topN) {

      final int maxQueueSize = offset + topN;

      // System.out.println("merge");
      // Init queue:
      for (int shardIDX = 0; shardIDX < shards.size(); shardIDX++) {
        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);
        if (!shard.isEmpty()) {
          // System.out.println("  insert shard=" + shardIDX);
          updateNextGroup(maxQueueSize, new ShardIter<>(shard, shardIDX));
        }
      }

      // Pull merged topN groups:
      final List<SearchGroup<T>> newTopGroups = new ArrayList<>(topN);

      int count = 0;

      while (!queue.isEmpty()) {
        final MergedGroup<T> group = queue.pollFirst();
        group.processed = true;
        // System.out.println("  pop: shards=" + group.shards + " group=" + (group.groupValue ==
        // null ? "null" : (((BytesRef) group.groupValue).utf8ToString())) + " sortValues=" +
        // Arrays.toString(group.topValues));
        if (count++ >= offset) {
          final SearchGroup<T> newGroup = new SearchGroup<>();
          newGroup.groupValue = group.groupValue;
          newGroup.sortValues = group.topValues;
          newTopGroups.add(newGroup);
          if (newTopGroups.size() == topN) {
            break;
          }
          // } else {
          // System.out.println("    skip < offset");
        }

        // Advance all iters in this group:
        for (ShardIter<T> shardIter : group.shards) {
          updateNextGroup(maxQueueSize, shardIter);
        }
      }

      if (newTopGroups.isEmpty()) {
        return null;
      } else {
        return newTopGroups;
      }
    }

