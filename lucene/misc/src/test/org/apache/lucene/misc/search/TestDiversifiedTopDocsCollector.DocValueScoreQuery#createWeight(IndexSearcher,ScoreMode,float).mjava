    @Override
    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {
      if (scoreMode.needsScores() == false) {
        return query.createWeight(searcher, scoreMode, boost);
      }
      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);
      return new Weight(this) {
        
        @Override
        public boolean isCacheable(LeafReaderContext ctx) {
          return true;
        }
        
        @Override
        public Scorer scorer(LeafReaderContext context) throws IOException {
          Scorer innerScorer = inner.scorer(context);
          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);
          return new Scorer(this) {
            
            @Override
            public float score() throws IOException {
              if (scoreFactors.advanceExact(docID())) {
                return Float.intBitsToFloat((int) scoreFactors.longValue());
              }
              return 0;
            }
            
            @Override
            public float getMaxScore(int upTo) throws IOException {
              return Float.POSITIVE_INFINITY;
            }
            
            @Override
            public DocIdSetIterator iterator() {
              return innerScorer.iterator();
            }
            
            @Override
            public int docID() {
              return innerScorer.docID();
            }
          };
        }

        @Override
        public Explanation explain(LeafReaderContext context, int doc) throws IOException {
          Scorer s = scorer(context);
          if (s != null) {
            int advanced = s.iterator().advance(doc);
            if (doc != advanced) {
              return Explanation.match(s.score(), "match");
            }
          }
          return Explanation.noMatch("no match");
        }
      };
    }

