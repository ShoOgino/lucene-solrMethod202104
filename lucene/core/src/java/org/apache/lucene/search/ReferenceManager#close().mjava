  /**
   * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A reference
   * manager should be closed if the reference to the managed resource should be disposed or the
   * application using the {@link ReferenceManager} is shutting down. The managed resource might not
   * be released immediately, if the {@link ReferenceManager} user is holding on to a previously
   * {@link #acquire() acquired} reference. The resource will be released once when the last
   * reference is {@link #release(Object) released}. Those references can still be used as if the
   * manager was still active.
   *
   * <p>Applications should not {@link #acquire() acquire} new references from this manager once
   * this method has been called. {@link #acquire() Acquiring} a resource on a closed {@link
   * ReferenceManager} will throw an {@link AlreadyClosedException}.
   *
   * @throws IOException if the underlying reader of the current reference could not be closed
   */
  @Override
  public final synchronized void close() throws IOException {
    if (current != null) {
      // make sure we can call this more than once
      // closeable javadoc says:
      // if this is already closed then invoking this method has no effect.
      swapReference(null);
      afterClose();
    }
  }

