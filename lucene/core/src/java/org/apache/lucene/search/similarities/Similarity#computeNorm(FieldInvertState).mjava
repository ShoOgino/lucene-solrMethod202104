  /**
   * Computes the normalization value for a field, given the accumulated state of term processing
   * for this field (see {@link FieldInvertState}).
   *
   * <p>Matches in longer fields are less precise, so implementations of this method usually set
   * smaller values when <code>state.getLength()</code> is large, and larger values when <code>
   * state.getLength()</code> is small.
   *
   * <p>Note that for a given term-document frequency, greater unsigned norms must produce scores
   * that are lower or equal, ie. for two encoded norms {@code n1} and {@code n2} so that {@code
   * Long.compareUnsigned(n1, n2) > 0} then {@code SimScorer.score(freq, n1) <=
   * SimScorer.score(freq, n2)} for any legal {@code freq}.
   *
   * <p>{@code 0} is not a legal norm, so {@code 1} is the norm that produces the highest scores.
   *
   * @lucene.experimental
   * @param state current processing state for this field
   * @return computed norm value
   */
  public abstract long computeNorm(FieldInvertState state);

