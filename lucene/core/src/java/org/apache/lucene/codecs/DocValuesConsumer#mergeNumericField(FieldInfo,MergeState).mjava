  /**
   * Merges the numeric docvalues from <code>MergeState</code>.
   *
   * <p>The default implementation calls {@link #addNumericField}, passing a DocValuesProducer that
   * merges and filters deleted documents on the fly.
   */
  public void mergeNumericField(final FieldInfo mergeFieldInfo, final MergeState mergeState)
      throws IOException {
    addNumericField(
        mergeFieldInfo,
        new EmptyDocValuesProducer() {
          @Override
          public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {
            if (fieldInfo != mergeFieldInfo) {
              throw new IllegalArgumentException("wrong fieldInfo");
            }

            List<NumericDocValuesSub> subs = new ArrayList<>();
            assert mergeState.docMaps.length == mergeState.docValuesProducers.length;
            long cost = 0;
            for (int i = 0; i < mergeState.docValuesProducers.length; i++) {
              NumericDocValues values = null;
              DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];
              if (docValuesProducer != null) {
                FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
                if (readerFieldInfo != null
                    && readerFieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {
                  values = docValuesProducer.getNumeric(readerFieldInfo);
                }
              }
              if (values != null) {
                cost += values.cost();
                subs.add(new NumericDocValuesSub(mergeState.docMaps[i], values));
              }
            }

            final DocIDMerger<NumericDocValuesSub> docIDMerger =
                DocIDMerger.of(subs, mergeState.needsIndexSort);

            final long finalCost = cost;

            return new NumericDocValues() {
              private int docID = -1;
              private NumericDocValuesSub current;

              @Override
              public int docID() {
                return docID;
              }

              @Override
              public int nextDoc() throws IOException {
                current = docIDMerger.next();
                if (current == null) {
                  docID = NO_MORE_DOCS;
                } else {
                  docID = current.mappedDocID;
                }
                return docID;
              }

              @Override
              public int advance(int target) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public boolean advanceExact(int target) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public long cost() {
                return finalCost;
              }

              @Override
              public long longValue() throws IOException {
                return current.values.longValue();
              }
            };
          }
        });
  }

