  void assertQuery(Query query, Sort sort) throws Exception {
    int maxDoc = searcher.getIndexReader().maxDoc();
    TopDocs all;
    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);
    if (VERBOSE) {
      System.out.println(
          "\nassertQuery "
              + (iter++)
              + ": query="
              + query
              + " sort="
              + sort
              + " pageSize="
              + pageSize);
    }
    final boolean doScores;
    final TopDocsCollector<?> allCollector;
    if (sort == null) {
      allCollector = TopScoreDocCollector.create(maxDoc, null, Integer.MAX_VALUE);
      doScores = false;
    } else if (sort == Sort.RELEVANCE) {
      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);
      doScores = true;
    } else {
      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);
      doScores = random().nextBoolean();
    }
    searcher.search(query, allCollector);
    all = allCollector.topDocs();
    if (doScores) {
      TopFieldCollector.populateScores(all.scoreDocs, searcher, query);
    }

    if (VERBOSE) {
      System.out.println("  all.totalHits.value=" + all.totalHits.value);
      int upto = 0;
      for (ScoreDoc scoreDoc : all.scoreDocs) {
        System.out.println(
            "    hit "
                + (upto++)
                + ": id="
                + searcher.doc(scoreDoc.doc).get("id")
                + " "
                + scoreDoc);
      }
    }
    int pageStart = 0;
    ScoreDoc lastBottom = null;
    while (pageStart < all.totalHits.value) {
      TopDocs paged;
      final TopDocsCollector<?> pagedCollector;
      if (sort == null) {
        if (VERBOSE) {
          System.out.println("  iter lastBottom=" + lastBottom);
        }
        pagedCollector = TopScoreDocCollector.create(pageSize, lastBottom, Integer.MAX_VALUE);
      } else {
        if (VERBOSE) {
          System.out.println("  iter lastBottom=" + lastBottom);
        }
        if (sort == Sort.RELEVANCE) {
          pagedCollector =
              TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);
        } else {
          pagedCollector =
              TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);
        }
      }
      searcher.search(query, pagedCollector);
      paged = pagedCollector.topDocs();
      if (doScores) {
        TopFieldCollector.populateScores(paged.scoreDocs, searcher, query);
      }

      if (VERBOSE) {
        System.out.println("    " + paged.scoreDocs.length + " hits on page");
      }

      if (paged.scoreDocs.length == 0) {
        break;
      }
      assertPage(pageStart, all, paged);
      pageStart += paged.scoreDocs.length;
      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];
    }
    assertEquals(all.scoreDocs.length, pageStart);
  }

