  public void testRandomTriangles() {
    Component2D circle2D;
    if (random().nextBoolean()) {
      Circle circle = GeoTestUtil.nextCircle();
      circle2D = LatLonGeometry.create(circle);
    } else {
      XYCircle circle = ShapeTestUtil.nextCircle();
      circle2D = XYGeometry.create(circle);
    }
    for (int i = 0; i < 100; i++) {
      double ax = GeoTestUtil.nextLongitude();
      double ay = GeoTestUtil.nextLatitude();
      double bx = GeoTestUtil.nextLongitude();
      double by = GeoTestUtil.nextLatitude();
      double cx = GeoTestUtil.nextLongitude();
      double cy = GeoTestUtil.nextLatitude();

      double tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);
      double tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);
      double tMinY = StrictMath.min(StrictMath.min(ay, by), cy);
      double tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);

      PointValues.Relation r = circle2D.relate(tMinX, tMaxX, tMinY, tMaxY);
      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {
        assertFalse(circle2D.intersectsTriangle(ax, ay, bx, by, cx, cy));
        assertFalse(circle2D.intersectsLine(ax, ay, bx, by));
        assertFalse(circle2D.containsTriangle(ax, ay, bx, by, cx, cy));
        assertFalse(circle2D.containsLine(ax, ay, bx, by));
        assertEquals(
            Component2D.WithinRelation.DISJOINT,
            circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));
      } else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {
        assertTrue(circle2D.intersectsTriangle(ax, ay, bx, by, cx, cy));
        assertTrue(circle2D.intersectsLine(ax, ay, bx, by));
        assertTrue(circle2D.containsTriangle(ax, ay, bx, by, cx, cy));
        assertTrue(circle2D.containsLine(ax, ay, bx, by));
        assertNotEquals(
            Component2D.WithinRelation.CANDIDATE,
            circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));
      }
    }
  }

