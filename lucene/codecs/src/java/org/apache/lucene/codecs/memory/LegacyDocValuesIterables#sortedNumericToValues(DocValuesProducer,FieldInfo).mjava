  /**
   * Converts all concatenated values (in docID order) from {@link SortedNumericDocValues} into
   * {@code Iterable&lt;Number&gt;}.
   *
   * @deprecated Consume {@link SortedDocValues} instead.
   */
  @Deprecated
  public static Iterable<Number> sortedNumericToValues(
      final DocValuesProducer valuesProducer, final FieldInfo fieldInfo) {
    return new Iterable<Number>() {

      @Override
      public Iterator<Number> iterator() {

        final SortedNumericDocValues values;
        try {
          values = valuesProducer.getSortedNumeric(fieldInfo);
        } catch (IOException ioe) {
          throw new RuntimeException(ioe);
        }

        return new Iterator<Number>() {
          private boolean nextIsSet;
          private int nextCount;
          private int upto;
          private long nextValue;

          private void setNext() {
            try {
              if (nextIsSet == false) {
                if (upto == nextCount) {
                  values.nextDoc();
                  if (values.docID() == NO_MORE_DOCS) {
                    nextCount = 0;
                    nextIsSet = false;
                    return;
                  } else {
                    nextCount = values.docValueCount();
                  }
                  upto = 0;
                }
                nextValue = values.nextValue();
                upto++;
                nextIsSet = true;
              }
            } catch (IOException ioe) {
              throw new RuntimeException(ioe);
            }
          }

          @Override
          public boolean hasNext() {
            setNext();
            return nextCount != 0;
          }

          @Override
          public Number next() {
            setNext();
            assert nextCount != 0;
            nextIsSet = false;
            return nextValue;
          }
        };
      }
    };
  }

