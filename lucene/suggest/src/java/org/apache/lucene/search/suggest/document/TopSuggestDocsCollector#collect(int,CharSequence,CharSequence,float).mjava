  /**
   * Called for every matched completion, similar to {@link
   * org.apache.lucene.search.LeafCollector#collect(int)} but for completions.
   *
   * <p>NOTE: collection at the leaf level is guaranteed to be in descending order of score
   */
  public void collect(int docID, CharSequence key, CharSequence context, float score)
      throws IOException {
    SuggestScoreDoc current = new SuggestScoreDoc(docBase + docID, key, context, score);
    if (current == priorityQueue.insertWithOverflow(current)) {
      // if the current SuggestScoreDoc has overflown from pq,
      // we can assume all of the successive collections from
      // this leaf will be overflown as well
      // TODO: reuse the overflow instance?
      throw new CollectionTerminatedException();
    }
  }

