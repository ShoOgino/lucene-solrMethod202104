  public void testRandomQueries() throws Exception {
    final String field = "data";
    final String[] vals = {"1", "2", "3", "4", "5", "6", "A", "Z", "B", "Y", "Z", "X", "foo"};
    int maxLev = 4;

    // callback object to set a random setMinimumNumberShouldMatch
    TestBoolean2.Callback minNrCB =
        new TestBoolean2.Callback() {
          @Override
          public void postCreate(BooleanQuery.Builder q) {
            int opt = 0;
            for (BooleanClause clause : q.build().clauses()) {
              if (clause.getOccur() == BooleanClause.Occur.SHOULD) opt++;
            }
            q.setMinimumNumberShouldMatch(random().nextInt(opt + 2));
            if (random().nextBoolean()) {
              // also add a random negation
              Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);
              q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);
            }
          }
        };

    // increase number of iterations for more complete testing
    int num = atLeast(20);
    for (int i = 0; i < num; i++) {
      int lev = random().nextInt(maxLev);
      final long seed = random().nextLong();
      BooleanQuery.Builder q1 =
          TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);
      // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);
      BooleanQuery.Builder q2 =
          TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);
      // only set minimumNumberShouldMatch on the top level query since setting
      // at a lower level can change the score.
      minNrCB.postCreate(q2);

      // Can't use Hits because normalized scores will mess things
      // up.  The non-sorting version of search() that returns TopDocs
      // will not normalize scores.
      TopDocs top1 = s.search(q1.build(), 100);
      TopDocs top2 = s.search(q2.build(), 100);
      if (i < 100) {
        QueryUtils.check(random(), q1.build(), s);
        QueryUtils.check(random(), q2.build(), s);
      }
      assertSubsetOfSameScores(q2.build(), top1, top2);
    }
    // System.out.println("Total hits:"+tot);
  }

