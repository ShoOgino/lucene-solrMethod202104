  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester
  // computes the same memory usage.
  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {
    assumeFalse(
        "LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)",
        Constants.JRE_IS_MINIMUM_JAVA9);

    final LRUQueryCache queryCache =
        new LRUQueryCache(
            1 + random().nextInt(5),
            1 + random().nextInt(10000),
            context -> random().nextBoolean(),
            Float.POSITIVE_INFINITY);
    // an accumulator that only sums up memory usage of referenced filters and doc id sets
    final RamUsageTester.Accumulator acc =
        new RamUsageTester.Accumulator() {
          @Override
          public long accumulateObject(
              Object o,
              long shallowSize,
              Map<Field, Object> fieldValues,
              Collection<Object> queue) {
            if (o instanceof DocIdSet) {
              return ((DocIdSet) o).ramBytesUsed();
            }
            if (o instanceof Query) {
              return QUERY_DEFAULT_RAM_BYTES_USED;
            }
            if (o instanceof IndexReader
                || o.getClass().getSimpleName().equals("SegmentCoreReaders")) {
              // do not take readers or core cache keys into account
              return 0;
            }
            if (o instanceof Map) {
              Map<?, ?> map = (Map<?, ?>) o;
              queue.addAll(map.keySet());
              queue.addAll(map.values());
              final long sizePerEntry =
                  o instanceof LinkedHashMap
                      ? LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY
                      : HASHTABLE_RAM_BYTES_PER_ENTRY;
              return sizePerEntry * map.size();
            }
            // follow links to other objects, but ignore their memory usage
            super.accumulateObject(o, shallowSize, fieldValues, queue);
            return 0;
          }

          @Override
          public long accumulateArray(
              Object array, long shallowSize, List<Object> values, Collection<Object> queue) {
            // follow links to other objects, but ignore their memory usage
            super.accumulateArray(array, shallowSize, values, queue);
            return 0;
          }
        };

    Directory dir = newDirectory();
    // serial merges so that segments do not get closed while we are measuring ram usage
    // with RamUsageTester
    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());
    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);

    final List<String> colors = Arrays.asList("blue", "red", "green", "yellow");

    Document doc = new Document();
    StringField f = new StringField("color", "", Store.NO);
    doc.add(f);
    final int iters = atLeast(5);
    for (int iter = 0; iter < iters; ++iter) {
      final int numDocs = atLeast(10);
      for (int i = 0; i < numDocs; ++i) {
        f.setStringValue(RandomPicks.randomFrom(random(), colors));
        w.addDocument(doc);
      }
      try (final DirectoryReader reader = w.getReader()) {
        final IndexSearcher searcher = newSearcher(reader);
        searcher.setQueryCache(queryCache);
        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);
        for (int i = 0; i < 3; ++i) {
          final Query query =
              new TermQuery(new Term("color", RandomPicks.randomFrom(random(), colors)));
          searcher.search(new ConstantScoreQuery(query), 1);
        }
      }
      queryCache.assertConsistent();
      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());
    }

    w.close();
    dir.close();
  }

