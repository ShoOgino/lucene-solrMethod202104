  private TopGroups<BytesRef> searchShards(
      IndexSearcher topSearcher,
      ShardSearcher[] subSearchers,
      Query query,
      Sort groupSort,
      Sort docSort,
      int groupOffset,
      int topNGroups,
      int docOffset,
      int topNDocs,
      boolean getMaxScores,
      boolean canUseIDV,
      boolean preFlex)
      throws Exception {

    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount,
    // actual.totalHitCount);
    // too...
    if (VERBOSE) {
      System.out.println(
          "TEST: "
              + subSearchers.length
              + " shards: "
              + Arrays.toString(subSearchers)
              + " canUseIDV="
              + canUseIDV);
    }
    // Run 1st pass collector to get top groups per shard
    final Weight w =
        topSearcher.createWeight(
            topSearcher.rewrite(query),
            groupSort.needsScores() || docSort.needsScores() || getMaxScores
                ? ScoreMode.COMPLETE
                : ScoreMode.COMPLETE_NO_SCORES,
            1);
    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();
    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();
    FirstPassGroupingCollector<?> firstPassCollector = null;
    boolean shardsCanUseIDV = canUseIDV;

    String groupField = "group";

    for (int shardIDX = 0; shardIDX < subSearchers.length; shardIDX++) {

      // First shard determines whether we use IDV or not;
      // all other shards match that:
      if (firstPassCollector == null) {
        firstPassCollector =
            createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);
      } else {
        firstPassCollector =
            createFirstPassCollector(
                groupField, groupSort, groupOffset + topNGroups, firstPassCollector);
      }
      if (VERBOSE) {
        System.out.println("  shard=" + shardIDX + " groupField=" + groupField);
        System.out.println("    1st pass collector=" + firstPassCollector);
      }
      firstPassGroupingCollectors.add(firstPassCollector);
      subSearchers[shardIDX].search(w, firstPassCollector);
      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);
      if (topGroups != null) {
        if (VERBOSE) {
          System.out.println(
              "  shard "
                  + shardIDX
                  + " s="
                  + subSearchers[shardIDX]
                  + " totalGroupedHitCount=?"
                  + " "
                  + topGroups.size()
                  + " groups:");
          for (SearchGroup<BytesRef> group : topGroups) {
            System.out.println(
                "    "
                    + groupToString(group.groupValue)
                    + " groupSort="
                    + Arrays.toString(group.sortValues));
          }
        }
        shardGroups.add(topGroups);
      }
    }

    final Collection<SearchGroup<BytesRef>> mergedTopGroups =
        SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);
    if (VERBOSE) {
      System.out.println(" top groups merged:");
      if (mergedTopGroups == null) {
        System.out.println("    null");
      } else {
        System.out.println("    " + mergedTopGroups.size() + " top groups:");
        for (SearchGroup<BytesRef> group : mergedTopGroups) {
          System.out.println(
              "    ["
                  + groupToString(group.groupValue)
                  + "] groupSort="
                  + Arrays.toString(group.sortValues));
        }
      }
    }

    if (mergedTopGroups != null) {
      // Now 2nd pass:
      @SuppressWarnings({"unchecked", "rawtypes"})
      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];
      for (int shardIDX = 0; shardIDX < subSearchers.length; shardIDX++) {
        final TopGroupsCollector<?> secondPassCollector =
            createSecondPassCollector(
                firstPassGroupingCollectors.get(shardIDX),
                groupField,
                mergedTopGroups,
                groupSort,
                docSort,
                docOffset + topNDocs,
                getMaxScores);
        subSearchers[shardIDX].search(w, secondPassCollector);
        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);
        if (VERBOSE) {
          System.out.println(
              " " + shardTopGroups[shardIDX].groups.length + " shard[" + shardIDX + "] groups:");
          for (GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {
            System.out.println(
                "    ["
                    + groupToString(group.groupValue)
                    + "] groupSort="
                    + Arrays.toString(group.groupSortValues)
                    + " numDocs="
                    + group.scoreDocs.length);
          }
        }
      }

      TopGroups<BytesRef> mergedGroups =
          TopGroups.merge(
              shardTopGroups,
              groupSort,
              docSort,
              docOffset,
              topNDocs,
              TopGroups.ScoreMergeMode.None);
      if (VERBOSE) {
        System.out.println(" " + mergedGroups.groups.length + " merged groups:");
        for (GroupDocs<BytesRef> group : mergedGroups.groups) {
          System.out.println(
              "    ["
                  + groupToString(group.groupValue)
                  + "] groupSort="
                  + Arrays.toString(group.groupSortValues)
                  + " numDocs="
                  + group.scoreDocs.length);
        }
      }
      return mergedGroups;
    } else {
      return null;
    }
  }

