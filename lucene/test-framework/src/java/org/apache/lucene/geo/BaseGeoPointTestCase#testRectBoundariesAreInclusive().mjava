  public void testRectBoundariesAreInclusive() throws Exception {
    Rectangle rect;
    // TODO: why this dateline leniency???
    while (true) {
      rect = nextBox();
      if (rect.crossesDateline() == false) {
        break;
      }
    }
    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware
    // of index-time quantization!
    rect =
        new Rectangle(
            quantizeLat(rect.minLat),
            quantizeLat(rect.maxLat),
            quantizeLon(rect.minLon),
            quantizeLon(rect.maxLon));
    Directory dir = newDirectory();
    IndexWriterConfig iwc = newIndexWriterConfig();
    // Else seeds may not reproduce:
    iwc.setMergeScheduler(new SerialMergeScheduler());
    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);
    for (int x = 0; x < 3; x++) {
      double lat;
      if (x == 0) {
        lat = rect.minLat;
      } else if (x == 1) {
        lat = quantizeLat((rect.minLat + rect.maxLat) / 2.0);
      } else {
        lat = rect.maxLat;
      }
      for (int y = 0; y < 3; y++) {
        double lon;
        if (y == 0) {
          lon = rect.minLon;
        } else if (y == 1) {
          if (x == 1) {
            continue;
          }
          lon = quantizeLon((rect.minLon + rect.maxLon) / 2.0);
        } else {
          lon = rect.maxLon;
        }

        Document doc = new Document();
        addPointToDoc(FIELD_NAME, doc, lat, lon);
        w.addDocument(doc);
      }
    }
    IndexReader r = w.getReader();
    IndexSearcher s = newSearcher(r, false);
    // exact edge cases
    assertEquals(
        8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));

    // expand 1 ulp in each direction if possible and test a slightly larger box!
    if (rect.minLat != -90) {
      assertEquals(
          8,
          s.count(
              newRectQuery(
                  FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));
    }
    if (rect.maxLat != 90) {
      assertEquals(
          8,
          s.count(
              newRectQuery(
                  FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));
    }
    if (rect.minLon != -180) {
      assertEquals(
          8,
          s.count(
              newRectQuery(
                  FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));
    }
    if (rect.maxLon != 180) {
      assertEquals(
          8,
          s.count(
              newRectQuery(
                  FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));
    }

    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff
    // we can't shrink if values are already at extremes, and
    // we can't do this if rectangle is actually a line or we will create a cross-dateline query
    if (rect.minLat != 90
        && rect.maxLat != -90
        && rect.minLon != 80
        && rect.maxLon != -180
        && rect.minLon != rect.maxLon) {
      // note we put points on "sides" not just "corners" so we just shrink all 4 at once for now:
      // it should exclude all points!
      assertEquals(
          0,
          s.count(
              newRectQuery(
                  FIELD_NAME,
                  Math.nextUp(rect.minLat),
                  Math.nextDown(rect.maxLat),
                  Math.nextUp(rect.minLon),
                  Math.nextDown(rect.maxLon))));
    }

    r.close();
    w.close();
    dir.close();
  }

