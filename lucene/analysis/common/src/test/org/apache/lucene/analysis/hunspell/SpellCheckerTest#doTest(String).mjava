  protected void doTest(String name) throws Exception {
    InputStream affixStream =
        Objects.requireNonNull(getClass().getResourceAsStream(name + ".aff"), name);
    InputStream dictStream =
        Objects.requireNonNull(getClass().getResourceAsStream(name + ".dic"), name);

    SpellChecker speller;
    try {
      Dictionary dictionary =
          new Dictionary(new ByteBuffersDirectory(), "dictionary", affixStream, dictStream);
      speller = new SpellChecker(dictionary);
    } finally {
      IOUtils.closeWhileHandlingException(affixStream);
      IOUtils.closeWhileHandlingException(dictStream);
    }

    URL good = StemmerTestBase.class.getResource(name + ".good");
    if (good != null) {
      for (String word : Files.readAllLines(Path.of(good.toURI()))) {
        assertTrue("Unexpectedly considered misspelled: " + word, speller.spell(word));
      }
    }

    URL wrong = StemmerTestBase.class.getResource(name + ".wrong");
    URL sug = StemmerTestBase.class.getResource(name + ".sug");
    if (wrong != null) {
      List<String> wrongWords = Files.readAllLines(Path.of(wrong.toURI()));
      for (String word : wrongWords) {
        assertFalse("Unexpectedly considered correct: " + word, speller.spell(word));
      }
      if (sug != null) {
        String suggestions =
            wrongWords.stream()
                .map(s -> String.join(", ", speller.suggest(s)))
                .filter(s -> !s.isEmpty())
                .collect(Collectors.joining("\n"));
        assertEquals(Files.readString(Path.of(sug.toURI())).trim(), suggestions);
      }
    } else {
      assertNull(".sug file without .wrong file!", sug);
    }
  }

