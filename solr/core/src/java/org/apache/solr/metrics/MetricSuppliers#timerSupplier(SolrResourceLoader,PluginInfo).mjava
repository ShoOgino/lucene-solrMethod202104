  /**
   * Create a {@link Timer} supplier.
   * @param loader resource loader
   * @param info plugin configuration, or null for default
   * @return configured supplier instance, or default instance if configuration was invalid
   */
  @SuppressWarnings({"unchecked"})
  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {
    MetricRegistry.MetricSupplier<Timer> supplier;
    if (info == null || info.className == null || info.className.isEmpty()) {
      supplier = new DefaultTimerSupplier(loader);
    } else {
      if (MetricsConfig.NOOP_IMPL_CLASS.equals(info.className)) {
        return NoOpTimerSupplier.INSTANCE;
      }
      if (loader == null) {
        supplier = new DefaultTimerSupplier(null);
      } else {
        try {
          supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);
        } catch (Exception e) {
          log.warn("Error creating custom Timer supplier (will use default): {}", info, e);
          supplier = new DefaultTimerSupplier(loader);
        }
      }
    }
    if (supplier instanceof PluginInfoInitialized) {
      ((PluginInfoInitialized)supplier).init(info);
    } else {
      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);
    }
    return supplier;
  }

