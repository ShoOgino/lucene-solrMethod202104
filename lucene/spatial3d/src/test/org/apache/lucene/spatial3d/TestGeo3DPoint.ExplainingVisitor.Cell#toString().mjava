      @Override
      public String toString() {
        double xMin =
            Geo3DUtil.decodeValueFloor(
                NumericUtils.sortableBytesToInt(minPackedValue, 0), shape.getPlanetModel());
        double xMax =
            Geo3DUtil.decodeValueCeil(
                NumericUtils.sortableBytesToInt(maxPackedValue, 0), shape.getPlanetModel());
        double yMin =
            Geo3DUtil.decodeValueFloor(
                NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES),
                shape.getPlanetModel());
        double yMax =
            Geo3DUtil.decodeValueCeil(
                NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES),
                shape.getPlanetModel());
        double zMin =
            Geo3DUtil.decodeValueFloor(
                NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES),
                shape.getPlanetModel());
        double zMax =
            Geo3DUtil.decodeValueCeil(
                NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES),
                shape.getPlanetModel());
        final XYZSolid xyzSolid =
            XYZSolidFactory.makeXYZSolid(
                shape.getPlanetModel(), xMin, xMax, yMin, yMax, zMin, zMax);
        final int relationship = xyzSolid.getRelationship(shape);
        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);
        final boolean scaledWithinCell = xyzSolid.isWithin(scaledDocPoint);

        final String relationshipString;
        switch (relationship) {
          case GeoArea.CONTAINS:
            relationshipString = "CONTAINS";
            break;
          case GeoArea.WITHIN:
            relationshipString = "WITHIN";
            break;
          case GeoArea.OVERLAPS:
            relationshipString = "OVERLAPS";
            break;
          case GeoArea.DISJOINT:
            relationshipString = "DISJOINT";
            break;
          default:
            relationshipString = "UNKNOWN";
            break;
        }
        return "Cell(x="
            + xMin
            + " TO "
            + xMax
            + " y="
            + yMin
            + " TO "
            + yMax
            + " z="
            + zMin
            + " TO "
            + zMax
            + "); Shape relationship = "
            + relationshipString
            + "; Quantized point within cell = "
            + pointWithinCell
            + "; Unquantized point within cell = "
            + scaledWithinCell;
      }

