  /**
   * Create a new instance, loading from a previously built AnalyzingInfixSuggester directory, if it
   * exists. This directory must be private to the infix suggester (i.e., not an external Lucene
   * index). Note that {@link #close} will also close the provided directory.
   *
   * @param minPrefixChars Minimum number of leading characters before PrefixQuery is used (default
   *     4). Prefixes shorter than this are indexed as character ngrams (increasing index size but
   *     making lookups faster).
   * @param commitOnBuild Call commit after the index has finished building. This would persist the
   *     suggester index to disk and future instances of this suggester can use this pre-built
   *     dictionary.
   * @param allTermsRequired All terms in the suggest query must be matched.
   * @param highlight Highlight suggest query in suggestions.
   * @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has
   *     finished building.
   */
  public AnalyzingInfixSuggester(
      Directory dir,
      Analyzer indexAnalyzer,
      Analyzer queryAnalyzer,
      int minPrefixChars,
      boolean commitOnBuild,
      boolean allTermsRequired,
      boolean highlight,
      boolean closeIndexWriterOnBuild)
      throws IOException {

    if (minPrefixChars < 0) {
      throw new IllegalArgumentException("minPrefixChars must be >= 0; got: " + minPrefixChars);
    }

    this.queryAnalyzer = queryAnalyzer;
    this.indexAnalyzer = indexAnalyzer;
    this.dir = dir;
    this.minPrefixChars = minPrefixChars;
    this.commitOnBuild = commitOnBuild;
    this.allTermsRequired = allTermsRequired;
    this.highlight = highlight;
    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;

    if (DirectoryReader.indexExists(dir)) {
      // Already built; open it:
      searcherMgr = new SearcherManager(dir, null);
    }
  }

