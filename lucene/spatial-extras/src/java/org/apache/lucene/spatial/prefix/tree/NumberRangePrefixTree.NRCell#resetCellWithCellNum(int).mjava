    private void resetCellWithCellNum(int cellNumber) {
      reset();

      // update bytes
      //  note: see lazyInitCellNumsFromBytes() for the reverse
      if (cellNumber >= 0) { // valid
        ensureOwnTermBytes();
        int termLen = termLenByLevel[getLevel()];
        boolean twoBytes = (termLen - termLenByLevel[getLevel() - 1]) > 1;
        if (twoBytes) {
          // right 7 bits, plus 1 (may overflow to 8th bit which is okay)
          term.bytes[termLen - 2] = (byte) (cellNumber >> 7);
          term.bytes[termLen - 1] = (byte) ((cellNumber & 0x7F) + 1);
        } else {
          term.bytes[termLen - 1] = (byte) (cellNumber + 1);
        }
        assert term.bytes[termLen - 1] != 0;
        term.length = termLen;
      }
      this.cellNumber = cellNumber;
    }

