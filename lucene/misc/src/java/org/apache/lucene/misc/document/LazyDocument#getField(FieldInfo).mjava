  /**
   * Creates a StorableField whose value will be lazy loaded if and 
   * when it is used. 
   * <p>
   * <b>NOTE:</b> This method must be called once for each value of the field 
   * name specified in sequence that the values exist.  This method may not be 
   * used to generate multiple, lazy, StorableField instances referring to 
   * the same underlying StorableField instance.
   * </p>
   * <p>
   * The lazy loading of field values from all instances of StorableField 
   * objects returned by this method are all backed by a single StoredDocument 
   * per LazyDocument instance.
   * </p>
   */
  public IndexableField getField(FieldInfo fieldInfo) {  

    fieldNames.add(fieldInfo.name);
    List<LazyField> values = fields.get(fieldInfo.number);
    if (null == values) {
      values = new ArrayList<>();
      fields.put(fieldInfo.number, values);
    } 

    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);
    values.add(value);

    synchronized (this) {
      // edge case: if someone asks this LazyDoc for more LazyFields
      // after other LazyFields from the same LazyDoc have been
      // actuallized, we need to force the doc to be re-fetched
      // so the new LazyFields are also populated.
      doc = null;
    }
    return value;
  }

