  @Override
  protected SpatialVisitor getSpatialVisitor() {
    final EncodedRectangle encodedRectangle =
        new EncodedRectangle(
            rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);
    return new SpatialVisitor() {

      @Override
      protected Relation relate(byte[] minTriangle, byte[] maxTriangle) {
        if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {
          return encodedRectangle.intersectRangeBBox(
              ShapeField.BYTES,
              0,
              minTriangle,
              3 * ShapeField.BYTES,
              2 * ShapeField.BYTES,
              maxTriangle);
        }
        return encodedRectangle.relateRangeBBox(
            ShapeField.BYTES,
            0,
            minTriangle,
            3 * ShapeField.BYTES,
            2 * ShapeField.BYTES,
            maxTriangle);
      }

      @Override
      protected Predicate<byte[]> intersects() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                return encodedRectangle.contains(scratchTriangle.aX, scratchTriangle.aY);
              }
            case LINE:
              {
                int aY = scratchTriangle.aY;
                int aX = scratchTriangle.aX;
                int bY = scratchTriangle.bY;
                int bX = scratchTriangle.bX;
                return encodedRectangle.intersectsLine(aX, aY, bX, bY);
              }
            case TRIANGLE:
              {
                int aY = scratchTriangle.aY;
                int aX = scratchTriangle.aX;
                int bY = scratchTriangle.bY;
                int bX = scratchTriangle.bX;
                int cY = scratchTriangle.cY;
                int cX = scratchTriangle.cX;
                return encodedRectangle.intersectsTriangle(aX, aY, bX, bY, cX, cY);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }

      @Override
      protected Predicate<byte[]> within() {
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                return encodedRectangle.contains(scratchTriangle.aX, scratchTriangle.aY);
              }
            case LINE:
              {
                int aY = scratchTriangle.aY;
                int aX = scratchTriangle.aX;
                int bY = scratchTriangle.bY;
                int bX = scratchTriangle.bX;
                return encodedRectangle.containsLine(aX, aY, bX, bY);
              }
            case TRIANGLE:
              {
                int aY = scratchTriangle.aY;
                int aX = scratchTriangle.aX;
                int bY = scratchTriangle.bY;
                int bX = scratchTriangle.bX;
                int cY = scratchTriangle.cY;
                int cX = scratchTriangle.cX;
                return encodedRectangle.containsTriangle(aX, aY, bX, bY, cX, cY);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }

      @Override
      protected Function<byte[], Component2D.WithinRelation> contains() {
        if (encodedRectangle.crossesDateline()) {
          throw new IllegalArgumentException(
              "withinTriangle is not supported for rectangles crossing the date line");
        }
        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();
        return triangle -> {

          // decode indexed triangle
          ShapeField.decodeTriangle(triangle, scratchTriangle);

          switch (scratchTriangle.type) {
            case POINT:
              {
                return encodedRectangle.contains(scratchTriangle.aX, scratchTriangle.aY)
                    ? Component2D.WithinRelation.NOTWITHIN
                    : Component2D.WithinRelation.DISJOINT;
              }
            case LINE:
              {
                return encodedRectangle.withinLine(
                    scratchTriangle.aX,
                    scratchTriangle.aY,
                    scratchTriangle.ab,
                    scratchTriangle.bX,
                    scratchTriangle.bY);
              }
            case TRIANGLE:
              {
                return encodedRectangle.withinTriangle(
                    scratchTriangle.aX,
                    scratchTriangle.aY,
                    scratchTriangle.ab,
                    scratchTriangle.bX,
                    scratchTriangle.bY,
                    scratchTriangle.bc,
                    scratchTriangle.cX,
                    scratchTriangle.cY,
                    scratchTriangle.ca);
              }
            default:
              throw new IllegalArgumentException(
                  "Unsupported triangle type :[" + scratchTriangle.type + "]");
          }
        };
      }
    };
  }

