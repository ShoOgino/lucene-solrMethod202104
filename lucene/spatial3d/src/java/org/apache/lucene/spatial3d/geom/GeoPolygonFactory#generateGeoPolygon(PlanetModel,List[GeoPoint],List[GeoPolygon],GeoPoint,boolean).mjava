  /**
   * Create a GeoPolygon using the specified points and holes and a test point.
   *
   * @param filteredPointList is a filtered list of the GeoPoints to build an arbitrary polygon out
   *     of.
   * @param holes is a list of polygons representing "holes" in the outside polygon. Null == none.
   * @param testPoint is a test point that is either known to be within the polygon area, or not.
   * @param testPointInside is true if the test point is within the area, false otherwise.
   * @return a GeoPolygon corresponding to what was specified, or null if what was specified cannot
   *     be turned into a valid non-degenerate polygon.
   */
  static GeoPolygon generateGeoPolygon(
      final PlanetModel planetModel,
      final List<GeoPoint> filteredPointList,
      final List<GeoPolygon> holes,
      final GeoPoint testPoint,
      final boolean testPointInside)
      throws TileException {
    // We will be trying twice to find the right GeoPolygon, using alternate siding choices for the
    // first polygon side.  While this looks like it might be 2x as expensive as it could be,
    // there's really no other choice I can find.
    final SidedPlane initialPlane =
        new SidedPlane(testPoint, filteredPointList.get(0), filteredPointList.get(1));
    // We don't know if this is the correct siding choice.  We will only know as we build the
    // complex polygon. So we need to be prepared to try both possibilities.
    GeoCompositePolygon rval = new GeoCompositePolygon(planetModel);
    MutableBoolean seenConcave = new MutableBoolean();
    if (buildPolygonShape(
            rval,
            seenConcave,
            planetModel,
            filteredPointList,
            new BitSet(),
            0,
            1,
            initialPlane,
            holes,
            testPoint)
        == false) {
      // The testPoint was within the shape.  Was that intended?
      if (testPointInside) {
        // Yes: build it for real
        rval = new GeoCompositePolygon(planetModel);
        seenConcave = new MutableBoolean();
        buildPolygonShape(
            rval,
            seenConcave,
            planetModel,
            filteredPointList,
            new BitSet(),
            0,
            1,
            initialPlane,
            holes,
            null);
        return rval;
      }
      // No: do the complement and return that.
      rval = new GeoCompositePolygon(planetModel);
      seenConcave = new MutableBoolean();
      buildPolygonShape(
          rval,
          seenConcave,
          planetModel,
          filteredPointList,
          new BitSet(),
          0,
          1,
          new SidedPlane(initialPlane),
          holes,
          null);
      return rval;
    } else {
      // The testPoint was outside the shape.  Was that intended?
      if (!testPointInside) {
        // Yes: return what we just built
        return rval;
      }
      // No: return the complement
      rval = new GeoCompositePolygon(planetModel);
      seenConcave = new MutableBoolean();
      buildPolygonShape(
          rval,
          seenConcave,
          planetModel,
          filteredPointList,
          new BitSet(),
          0,
          1,
          new SidedPlane(initialPlane),
          holes,
          null);
      return rval;
    }
  }

