  private boolean checkCompoundsAfter(
      CharsRef word,
      int breakPos,
      WordCase originalCase,
      int depth,
      CharsRef prevStem,
      Predicate<CharsRef> checkPatterns) {
    int remainingLength = word.length - breakPos;
    int breakOffset = word.offset + breakPos;
    CharsRef tailStem =
        findStem(word.chars, breakOffset, remainingLength, originalCase, COMPOUND_END);
    if (tailStem != null
        && !(dictionary.checkCompoundDup && equalsIgnoreCase(prevStem, tailStem))
        && !hasForceUCaseProblem(word.chars, breakOffset, remainingLength, originalCase)
        && checkPatterns.test(tailStem)) {
      return true;
    }

    CharsRef tail = new CharsRef(word.chars, breakOffset, remainingLength);
    return checkCompounds(tail, originalCase, depth + 1, checkPatterns);
  }

