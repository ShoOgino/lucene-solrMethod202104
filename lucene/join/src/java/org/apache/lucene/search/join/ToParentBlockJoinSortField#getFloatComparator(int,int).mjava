  private FieldComparator<?> getFloatComparator(int numHits, int sortPos) {
    return new FloatComparator(numHits, getField(), (Float) missingValue, getReverse(), sortPos) {
      @Override
      public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {
        return new FloatLeafComparator(context) {
          @Override
          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field)
              throws IOException {
            SortedNumericDocValues sortedNumeric =
                DocValues.getSortedNumeric(context.reader(), field);
            final BlockJoinSelector.Type type =
                order ? BlockJoinSelector.Type.MAX : BlockJoinSelector.Type.MIN;
            final BitSet parents = parentFilter.getBitSet(context);
            final BitSet children = childFilter.getBitSet(context);
            if (children == null) {
              return DocValues.emptyNumeric();
            }
            return new FilterNumericDocValues(
                BlockJoinSelector.wrap(sortedNumeric, type, parents, toIter(children))) {
              @Override
              public long longValue() throws IOException {
                // undo the numericutils sortability
                return NumericUtils.sortableFloatBits((int) super.longValue());
              }
            };
          }
        };
      }
      ;
    };
  }

