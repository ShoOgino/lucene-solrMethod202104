  /**
   * This method enables the workaround for unmapping the buffers from address space after closing
   * {@link IndexInput}, that is mentioned in the bug report. This hack may fail on
   * non-Oracle/OpenJDK JVMs. It forcefully unmaps the buffer on close by using an undocumented
   * internal cleanup functionality.
   *
   * <p><b>NOTE:</b> Enabling this is completely unsupported by Java and may lead to JVM crashes if
   * <code>IndexInput</code> is closed while another thread is still accessing it (SIGSEGV).
   *
   * <p>To enable the hack, the following requirements need to be fulfilled: The used JVM must be
   * Oracle Java / OpenJDK 8 <em>(preliminary support for Java 9 EA build 150+ was added with Lucene
   * 6.4)</em>. In addition, the following permissions need to be granted to {@code lucene-core.jar}
   * in your <a
   * href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html">policy
   * file</a>:
   *
   * <ul>
   *   <li>{@code permission java.lang.reflect.ReflectPermission "suppressAccessChecks";}
   *   <li>{@code permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";}
   * </ul>
   *
   * @throws IllegalArgumentException if {@link #UNMAP_SUPPORTED} is <code>false</code> and the
   *     workaround cannot be enabled. The exception message also contains an explanation why the
   *     hack cannot be enabled (e.g., missing permissions).
   */
  public void setUseUnmap(final boolean useUnmapHack) {
    if (useUnmapHack && !UNMAP_SUPPORTED) {
      throw new IllegalArgumentException(UNMAP_NOT_SUPPORTED_REASON);
    }
    this.useUnmapHack = useUnmapHack;
  }

