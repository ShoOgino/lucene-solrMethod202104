  public void testReplacements() throws Exception {
    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();
    FSTCompiler<CharsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, outputs);
    IntsRefBuilder scratchInts = new IntsRefBuilder();

    // a -> b
    Util.toUTF16("a", scratchInts);
    fstCompiler.add(scratchInts.get(), new CharsRef("b"));

    // ab -> c
    Util.toUTF16("ab", scratchInts);
    fstCompiler.add(scratchInts.get(), new CharsRef("c"));

    // c -> de
    Util.toUTF16("c", scratchInts);
    fstCompiler.add(scratchInts.get(), new CharsRef("de"));

    // def -> gh
    Util.toUTF16("def", scratchInts);
    fstCompiler.add(scratchInts.get(), new CharsRef("gh"));

    FST<CharsRef> fst = fstCompiler.compile();

    StringBuilder sb = new StringBuilder("atestanother");
    Dictionary.applyMappings(fst, sb);
    assertEquals("btestbnother", sb.toString());

    sb = new StringBuilder("abtestanother");
    Dictionary.applyMappings(fst, sb);
    assertEquals("ctestbnother", sb.toString());

    sb = new StringBuilder("atestabnother");
    Dictionary.applyMappings(fst, sb);
    assertEquals("btestcnother", sb.toString());

    sb = new StringBuilder("abtestabnother");
    Dictionary.applyMappings(fst, sb);
    assertEquals("ctestcnother", sb.toString());

    sb = new StringBuilder("abtestabcnother");
    Dictionary.applyMappings(fst, sb);
    assertEquals("ctestcdenother", sb.toString());

    sb = new StringBuilder("defdefdefc");
    Dictionary.applyMappings(fst, sb);
    assertEquals("ghghghde", sb.toString());
  }

