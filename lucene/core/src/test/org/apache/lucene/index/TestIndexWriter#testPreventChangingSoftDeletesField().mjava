  public void testPreventChangingSoftDeletesField() throws Exception {
    Directory dir = newDirectory();
    IndexWriter writer =
        new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField("my_deletes"));
    Document v1 = new Document();
    v1.add(new StringField("id", "1", Field.Store.YES));
    v1.add(new StringField("version", "1", Field.Store.YES));
    writer.addDocument(v1);
    Document v2 = new Document();
    v2.add(new StringField("id", "1", Field.Store.YES));
    v2.add(new StringField("version", "2", Field.Store.YES));
    writer.softUpdateDocument(new Term("id", "1"), v2, new NumericDocValuesField("my_deletes", 1));
    writer.commit();
    writer.close();
    for (SegmentCommitInfo si : SegmentInfos.readLatestCommit(dir)) {
      FieldInfos fieldInfos = IndexWriter.readFieldInfos(si);
      assertEquals("my_deletes", fieldInfos.getSoftDeletesField());
      assertTrue(fieldInfos.fieldInfo("my_deletes").isSoftDeletesField());
    }

    IllegalArgumentException illegalError =
        expectThrows(
            IllegalArgumentException.class,
            () -> {
              new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField("your_deletes"));
            });
    assertEquals(
        "cannot configure [your_deletes] as soft-deletes; "
            + "this index uses [my_deletes] as soft-deletes already",
        illegalError.getMessage());

    IndexWriterConfig softDeleteConfig =
        newIndexWriterConfig()
            .setSoftDeletesField("my_deletes")
            .setMergePolicy(
                new SoftDeletesRetentionMergePolicy(
                    "my_deletes", () -> new MatchAllDocsQuery(), newMergePolicy()));
    writer = new IndexWriter(dir, softDeleteConfig);
    Document tombstone = new Document();
    tombstone.add(new StringField("id", "tombstone", Field.Store.YES));
    tombstone.add(new NumericDocValuesField("my_deletes", 1));
    writer.addDocument(tombstone);
    writer.flush();
    for (SegmentCommitInfo si : writer.cloneSegmentInfos()) {
      FieldInfos fieldInfos = IndexWriter.readFieldInfos(si);
      assertEquals("my_deletes", fieldInfos.getSoftDeletesField());
      assertTrue(fieldInfos.fieldInfo("my_deletes").isSoftDeletesField());
    }
    writer.close();
    // reopen writer without soft-deletes field should be prevented
    IllegalArgumentException reopenError =
        expectThrows(
            IllegalArgumentException.class,
            () -> {
              new IndexWriter(dir, newIndexWriterConfig());
            });
    assertEquals(
        "this index has [my_deletes] as soft-deletes already"
            + " but soft-deletes field is not configured in IWC",
        reopenError.getMessage());
    dir.close();
  }

