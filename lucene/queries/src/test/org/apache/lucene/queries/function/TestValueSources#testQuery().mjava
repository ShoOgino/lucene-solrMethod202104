  public void testQuery() throws Exception {
    Similarity saved = searcher.getSimilarity();

    try {
      searcher.setSimilarity(new ClassicSimilarity());

      ValueSource vs = new QueryValueSource(new TermQuery(new Term("string", "bar")), 42F);
      assertHits(new FunctionQuery(vs), new float[] {42F, 1.4054651F});

      // valuesource should exist only for things matching the term query
      // sanity check via quick & dirty wrapper arround tf
      ValueSource expected =
          new MultiFloatFunction(
              new ValueSource[] {
                new TFValueSource("bogus", "bogus", "string", new BytesRef("bar"))
              }) {

            @Override
            protected String name() {
              return "tf_based_exists";
            }

            @Override
            protected float func(int doc, FunctionValues[] valsArr) throws IOException {
              return valsArr[0].floatVal(doc);
            }

            @Override
            protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {
              // if tf > 0, then it should exist
              return 0 < func(doc, valsArr);
            }
          };

      assertExists(expected, vs);

      // Query matches all docs, func exists for all docs
      vs = new QueryValueSource(new TermQuery(new Term("text", "test")), 0F);
      assertAllExist(vs);

      // Query matches no docs, func exists for no docs
      vs = new QueryValueSource(new TermQuery(new Term("bogus", "does not exist")), 0F);
      assertNoneExist(vs);

      // doc doesn't match the query, so default value should be returned
      vs = new QueryValueSource(new MatchNoDocsQuery(), 5.0f);
      final LeafReaderContext leaf = searcher.getIndexReader().leaves().get(0);
      FunctionValues fv = vs.getValues(ValueSource.newContext(searcher), leaf);
      assertEquals(5.0f, fv.objectVal(1));

      // test with def value but doc matches the query, so def value shouldn't be returned
      vs = new QueryValueSource(new TermQuery(new Term("text", "test")), 2F);
      fv = vs.getValues(ValueSource.newContext(searcher), leaf);
      assertNotEquals(2f, fv.objectVal(1));
    } finally {
      searcher.setSimilarity(saved);
    }
  }

