  public static List<IntervalsSource> pullUp(
      List<IntervalsSource> sources, Function<List<IntervalsSource>, IntervalsSource> function) {

    List<List<IntervalsSource>> rewritten = new ArrayList<>();
    rewritten.add(new ArrayList<>());
    for (IntervalsSource source : sources) {
      List<IntervalsSource> disjuncts = splitDisjunctions(source);
      if (disjuncts.size() == 1) {
        rewritten.forEach(l -> l.add(disjuncts.get(0)));
      } else {
        if (rewritten.size() * disjuncts.size() > IndexSearcher.getMaxClauseCount()) {
          throw new IllegalArgumentException("Too many disjunctions to expand");
        }
        List<List<IntervalsSource>> toAdd = new ArrayList<>();
        for (IntervalsSource disj : disjuncts) {
          // clone the rewritten list, then append the disjunct
          for (List<IntervalsSource> subList : rewritten) {
            List<IntervalsSource> l = new ArrayList<>(subList);
            l.add(disj);
            toAdd.add(l);
          }
        }
        rewritten = toAdd;
      }
    }
    if (rewritten.size() == 1) {
      return Collections.singletonList(function.apply(rewritten.get(0)));
    }
    return rewritten.stream().map(function).collect(Collectors.toList());
  }

