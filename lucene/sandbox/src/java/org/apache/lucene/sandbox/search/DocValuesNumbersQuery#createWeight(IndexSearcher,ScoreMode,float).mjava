  @Override
  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {
    return new ConstantScoreWeight(this, boost) {

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);
        return new ConstantScoreScorer(this, score(), scoreMode, new TwoPhaseIterator(values) {

          @Override
          public boolean matches() throws IOException {
            int count = values.docValueCount();
            for(int i=0;i<count;i++) {
              if (numbers.contains(values.nextValue())) {
                return true;
              }
            }
            return false;
          }

          @Override
          public float matchCost() {
            return 5; // lookup in the set
          }
        });
      }

      @Override
      public boolean isCacheable(LeafReaderContext ctx) {
        return true;
      }

    };
  }

