    /**
     * Retrieves the next {@link FacetLabel} for the specified {@code docId} under the requested
     * {@code facetDimension}, or {@code null} if there are no more. This method has state: if the
     * provided {@code docId} is the same as the previous invocation, it returns the next {@link
     * FacetLabel} for that document. Otherwise, it advances to the new {@code docId} and provides
     * the first {@link FacetLabel} for that document, or {@code null} if that document has no
     * indexed facets. Each new {@code docId} must be in strictly monotonic (increasing) order.
     *
     * <p><b>NOTE</b>: This method loads the {@code int[] parents} array from the taxonomy index.
     * The returned FacetLabels may not be in the same order in which they were indexed.
     *
     * @param docId input docId provided in non-decreasing order
     * @return the first or next {@link FacetLabel}, or {@code null} if there are no more
     * @throws IOException if {@link TaxonomyReader} has problems getting path for an ordinal
     * @throws IllegalArgumentException if docId provided is less than docId supplied in an earlier
     *     invocation
     * @throws IllegalArgumentException if facetDimension is null
     */
    public FacetLabel nextFacetLabel(int docId, String facetDimension) throws IOException {
      if (facetDimension == null) {
        throw new IllegalArgumentException("Input facet dimension cannot be null");
      }
      final int parentOrd = taxoReader.getOrdinal(new FacetLabel(facetDimension));
      if (parentOrd == INVALID_ORDINAL) {
        throw new IllegalArgumentException(
            "Category ordinal not found for facet dimension: " + facetDimension);
      }

      if (currentDocId != docId) {
        if (docId < currentDocId) {
          throw new IllegalArgumentException(
              "docs out of order: previous docId=" + currentDocId + " current docId=" + docId);
        }
        ordinalsSegmentReader.get(docId, decodedOrds);
        currentPos = decodedOrds.offset;
        currentDocId = docId;
      }

      if (parents == null) {
        parents = taxoReader.getParallelTaxonomyArrays().parents();
      }

      int endPos = decodedOrds.offset + decodedOrds.length;
      assert currentPos <= endPos;

      for (; currentPos < endPos; ) {
        int ord = decodedOrds.ints[currentPos++];
        if (isDescendant(ord, parentOrd) == true) {
          return taxoReader.getPath(ord);
        }
      }
      return null;
    }

