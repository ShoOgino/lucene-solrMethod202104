  @Override
  public Matches matches(LeafReaderContext context, int doc) throws IOException {
    return MatchesUtils.forField(
        field,
        () -> {
          Spans spans = getSpans(context, Postings.OFFSETS);
          if (spans == null || spans.advance(doc) != doc) {
            return null;
          }
          return new MatchesIterator() {

            int innerTermCount = 0;
            TermMatch[] innerTerms = new TermMatch[0];

            SpanCollector termCollector =
                new SpanCollector() {
                  @Override
                  public void collectLeaf(PostingsEnum postings, int position, Term term)
                      throws IOException {
                    innerTermCount++;
                    if (innerTermCount > innerTerms.length) {
                      TermMatch[] temp = new TermMatch[innerTermCount];
                      System.arraycopy(innerTerms, 0, temp, 0, innerTermCount - 1);
                      innerTerms = temp;
                      innerTerms[innerTermCount - 1] = new TermMatch();
                    }
                    innerTerms[innerTermCount - 1].term = term;
                    innerTerms[innerTermCount - 1].position = position;
                    innerTerms[innerTermCount - 1].startOffset = postings.startOffset();
                    innerTerms[innerTermCount - 1].endOffset = postings.endOffset();
                  }

                  @Override
                  public void reset() {
                    innerTermCount = 0;
                  }
                };

            @Override
            public boolean next() throws IOException {
              innerTermCount = 0;
              return spans.nextStartPosition() != Spans.NO_MORE_POSITIONS;
            }

            @Override
            public int startPosition() {
              return spans.startPosition();
            }

            @Override
            public int endPosition() {
              return spans.endPosition() - 1;
            }

            @Override
            public int startOffset() throws IOException {
              if (innerTermCount == 0) {
                collectInnerTerms();
              }
              return innerTerms[0].startOffset;
            }

            @Override
            public int endOffset() throws IOException {
              if (innerTermCount == 0) {
                collectInnerTerms();
              }
              return innerTerms[innerTermCount - 1].endOffset;
            }

            @Override
            public MatchesIterator getSubMatches() throws IOException {
              if (innerTermCount == 0) {
                collectInnerTerms();
              }
              return new MatchesIterator() {

                int upto = -1;

                @Override
                public boolean next() throws IOException {
                  upto++;
                  return upto < innerTermCount;
                }

                @Override
                public int startPosition() {
                  return innerTerms[upto].position;
                }

                @Override
                public int endPosition() {
                  return innerTerms[upto].position;
                }

                @Override
                public int startOffset() throws IOException {
                  return innerTerms[upto].startOffset;
                }

                @Override
                public int endOffset() throws IOException {
                  return innerTerms[upto].endOffset;
                }

                @Override
                public MatchesIterator getSubMatches() throws IOException {
                  return null;
                }

                @Override
                public Query getQuery() {
                  return new TermQuery(innerTerms[upto].term);
                }
              };
            }

            @Override
            public Query getQuery() {
              return SpanWeight.this.getQuery();
            }

            void collectInnerTerms() throws IOException {
              termCollector.reset();
              spans.collect(termCollector);
              Arrays.sort(innerTerms, 0, innerTermCount, Comparator.comparing(a -> a.position));
            }
          };
        });
  }

