  private TupleStreamParser constructParser(SolrParams requestParams) throws IOException, SolrServerException {
    String p = requestParams.get("qt");
    if (p != null) {
      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;
      modifiableSolrParams.remove("qt");
      //performance optimization - remove extra whitespace by default when streaming
      modifiableSolrParams.set("indent", modifiableSolrParams.get("indent", "off"));
    }

    String wt = requestParams.get(CommonParams.WT, "json");
    QueryRequest query = new QueryRequest(requestParams);

    // in order to reuse HttpSolrClient objects per node, we need to cache them without the core name in the URL
    if (core != null) {
      query.setPath("/"+core + (p != null ? p : "/select"));
    } else {
      query.setPath(p);
    }

    query.setResponseParser(new InputStreamResponseParser(wt));
    query.setMethod(SolrRequest.METHOD.POST);

    if(user != null && password != null) {
      query.setBasicAuthCredentials(user, password);
    }

    NamedList<Object> genericResponse = client.request(query);
    InputStream stream = (InputStream) genericResponse.get("stream");
    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get("closeableResponse");
    if (CommonParams.JAVABIN.equals(wt)) {
      return new JavabinTupleStreamParser(stream, true);
    } else {
      InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);
      return new JSONTupleStream(reader);
    }
  }

