  public boolean doRestore() throws Exception {
    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);
    String restoreIndexName = "restore." + dateFormat.format(new Date());
    String restoreIndexPath = core.getDataDir() + restoreIndexName;

    String indexDirPath = core.getIndexDir();
    Directory restoreIndexDir = null;
    Directory indexDir = null;
    try {

      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,
              DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);

      //Prefer local copy.
      indexDir = core.getDirectoryFactory().get(indexDirPath,
              DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);
      Set<String> indexDirFiles = new HashSet<>(Arrays.asList(indexDir.listAll()));
      //Move all files from backupDir to restoreIndexDir
      for (String filename : repository.listAllFiles()) {
        checkInterrupted();
        try {
          if (indexDirFiles.contains(filename)) {
            Checksum cs = repository.checksum(filename);
            IndexFetcher.CompareResult compareResult;
            if (cs == null) {
              compareResult = new IndexFetcher.CompareResult();
              compareResult.equal = false;
            } else {
              compareResult = IndexFetcher.compareFile(indexDir, filename, cs.size, cs.checksum);
            }
            if (!compareResult.equal ||
                    (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, cs.size, compareResult))) {
              repository.repoCopy(filename, restoreIndexDir);
            } else {
              //prefer local copy
              repository.localCopy(indexDir, filename, restoreIndexDir);
            }
          } else {
            repository.repoCopy(filename, restoreIndexDir);
          }
        } catch (Exception e) {
          log.warn("Exception while restoring the backup index ", e);
          throw new SolrException(SolrException.ErrorCode.UNKNOWN, "Exception while restoring the backup index", e);
        }
      }
      log.debug("Switching directories");
      core.modifyIndexProps(restoreIndexName);

      boolean success;
      try {
        core.getUpdateHandler().newIndexWriter(false);
        openNewSearcher();
        success = true;
        log.info("Successfully restored to the backup index");
      } catch (Exception e) {
        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.
        log.warn("Could not switch to restored index. Rolling back to the current index", e);
        Directory dir = null;
        try {
          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,
                  core.getSolrConfig().indexConfig.lockType);
          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);
        } finally {
          if (dir != null) {
            core.getDirectoryFactory().release(dir);
          }
        }

        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);
        core.getDirectoryFactory().remove(restoreIndexDir);
        core.getUpdateHandler().newIndexWriter(false);
        openNewSearcher();
        throw new SolrException(SolrException.ErrorCode.UNKNOWN, "Exception while restoring the backup index", e);
      }
      if (success) {
        core.getDirectoryFactory().doneWithDirectory(indexDir);
        // Cleanup all index files not associated with any *named* snapshot.
        core.deleteNonSnapshotIndexFiles(indexDirPath);
      }

      return true;
    } finally {
      if (restoreIndexDir != null) {
        core.getDirectoryFactory().release(restoreIndexDir);
      }
      if (indexDir != null) {
        core.getDirectoryFactory().release(indexDir);
      }
    }
  }

