  /** Basic test */
  public void testBasics() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);

    // intersects (within)
    Document document = new Document();
    document.add(
        new FloatRange(FIELD_NAME, new float[] {-10.0f, -10.0f}, new float[] {9.1f, 10.1f}));
    writer.addDocument(document);

    // intersects (crosses)
    document = new Document();
    document.add(
        new FloatRange(FIELD_NAME, new float[] {10.0f, -10.0f}, new float[] {20.0f, 10.0f}));
    writer.addDocument(document);

    // intersects (contains, crosses)
    document = new Document();
    document.add(
        new FloatRange(FIELD_NAME, new float[] {-20.0f, -20.0f}, new float[] {30.0f, 30.1f}));
    writer.addDocument(document);

    // intersects (crosses)
    document = new Document();
    document.add(
        new FloatRange(FIELD_NAME, new float[] {-11.1f, -11.2f}, new float[] {1.23f, 11.5f}));
    writer.addDocument(document);

    // intersects (crosses)
    document = new Document();
    document.add(
        new FloatRange(FIELD_NAME, new float[] {12.33f, 1.2f}, new float[] {15.1f, 29.9f}));
    writer.addDocument(document);

    // disjoint
    document = new Document();
    document.add(
        new FloatRange(FIELD_NAME, new float[] {-122.33f, 1.2f}, new float[] {-115.1f, 29.9f}));
    writer.addDocument(document);

    // intersects (crosses)
    document = new Document();
    document.add(
        new FloatRange(
            FIELD_NAME, new float[] {Float.NEGATIVE_INFINITY, 1.2f}, new float[] {-11.0f, 29.9f}));
    writer.addDocument(document);

    // equal (within, contains, intersects)
    document = new Document();
    document.add(new FloatRange(FIELD_NAME, new float[] {-11f, -15f}, new float[] {15f, 20f}));
    writer.addDocument(document);

    // search
    IndexReader reader = writer.getReader();
    IndexSearcher searcher = newSearcher(reader);
    assertEquals(
        7,
        searcher.count(
            FloatRange.newIntersectsQuery(
                FIELD_NAME, new float[] {-11.0f, -15.0f}, new float[] {15.0f, 20.0f})));
    assertEquals(
        2,
        searcher.count(
            FloatRange.newWithinQuery(
                FIELD_NAME, new float[] {-11.0f, -15.0f}, new float[] {15.0f, 20.0f})));
    assertEquals(
        2,
        searcher.count(
            FloatRange.newContainsQuery(
                FIELD_NAME, new float[] {-11.0f, -15.0f}, new float[] {15.0f, 20.0f})));
    assertEquals(
        5,
        searcher.count(
            FloatRange.newCrossesQuery(
                FIELD_NAME, new float[] {-11.0f, -15.0f}, new float[] {15.0f, 20.0f})));

    reader.close();
    writer.close();
    dir.close();
  }

