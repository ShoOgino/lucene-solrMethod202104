  /** Returns a disjunction of a set of child nodes */
  public static QueryTree disjunction(
      List<Function<TermWeightor, QueryTree>> children, TermWeightor weightor) {
    if (children.size() == 0) {
      throw new IllegalArgumentException("Cannot build a disjunction with no children");
    }
    if (children.size() == 1) {
      return children.get(0).apply(weightor);
    }
    List<QueryTree> qt = children.stream().map(f -> f.apply(weightor)).collect(Collectors.toList());
    Optional<QueryTree> firstAnyChild = qt.stream().filter(q -> q.weight() == 0).findAny();
    // if any of the children is an ANY node, just return that, otherwise build the disjunction
    return firstAnyChild.orElseGet(() -> new DisjunctionQueryTree(qt));
  }

