  public void testMatchesAreDisambiguated() throws Exception {

    ExecutorService executor = Executors.newFixedThreadPool(4, new NamedThreadFactory("matchers"));

    try (Monitor monitor = new Monitor(ANALYZER)) {
      List<MonitorQuery> queries = new ArrayList<>();
      for (int i = 0; i < 10; i++) {
        queries.add(
            new MonitorQuery(Integer.toString(i), MonitorTestBase.parse("test^10 doc " + i)));
      }
      monitor.register(queries);
      assertEquals(30, monitor.getDisjunctCount());

      Document doc = new Document();
      doc.add(newTextField("field", "test doc doc", Field.Store.NO));

      MatchingQueries<ScoringMatch> matches =
          monitor.match(doc, matcherFactory(executor, ScoringMatch.DEFAULT_MATCHER, 10));

      assertEquals(20, matches.getQueriesRun());
      assertEquals(10, matches.getMatchCount());
      assertTrue(matches.getErrors().isEmpty());
      for (ScoringMatch match : matches.getMatches()) {
        // The queries are all split into three by the QueryDecomposer, and the
        // 'test' and 'doc' parts will match.  'test' will have a higher score,
        // because of it's lower termfreq.  We need to check that each query ends
        // up with the sum of the scores for the 'test' and 'doc' parts
        assertEquals(1.4874471f, match.getScore(), 0);
      }
    } finally {
      executor.shutdown();
    }
  }

