  public void testLimitTokenCountAnalyzer() throws IOException {
    for (boolean consumeAll : new boolean[] {true, false}) {
      MockAnalyzer mock = new MockAnalyzer(random());

      // if we are consuming all tokens, we can use the checks,
      // otherwise we can't
      mock.setEnableChecks(consumeAll);
      Analyzer a = new LimitTokenCountAnalyzer(mock, 2, consumeAll);

      // dont use assertAnalyzesTo here, as the end offset is not the end of the string (unless
      // consumeAll is true, in which case it's correct)!
      assertTokenStreamContents(
          a.tokenStream("dummy", "1  2     3  4  5"),
          new String[] {"1", "2"},
          new int[] {0, 3},
          new int[] {1, 4},
          consumeAll ? 16 : null);
      assertTokenStreamContents(
          a.tokenStream("dummy", "1 2 3 4 5"),
          new String[] {"1", "2"},
          new int[] {0, 2},
          new int[] {1, 3},
          consumeAll ? 9 : null);

      // less than the limit, ensure we behave correctly
      assertTokenStreamContents(
          a.tokenStream("dummy", "1  "),
          new String[] {"1"},
          new int[] {0},
          new int[] {1},
          consumeAll ? 3 : null);

      // equal to limit
      assertTokenStreamContents(
          a.tokenStream("dummy", "1  2  "),
          new String[] {"1", "2"},
          new int[] {0, 3},
          new int[] {1, 4},
          consumeAll ? 6 : null);
      a.close();
    }
  }

