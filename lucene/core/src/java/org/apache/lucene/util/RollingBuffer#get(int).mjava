  /**
   * Get T instance for this absolute position; this is allowed to be arbitrarily far "in the
   * future" but cannot be before the last freeBefore.
   */
  public T get(int pos) {
    // System.out.println("RA.get pos=" + pos + " nextPos=" + nextPos + " nextWrite=" + nextWrite +
    // " count=" + count);
    while (pos >= nextPos) {
      if (count == buffer.length) {
        @SuppressWarnings("unchecked")
        T[] newBuffer =
            (T[])
                new Resettable
                    [ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];
        // System.out.println("  grow length=" + newBuffer.length);
        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);
        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);
        for (int i = buffer.length; i < newBuffer.length; i++) {
          newBuffer[i] = newInstance();
        }
        nextWrite = buffer.length;
        buffer = newBuffer;
      }
      if (nextWrite == buffer.length) {
        nextWrite = 0;
      }
      // Should have already been reset:
      nextWrite++;
      nextPos++;
      count++;
    }
    assert inBounds(pos) : "pos=" + pos + " nextPos=" + nextPos + " count=" + count;
    final int index = getIndex(pos);
    // System.out.println("  pos=" + pos + " nextPos=" + nextPos + " -> index=" + index);
    // assert buffer[index].pos == pos;
    return buffer[index];
  }

