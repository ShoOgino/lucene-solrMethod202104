  /**
   * Makes a connection from the node to a neighbor, dropping the worst connection when maxConn is exceeded
   * @param node1 node to connect *from*
   * @param node2 node to connect *to*
   * @param score searchStrategy.score() of the vectors associated with the two nodes
   */
  boolean connect(int node1, int node2, float score) {
    //System.out.println("    HnswGraph.connect " + node1 + " -> " + node2);
    assert node1 >= 0 && node2 >= 0;
    Neighbors nn = graph.get(node1);
    assert nn != null;
    if (nn.size() == maxConn) {
      Neighbor top = nn.top();
      if (score < top.score() == nn.reversed()) {
        top.update(node2, score);
        nn.updateTop();
        return true;
      }
    } else {
      nn.add(new Neighbor(node2, score));
      return true;
    }
    return false;
  }

