    @Override
    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
      Explanation scoreExplanation = inner.explain(context, doc);
      if (scoreExplanation.isMatch() == false) {
        return scoreExplanation;
      }

      Scorer scorer = inner.scorer(context);
      DoubleValues values = valueSource.getValues(context, DoubleValuesSource.fromScorer(scorer));
      int advanced = scorer.iterator().advance(doc);
      assert advanced == doc;

      double value;
      Explanation expl;
      if (values.advanceExact(doc)) {
        value = values.doubleValue();
        expl = valueSource.explain(context, doc, scoreExplanation);
        if (value < 0) {
          value = 0;
          expl =
              Explanation.match(
                  0, "truncated score, max of:", Explanation.match(0f, "minimum score"), expl);
        } else if (Double.isNaN(value)) {
          value = 0;
          expl =
              Explanation.match(
                  0,
                  "score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:",
                  expl);
        }
      } else {
        value = 0;
        expl = valueSource.explain(context, doc, scoreExplanation);
      }

      if (expl.isMatch() == false) {
        expl =
            Explanation.match(
                0f,
                "weight("
                    + getQuery().toString()
                    + ") using default score of 0 because the function produced no value:",
                expl);
      } else if (boost != 1f) {
        expl =
            Explanation.match(
                (float) (value * boost),
                "weight(" + getQuery().toString() + "), product of:",
                Explanation.match(boost, "boost"),
                expl);
      } else {
        expl =
            Explanation.match(
                expl.getValue(), "weight(" + getQuery().toString() + "), result of:", expl);
      }

      return expl;
    }

