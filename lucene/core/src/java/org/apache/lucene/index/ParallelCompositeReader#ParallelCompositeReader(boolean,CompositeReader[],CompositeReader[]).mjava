  /**
   * Expert: create a ParallelCompositeReader based on the provided readers and storedFieldReaders;
   * when a document is loaded, only storedFieldsReaders will be used.
   */
  public ParallelCompositeReader(
      boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders)
      throws IOException {
    super(prepareLeafReaders(readers, storedFieldReaders));
    this.closeSubReaders = closeSubReaders;
    Collections.addAll(completeReaderSet, readers);
    Collections.addAll(completeReaderSet, storedFieldReaders);
    // update ref-counts (like MultiReader):
    if (!closeSubReaders) {
      for (final IndexReader reader : completeReaderSet) {
        reader.incRef();
      }
    }
    // finally add our own synthetic readers, so we close or decRef them, too (it does not matter
    // what we do)
    completeReaderSet.addAll(getSequentialSubReaders());
    // ParallelReader instances can be short-lived, which would make caching trappy
    // so we do not cache on them, unless they wrap a single reader in which
    // case we delegate
    if (readers.length == 1
        && storedFieldReaders.length == 1
        && readers[0] == storedFieldReaders[0]) {
      cacheHelper = readers[0].getReaderCacheHelper();
    } else {
      cacheHelper = null;
    }
  }

