  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {
    defaultShardPreferences = Objects.requireNonNullElse(defaultShardPreferences, this.defaultShardPreferences);
    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);

    if (!shardsPreferenceSpec.isEmpty()) {
      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);
      NodePreferenceRulesComparator replicaComp =
          new NodePreferenceRulesComparator(
              preferenceRules,
              requestParams,
              nodeName != null ? nodeName : this.nodeName, // could be still null
              localHostAddress != null ? localHostAddress : this.localHostAddress, // could still be null
              sysPropsCacher != null ? sysPropsCacher : this.sysPropsCacher, // could still be null
              defaultRltFactory,
              stableRltFactory);
      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();
      if (replicaComp.getSortRules() == null) {
        // only applying base transformation
        return baseReplicaListTransformer;
      } else {
        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);
      }
    }

    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);
  }

