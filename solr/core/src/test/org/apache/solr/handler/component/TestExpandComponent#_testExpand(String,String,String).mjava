  private void _testExpand(String group, String floatAppend, String hint) throws Exception {
    // NOTE: one of our groups uses '0' as the group value to explicitly check numeric expand for 0 vs null group behavior
    String[][] docs = {
        {"id","1", "term_s", "YYYY", group, "1"+floatAppend, "test_i", "5", "test_l", "10", "test_f", "2000", "type_s", "parent"},
        {"id","2", "term_s","YYYY", group, "1"+floatAppend, "test_i", "50", "test_l", "100", "test_f", "200", "type_s", "child"},
        {"id","3", "term_s", "YYYY", "test_i", "5000", "test_l", "100", "test_f", "200", "type_s", "other"},
        {"id","4", "term_s", "YYYY", "test_i", "40", "test_l", "1000", "test_f", "2000", "type_s", "other"},
        {"id","5", "term_s", "YYYY", group, "0"+floatAppend, "test_i", "4", "test_l", "10", "test_f", "2000", "type_s", "parent"},
        {"id","6", "term_s","YYYY", group, "0"+floatAppend, "test_i", "10", "test_l", "100", "test_f", "200", "type_s", "child"},
        {"id","7", "term_s", "YYYY", group, "1"+floatAppend, "test_i", "1", "test_l", "100000", "test_f", "2000", "type_s", "child"},
        {"id","8", "term_s","YYYY", group, "0"+floatAppend, "test_i", "2", "test_l",  "100000", "test_f", "200", "type_s", "child"}
    };
    createIndex(docs);

    ModifiableSolrParams params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");

    //First basic test case.
    assertQ(req(params), "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='8']"
    );

    //Basic test case page 2
    assertQ(req(params, "rows", "1", "start", "1"), "*[count(/response/result/doc)=1]",
        "*[count(/response/lst[@name='expanded']/result)=1]",
        "/response/result/doc[1]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='8']"
    );

    //Test expand.sort
    //the "sub()" just testing function queries
    assertQ(req(params,"expand.sort", "test_l desc, sub(1,1) asc"),
        "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']"
    );

    //Test with nullPolicy...
    // Main result set should include the doc(s) with null value in the collapse field.
    // By default ExpandComponent should ignore docs with null values in the collapse fields....
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.sort", "test_l desc");
    assertQ(req(params,
                "fq", "{!collapse field="+group+hint+" nullPolicy=collapse}")
            ,"*[count(/response/result/doc)=3]"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/result/doc[2]/str[@name='id'][.='2']"
            ,"/response/result/doc[3]/str[@name='id'][.='6']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']"
            );
    assertQ(req(params,
                "fq", "{!collapse field="+group+hint+" nullPolicy=expand}")
            ,"*[count(/response/result/doc)=4]"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/result/doc[2]/str[@name='id'][.='2']"
            ,"/response/result/doc[3]/str[@name='id'][.='4']"
            ,"/response/result/doc[4]/str[@name='id'][.='6']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']"
            );
    // Adding expand.nullGroup should cause a 'null' group in our expanded results...
    params.add("expand.nullGroup", "true");
    assertQ(req(params,
                "fq", "{!collapse field="+group+hint+" nullPolicy=collapse}")
            ,"*[count(/response/result/doc)=3]"
            ,"*[count(/response/lst[@name='expanded']/result)=3]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/result/doc[2]/str[@name='id'][.='2']"
            ,"/response/result/doc[3]/str[@name='id'][.='6']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[1]/str[@name='id'][.='4']"
            );
    assertQ(req(params,
                // no null group here because all null docs already in current page
                "fq", "{!collapse field="+group+hint+" nullPolicy=expand}")
            ,"*[count(/response/result/doc)=4]"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/result/doc[2]/str[@name='id'][.='2']"
            ,"/response/result/doc[3]/str[@name='id'][.='4']"
            ,"/response/result/doc[4]/str[@name='id'][.='6']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']"
            );
    assertQ(req(params,
                // limiting rows should cause null group to pop up since we now have a null doc not on page...
                "rows", "2",
                "fq", "{!collapse field="+group+hint+" nullPolicy=expand}")
            ,"*[count(/response/result/doc)=2]"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/result/doc[2]/str[@name='id'][.='2']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[1]/str[@name='id'][.='4']"
            );
    assertQ(req(params,
                // with only 1 rows, the only expanded group we should see is the nullGroup...
                "rows", "1",
                "fq", "{!collapse field="+group+hint+" nullPolicy=expand}")
            ,"*[count(/response/result/doc)=1]"
            ,"*[count(/response/lst[@name='expanded']/result)=1]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[1]/str[@name='id'][.='4']"
            );

    // Test override expand.q
    // the fact that expand.q matches docs in null group shouldn't matter w/o expand.nullGroup=true
    params = new ModifiableSolrParams();
    params.add("q", "type_s:parent");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.q", "type_s:(child OR other)");
    params.add("expand.field", group);
    params.add("expand.sort", "test_l desc");
    assertQ(req(params)
            ,"*[count(/response/result/doc)=2]"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='1']"
            ,"/response/result/doc[2]/str[@name='id'][.='5']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='2']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='6']"
            );
    assertQ(req(params,
                // now the 'other' docs should show up in an expanded null group
                "expand.nullGroup", "true")
            ,"*[count(/response/result/doc)=2]"
            ,"*[count(/response/lst[@name='expanded']/result)=3]"
            ,"/response/result/doc[1]/str[@name='id'][.='1']"
            ,"/response/result/doc[2]/str[@name='id'][.='5']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='2']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='6']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[1]/str[@name='id'][.='4']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[2]/str[@name='id'][.='3']"
            );


    // Test override expand.fq
    // the fact that expand.fq matches docs in null group shouldn't matter w/o expand.nullGroup=true
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "type_s:parent");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.fq", "type_s:(child OR other)");
    params.add("expand.field", group);
    params.add("expand.sort", "test_l desc");
    assertQ(req(params)
            ,"*[count(/response/result/doc)=2]"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='1']"
            ,"/response/result/doc[2]/str[@name='id'][.='5']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='2']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='6']"
            );
    assertQ(req(params,
                // now the 'other' docs should show up in an expanded null group
                "expand.nullGroup", "true")
            ,"*[count(/response/result/doc)=2]"
            ,"*[count(/response/lst[@name='expanded']/result)=3]"
            ,"/response/result/doc[1]/str[@name='id'][.='1']"
            ,"/response/result/doc[2]/str[@name='id'][.='5']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='2']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='6']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[1]/str[@name='id'][.='4']"
            ,"/response/lst[@name='expanded']/result[not(@name)]/doc[2]/str[@name='id'][.='3']"
            );


    //Test override expand.fq and expand.q
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "type_s:parent");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.q", "type_s:child");
    params.add("expand.fq", "*:*");
    params.add("expand.field", group);
    params.add("expand.sort", "test_l desc");
    assertQ(req(params), "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='1']",
        "/response/result/doc[2]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='2']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='6']"
    );

    //Test expand.rows
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.sort", "test_l desc");
    params.add("expand.rows", "1");
    assertQ(req(params), "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "*[count(/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc)=1]",
        "*[count(/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc)=1]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']"
    );

    // Test expand.rows=0 - no docs only expand count
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.rows", "0");
    assertQ(req(params,
                "fq", "{!collapse field="+group+hint+"}")
            ,"*[count(/response/result/doc)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='2']"
            ,"/response/result/doc[2]/str[@name='id'][.='6']"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"' and @numFound=2]"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"' and @numFound=2]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc)=0]"
            );
    assertQ(req(params,
                // same, but with collapsed nulls and a nullGroup, we should have our expanded null group count
                "fq", "{!collapse field="+group+hint+" nullPolicy=collapse}",
                "expand.nullGroup", "true")
            ,"*[count(/response/result/doc)=3]"
            ,"/response/result/doc[1]/str[@name='id'][.='3']"
            ,"/response/result/doc[2]/str[@name='id'][.='2']"
            ,"/response/result/doc[3]/str[@name='id'][.='6']"
            ,"*[count(/response/lst[@name='expanded']/result)=3]"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"' and @numFound=2]"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"' and @numFound=2]"
            ,"/response/lst[@name='expanded']/result[not(@name) and @numFound=1]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result[not(@name)]/doc)=0]"
            );

    // Test expand.rows = 0 with expand.field
    // the fact that expand.q matches docs in null group shouldn't matter w/o expand.nullGroup=true
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "type_s:parent");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.fq", "type_s:(child OR other)");
    params.add("expand.field", group);
    params.add("expand.rows", "0");
    params.add("fl", "id");
    assertQ(req(params)
            ,"*[count(/response/result/doc)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='1']"
            ,"/response/result/doc[2]/str[@name='id'][.='5']"
            ,"*[count(/response/lst[@name='expanded']/result)=2]"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"' and @numFound=2]"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"' and @numFound=2]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc)=0]"
            );
    assertQ(req(params,
                // now the 'other' docs should show up in an expanded null group
                "expand.nullGroup", "true")
            ,"*[count(/response/result/doc)=2]"
            ,"/response/result/doc[1]/str[@name='id'][.='1']"
            ,"/response/result/doc[2]/str[@name='id'][.='5']"
            ,"*[count(/response/lst[@name='expanded']/result)=3]"
            ,"/response/lst[@name='expanded']/result[@name='1"+floatAppend+"' and @numFound=2]"
            ,"/response/lst[@name='expanded']/result[@name='0"+floatAppend+"' and @numFound=2]"
            ,"/response/lst[@name='expanded']/result[not(@name) and @numFound=2]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result[not(@name)]/doc)=0]"

            );


    //Test score with expand.rows = 0
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "type_s:parent");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.fq", "*:*");
    params.add("expand.field", group);
    params.add("expand.rows", "0");
    assertQ(req(params, "fl", "id,score"), "*[count(/response/result/doc)=2]",
            "*[count(/response/lst[@name='expanded']/result)=2]",
            "*[count(/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc)=0]",
            "*[count(/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc)=0]",
            "*[count(/response/lst[@name='expanded']/result[@maxScore])=0]", //maxScore should not be available
            "/response/result/doc[1]/str[@name='id'][.='1']",
            "/response/result/doc[2]/str[@name='id'][.='5']",
            "count(//*[@name='score' and .='NaN'])=0"

    );

    //Test no group results
    params = new ModifiableSolrParams();
    params.add("q", "test_i:5");
    params.add("fq", "{!collapse field="+group+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.sort", "test_l desc");
    params.add("expand.rows", "1");
    assertQ(req(params), "*[count(/response/result/doc)=1]",
        "*[count(/response/lst[@name='expanded']/result)=0]"
    );

    // Test zero results
    params = new ModifiableSolrParams();
    params.add("q", "test_i:5532535");
    params.add("fq", "{!collapse field="+group+hint+" nullPolicy=collapse}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.sort", "test_l desc");
    params.add("expand.rows", "1");
    assertQ(req(params)
            ,"*[count(/response/result/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result)=0]"
            );
    assertQ(req(params,
                "expand.nullGroup", "true")
            ,"*[count(/response/result/doc)=0]"
            ,"*[count(/response/lst[@name='expanded']/result)=0]"
            );
    // Query has results, but expand.q has none...
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+hint+" nullPolicy=collapse}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");
    params.add("expand.q", "test_i:5532535");
    assertQ(req(params)
            ,"*[count(/response/result/doc)=3]"
            ,"*[count(/response/lst[@name='expanded']/result)=0]"
            );
    assertQ(req(params,
                "expand.nullGroup", "true")
            ,"*[count(/response/result/doc)=3]"
            ,"*[count(/response/lst[@name='expanded']/result)=0]"
            );
   

    //Test key-only fl
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("expand", "true");

    assertQ(req(params, "fl", "id"),
        "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='8']",
        "count(//*[@name='score'])=0" // score shouldn't be returned when not requested
    );

    //Test key-only fl with score but no sorting
    assertQ(req(params, "fl", "id,score"), "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='8']",
        "count(//*[@name='score' and .='NaN'])=0"
    );


    // Test with fl and sort=score desc
    assertQ(req(params, "expand.sort", "score desc", "fl", "id,score"),
        "*[count(/response/result/doc)=2]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='8']",
        "count(//*[@name='score' and .='NaN'])=0"
    );

    //Test fl with score, sort by non-score
    assertQ(req(params, "expand.sort", "test_l desc", "fl", "id,test_i,score"),
        "*[count(/response/result/doc)=2]",
        "count(/response/lst[@name='expanded']/result)=2",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        // note that the expanded docs are score descending order (score is 1 test_i)
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']",
        "count(//*[@name='score' and .='NaN'])=0",
        "count(/response/lst[@name='expanded']/result/doc[number(*/@name='score')!=number(*/@name='test_i')])=0"
    );

    //Test fl with score with multi-sort
    assertQ(req(params, "expand.sort", "test_l desc, score asc", "fl", "id,test_i,score"),
        "*[count(/response/result/doc)=2]",
        "count(/response/lst[@name='expanded']/result)=2",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/result/doc[2]/str[@name='id'][.='6']",
        // note that the expanded docs are score descending order (score is 1 test_i)
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='8']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='5']",
        "count(//*[@name='score' and .='NaN'])=0",
        "count(/response/lst[@name='expanded']/result/doc[number(*/@name='score')!=number(*/@name='test_i')])=0"
    );

    // Test for expand with collapse
    // when matched docs have fewer unique values
    params = params("q", "*:*", "sort", "id asc", "fl", "id", "rows", "6", "expand", "true", "expand.sort", "id asc");
    assertQ(req(params, "expand.field", "term_s"),
        "*[count(/response/result/doc)=6]",
        "/response/lst[@name='expanded']/result[@name='YYYY']/doc[1]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='YYYY']/doc[2]/str[@name='id'][.='8']",
        "count(//*[@name='score'])=0"
    );
    assertQ(req(params, "expand.field", "test_f"),
        "*[count(/response/result/doc)=6]",
        "/response/lst[@name='expanded']/result[@name='200.0']/doc[1]/str[@name='id'][.='8']",
        "/response/lst[@name='expanded']/result[@name='2000.0']/doc[1]/str[@name='id'][.='7']",
        "count(//*[@name='score'])=0"
    );

    // Support expand enabled without previous collapse
    assertQ(req("q", "type_s:child", "sort", group+" desc, test_l desc", "defType", "edismax",
        "expand", "true", "expand.q", "type_s:parent", "expand.field", group),
        "*[count(/response/result/doc)=4]",
        "*[count(/response/lst[@name='expanded']/result)=2]",
        "/response/result/doc[1]/str[@name='id'][.='7']",
        "/response/result/doc[2]/str[@name='id'][.='2']",
        "/response/result/doc[3]/str[@name='id'][.='8']",
        "/response/result/doc[4]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']"
    );

    // With multiple collapse

    // with different cost
    params = params("q", "*:*", "defType", "edismax", "expand", "true",  "bf", "field(test_i)", "expand.sort", "id asc");
    params.set("fq", "{!collapse cost=1000 field="+group+"}", "{!collapse cost=2000 field=test_f}");
    assertQ(req(params),
        "*[count(/response/result/doc)=1]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']"
    );

    // with same cost (default cost)
    params.set("fq", "{!collapse field="+group+"}", "{!collapse field=test_f}");
    assertQ(req(params),
        "*[count(/response/result/doc)=1]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']"
    );

    // with different cost but choose the test_f
    params.set("fq", "{!collapse cost=3000 field="+group+"}", "{!collapse cost=2000 field=test_f}");
    assertQ(req(params),
        "*[count(/response/result/doc)=1]",
        "/response/result/doc[1]/str[@name='id'][.='2']",
        "/response/lst[@name='expanded']/result[@name='200.0']/doc[1]/str[@name='id'][.='3']",
        "/response/lst[@name='expanded']/result[@name='200.0']/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='200.0']/doc[3]/str[@name='id'][.='8']"
    );

    // with different cost and nullPolicy
    params.set("bf", "ord(id)");
    params.set("fq", "{!collapse cost=1000 field="+group+" nullPolicy=collapse}", "{!collapse cost=2000 field=test_f}");
    assertQ(req(params),
        "*[count(/response/result/doc)=2]",
        "/response/result/doc[1]/str[@name='id'][.='8']",
        "/response/result/doc[2]/str[@name='id'][.='7']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[1]/str[@name='id'][.='5']",
        "/response/lst[@name='expanded']/result[@name='0"+floatAppend+"']/doc[2]/str[@name='id'][.='6']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[1]/str[@name='id'][.='1']",
        "/response/lst[@name='expanded']/result[@name='1"+floatAppend+"']/doc[2]/str[@name='id'][.='2']"
    );
  }

