  /**
   * Create a new FSDirectory for the named location (ctor for subclasses). The directory is created
   * at the named location if it does not yet exist.
   *
   * <p>{@code FSDirectory} resolves the given Path to a canonical / real path to ensure it can
   * correctly lock the index directory and no other process can interfere with changing possible
   * symlinks to the index directory inbetween. If you want to use symlinks and change them
   * dynamically, close all {@code IndexWriters} and create a new {@code FSDirectory} instance.
   *
   * @param path the path of the directory
   * @param lockFactory the lock factory to use, or null for the default ({@link
   *     NativeFSLockFactory});
   * @throws IOException if there is a low-level I/O error
   */
  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {
    super(lockFactory);
    // If only read access is permitted, createDirectories fails even if the directory already
    // exists.
    if (!Files.isDirectory(path)) {
      Files.createDirectories(path); // create directory, if it doesn't exist
    }
    directory = path.toRealPath();
  }

