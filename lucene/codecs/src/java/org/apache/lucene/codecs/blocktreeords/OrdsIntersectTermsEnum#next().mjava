  @Override
  public BytesRef next() throws IOException {

    // if (DEBUG) {
    //   System.out.println("\nintEnum.next seg=" + segment);
    //   System.out.println("  frame ord=" + currentFrame.ord + " prefix=" + brToString(new
    // BytesRef(term.bytes, term.offset, currentFrame.prefix)) + " state=" + currentFrame.state + "
    // lastInFloor?=" + currentFrame.isLastInFloor + " fp=" + currentFrame.fp + " trans=" +
    // (currentFrame.transitions.length == 0 ? "n/a" :
    // currentFrame.transitions[currentFrame.transitionIndex]) + " outputPrefix=" +
    // currentFrame.outputPrefix);
    // }

    nextTerm:
    while (true) {
      // Pop finished frames
      while (currentFrame.nextEnt == currentFrame.entCount) {
        if (!currentFrame.isLastInFloor) {
          // if (DEBUG) System.out.println("    next-floor-block");
          currentFrame.loadNextFloorBlock();
          // if (DEBUG) System.out.println("\n  frame ord=" + currentFrame.ord + " prefix=" +
          // brToString(new BytesRef(term.bytes, term.offset, currentFrame.prefix)) + " state=" +
          // currentFrame.state + " lastInFloor?=" + currentFrame.isLastInFloor + " fp=" +
          // currentFrame.fp + " trans=" + (currentFrame.transitions.length == 0 ? "n/a" :
          // currentFrame.transitions[currentFrame.transitionIndex]) + " outputPrefix=" +
          // currentFrame.outputPrefix);
        } else {
          // if (DEBUG) System.out.println("  pop frame");
          if (currentFrame.ord == 0) {
            return null;
          }
          final long lastFP = currentFrame.fpOrig;
          currentFrame = stack[currentFrame.ord - 1];
          assert currentFrame.lastSubFP == lastFP;
          // if (DEBUG) System.out.println("\n  frame ord=" + currentFrame.ord + " prefix=" +
          // brToString(new BytesRef(term.bytes, term.offset, currentFrame.prefix)) + " state=" +
          // currentFrame.state + " lastInFloor?=" + currentFrame.isLastInFloor + " fp=" +
          // currentFrame.fp + " trans=" + (currentFrame.transitions.length == 0 ? "n/a" :
          // currentFrame.transitions[currentFrame.transitionIndex]) + " outputPrefix=" +
          // currentFrame.outputPrefix);
        }
      }

      final boolean isSubBlock = currentFrame.next();
      // if (DEBUG) {
      //   final BytesRef suffixRef = new BytesRef();
      //   suffixRef.bytes = currentFrame.suffixBytes;
      //   suffixRef.offset = currentFrame.startBytePos;
      //   suffixRef.length = currentFrame.suffix;
      //   System.out.println("    " + (isSubBlock ? "sub-block" : "term") + " " +
      // currentFrame.nextEnt + " (of " + currentFrame.entCount + ") suffix=" +
      // brToString(suffixRef));
      // }

      if (currentFrame.suffix != 0) {
        final int label = currentFrame.suffixBytes[currentFrame.startBytePos] & 0xff;
        while (label > currentFrame.curTransitionMax) {
          if (currentFrame.transitionIndex >= currentFrame.transitionCount - 1) {
            // Stop processing this frame -- no further
            // matches are possible because we've moved
            // beyond what the max transition will allow
            // if (DEBUG) System.out.println("      break: trans=" +
            // (currentFrame.transitions.length == 0 ? "n/a" :
            // currentFrame.transitions[currentFrame.transitionIndex]));

            // sneaky!  forces a pop above
            currentFrame.isLastInFloor = true;
            currentFrame.nextEnt = currentFrame.entCount;
            continue nextTerm;
          }
          currentFrame.transitionIndex++;
          compiledAutomaton.automaton.getNextTransition(currentFrame.transition);
          currentFrame.curTransitionMax = currentFrame.transition.max;
          // if (DEBUG) System.out.println("      next trans=" +
          // currentFrame.transitions[currentFrame.transitionIndex]);
        }
      }

      // First test the common suffix, if set:
      if (compiledAutomaton.commonSuffixRef != null && !isSubBlock) {
        final int termLen = currentFrame.prefix + currentFrame.suffix;
        if (termLen < compiledAutomaton.commonSuffixRef.length) {
          // No match
          // if (DEBUG) {
          //   System.out.println("      skip: common suffix length");
          // }
          continue nextTerm;
        }

        final byte[] suffixBytes = currentFrame.suffixBytes;
        final byte[] commonSuffixBytes = compiledAutomaton.commonSuffixRef.bytes;

        final int lenInPrefix = compiledAutomaton.commonSuffixRef.length - currentFrame.suffix;
        assert compiledAutomaton.commonSuffixRef.offset == 0;
        int suffixBytesPos;
        int commonSuffixBytesPos = 0;

        if (lenInPrefix > 0) {
          // A prefix of the common suffix overlaps with
          // the suffix of the block prefix so we first
          // test whether the prefix part matches:
          final byte[] termBytes = term.bytes;
          int termBytesPos = currentFrame.prefix - lenInPrefix;
          assert termBytesPos >= 0;
          final int termBytesPosEnd = currentFrame.prefix;
          while (termBytesPos < termBytesPosEnd) {
            if (termBytes[termBytesPos++] != commonSuffixBytes[commonSuffixBytesPos++]) {
              // if (DEBUG) {
              //   System.out.println("      skip: common suffix mismatch (in prefix)");
              // }
              continue nextTerm;
            }
          }
          suffixBytesPos = currentFrame.startBytePos;
        } else {
          suffixBytesPos =
              currentFrame.startBytePos
                  + currentFrame.suffix
                  - compiledAutomaton.commonSuffixRef.length;
        }

        // Test overlapping suffix part:
        final int commonSuffixBytesPosEnd = compiledAutomaton.commonSuffixRef.length;
        while (commonSuffixBytesPos < commonSuffixBytesPosEnd) {
          if (suffixBytes[suffixBytesPos++] != commonSuffixBytes[commonSuffixBytesPos++]) {
            // if (DEBUG) {
            //   System.out.println("      skip: common suffix mismatch");
            // }
            continue nextTerm;
          }
        }
      }

      // TODO: maybe we should do the same linear test
      // that AutomatonTermsEnum does, so that if we
      // reach a part of the automaton where .* is
      // "temporarily" accepted, we just blindly .next()
      // until the limit

      // See if the term prefix matches the automaton:
      int state = currentFrame.state;
      for (int idx = 0; idx < currentFrame.suffix; idx++) {
        state =
            runAutomaton.step(
                state, currentFrame.suffixBytes[currentFrame.startBytePos + idx] & 0xff);
        if (state == -1) {
          // No match
          // System.out.println("    no s=" + state);
          continue nextTerm;
        } else {
          // System.out.println("    c s=" + state);
        }
      }

      if (isSubBlock) {
        // Match!  Recurse:
        // if (DEBUG) System.out.println("      sub-block match to state=" + state + "; recurse fp="
        // + currentFrame.lastSubFP);
        copyTerm();
        currentFrame = pushFrame(state);
        // if (DEBUG) System.out.println("\n  frame ord=" + currentFrame.ord + " prefix=" +
        // brToString(new BytesRef(term.bytes, term.offset, currentFrame.prefix)) + " state=" +
        // currentFrame.state + " lastInFloor?=" + currentFrame.isLastInFloor + " fp=" +
        // currentFrame.fp + " trans=" + (currentFrame.transitions.length == 0 ? "n/a" :
        // currentFrame.transitions[currentFrame.transitionIndex]) + " outputPrefix=" +
        // currentFrame.outputPrefix);
      } else if (runAutomaton.isAccept(state)) {
        copyTerm();
        // if (DEBUG) System.out.println("      term match to state=" + state + "; return term=" +
        // brToString(term));
        assert savedStartTerm == null || term.compareTo(savedStartTerm) > 0
            : "saveStartTerm=" + savedStartTerm.utf8ToString() + " term=" + term.utf8ToString();
        return term;
      } else {
        // System.out.println("    no s=" + state);
      }
    }
  }

