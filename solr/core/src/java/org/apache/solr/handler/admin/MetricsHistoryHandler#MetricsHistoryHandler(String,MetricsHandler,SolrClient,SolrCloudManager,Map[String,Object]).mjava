  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,
        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {

    Map<String, Object> args = new HashMap<>();
    // init from optional solr.xml config
    if (pluginArgs != null) {
      args.putAll(pluginArgs);
    }
    // override from ZK if available
    if (cloudManager != null) {
      @SuppressWarnings({"unchecked"})
      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()
          .getClusterProperty("metrics", Collections.emptyMap())
          .getOrDefault("history", Collections.emptyMap());
      args.putAll(props);

      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty("urlScheme", "http");
    } else {
      overseerUrlScheme = "http";
    }

    this.nodeName = nodeName;
    // disable when metrics reporting is disabled
    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, "true")))
        && metricsHandler.isEnabled();
    // default to false - don't collect local per-replica metrics
    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, "false")));
    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, "false")));
    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));
    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));

    this.solrClient = solrClient;
    this.metricsHandler = metricsHandler;
    this.cloudManager = cloudManager;
    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;

    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);
    counters.put(Group.node.toString(), Collections.emptyList());
    counters.put(Group.jvm.toString(), Collections.emptyList());
    counters.put(Group.collection.toString(), Collections.emptyList());
    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);
    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);
    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);
    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);

    versionString = this.getClass().getPackage().getImplementationVersion();
    if (versionString == null) {
      versionString = "?.?.?";
    }
    if (versionString.length() > 24) {
      versionString = versionString.substring(0, 24) + "...";
    }

    if (enable) {
      factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,
              syncPeriod, this.timeSource);

      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,
          new SolrNamedThreadFactory("MetricsHistoryHandler"));
      collectService.setRemoveOnCancelPolicy(true);
      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
      collectService.scheduleWithFixedDelay(() -> collectMetrics(),
          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),
          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),
          TimeUnit.MILLISECONDS);
      checkSystemCollection();
    } else {
      factory = null;
    }
  }

