  private void checkHits(
      IndexSearcher searcher,
      Query q,
      final float expectedScore,
      final Class<? extends Scorable> innerScorerClass)
      throws IOException {
    final int[] count = new int[1];
    searcher.search(
        q,
        new SimpleCollector() {
          private Scorable scorer;

          @Override
          public void setScorer(Scorable scorer) {
            this.scorer = scorer;
            if (innerScorerClass != null) {
              Scorable innerScorer = rootScorer(scorer);
              assertEquals(
                  "inner Scorer is implemented by wrong class",
                  innerScorerClass,
                  innerScorer.getClass());
            }
          }

          @Override
          public void collect(int doc) throws IOException {
            assertEquals("Score differs from expected", expectedScore, this.scorer.score(), 0);
            count[0]++;
          }

          @Override
          public ScoreMode scoreMode() {
            return ScoreMode.COMPLETE;
          }
        });
    assertEquals("invalid number of results", 1, count[0]);
  }

