  public void testBasic() throws Exception {
    Directory dir = newDirectory();
    Directory taxoDir = newDirectory();

    // Writes facet ords to a separate directory from the main index:
    DirectoryTaxonomyWriter taxoWriter =
        new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);

    FacetsConfig config = new FacetsConfig();
    config.setHierarchical("Publish Date", true);

    for (Document doc : prepareDocuments()) {
      writer.addDocument(config.build(taxoWriter, doc));
    }

    // NRT open
    IndexSearcher searcher = newSearcher(writer.getReader());
    // NRT open
    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);

    FacetsCollector fc = new FacetsCollector();
    searcher.search(new MatchAllDocsQuery(), fc);

    TaxonomyFacetLabels taxoLabels =
        new TaxonomyFacetLabels(taxoReader, FacetsConfig.DEFAULT_INDEX_FIELD_NAME);

    // Check labels for all dimensions
    List<FacetLabel> facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs());
    assertEquals("Incorrect number of facet labels received", 10, facetLabels.size());

    // Check labels for all dimensions
    assertTrue(
        facetLabels.stream()
            .filter(l -> "Author".equals(l.components[0]))
            .map(l -> l.components[1])
            .collect(Collectors.toSet())
            .equals(Set.of("Bob", "Lisa", "Susan", "Frank", "Tom")));

    assertTrue(
        facetLabels.stream()
            .filter(l -> "Publish Date".equals(l.components[0]))
            .map(l -> String.join("/", l.components[1], l.components[2], l.components[3]))
            .collect(Collectors.toSet())
            .equals(Set.of("2010/10/15", "2010/10/20", "2012/1/1", "2012/1/7", "1999/5/5")));

    // Check labels for a specific dimension
    facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs(), "Publish Date");
    assertEquals(
        "Incorrect number of facet labels received for 'Publish Date'", 5, facetLabels.size());

    assertTrue(
        facetLabels.stream()
            .map(l -> String.join("/", l.components[1], l.components[2], l.components[3]))
            .collect(Collectors.toSet())
            .equals(Set.of("2010/10/15", "2010/10/20", "2012/1/1", "2012/1/7", "1999/5/5")));

    try {
      facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs(), null, true);
      fail("IllegalArgumentException was not thrown for using docIds supplied in decreasing order");
    } catch (IllegalArgumentException ae) {
      assertTrue(ae.getMessage().contains("docs out of order"));
    }

    try {
      facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs(), "Publish Date", true);
      fail("Assertion error was not thrown for using docIds supplied in decreasing order");
    } catch (IllegalArgumentException ae) {
      assertTrue(ae.getMessage().contains("docs out of order"));
    }

    writer.close();
    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, taxoDir, dir);
  }

