    protected Component2D.WithinRelation testWithinQuery(Component2D query, Field[] fields) {
      Component2D.WithinRelation answer = Component2D.WithinRelation.DISJOINT;
      ShapeField.DecodedTriangle decodedTriangle = new ShapeField.DecodedTriangle();
      for (Field field : fields) {
        ShapeField.decodeTriangle(field.binaryValue().bytes, decodedTriangle);
        Component2D.WithinRelation relation;
        switch (decodedTriangle.type) {
          case POINT:
            {
              double y = encoder.decodeY(decodedTriangle.aY);
              double x = encoder.decodeX(decodedTriangle.aX);
              relation = query.withinPoint(x, y);
              break;
            }
          case LINE:
            {
              double aY = encoder.decodeY(decodedTriangle.aY);
              double aX = encoder.decodeX(decodedTriangle.aX);
              double bY = encoder.decodeY(decodedTriangle.bY);
              double bX = encoder.decodeX(decodedTriangle.bX);
              relation = query.withinLine(aX, aY, decodedTriangle.ab, bX, bY);
              break;
            }
          case TRIANGLE:
            {
              double aY = encoder.decodeY(decodedTriangle.aY);
              double aX = encoder.decodeX(decodedTriangle.aX);
              double bY = encoder.decodeY(decodedTriangle.bY);
              double bX = encoder.decodeX(decodedTriangle.bX);
              double cY = encoder.decodeY(decodedTriangle.cY);
              double cX = encoder.decodeX(decodedTriangle.cX);
              relation =
                  query.withinTriangle(
                      aX,
                      aY,
                      decodedTriangle.ab,
                      bX,
                      bY,
                      decodedTriangle.bc,
                      cX,
                      cY,
                      decodedTriangle.ca);
              break;
            }
          default:
            throw new IllegalArgumentException(
                "Unsupported triangle type :[" + decodedTriangle.type + "]");
        }
        if (relation == Component2D.WithinRelation.NOTWITHIN) {
          return relation;
        } else if (relation == Component2D.WithinRelation.CANDIDATE) {
          answer = Component2D.WithinRelation.CANDIDATE;
        }
      }
      return answer;
    }

