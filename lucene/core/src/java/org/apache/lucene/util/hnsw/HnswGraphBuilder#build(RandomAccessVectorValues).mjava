  /**
   * Reads all the vectors from two copies of a random access VectorValues. Providing two copies enables efficient retrieval
   * without extra data copying, while avoiding collision of the returned values.
   * @param vectors the vectors for which to build a nearest neighbors graph. Must be an independet accessor for the vectors
   */
  HnswGraph build(RandomAccessVectorValues vectors) throws IOException {
    if (vectors == boundedVectors.raDelegate) {
      throw new IllegalArgumentException("Vectors to build must be independent of the source of vectors provided to HnswGraphBuilder()");
    }
    for (int node = 1; node < vectors.size(); node++) {
      insert(vectors.vectorValue(node));
    }
    return hnsw;
  }

