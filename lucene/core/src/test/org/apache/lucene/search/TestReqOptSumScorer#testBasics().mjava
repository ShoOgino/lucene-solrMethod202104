  public void testBasics() throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter w =
        new RandomIndexWriter(
            random(),
            dir,
            newIndexWriterConfig()
                .setMergePolicy(
                    // retain doc id order
                    newLogMergePolicy(random().nextBoolean())));
    Document doc = new Document();
    doc.add(new StringField("f", "foo", Store.NO));
    w.addDocument(doc);
    doc = new Document();
    doc.add(new StringField("f", "foo", Store.NO));
    doc.add(new StringField("f", "bar", Store.NO));
    w.addDocument(doc);
    doc = new Document();
    doc.add(new StringField("f", "foo", Store.NO));
    w.addDocument(doc);
    doc = new Document();
    doc.add(new StringField("f", "bar", Store.NO));
    w.addDocument(doc);
    doc = new Document();
    doc.add(new StringField("f", "foo", Store.NO));
    doc.add(new StringField("f", "bar", Store.NO));
    w.addDocument(doc);
    w.forceMerge(1);

    IndexReader reader = w.getReader();
    w.close();
    IndexSearcher searcher = newSearcher(reader);
    Query query =
        new BooleanQuery.Builder()
            .add(new ConstantScoreQuery(new TermQuery(new Term("f", "foo"))), Occur.MUST)
            .add(new ConstantScoreQuery(new TermQuery(new Term("f", "bar"))), Occur.SHOULD)
            .build();
    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1);
    LeafReaderContext context = searcher.getIndexReader().leaves().get(0);

    Scorer scorer = weight.scorer(context);
    assertEquals(0, scorer.iterator().nextDoc());
    assertEquals(1, scorer.iterator().nextDoc());
    assertEquals(2, scorer.iterator().nextDoc());
    assertEquals(4, scorer.iterator().nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    scorer = weight.scorer(context);
    scorer.setMinCompetitiveScore(Math.nextDown(1f));
    assertEquals(0, scorer.iterator().nextDoc());
    assertEquals(1, scorer.iterator().nextDoc());
    assertEquals(2, scorer.iterator().nextDoc());
    assertEquals(4, scorer.iterator().nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    scorer = weight.scorer(context);
    scorer.setMinCompetitiveScore(Math.nextUp(1f));
    assertEquals(1, scorer.iterator().nextDoc());
    assertEquals(4, scorer.iterator().nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    scorer = weight.scorer(context);
    assertEquals(0, scorer.iterator().nextDoc());
    scorer.setMinCompetitiveScore(Math.nextUp(1f));
    assertEquals(1, scorer.iterator().nextDoc());
    assertEquals(4, scorer.iterator().nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());

    reader.close();
    dir.close();
  }

