  /**
   * Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse
   * OfflineSorter!
   */
  public void testBitFlippedOnInput2() throws Exception {

    try (Directory dir0 = newMockDirectory()) {

      Directory dir =
          new FilterDirectory(dir0) {
            @Override
            public IndexOutput createTempOutput(String prefix, String suffix, IOContext context)
                throws IOException {
              IndexOutput out = in.createTempOutput(prefix, suffix, context);
              if (prefix.equals("unsorted")) {
                return new CorruptingIndexOutput(dir0, 22, out) {
                  @Override
                  protected void corruptFile() throws IOException {
                    String newTempName;
                    try (IndexOutput tmpOut =
                            dir0.createTempOutput("tmp", "tmp", IOContext.DEFAULT);
                        IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {
                      newTempName = tmpOut.getName();
                      // Replace length at the end with a too-long value:
                      short v = in.readShort();
                      assertEquals(256, v);
                      tmpOut.writeShort(Short.MAX_VALUE);
                      tmpOut.copyBytes(in, in.length() - Short.BYTES);
                    }

                    // Delete original and copy corrupt version back:
                    dir0.deleteFile(out.getName());
                    dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);
                    dir0.deleteFile(newTempName);
                  }
                };
              } else {
                return out;
              }
            }
          };

      IndexOutput unsorted = dir.createTempOutput("unsorted", "tmp", IOContext.DEFAULT);
      writeAll(unsorted, generateFixed(5 * 1024));

      // This corruption made OfflineSorter fail with its own exception, but we verify and throw a
      // CorruptIndexException
      // instead when checksums don't match.
      CorruptIndexException e =
          expectThrows(
              CorruptIndexException.class,
              () -> {
                new OfflineSorter(dir, "foo").sort(unsorted.getName());
              });
      assertTrue(e.getMessage().contains("checksum failed (hardware problem?)"));
    }
  }

