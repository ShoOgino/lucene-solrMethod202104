  @Override
  public void run() {
    while (true) {
      SimpleCopyJob topJob = getNextJob();
      if (topJob == null) {
        assert finish;
        break;
      }

      this.setName("jobs o" + topJob.ord);

      assert topJob != null;

      boolean result;
      try {
        result = topJob.visit();
      } catch (Throwable t) {
        if ((t instanceof AlreadyClosedException) == false) {
          node.message("exception during job.visit job=" + topJob + "; now cancel");
          t.printStackTrace(System.out);
        } else {
          node.message("AlreadyClosedException during job.visit job=" + topJob + "; now cancel");
        }
        try {
          topJob.cancel("unexpected exception in visit", t);
        } catch (Throwable t2) {
          node.message("ignore exception calling cancel: " + t2);
          t2.printStackTrace(System.out);
        }
        try {
          topJob.onceDone.run(topJob);
        } catch (Throwable t2) {
          node.message("ignore exception calling OnceDone: " + t2);
          t2.printStackTrace(System.out);
        }
        continue;
      }

      if (result == false) {
        // Job isn't done yet; put it back:
        synchronized (this) {
          queue.offer(topJob);
        }
      } else {
        // Job finished, now notify caller:
        try {
          topJob.onceDone.run(topJob);
        } catch (Throwable t) {
          node.message("ignore exception calling OnceDone: " + t);
          t.printStackTrace(System.out);
        }
      }
    }

    node.message("top: jobs now exit run thread");

    synchronized (this) {
      // Gracefully cancel any jobs we didn't finish:
      while (queue.isEmpty() == false) {
        SimpleCopyJob job = (SimpleCopyJob) queue.poll();
        node.message("top: Jobs: now cancel job=" + job);
        try {
          job.cancel("jobs closing", null);
        } catch (Throwable t) {
          node.message("ignore exception calling cancel");
          t.printStackTrace(System.out);
        }
        try {
          job.onceDone.run(job);
        } catch (Throwable t) {
          node.message("ignore exception calling OnceDone");
          t.printStackTrace(System.out);
        }
      }
    }
  }

