  private void truncateOneFile(Directory dir, String victim) throws IOException {
    try (BaseDirectoryWrapper dirCopy = newDirectory()) {
      dirCopy.setCheckIndexOnClose(false);
      long victimLength = dir.fileLength(victim);
      int lostBytes = TestUtil.nextInt(random(), 1, (int) Math.min(100, victimLength));
      assert victimLength > 0;

      if (VERBOSE) {
        System.out.println(
            "TEST: now truncate file "
                + victim
                + " by removing "
                + lostBytes
                + " of "
                + victimLength
                + " bytes");
      }

      for (String name : dir.listAll()) {
        if (name.equals(victim) == false) {
          dirCopy.copyFrom(dir, name, name, IOContext.DEFAULT);
        } else {
          try (IndexOutput out = dirCopy.createOutput(name, IOContext.DEFAULT);
              IndexInput in = dir.openInput(name, IOContext.DEFAULT)) {
            out.copyBytes(in, victimLength - lostBytes);
          }
        }
        dirCopy.sync(Collections.singleton(name));
      }

      // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all
      // these confusing errors about open files:
      expectThrowsAnyOf(
          Arrays.asList(CorruptIndexException.class, EOFException.class),
          () -> DirectoryReader.open(dirCopy).close());

      // CheckIndex should also fail:
      expectThrowsAnyOf(
          Arrays.asList(CorruptIndexException.class, EOFException.class),
          () -> TestUtil.checkIndex(dirCopy, true, true, null));
    }
  }

