  /**
   * Writes the current skip data to the buffers. The current document frequency determines the max
   * level is skip data is to be written to.
   *
   * @param df the current document frequency
   * @throws IOException If an I/O error occurs
   */
  public void bufferSkip(int df) throws IOException {

    assert df % skipInterval == 0;
    int numLevels = 1;
    df /= skipInterval;

    // determine max level
    while ((df % skipMultiplier) == 0 && numLevels < numberOfSkipLevels) {
      numLevels++;
      df /= skipMultiplier;
    }

    long childPointer = 0;

    for (int level = 0; level < numLevels; level++) {
      writeSkipData(level, skipBuffer[level]);

      long newChildPointer = skipBuffer[level].size();

      if (level != 0) {
        // store child pointers for all levels except the lowest
        skipBuffer[level].writeVLong(childPointer);
      }

      // remember the childPointer for the next level
      childPointer = newChildPointer;
    }
  }

