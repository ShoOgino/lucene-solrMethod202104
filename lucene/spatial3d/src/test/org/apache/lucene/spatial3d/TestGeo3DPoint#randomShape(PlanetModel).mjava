  // Poached from Geo3dRptTest.randomShape:
  private static GeoShape randomShape(final PlanetModel planetModel) {
    while (true) {
      final int shapeType = random().nextInt(4);
      switch (shapeType) {
        case 0:
          {
            // Polygons
            final int vertexCount = random().nextInt(3) + 3;
            final List<GeoPoint> geoPoints = new ArrayList<>();
            while (geoPoints.size() < vertexCount) {
              final GeoPoint gPt =
                  new GeoPoint(
                      planetModel,
                      toRadians(GeoTestUtil.nextLatitude()),
                      toRadians(GeoTestUtil.nextLongitude()));
              geoPoints.add(gPt);
            }
            try {
              final GeoShape rval = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);
              if (rval == null) {
                // Degenerate polygon
                continue;
              }
              return rval;
            } catch (IllegalArgumentException e) {
              // This is what happens when we create a shape that is invalid.  Although it is
              // conceivable that there are cases where
              // the exception is thrown incorrectly, we aren't going to be able to do that in this
              // random test.
              continue;
            }
          }

        case 1:
          {
            // Circles

            double lat = toRadians(GeoTestUtil.nextLatitude());
            double lon = toRadians(GeoTestUtil.nextLongitude());

            double angle = random().nextDouble() * Math.PI / 2.0;

            try {
              return GeoCircleFactory.makeGeoCircle(planetModel, lat, lon, angle);
            } catch (IllegalArgumentException iae) {
              // angle is too small; try again:
              continue;
            }
          }

        case 2:
          {
            // Rectangles
            double lat0 = toRadians(GeoTestUtil.nextLatitude());
            double lat1 = toRadians(GeoTestUtil.nextLatitude());
            if (lat1 < lat0) {
              double x = lat0;
              lat0 = lat1;
              lat1 = x;
            }
            double lon0 = toRadians(GeoTestUtil.nextLongitude());
            double lon1 = toRadians(GeoTestUtil.nextLongitude());
            if (lon1 < lon0) {
              double x = lon0;
              lon0 = lon1;
              lon1 = x;
            }

            return GeoBBoxFactory.makeGeoBBox(planetModel, lat1, lat0, lon0, lon1);
          }

        case 3:
          {
            // Paths
            final int pointCount = random().nextInt(5) + 1;
            final double width = toRadians(random().nextInt(89) + 1);
            final GeoPoint[] points = new GeoPoint[pointCount];
            for (int i = 0; i < pointCount; i++) {
              points[i] =
                  new GeoPoint(
                      planetModel,
                      toRadians(GeoTestUtil.nextLatitude()),
                      toRadians(GeoTestUtil.nextLongitude()));
            }
            try {
              return GeoPathFactory.makeGeoPath(planetModel, width, points);
            } catch (IllegalArgumentException e) {
              // This is what happens when we create a shape that is invalid.  Although it is
              // conceivable that there are cases where
              // the exception is thrown incorrectly, we aren't going to be able to do that in this
              // random test.
              continue;
            }
          }

        default:
          throw new IllegalStateException("Unexpected shape type");
      }
    }
  }

