  @Override
  protected boolean queryIntersects(byte[] t, ShapeField.DecodedTriangle scratchTriangle) {
    ShapeField.decodeTriangle(t, scratchTriangle);

    switch (scratchTriangle.type) {
      case POINT:
        {
          double y = decode(scratchTriangle.aY);
          double x = decode(scratchTriangle.aX);
          return component2D.contains(x, y);
        }
      case LINE:
        {
          double aY = decode(scratchTriangle.aY);
          double aX = decode(scratchTriangle.aX);
          double bY = decode(scratchTriangle.bY);
          double bX = decode(scratchTriangle.bX);
          return component2D.intersectsLine(aX, aY, bX, bY);
        }
      case TRIANGLE:
        {
          double aY = decode(scratchTriangle.aY);
          double aX = decode(scratchTriangle.aX);
          double bY = decode(scratchTriangle.bY);
          double bX = decode(scratchTriangle.bX);
          double cY = decode(scratchTriangle.cY);
          double cX = decode(scratchTriangle.cX);
          return component2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);
        }
      default:
        throw new IllegalArgumentException(
            "Unsupported triangle type :[" + scratchTriangle.type + "]");
    }
  }

