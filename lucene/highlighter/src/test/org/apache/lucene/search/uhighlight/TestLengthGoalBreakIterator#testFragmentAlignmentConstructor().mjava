  public void testFragmentAlignmentConstructor() throws IOException {
    BreakIterator baseBI = new CustomSeparatorBreakIterator('.');
    // test fragmentAlignment validation
    float[] valid_aligns = {0.f, 0.3333f, 0.5f, 0.99f, 1.f};
    for (float alignment : valid_aligns) {
      LengthGoalBreakIterator.createClosestToLength(baseBI, 50, alignment);
    }
    float[] invalid_aligns = {-0.01f, -1.f, 1.5f, Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY};
    for (float alignment : invalid_aligns) {
      expectThrows(IllegalArgumentException.class, () -> {
        LengthGoalBreakIterator.createClosestToLength(baseBI, 50, alignment);
      });
    }
    // test backwards compatibility constructors
    String backwardCompString = LengthGoalBreakIterator.createClosestToLength(baseBI, 50).toString();
    assertTrue(backwardCompString, backwardCompString.contains("fragAlign=0.0"));
    backwardCompString = LengthGoalBreakIterator.createMinLength(baseBI, 50).toString();
    assertTrue(backwardCompString, backwardCompString.contains("fragAlign=0.0"));
  }

